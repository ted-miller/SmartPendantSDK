/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Pendant
  {
    /// <summary>
    /// The Pendant API provides functions for interacting with and
    /// integrating the main Smart Pendant user-interface.
    /// 
    /// (Extensions are not required to have a user-interface)
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Version of the Smart Pendant itself
      /// (avoid using this for conditional feature use - use the Extension apiVersion() instead)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> pendantVersion(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to specified set of Pendant service events.  May be called multiple times to add to subscription.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from specified set of Pendant service events.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to specified set of Pendant service YML Item-specific events.
      /// Specified events will be sent for all specified items.  May be called multiple times to add to subscription.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemIDs"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from specified set of Pendant service YML Item-specific events.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemIDs"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain list of Pendant service events that have occured since last call
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> events(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query the current UI language of the pendant interface.
      /// Returns IETF language codes (RFCs 5646, 5645, 4647) of languages
      /// (typically ISO 693-1 code when region insignificant)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> currentLanguage(long p, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> currentLocale(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// The UI screen currently shown to the pendant user
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> currentScreenName(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an Item type described using a YML source code string
      /// Returns a list of parsing errors (0 on success)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ymlSource"></param>
      global::System.Threading.Tasks.Task<List<string>> registerYML(long p, string ymlSource, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an image file for later reference by filename (must be uniquely named, with .jpg or .png).
      /// If file cannot be accessed by service, it will be locally read and registerImageData called instead.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an image for later reference by name (must be uniquely named, with .jpg or .png extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="imageData"></param>
      /// <param name="imageName"></param>
      global::System.Threading.Tasks.Task registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a HTML file for later reference by filename (must be uniquely named, with .html).
      /// If file cannot be accessed by service, it will be locally read and registerHTMLData called instead.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="htmlFileName"></param>
      global::System.Threading.Tasks.Task registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register HTML for later reference by name (must be uniquely named, with .html extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="htmlData"></param>
      /// <param name="htmlName"></param>
      global::System.Threading.Tasks.Task registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a translation file (e.g. a Java properties file for a language); extension is used to determine format
      /// </summary>
      /// <param name="p"></param>
      /// <param name="locale"></param>
      /// <param name="translationFileName"></param>
      global::System.Threading.Tasks.Task registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register translation file data (translationName typically filename-like; extension is used to determine format)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="locale"></param>
      /// <param name="translationData"></param>
      /// <param name="translationName"></param>
      global::System.Threading.Tasks.Task registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a menu that utilities can be registered under *
      /// </summary>
      /// <param name="p"></param>
      /// <param name="menuName"></param>
      /// <param name="menuText"></param>
      /// <param name="menuIcon"></param>
      global::System.Threading.Tasks.Task registerUtilityMenu(long p, string menuName, string menuText, string menuIcon, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unregisters a user added menu - All Utilities within the menu must be unregistered with 'unregisterUtilityWindow' first
      /// </summary>
      /// <param name="p"></param>
      /// <param name="menuName"></param>
      global::System.Threading.Tasks.Task unregisterUtilityMenu(long p, string menuName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a Utility window with the UI.
      /// The itemType references a previously registered YML item instantiated for the window
      /// UI content.
      /// The menuName refers to a previously registered menu that the utility will apear under on the
      /// main menu or if none is specified it will be under 'Utility'
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="itemType"></param>
      /// <param name="menuItemName"></param>
      /// <param name="windowTitle"></param>
      global::System.Threading.Tasks.Task registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task registerUtilityWindowWithMenu(long p, string identifier, string itemType, string menuItemName, string windowTitle, string menuName, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Open (make visible) previously registered Utility Window
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Close a visible Utility Window (make invisible - state is maintained)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Collapse previously registered Utility Window, if in expanded state (and expandCollapseResize true)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Expand previously registered Utility Window, if in collapsed state (and expandCollapseResize true)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Refresh the Inform grammar for instructions with the specified type *
      /// </summary>
      /// <param name="p"></param>
      /// <param name="instructionType"></param>
      global::System.Threading.Tasks.Task refreshDynamicInstructions(long p, global::Yaskawa.Ext.API.DynamicInstructionType instructionType, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register UI content at the specified integration point in the pendant UI.
      /// The itemType should reference a YML item previously registered via registerYML().
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="integrationPoint"></param>
      /// <param name="itemType"></param>
      /// <param name="buttonLabel"></param>
      /// <param name="buttonImage"></param>
      global::System.Threading.Tasks.Task registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a Switch component at the specified integraiton point in the pendant UI.
      /// When the switch is toggled, it creates a PendantEvent with a type of IntegrationPointSwitchStateChanged that can be gotten via events()
      /// Switches registered with registerSwitch() can be unregistered with unregisterIntegration()
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="integrationPoint"></param>
      /// <param name="switchLabel"></param>
      /// <param name="offPositionLabel"></param>
      /// <param name="onPositionLabel"></param>
      /// <param name="defaultState"></param>
      global::System.Threading.Tasks.Task registerSwitch(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string switchLabel, string offPositionLabel, string onPositionLabel, bool defaultState, CancellationToken cancellationToken = default);

      /// <summary>
      /// Registers the extension as a link directly from any given instruction, if the specified tags are in the line
      /// Note: the informTags are treated as disparate cases, not cumulative where all the tags specified have to be active
      /// for the direct open functionality
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="instruction"></param>
      /// <param name="instrTags"></param>
      global::System.Threading.Tasks.Task registerDirectOpenForInstr(long p, string identifier, string instruction, List<string> instrTags, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unregisters the extension as a link directly from the specified inform command
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="instruction"></param>
      global::System.Threading.Tasks.Task unregisterDirectOpenForInstr(long p, string identifier, string instruction, CancellationToken cancellationToken = default);

      /// <summary>
      /// get property of an item by id
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemID"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> property(long p, string itemID, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set property of an item by id
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemID"></param>
      /// <param name="name"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set several properties (potentially for different items) at once.  This is more
      /// efficient that many repeated calls to setProperty().
      /// Note it is asynchronous so no errors/exceptions are thrown
      /// </summary>
      /// <param name="p"></param>
      /// <param name="propValuesList"></param>
      global::System.Threading.Tasks.Task setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the configuration of a chart by ID.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="config"></param>
      global::System.Threading.Tasks.Task setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the configuration of a chart by ID
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> getChartConfig(long p, string chartID, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to pass the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="dataset"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to access the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Add a new key to the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to pass the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="data"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Removes an existing key from the dataset of a chart by ID. In line and
      /// scatter charts, you can set 'right' to true to remove from the
      /// secondary dataset.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Hides an existing key from the dataset of a chart by ID. In line and
      /// scatter charts, you can set 'right' to true to hide a key from the
      /// secondary dataset.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="hidden"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Append new data points to a specified key in the data of a chart by ID.
      /// This function will only have an effect on line/scatter charts. Set
      /// 'right' to true to pass the dataset for a secondary scale on the right
      /// hand side.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="points"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Increments a category value by `val`.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="val"></param>
      global::System.Threading.Tasks.Task incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default);

      /// <summary>
      /// Export the current chart contents to the specified filename (must be uniquely named, with .jpg or .png).
      /// Calls exportChartImageData if the extension is unable to access the file.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task<string> exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Export the current chart contents to a binary blob (must be uniquely named, with .jpg or .png extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task<byte[]> exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show notice to user.
      /// Notices are automaticlly hidden after a short display period.
      /// Notice messages are logged, if log parameter if provided, that will be logged instead of title & message.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task notice(long p, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show notice to user with specified disposition.
      /// As for notice() but displayed in a way that connotes the specified disposition.
      /// For example, a Positive disposition may be shown in green.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// (API version 2.1 and later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="disposition"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show error to user.
      /// Errors should only indicate important situations that the user must be aware of and for which deliberate
      /// acknowledgement is required before proceeding.  Typically, some action will be required to correct the situation.
      /// Errors are displayed until dismissed by the user.
      /// Error messages are logged, if log parameter if provided, that will be logged instead of title & message.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task error(long p, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Display modal pop-up dialog.  Typically, Yes/No, although negativeOption can be omitted
      /// The identifier can be used to associate the corresponding PopupOpened & PopupClosed events triggered by
      /// user positive/negative selection or automatic dismissal/cancellation - for example is screen switched, alarm etc.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="positiveOption"></param>
      /// <param name="negativeOption"></param>
      global::System.Threading.Tasks.Task popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default);

      /// <summary>
      /// Cancel an open popup dialog.  If the dialog has a negative option, behaves as if user selected it, otherwise
      /// no event is generated
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Inserts an instruction, returns a string:
      /// Success,
      /// UnsupportedCommand,
      /// InvalidFormat,
      /// ProgrammingViewClosed,
      /// JobDoesNotExist,
      /// CallingJobFromSameJob,
      /// ExceededMaxArguments,
      /// JobNotEditable,
      /// MultiSelectActive,
      /// TimedOut,
      /// Unknown
      /// </summary>
      /// <param name="p"></param>
      /// <param name="instruction"></param>
      global::System.Threading.Tasks.Task<string> insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default);

      /// <summary>
      /// Displays a standard pendant UI screen by passing a string with the screen identifier. (Only available from SDK API 2.2 onward)
      /// Refer to the YML - URI Links documentation for the list of supported screens and settings.
      /// Do not include the URI "&lt;a href&gt; screen:" portion in the identifier.  For example to display the jogging panel use:
      /// pendant.displayScreen("programmingView?panel=jogging");
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task displayScreen(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Displays an html file in a standard Smart Pendant help dialog. (Only available from SDK API 3.0 onward)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="htmlContentFile"></param>
      global::System.Threading.Tasks.Task displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default);

      /// <summary>
      /// Retrieves the security level on the controller. Returns:
      /// - Operate
      /// - Edit
      /// - Management
      /// - Safety
      /// - Yaskawa
      ///  (API 3.1 and Later)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> accessLevel(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Queries if the current security level is at least specified security level
      /// Accepts:
      /// 	-"Operate"
      /// 	-"Edit"
      /// 	-"Management"
      /// 	-"Safety"
      /// 	-"Yaskawa"
      /// Other inputs will return an error.
      /// (API 3.1 and Later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="level"></param>
      global::System.Threading.Tasks.Task<bool> accessLevelIncludes(long p, string level, CancellationToken cancellationToken = default);

      /// <summary>
      /// Append a row to a container
      /// (API 3.5 and Later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ContainerID"></param>
      /// <param name="dict"></param>
      global::System.Threading.Tasks.Task appendRow(long p, string ContainerID, Dictionary<string, global::Yaskawa.Ext.API.Any> dict, CancellationToken cancellationToken = default);

      /// <summary>
      /// Insert a row to a container
      /// (API 3.5 and Later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ContainerID"></param>
      /// <param name="index"></param>
      /// <param name="dict"></param>
      global::System.Threading.Tasks.Task insertRow(long p, string ContainerID, long index, Dictionary<string, global::Yaskawa.Ext.API.Any> dict, CancellationToken cancellationToken = default);

      /// <summary>
      /// Delete a row from a container
      /// (API 3.5 and Later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ContainerID"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task deleteRow(long p, string ContainerID, long index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Remove all row from a container
      /// (API 3.5 and Later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ContainerID"></param>
      global::System.Threading.Tasks.Task clearRows(long p, string ContainerID, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// The Pendant API provides functions for interacting with and
    /// integrating the main Smart Pendant user-interface.
    /// 
    /// (Extensions are not required to have a user-interface)
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> pendantVersion(long p, CancellationToken cancellationToken = default)
      {
        await send_pendantVersion(p, cancellationToken);
        return await recv_pendantVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pendantVersion(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp676 = new InternalStructs.pendantVersion_args() {
          P = p,
        };
        
        await tmp676.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> recv_pendantVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp677 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp677.Type == TMessageType.Exception)
        {
          var tmp678 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp678;
        }

        var tmp679 = new InternalStructs.pendantVersion_result();
        await tmp679.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp679.__isset.success)
        {
          return tmp679.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pendantVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeEventTypes(p, types, cancellationToken);
        await recv_subscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp680 = new InternalStructs.subscribeEventTypes_args() {
          P = p,
          Types = types,
        };
        
        await tmp680.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp681 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp681.Type == TMessageType.Exception)
        {
          var tmp682 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp682;
        }

        var tmp683 = new InternalStructs.subscribeEventTypes_result();
        await tmp683.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeEventTypes(p, types, cancellationToken);
        await recv_unsubscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp684 = new InternalStructs.unsubscribeEventTypes_args() {
          P = p,
          Types = types,
        };
        
        await tmp684.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp685 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp685.Type == TMessageType.Exception)
        {
          var tmp686 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp686;
        }

        var tmp687 = new InternalStructs.unsubscribeEventTypes_result();
        await tmp687.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeItemEventTypes(p, itemIDs, types, cancellationToken);
        await recv_subscribeItemEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp688 = new InternalStructs.subscribeItemEventTypes_args() {
          P = p,
          ItemIDs = itemIDs,
          Types = types,
        };
        
        await tmp688.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeItemEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp689 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp689.Type == TMessageType.Exception)
        {
          var tmp690 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp690;
        }

        var tmp691 = new InternalStructs.subscribeItemEventTypes_result();
        await tmp691.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeItemEventTypes(p, itemIDs, types, cancellationToken);
        await recv_unsubscribeItemEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp692 = new InternalStructs.unsubscribeItemEventTypes_args() {
          P = p,
          ItemIDs = itemIDs,
          Types = types,
        };
        
        await tmp692.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeItemEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp693 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp693.Type == TMessageType.Exception)
        {
          var tmp694 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp694;
        }

        var tmp695 = new InternalStructs.unsubscribeItemEventTypes_result();
        await tmp695.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> events(long p, CancellationToken cancellationToken = default)
      {
        await send_events(p, cancellationToken);
        return await recv_events(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_events(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("events", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp696 = new InternalStructs.events_args() {
          P = p,
        };
        
        await tmp696.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> recv_events(CancellationToken cancellationToken = default)
      {
        
        var tmp697 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp697.Type == TMessageType.Exception)
        {
          var tmp698 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp698;
        }

        var tmp699 = new InternalStructs.events_result();
        await tmp699.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp699.__isset.success)
        {
          return tmp699.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "events failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentLanguage(long p, CancellationToken cancellationToken = default)
      {
        await send_currentLanguage(p, cancellationToken);
        return await recv_currentLanguage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentLanguage(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp700 = new InternalStructs.currentLanguage_args() {
          P = p,
        };
        
        await tmp700.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentLanguage(CancellationToken cancellationToken = default)
      {
        
        var tmp701 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp701.Type == TMessageType.Exception)
        {
          var tmp702 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp702;
        }

        var tmp703 = new InternalStructs.currentLanguage_result();
        await tmp703.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp703.__isset.success)
        {
          return tmp703.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentLanguage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentLocale(long p, CancellationToken cancellationToken = default)
      {
        await send_currentLocale(p, cancellationToken);
        return await recv_currentLocale(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentLocale(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp704 = new InternalStructs.currentLocale_args() {
          P = p,
        };
        
        await tmp704.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentLocale(CancellationToken cancellationToken = default)
      {
        
        var tmp705 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp705.Type == TMessageType.Exception)
        {
          var tmp706 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp706;
        }

        var tmp707 = new InternalStructs.currentLocale_result();
        await tmp707.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp707.__isset.success)
        {
          return tmp707.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentLocale failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentScreenName(long p, CancellationToken cancellationToken = default)
      {
        await send_currentScreenName(p, cancellationToken);
        return await recv_currentScreenName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentScreenName(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp708 = new InternalStructs.currentScreenName_args() {
          P = p,
        };
        
        await tmp708.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentScreenName(CancellationToken cancellationToken = default)
      {
        
        var tmp709 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp709.Type == TMessageType.Exception)
        {
          var tmp710 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp710;
        }

        var tmp711 = new InternalStructs.currentScreenName_result();
        await tmp711.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp711.__isset.success)
        {
          return tmp711.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentScreenName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> registerYML(long p, string ymlSource, CancellationToken cancellationToken = default)
      {
        await send_registerYML(p, ymlSource, cancellationToken);
        return await recv_registerYML(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerYML(long p, string ymlSource, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp712 = new InternalStructs.registerYML_args() {
          P = p,
          YmlSource = ymlSource,
        };
        
        await tmp712.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_registerYML(CancellationToken cancellationToken = default)
      {
        
        var tmp713 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp713.Type == TMessageType.Exception)
        {
          var tmp714 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp714;
        }

        var tmp715 = new InternalStructs.registerYML_result();
        await tmp715.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp715.__isset.success)
        {
          return tmp715.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerYML failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_registerImageFile(p, imageFileName, cancellationToken);
        await recv_registerImageFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp716 = new InternalStructs.registerImageFile_args() {
          P = p,
          ImageFileName = imageFileName,
        };
        
        await tmp716.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerImageFile(CancellationToken cancellationToken = default)
      {
        
        var tmp717 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp717.Type == TMessageType.Exception)
        {
          var tmp718 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp718;
        }

        var tmp719 = new InternalStructs.registerImageFile_result();
        await tmp719.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp719.__isset.e)
        {
          throw tmp719.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default)
      {
        await send_registerImageData(p, imageData, imageName, cancellationToken);
        await recv_registerImageData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp720 = new InternalStructs.registerImageData_args() {
          P = p,
          ImageData = imageData,
          ImageName = imageName,
        };
        
        await tmp720.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerImageData(CancellationToken cancellationToken = default)
      {
        
        var tmp721 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp721.Type == TMessageType.Exception)
        {
          var tmp722 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp722;
        }

        var tmp723 = new InternalStructs.registerImageData_result();
        await tmp723.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp723.__isset.e)
        {
          throw tmp723.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default)
      {
        await send_registerHTMLFile(p, htmlFileName, cancellationToken);
        await recv_registerHTMLFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp724 = new InternalStructs.registerHTMLFile_args() {
          P = p,
          HtmlFileName = htmlFileName,
        };
        
        await tmp724.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerHTMLFile(CancellationToken cancellationToken = default)
      {
        
        var tmp725 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp725.Type == TMessageType.Exception)
        {
          var tmp726 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp726;
        }

        var tmp727 = new InternalStructs.registerHTMLFile_result();
        await tmp727.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp727.__isset.e)
        {
          throw tmp727.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default)
      {
        await send_registerHTMLData(p, htmlData, htmlName, cancellationToken);
        await recv_registerHTMLData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp728 = new InternalStructs.registerHTMLData_args() {
          P = p,
          HtmlData = htmlData,
          HtmlName = htmlName,
        };
        
        await tmp728.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerHTMLData(CancellationToken cancellationToken = default)
      {
        
        var tmp729 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp729.Type == TMessageType.Exception)
        {
          var tmp730 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp730;
        }

        var tmp731 = new InternalStructs.registerHTMLData_result();
        await tmp731.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp731.__isset.e)
        {
          throw tmp731.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default)
      {
        await send_registerTranslationFile(p, locale, translationFileName, cancellationToken);
        await recv_registerTranslationFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp732 = new InternalStructs.registerTranslationFile_args() {
          P = p,
          Locale = locale,
          TranslationFileName = translationFileName,
        };
        
        await tmp732.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerTranslationFile(CancellationToken cancellationToken = default)
      {
        
        var tmp733 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp733.Type == TMessageType.Exception)
        {
          var tmp734 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp734;
        }

        var tmp735 = new InternalStructs.registerTranslationFile_result();
        await tmp735.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp735.__isset.e)
        {
          throw tmp735.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default)
      {
        await send_registerTranslationData(p, locale, translationData, translationName, cancellationToken);
        await recv_registerTranslationData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp736 = new InternalStructs.registerTranslationData_args() {
          P = p,
          Locale = locale,
          TranslationData = translationData,
          TranslationName = translationName,
        };
        
        await tmp736.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerTranslationData(CancellationToken cancellationToken = default)
      {
        
        var tmp737 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp737.Type == TMessageType.Exception)
        {
          var tmp738 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp738;
        }

        var tmp739 = new InternalStructs.registerTranslationData_result();
        await tmp739.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp739.__isset.e)
        {
          throw tmp739.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityMenu(long p, string menuName, string menuText, string menuIcon, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityMenu(p, menuName, menuText, menuIcon, cancellationToken);
        await recv_registerUtilityMenu(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityMenu(long p, string menuName, string menuText, string menuIcon, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityMenu", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp740 = new InternalStructs.registerUtilityMenu_args() {
          P = p,
          MenuName = menuName,
          MenuText = menuText,
          MenuIcon = menuIcon,
        };
        
        await tmp740.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityMenu(CancellationToken cancellationToken = default)
      {
        
        var tmp741 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp741.Type == TMessageType.Exception)
        {
          var tmp742 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp742;
        }

        var tmp743 = new InternalStructs.registerUtilityMenu_result();
        await tmp743.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp743.__isset.e)
        {
          throw tmp743.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityMenu(long p, string menuName, CancellationToken cancellationToken = default)
      {
        await send_unregisterUtilityMenu(p, menuName, cancellationToken);
        await recv_unregisterUtilityMenu(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterUtilityMenu(long p, string menuName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterUtilityMenu", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp744 = new InternalStructs.unregisterUtilityMenu_args() {
          P = p,
          MenuName = menuName,
        };
        
        await tmp744.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterUtilityMenu(CancellationToken cancellationToken = default)
      {
        
        var tmp745 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp745.Type == TMessageType.Exception)
        {
          var tmp746 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp746;
        }

        var tmp747 = new InternalStructs.unregisterUtilityMenu_result();
        await tmp747.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp747.__isset.e)
        {
          throw tmp747.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityWindow(p, identifier, itemType, menuItemName, windowTitle, cancellationToken);
        await recv_registerUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp748 = new InternalStructs.registerUtilityWindow_args() {
          P = p,
          Identifier = identifier,
          ItemType = itemType,
          MenuItemName = menuItemName,
          WindowTitle = windowTitle,
        };
        
        await tmp748.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp749 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp749.Type == TMessageType.Exception)
        {
          var tmp750 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp750;
        }

        var tmp751 = new InternalStructs.registerUtilityWindow_result();
        await tmp751.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp751.__isset.e)
        {
          throw tmp751.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindowWithMenu(long p, string identifier, string itemType, string menuItemName, string windowTitle, string menuName, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityWindowWithMenu(p, identifier, itemType, menuItemName, windowTitle, menuName, cancellationToken);
        await recv_registerUtilityWindowWithMenu(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityWindowWithMenu(long p, string identifier, string itemType, string menuItemName, string windowTitle, string menuName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityWindowWithMenu", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp752 = new InternalStructs.registerUtilityWindowWithMenu_args() {
          P = p,
          Identifier = identifier,
          ItemType = itemType,
          MenuItemName = menuItemName,
          WindowTitle = windowTitle,
          MenuName = menuName,
        };
        
        await tmp752.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityWindowWithMenu(CancellationToken cancellationToken = default)
      {
        
        var tmp753 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp753.Type == TMessageType.Exception)
        {
          var tmp754 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp754;
        }

        var tmp755 = new InternalStructs.registerUtilityWindowWithMenu_result();
        await tmp755.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp755.__isset.e)
        {
          throw tmp755.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_unregisterUtilityWindow(p, identifier, cancellationToken);
        await recv_unregisterUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp756 = new InternalStructs.unregisterUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp756.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp757 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp757.Type == TMessageType.Exception)
        {
          var tmp758 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp758;
        }

        var tmp759 = new InternalStructs.unregisterUtilityWindow_result();
        await tmp759.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp759.__isset.e)
        {
          throw tmp759.E;
        }
      }

      public async global::System.Threading.Tasks.Task openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_openUtilityWindow(p, identifier, cancellationToken);
        await recv_openUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp760 = new InternalStructs.openUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp760.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_openUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp761 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp761.Type == TMessageType.Exception)
        {
          var tmp762 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp762;
        }

        var tmp763 = new InternalStructs.openUtilityWindow_result();
        await tmp763.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_closeUtilityWindow(p, identifier, cancellationToken);
        await recv_closeUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp764 = new InternalStructs.closeUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp764.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_closeUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp765 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp765.Type == TMessageType.Exception)
        {
          var tmp766 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp766;
        }

        var tmp767 = new InternalStructs.closeUtilityWindow_result();
        await tmp767.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_collapseUtilityWindow(p, identifier, cancellationToken);
        await recv_collapseUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp768 = new InternalStructs.collapseUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp768.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_collapseUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp769 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp769.Type == TMessageType.Exception)
        {
          var tmp770 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp770;
        }

        var tmp771 = new InternalStructs.collapseUtilityWindow_result();
        await tmp771.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_expandUtilityWindow(p, identifier, cancellationToken);
        await recv_expandUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp772 = new InternalStructs.expandUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp772.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_expandUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp773 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp773.Type == TMessageType.Exception)
        {
          var tmp774 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp774;
        }

        var tmp775 = new InternalStructs.expandUtilityWindow_result();
        await tmp775.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task refreshDynamicInstructions(long p, global::Yaskawa.Ext.API.DynamicInstructionType instructionType, CancellationToken cancellationToken = default)
      {
        await send_refreshDynamicInstructions(p, instructionType, cancellationToken);
        await recv_refreshDynamicInstructions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_refreshDynamicInstructions(long p, global::Yaskawa.Ext.API.DynamicInstructionType instructionType, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("refreshDynamicInstructions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp776 = new InternalStructs.refreshDynamicInstructions_args() {
          P = p,
          InstructionType = instructionType,
        };
        
        await tmp776.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_refreshDynamicInstructions(CancellationToken cancellationToken = default)
      {
        
        var tmp777 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp777.Type == TMessageType.Exception)
        {
          var tmp778 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp778;
        }

        var tmp779 = new InternalStructs.refreshDynamicInstructions_result();
        await tmp779.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default)
      {
        await send_registerIntegration(p, identifier, integrationPoint, itemType, buttonLabel, buttonImage, cancellationToken);
        await recv_registerIntegration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp780 = new InternalStructs.registerIntegration_args() {
          P = p,
          Identifier = identifier,
          IntegrationPoint = integrationPoint,
          ItemType = itemType,
          ButtonLabel = buttonLabel,
          ButtonImage = buttonImage,
        };
        
        await tmp780.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerIntegration(CancellationToken cancellationToken = default)
      {
        
        var tmp781 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp781.Type == TMessageType.Exception)
        {
          var tmp782 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp782;
        }

        var tmp783 = new InternalStructs.registerIntegration_result();
        await tmp783.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp783.__isset.e)
        {
          throw tmp783.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_unregisterIntegration(p, identifier, cancellationToken);
        await recv_unregisterIntegration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp784 = new InternalStructs.unregisterIntegration_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp784.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterIntegration(CancellationToken cancellationToken = default)
      {
        
        var tmp785 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp785.Type == TMessageType.Exception)
        {
          var tmp786 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp786;
        }

        var tmp787 = new InternalStructs.unregisterIntegration_result();
        await tmp787.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp787.__isset.e)
        {
          throw tmp787.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerSwitch(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string switchLabel, string offPositionLabel, string onPositionLabel, bool defaultState, CancellationToken cancellationToken = default)
      {
        await send_registerSwitch(p, identifier, integrationPoint, switchLabel, offPositionLabel, onPositionLabel, defaultState, cancellationToken);
        await recv_registerSwitch(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerSwitch(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string switchLabel, string offPositionLabel, string onPositionLabel, bool defaultState, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerSwitch", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp788 = new InternalStructs.registerSwitch_args() {
          P = p,
          Identifier = identifier,
          IntegrationPoint = integrationPoint,
          SwitchLabel = switchLabel,
          OffPositionLabel = offPositionLabel,
          OnPositionLabel = onPositionLabel,
          DefaultState = defaultState,
        };
        
        await tmp788.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerSwitch(CancellationToken cancellationToken = default)
      {
        
        var tmp789 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp789.Type == TMessageType.Exception)
        {
          var tmp790 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp790;
        }

        var tmp791 = new InternalStructs.registerSwitch_result();
        await tmp791.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp791.__isset.e)
        {
          throw tmp791.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerDirectOpenForInstr(long p, string identifier, string instruction, List<string> instrTags, CancellationToken cancellationToken = default)
      {
        await send_registerDirectOpenForInstr(p, identifier, instruction, instrTags, cancellationToken);
        await recv_registerDirectOpenForInstr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerDirectOpenForInstr(long p, string identifier, string instruction, List<string> instrTags, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerDirectOpenForInstr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp792 = new InternalStructs.registerDirectOpenForInstr_args() {
          P = p,
          Identifier = identifier,
          Instruction = instruction,
          InstrTags = instrTags,
        };
        
        await tmp792.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerDirectOpenForInstr(CancellationToken cancellationToken = default)
      {
        
        var tmp793 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp793.Type == TMessageType.Exception)
        {
          var tmp794 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp794;
        }

        var tmp795 = new InternalStructs.registerDirectOpenForInstr_result();
        await tmp795.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp795.__isset.e)
        {
          throw tmp795.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterDirectOpenForInstr(long p, string identifier, string instruction, CancellationToken cancellationToken = default)
      {
        await send_unregisterDirectOpenForInstr(p, identifier, instruction, cancellationToken);
        await recv_unregisterDirectOpenForInstr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterDirectOpenForInstr(long p, string identifier, string instruction, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterDirectOpenForInstr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp796 = new InternalStructs.unregisterDirectOpenForInstr_args() {
          P = p,
          Identifier = identifier,
          Instruction = instruction,
        };
        
        await tmp796.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterDirectOpenForInstr(CancellationToken cancellationToken = default)
      {
        
        var tmp797 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp797.Type == TMessageType.Exception)
        {
          var tmp798 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp798;
        }

        var tmp799 = new InternalStructs.unregisterDirectOpenForInstr_result();
        await tmp799.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp799.__isset.e)
        {
          throw tmp799.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> property(long p, string itemID, string name, CancellationToken cancellationToken = default)
      {
        await send_property(p, itemID, name, cancellationToken);
        return await recv_property(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_property(long p, string itemID, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("property", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp800 = new InternalStructs.property_args() {
          P = p,
          ItemID = itemID,
          Name = name,
        };
        
        await tmp800.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_property(CancellationToken cancellationToken = default)
      {
        
        var tmp801 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp801.Type == TMessageType.Exception)
        {
          var tmp802 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp802;
        }

        var tmp803 = new InternalStructs.property_result();
        await tmp803.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp803.__isset.success)
        {
          return tmp803.Success;
        }
        if (tmp803.__isset.e)
        {
          throw tmp803.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "property failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setProperty(p, itemID, name, @value, cancellationToken);
        await recv_setProperty(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp804 = new InternalStructs.setProperty_args() {
          P = p,
          ItemID = itemID,
          Name = name,
          Value = @value,
        };
        
        await tmp804.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setProperty(CancellationToken cancellationToken = default)
      {
        
        var tmp805 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp805.Type == TMessageType.Exception)
        {
          var tmp806 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp806;
        }

        var tmp807 = new InternalStructs.setProperty_result();
        await tmp807.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp807.__isset.e)
        {
          throw tmp807.E;
        }
      }

      public async global::System.Threading.Tasks.Task setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default)
      {
        await send_setProperties(p, propValuesList, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setProperties", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp808 = new InternalStructs.setProperties_args() {
          P = p,
          PropValuesList = propValuesList,
        };
        
        await tmp808.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default)
      {
        await send_setChartConfig(p, chartID, config, cancellationToken);
        await recv_setChartConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp809 = new InternalStructs.setChartConfig_args() {
          P = p,
          ChartID = chartID,
          Config = config,
        };
        
        await tmp809.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setChartConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp810 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp810.Type == TMessageType.Exception)
        {
          var tmp811 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp811;
        }

        var tmp812 = new InternalStructs.setChartConfig_result();
        await tmp812.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp812.__isset.e)
        {
          throw tmp812.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> getChartConfig(long p, string chartID, CancellationToken cancellationToken = default)
      {
        await send_getChartConfig(p, chartID, cancellationToken);
        return await recv_getChartConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getChartConfig(long p, string chartID, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp813 = new InternalStructs.getChartConfig_args() {
          P = p,
          ChartID = chartID,
        };
        
        await tmp813.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_getChartConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp814 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp814.Type == TMessageType.Exception)
        {
          var tmp815 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp815;
        }

        var tmp816 = new InternalStructs.getChartConfig_result();
        await tmp816.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp816.__isset.success)
        {
          return tmp816.Success;
        }
        if (tmp816.__isset.e)
        {
          throw tmp816.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChartConfig failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default)
      {
        await send_setChartData(p, chartID, dataset, right, cancellationToken);
        await recv_setChartData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp817 = new InternalStructs.setChartData_args() {
          P = p,
          ChartID = chartID,
          Dataset = dataset,
          Right = right,
        };
        
        await tmp817.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setChartData(CancellationToken cancellationToken = default)
      {
        
        var tmp818 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp818.Type == TMessageType.Exception)
        {
          var tmp819 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp819;
        }

        var tmp820 = new InternalStructs.setChartData_result();
        await tmp820.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp820.__isset.e)
        {
          throw tmp820.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default)
      {
        await send_getChartData(p, chartID, right, cancellationToken);
        return await recv_getChartData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp821 = new InternalStructs.getChartData_args() {
          P = p,
          ChartID = chartID,
          Right = right,
        };
        
        await tmp821.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> recv_getChartData(CancellationToken cancellationToken = default)
      {
        
        var tmp822 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp822.Type == TMessageType.Exception)
        {
          var tmp823 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp823;
        }

        var tmp824 = new InternalStructs.getChartData_result();
        await tmp824.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp824.__isset.success)
        {
          return tmp824.Success;
        }
        if (tmp824.__isset.e)
        {
          throw tmp824.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChartData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default)
      {
        await send_addChartKey(p, chartID, key, data, right, cancellationToken);
        await recv_addChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp825 = new InternalStructs.addChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Data = data,
          Right = right,
        };
        
        await tmp825.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_addChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp826 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp826.Type == TMessageType.Exception)
        {
          var tmp827 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp827;
        }

        var tmp828 = new InternalStructs.addChartKey_result();
        await tmp828.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp828.__isset.e)
        {
          throw tmp828.E;
        }
      }

      public async global::System.Threading.Tasks.Task removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default)
      {
        await send_removeChartKey(p, chartID, key, right, cancellationToken);
        await recv_removeChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp829 = new InternalStructs.removeChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Right = right,
        };
        
        await tmp829.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp830 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp830.Type == TMessageType.Exception)
        {
          var tmp831 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp831;
        }

        var tmp832 = new InternalStructs.removeChartKey_result();
        await tmp832.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp832.__isset.e)
        {
          throw tmp832.E;
        }
      }

      public async global::System.Threading.Tasks.Task hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default)
      {
        await send_hideChartKey(p, chartID, key, hidden, right, cancellationToken);
        await recv_hideChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp833 = new InternalStructs.hideChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Hidden = hidden,
          Right = right,
        };
        
        await tmp833.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_hideChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp834 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp834.Type == TMessageType.Exception)
        {
          var tmp835 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp835;
        }

        var tmp836 = new InternalStructs.hideChartKey_result();
        await tmp836.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp836.__isset.e)
        {
          throw tmp836.E;
        }
      }

      public async global::System.Threading.Tasks.Task appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default)
      {
        await send_appendChartPoints(p, chartID, key, points, right, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("appendChartPoints", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp837 = new InternalStructs.appendChartPoints_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Points = points,
          Right = right,
        };
        
        await tmp837.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default)
      {
        await send_incrementChartKey(p, chartID, key, val, cancellationToken);
        await recv_incrementChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp838 = new InternalStructs.incrementChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Val = val,
        };
        
        await tmp838.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_incrementChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp839 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp839.Type == TMessageType.Exception)
        {
          var tmp840 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp840;
        }

        var tmp841 = new InternalStructs.incrementChartKey_result();
        await tmp841.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp841.__isset.e)
        {
          throw tmp841.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_exportChartImage(p, chartID, imageFileName, cancellationToken);
        return await recv_exportChartImage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp842 = new InternalStructs.exportChartImage_args() {
          P = p,
          ChartID = chartID,
          ImageFileName = imageFileName,
        };
        
        await tmp842.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_exportChartImage(CancellationToken cancellationToken = default)
      {
        
        var tmp843 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp843.Type == TMessageType.Exception)
        {
          var tmp844 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp844;
        }

        var tmp845 = new InternalStructs.exportChartImage_result();
        await tmp845.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp845.__isset.success)
        {
          return tmp845.Success;
        }
        if (tmp845.__isset.e)
        {
          throw tmp845.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exportChartImage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_exportChartImageData(p, chartID, imageFileName, cancellationToken);
        return await recv_exportChartImageData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp846 = new InternalStructs.exportChartImageData_args() {
          P = p,
          ChartID = chartID,
          ImageFileName = imageFileName,
        };
        
        await tmp846.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_exportChartImageData(CancellationToken cancellationToken = default)
      {
        
        var tmp847 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp847.Type == TMessageType.Exception)
        {
          var tmp848 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp848;
        }

        var tmp849 = new InternalStructs.exportChartImageData_result();
        await tmp849.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp849.__isset.success)
        {
          return tmp849.Success;
        }
        if (tmp849.__isset.e)
        {
          throw tmp849.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exportChartImageData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task notice(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_notice(p, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_notice(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("notice", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp850 = new InternalStructs.notice_args() {
          P = p,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp850.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_dispNotice(p, disposition, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dispNotice", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp851 = new InternalStructs.dispNotice_args() {
          P = p,
          Disposition = disposition,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp851.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task error(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_error(p, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_error(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("error", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp852 = new InternalStructs.error_args() {
          P = p,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp852.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default)
      {
        await send_popupDialog(p, identifier, title, message, positiveOption, negativeOption, cancellationToken);
        await recv_popupDialog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp853 = new InternalStructs.popupDialog_args() {
          P = p,
          Identifier = identifier,
          Title = title,
          Message = message,
          PositiveOption = positiveOption,
          NegativeOption = negativeOption,
        };
        
        await tmp853.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_popupDialog(CancellationToken cancellationToken = default)
      {
        
        var tmp854 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp854.Type == TMessageType.Exception)
        {
          var tmp855 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp855;
        }

        var tmp856 = new InternalStructs.popupDialog_result();
        await tmp856.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp856.__isset.e)
        {
          throw tmp856.E;
        }
      }

      public async global::System.Threading.Tasks.Task cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_cancelPopupDialog(p, identifier, cancellationToken);
        await recv_cancelPopupDialog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp857 = new InternalStructs.cancelPopupDialog_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp857.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_cancelPopupDialog(CancellationToken cancellationToken = default)
      {
        
        var tmp858 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp858.Type == TMessageType.Exception)
        {
          var tmp859 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp859;
        }

        var tmp860 = new InternalStructs.cancelPopupDialog_result();
        await tmp860.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default)
      {
        await send_insertInstructionAtSelectedLine(p, instruction, cancellationToken);
        return await recv_insertInstructionAtSelectedLine(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp861 = new InternalStructs.insertInstructionAtSelectedLine_args() {
          P = p,
          Instruction = instruction,
        };
        
        await tmp861.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_insertInstructionAtSelectedLine(CancellationToken cancellationToken = default)
      {
        
        var tmp862 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp862.Type == TMessageType.Exception)
        {
          var tmp863 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp863;
        }

        var tmp864 = new InternalStructs.insertInstructionAtSelectedLine_result();
        await tmp864.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp864.__isset.success)
        {
          return tmp864.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertInstructionAtSelectedLine failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task displayScreen(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_displayScreen(p, identifier, cancellationToken);
        await recv_displayScreen(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_displayScreen(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp865 = new InternalStructs.displayScreen_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp865.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_displayScreen(CancellationToken cancellationToken = default)
      {
        
        var tmp866 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp866.Type == TMessageType.Exception)
        {
          var tmp867 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp867;
        }

        var tmp868 = new InternalStructs.displayScreen_result();
        await tmp868.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default)
      {
        await send_displayHelp(p, title, htmlContentFile, cancellationToken);
        await recv_displayHelp(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp869 = new InternalStructs.displayHelp_args() {
          P = p,
          Title = title,
          HtmlContentFile = htmlContentFile,
        };
        
        await tmp869.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_displayHelp(CancellationToken cancellationToken = default)
      {
        
        var tmp870 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp870.Type == TMessageType.Exception)
        {
          var tmp871 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp871;
        }

        var tmp872 = new InternalStructs.displayHelp_result();
        await tmp872.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> accessLevel(long p, CancellationToken cancellationToken = default)
      {
        await send_accessLevel(p, cancellationToken);
        return await recv_accessLevel(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_accessLevel(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("accessLevel", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp873 = new InternalStructs.accessLevel_args() {
          P = p,
        };
        
        await tmp873.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_accessLevel(CancellationToken cancellationToken = default)
      {
        
        var tmp874 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp874.Type == TMessageType.Exception)
        {
          var tmp875 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp875;
        }

        var tmp876 = new InternalStructs.accessLevel_result();
        await tmp876.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp876.__isset.success)
        {
          return tmp876.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "accessLevel failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> accessLevelIncludes(long p, string level, CancellationToken cancellationToken = default)
      {
        await send_accessLevelIncludes(p, level, cancellationToken);
        return await recv_accessLevelIncludes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_accessLevelIncludes(long p, string level, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("accessLevelIncludes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp877 = new InternalStructs.accessLevelIncludes_args() {
          P = p,
          Level = level,
        };
        
        await tmp877.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_accessLevelIncludes(CancellationToken cancellationToken = default)
      {
        
        var tmp878 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp878.Type == TMessageType.Exception)
        {
          var tmp879 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp879;
        }

        var tmp880 = new InternalStructs.accessLevelIncludes_result();
        await tmp880.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp880.__isset.success)
        {
          return tmp880.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "accessLevelIncludes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task appendRow(long p, string ContainerID, Dictionary<string, global::Yaskawa.Ext.API.Any> dict, CancellationToken cancellationToken = default)
      {
        await send_appendRow(p, ContainerID, dict, cancellationToken);
        await recv_appendRow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_appendRow(long p, string ContainerID, Dictionary<string, global::Yaskawa.Ext.API.Any> dict, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("appendRow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp881 = new InternalStructs.appendRow_args() {
          P = p,
          ContainerID = ContainerID,
          Dict = dict,
        };
        
        await tmp881.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_appendRow(CancellationToken cancellationToken = default)
      {
        
        var tmp882 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp882.Type == TMessageType.Exception)
        {
          var tmp883 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp883;
        }

        var tmp884 = new InternalStructs.appendRow_result();
        await tmp884.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task insertRow(long p, string ContainerID, long index, Dictionary<string, global::Yaskawa.Ext.API.Any> dict, CancellationToken cancellationToken = default)
      {
        await send_insertRow(p, ContainerID, index, dict, cancellationToken);
        await recv_insertRow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_insertRow(long p, string ContainerID, long index, Dictionary<string, global::Yaskawa.Ext.API.Any> dict, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertRow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp885 = new InternalStructs.insertRow_args() {
          P = p,
          ContainerID = ContainerID,
          Index = index,
          Dict = dict,
        };
        
        await tmp885.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_insertRow(CancellationToken cancellationToken = default)
      {
        
        var tmp886 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp886.Type == TMessageType.Exception)
        {
          var tmp887 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp887;
        }

        var tmp888 = new InternalStructs.insertRow_result();
        await tmp888.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteRow(long p, string ContainerID, long index, CancellationToken cancellationToken = default)
      {
        await send_deleteRow(p, ContainerID, index, cancellationToken);
        await recv_deleteRow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteRow(long p, string ContainerID, long index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteRow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp889 = new InternalStructs.deleteRow_args() {
          P = p,
          ContainerID = ContainerID,
          Index = index,
        };
        
        await tmp889.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteRow(CancellationToken cancellationToken = default)
      {
        
        var tmp890 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp890.Type == TMessageType.Exception)
        {
          var tmp891 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp891;
        }

        var tmp892 = new InternalStructs.deleteRow_result();
        await tmp892.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task clearRows(long p, string ContainerID, CancellationToken cancellationToken = default)
      {
        await send_clearRows(p, ContainerID, cancellationToken);
        await recv_clearRows(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_clearRows(long p, string ContainerID, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("clearRows", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp893 = new InternalStructs.clearRows_args() {
          P = p,
          ContainerID = ContainerID,
        };
        
        await tmp893.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_clearRows(CancellationToken cancellationToken = default)
      {
        
        var tmp894 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp894.Type == TMessageType.Exception)
        {
          var tmp895 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp895;
        }

        var tmp896 = new InternalStructs.clearRows_result();
        await tmp896.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["pendantVersion"] = pendantVersion_ProcessAsync;
        processMap_["subscribeEventTypes"] = subscribeEventTypes_ProcessAsync;
        processMap_["unsubscribeEventTypes"] = unsubscribeEventTypes_ProcessAsync;
        processMap_["subscribeItemEventTypes"] = subscribeItemEventTypes_ProcessAsync;
        processMap_["unsubscribeItemEventTypes"] = unsubscribeItemEventTypes_ProcessAsync;
        processMap_["events"] = events_ProcessAsync;
        processMap_["currentLanguage"] = currentLanguage_ProcessAsync;
        processMap_["currentLocale"] = currentLocale_ProcessAsync;
        processMap_["currentScreenName"] = currentScreenName_ProcessAsync;
        processMap_["registerYML"] = registerYML_ProcessAsync;
        processMap_["registerImageFile"] = registerImageFile_ProcessAsync;
        processMap_["registerImageData"] = registerImageData_ProcessAsync;
        processMap_["registerHTMLFile"] = registerHTMLFile_ProcessAsync;
        processMap_["registerHTMLData"] = registerHTMLData_ProcessAsync;
        processMap_["registerTranslationFile"] = registerTranslationFile_ProcessAsync;
        processMap_["registerTranslationData"] = registerTranslationData_ProcessAsync;
        processMap_["registerUtilityMenu"] = registerUtilityMenu_ProcessAsync;
        processMap_["unregisterUtilityMenu"] = unregisterUtilityMenu_ProcessAsync;
        processMap_["registerUtilityWindow"] = registerUtilityWindow_ProcessAsync;
        processMap_["registerUtilityWindowWithMenu"] = registerUtilityWindowWithMenu_ProcessAsync;
        processMap_["unregisterUtilityWindow"] = unregisterUtilityWindow_ProcessAsync;
        processMap_["openUtilityWindow"] = openUtilityWindow_ProcessAsync;
        processMap_["closeUtilityWindow"] = closeUtilityWindow_ProcessAsync;
        processMap_["collapseUtilityWindow"] = collapseUtilityWindow_ProcessAsync;
        processMap_["expandUtilityWindow"] = expandUtilityWindow_ProcessAsync;
        processMap_["refreshDynamicInstructions"] = refreshDynamicInstructions_ProcessAsync;
        processMap_["registerIntegration"] = registerIntegration_ProcessAsync;
        processMap_["unregisterIntegration"] = unregisterIntegration_ProcessAsync;
        processMap_["registerSwitch"] = registerSwitch_ProcessAsync;
        processMap_["registerDirectOpenForInstr"] = registerDirectOpenForInstr_ProcessAsync;
        processMap_["unregisterDirectOpenForInstr"] = unregisterDirectOpenForInstr_ProcessAsync;
        processMap_["property"] = property_ProcessAsync;
        processMap_["setProperty"] = setProperty_ProcessAsync;
        processMap_["setProperties"] = setProperties_ProcessAsync;
        processMap_["setChartConfig"] = setChartConfig_ProcessAsync;
        processMap_["getChartConfig"] = getChartConfig_ProcessAsync;
        processMap_["setChartData"] = setChartData_ProcessAsync;
        processMap_["getChartData"] = getChartData_ProcessAsync;
        processMap_["addChartKey"] = addChartKey_ProcessAsync;
        processMap_["removeChartKey"] = removeChartKey_ProcessAsync;
        processMap_["hideChartKey"] = hideChartKey_ProcessAsync;
        processMap_["appendChartPoints"] = appendChartPoints_ProcessAsync;
        processMap_["incrementChartKey"] = incrementChartKey_ProcessAsync;
        processMap_["exportChartImage"] = exportChartImage_ProcessAsync;
        processMap_["exportChartImageData"] = exportChartImageData_ProcessAsync;
        processMap_["notice"] = notice_ProcessAsync;
        processMap_["dispNotice"] = dispNotice_ProcessAsync;
        processMap_["error"] = error_ProcessAsync;
        processMap_["popupDialog"] = popupDialog_ProcessAsync;
        processMap_["cancelPopupDialog"] = cancelPopupDialog_ProcessAsync;
        processMap_["insertInstructionAtSelectedLine"] = insertInstructionAtSelectedLine_ProcessAsync;
        processMap_["displayScreen"] = displayScreen_ProcessAsync;
        processMap_["displayHelp"] = displayHelp_ProcessAsync;
        processMap_["accessLevel"] = accessLevel_ProcessAsync;
        processMap_["accessLevelIncludes"] = accessLevelIncludes_ProcessAsync;
        processMap_["appendRow"] = appendRow_ProcessAsync;
        processMap_["insertRow"] = insertRow_ProcessAsync;
        processMap_["deleteRow"] = deleteRow_ProcessAsync;
        processMap_["clearRows"] = clearRows_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task pendantVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp897 = new InternalStructs.pendantVersion_args();
        await tmp897.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp898 = new InternalStructs.pendantVersion_result();
        try
        {
          tmp898.Success = await _iAsync.pendantVersion(tmp897.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp898.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp899)
        {
          var tmp900 = $"Error occurred in {GetType().FullName}: {tmp899.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp899, tmp900);
          else
            Console.Error.WriteLine(tmp900);
          var tmp901 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp901.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp902 = new InternalStructs.subscribeEventTypes_args();
        await tmp902.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp903 = new InternalStructs.subscribeEventTypes_result();
        try
        {
          await _iAsync.subscribeEventTypes(tmp902.P, tmp902.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp903.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp904)
        {
          var tmp905 = $"Error occurred in {GetType().FullName}: {tmp904.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp904, tmp905);
          else
            Console.Error.WriteLine(tmp905);
          var tmp906 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp906.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp907 = new InternalStructs.unsubscribeEventTypes_args();
        await tmp907.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp908 = new InternalStructs.unsubscribeEventTypes_result();
        try
        {
          await _iAsync.unsubscribeEventTypes(tmp907.P, tmp907.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp908.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp909)
        {
          var tmp910 = $"Error occurred in {GetType().FullName}: {tmp909.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp909, tmp910);
          else
            Console.Error.WriteLine(tmp910);
          var tmp911 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp911.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeItemEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp912 = new InternalStructs.subscribeItemEventTypes_args();
        await tmp912.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp913 = new InternalStructs.subscribeItemEventTypes_result();
        try
        {
          await _iAsync.subscribeItemEventTypes(tmp912.P, tmp912.ItemIDs, tmp912.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp913.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp914)
        {
          var tmp915 = $"Error occurred in {GetType().FullName}: {tmp914.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp914, tmp915);
          else
            Console.Error.WriteLine(tmp915);
          var tmp916 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp916.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeItemEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp917 = new InternalStructs.unsubscribeItemEventTypes_args();
        await tmp917.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp918 = new InternalStructs.unsubscribeItemEventTypes_result();
        try
        {
          await _iAsync.unsubscribeItemEventTypes(tmp917.P, tmp917.ItemIDs, tmp917.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp918.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp919)
        {
          var tmp920 = $"Error occurred in {GetType().FullName}: {tmp919.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp919, tmp920);
          else
            Console.Error.WriteLine(tmp920);
          var tmp921 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp921.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task events_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp922 = new InternalStructs.events_args();
        await tmp922.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp923 = new InternalStructs.events_result();
        try
        {
          tmp923.Success = await _iAsync.events(tmp922.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Reply, seqid), cancellationToken); 
          await tmp923.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp924)
        {
          var tmp925 = $"Error occurred in {GetType().FullName}: {tmp924.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp924, tmp925);
          else
            Console.Error.WriteLine(tmp925);
          var tmp926 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Exception, seqid), cancellationToken);
          await tmp926.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentLanguage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp927 = new InternalStructs.currentLanguage_args();
        await tmp927.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp928 = new InternalStructs.currentLanguage_result();
        try
        {
          tmp928.Success = await _iAsync.currentLanguage(tmp927.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp928.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp929)
        {
          var tmp930 = $"Error occurred in {GetType().FullName}: {tmp929.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp929, tmp930);
          else
            Console.Error.WriteLine(tmp930);
          var tmp931 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Exception, seqid), cancellationToken);
          await tmp931.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentLocale_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp932 = new InternalStructs.currentLocale_args();
        await tmp932.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp933 = new InternalStructs.currentLocale_result();
        try
        {
          tmp933.Success = await _iAsync.currentLocale(tmp932.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Reply, seqid), cancellationToken); 
          await tmp933.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp934)
        {
          var tmp935 = $"Error occurred in {GetType().FullName}: {tmp934.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp934, tmp935);
          else
            Console.Error.WriteLine(tmp935);
          var tmp936 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Exception, seqid), cancellationToken);
          await tmp936.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentScreenName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp937 = new InternalStructs.currentScreenName_args();
        await tmp937.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp938 = new InternalStructs.currentScreenName_result();
        try
        {
          tmp938.Success = await _iAsync.currentScreenName(tmp937.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp938.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp939)
        {
          var tmp940 = $"Error occurred in {GetType().FullName}: {tmp939.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp939, tmp940);
          else
            Console.Error.WriteLine(tmp940);
          var tmp941 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Exception, seqid), cancellationToken);
          await tmp941.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerYML_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp942 = new InternalStructs.registerYML_args();
        await tmp942.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp943 = new InternalStructs.registerYML_result();
        try
        {
          tmp943.Success = await _iAsync.registerYML(tmp942.P, tmp942.YmlSource, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Reply, seqid), cancellationToken); 
          await tmp943.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp944)
        {
          var tmp945 = $"Error occurred in {GetType().FullName}: {tmp944.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp944, tmp945);
          else
            Console.Error.WriteLine(tmp945);
          var tmp946 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Exception, seqid), cancellationToken);
          await tmp946.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerImageFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp947 = new InternalStructs.registerImageFile_args();
        await tmp947.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp948 = new InternalStructs.registerImageFile_result();
        try
        {
          try
          {
            await _iAsync.registerImageFile(tmp947.P, tmp947.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp949)
          {
            tmp948.E = tmp949;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp948.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp950)
        {
          var tmp951 = $"Error occurred in {GetType().FullName}: {tmp950.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp950, tmp951);
          else
            Console.Error.WriteLine(tmp951);
          var tmp952 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp952.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerImageData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp953 = new InternalStructs.registerImageData_args();
        await tmp953.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp954 = new InternalStructs.registerImageData_result();
        try
        {
          try
          {
            await _iAsync.registerImageData(tmp953.P, tmp953.ImageData, tmp953.ImageName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp955)
          {
            tmp954.E = tmp955;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp954.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp956)
        {
          var tmp957 = $"Error occurred in {GetType().FullName}: {tmp956.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp956, tmp957);
          else
            Console.Error.WriteLine(tmp957);
          var tmp958 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Exception, seqid), cancellationToken);
          await tmp958.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerHTMLFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp959 = new InternalStructs.registerHTMLFile_args();
        await tmp959.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp960 = new InternalStructs.registerHTMLFile_result();
        try
        {
          try
          {
            await _iAsync.registerHTMLFile(tmp959.P, tmp959.HtmlFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp961)
          {
            tmp960.E = tmp961;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp960.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp962)
        {
          var tmp963 = $"Error occurred in {GetType().FullName}: {tmp962.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp962, tmp963);
          else
            Console.Error.WriteLine(tmp963);
          var tmp964 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp964.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerHTMLData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp965 = new InternalStructs.registerHTMLData_args();
        await tmp965.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp966 = new InternalStructs.registerHTMLData_result();
        try
        {
          try
          {
            await _iAsync.registerHTMLData(tmp965.P, tmp965.HtmlData, tmp965.HtmlName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp967)
          {
            tmp966.E = tmp967;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp966.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp968)
        {
          var tmp969 = $"Error occurred in {GetType().FullName}: {tmp968.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp968, tmp969);
          else
            Console.Error.WriteLine(tmp969);
          var tmp970 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Exception, seqid), cancellationToken);
          await tmp970.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerTranslationFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp971 = new InternalStructs.registerTranslationFile_args();
        await tmp971.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp972 = new InternalStructs.registerTranslationFile_result();
        try
        {
          try
          {
            await _iAsync.registerTranslationFile(tmp971.P, tmp971.Locale, tmp971.TranslationFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp973)
          {
            tmp972.E = tmp973;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp972.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp974)
        {
          var tmp975 = $"Error occurred in {GetType().FullName}: {tmp974.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp974, tmp975);
          else
            Console.Error.WriteLine(tmp975);
          var tmp976 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp976.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerTranslationData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp977 = new InternalStructs.registerTranslationData_args();
        await tmp977.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp978 = new InternalStructs.registerTranslationData_result();
        try
        {
          try
          {
            await _iAsync.registerTranslationData(tmp977.P, tmp977.Locale, tmp977.TranslationData, tmp977.TranslationName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp979)
          {
            tmp978.E = tmp979;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp978.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp980)
        {
          var tmp981 = $"Error occurred in {GetType().FullName}: {tmp980.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp980, tmp981);
          else
            Console.Error.WriteLine(tmp981);
          var tmp982 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Exception, seqid), cancellationToken);
          await tmp982.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityMenu_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp983 = new InternalStructs.registerUtilityMenu_args();
        await tmp983.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp984 = new InternalStructs.registerUtilityMenu_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityMenu(tmp983.P, tmp983.MenuName, tmp983.MenuText, tmp983.MenuIcon, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp985)
          {
            tmp984.E = tmp985;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityMenu", TMessageType.Reply, seqid), cancellationToken); 
          await tmp984.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp986)
        {
          var tmp987 = $"Error occurred in {GetType().FullName}: {tmp986.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp986, tmp987);
          else
            Console.Error.WriteLine(tmp987);
          var tmp988 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityMenu", TMessageType.Exception, seqid), cancellationToken);
          await tmp988.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityMenu_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp989 = new InternalStructs.unregisterUtilityMenu_args();
        await tmp989.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp990 = new InternalStructs.unregisterUtilityMenu_result();
        try
        {
          try
          {
            await _iAsync.unregisterUtilityMenu(tmp989.P, tmp989.MenuName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp991)
          {
            tmp990.E = tmp991;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityMenu", TMessageType.Reply, seqid), cancellationToken); 
          await tmp990.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp992)
        {
          var tmp993 = $"Error occurred in {GetType().FullName}: {tmp992.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp992, tmp993);
          else
            Console.Error.WriteLine(tmp993);
          var tmp994 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityMenu", TMessageType.Exception, seqid), cancellationToken);
          await tmp994.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp995 = new InternalStructs.registerUtilityWindow_args();
        await tmp995.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp996 = new InternalStructs.registerUtilityWindow_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityWindow(tmp995.P, tmp995.Identifier, tmp995.ItemType, tmp995.MenuItemName, tmp995.WindowTitle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp997)
          {
            tmp996.E = tmp997;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp996.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp998)
        {
          var tmp999 = $"Error occurred in {GetType().FullName}: {tmp998.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp998, tmp999);
          else
            Console.Error.WriteLine(tmp999);
          var tmp1000 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1000.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindowWithMenu_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1001 = new InternalStructs.registerUtilityWindowWithMenu_args();
        await tmp1001.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1002 = new InternalStructs.registerUtilityWindowWithMenu_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityWindowWithMenu(tmp1001.P, tmp1001.Identifier, tmp1001.ItemType, tmp1001.MenuItemName, tmp1001.WindowTitle, tmp1001.MenuName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1003)
          {
            tmp1002.E = tmp1003;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindowWithMenu", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1002.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1004)
        {
          var tmp1005 = $"Error occurred in {GetType().FullName}: {tmp1004.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1004, tmp1005);
          else
            Console.Error.WriteLine(tmp1005);
          var tmp1006 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindowWithMenu", TMessageType.Exception, seqid), cancellationToken);
          await tmp1006.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1007 = new InternalStructs.unregisterUtilityWindow_args();
        await tmp1007.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1008 = new InternalStructs.unregisterUtilityWindow_result();
        try
        {
          try
          {
            await _iAsync.unregisterUtilityWindow(tmp1007.P, tmp1007.Identifier, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1009)
          {
            tmp1008.E = tmp1009;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1008.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1010)
        {
          var tmp1011 = $"Error occurred in {GetType().FullName}: {tmp1010.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1010, tmp1011);
          else
            Console.Error.WriteLine(tmp1011);
          var tmp1012 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1012.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task openUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1013 = new InternalStructs.openUtilityWindow_args();
        await tmp1013.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1014 = new InternalStructs.openUtilityWindow_result();
        try
        {
          await _iAsync.openUtilityWindow(tmp1013.P, tmp1013.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1014.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1015)
        {
          var tmp1016 = $"Error occurred in {GetType().FullName}: {tmp1015.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1015, tmp1016);
          else
            Console.Error.WriteLine(tmp1016);
          var tmp1017 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1017.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1018 = new InternalStructs.closeUtilityWindow_args();
        await tmp1018.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1019 = new InternalStructs.closeUtilityWindow_result();
        try
        {
          await _iAsync.closeUtilityWindow(tmp1018.P, tmp1018.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1019.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1020)
        {
          var tmp1021 = $"Error occurred in {GetType().FullName}: {tmp1020.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1020, tmp1021);
          else
            Console.Error.WriteLine(tmp1021);
          var tmp1022 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1022.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task collapseUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1023 = new InternalStructs.collapseUtilityWindow_args();
        await tmp1023.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1024 = new InternalStructs.collapseUtilityWindow_result();
        try
        {
          await _iAsync.collapseUtilityWindow(tmp1023.P, tmp1023.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1024.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1025)
        {
          var tmp1026 = $"Error occurred in {GetType().FullName}: {tmp1025.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1025, tmp1026);
          else
            Console.Error.WriteLine(tmp1026);
          var tmp1027 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1027.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expandUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1028 = new InternalStructs.expandUtilityWindow_args();
        await tmp1028.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1029 = new InternalStructs.expandUtilityWindow_result();
        try
        {
          await _iAsync.expandUtilityWindow(tmp1028.P, tmp1028.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1029.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1030)
        {
          var tmp1031 = $"Error occurred in {GetType().FullName}: {tmp1030.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1030, tmp1031);
          else
            Console.Error.WriteLine(tmp1031);
          var tmp1032 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1032.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task refreshDynamicInstructions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1033 = new InternalStructs.refreshDynamicInstructions_args();
        await tmp1033.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1034 = new InternalStructs.refreshDynamicInstructions_result();
        try
        {
          await _iAsync.refreshDynamicInstructions(tmp1033.P, tmp1033.InstructionType, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("refreshDynamicInstructions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1034.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1035)
        {
          var tmp1036 = $"Error occurred in {GetType().FullName}: {tmp1035.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1035, tmp1036);
          else
            Console.Error.WriteLine(tmp1036);
          var tmp1037 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("refreshDynamicInstructions", TMessageType.Exception, seqid), cancellationToken);
          await tmp1037.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerIntegration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1038 = new InternalStructs.registerIntegration_args();
        await tmp1038.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1039 = new InternalStructs.registerIntegration_result();
        try
        {
          try
          {
            await _iAsync.registerIntegration(tmp1038.P, tmp1038.Identifier, tmp1038.IntegrationPoint, tmp1038.ItemType, tmp1038.ButtonLabel, tmp1038.ButtonImage, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1040)
          {
            tmp1039.E = tmp1040;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1039.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1041)
        {
          var tmp1042 = $"Error occurred in {GetType().FullName}: {tmp1041.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1041, tmp1042);
          else
            Console.Error.WriteLine(tmp1042);
          var tmp1043 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Exception, seqid), cancellationToken);
          await tmp1043.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterIntegration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1044 = new InternalStructs.unregisterIntegration_args();
        await tmp1044.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1045 = new InternalStructs.unregisterIntegration_result();
        try
        {
          try
          {
            await _iAsync.unregisterIntegration(tmp1044.P, tmp1044.Identifier, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1046)
          {
            tmp1045.E = tmp1046;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1045.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1047)
        {
          var tmp1048 = $"Error occurred in {GetType().FullName}: {tmp1047.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1047, tmp1048);
          else
            Console.Error.WriteLine(tmp1048);
          var tmp1049 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Exception, seqid), cancellationToken);
          await tmp1049.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerSwitch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1050 = new InternalStructs.registerSwitch_args();
        await tmp1050.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1051 = new InternalStructs.registerSwitch_result();
        try
        {
          try
          {
            await _iAsync.registerSwitch(tmp1050.P, tmp1050.Identifier, tmp1050.IntegrationPoint, tmp1050.SwitchLabel, tmp1050.OffPositionLabel, tmp1050.OnPositionLabel, tmp1050.DefaultState, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1052)
          {
            tmp1051.E = tmp1052;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerSwitch", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1051.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1053)
        {
          var tmp1054 = $"Error occurred in {GetType().FullName}: {tmp1053.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1053, tmp1054);
          else
            Console.Error.WriteLine(tmp1054);
          var tmp1055 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerSwitch", TMessageType.Exception, seqid), cancellationToken);
          await tmp1055.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerDirectOpenForInstr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1056 = new InternalStructs.registerDirectOpenForInstr_args();
        await tmp1056.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1057 = new InternalStructs.registerDirectOpenForInstr_result();
        try
        {
          try
          {
            await _iAsync.registerDirectOpenForInstr(tmp1056.P, tmp1056.Identifier, tmp1056.Instruction, tmp1056.InstrTags, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1058)
          {
            tmp1057.E = tmp1058;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerDirectOpenForInstr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1057.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1059)
        {
          var tmp1060 = $"Error occurred in {GetType().FullName}: {tmp1059.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1059, tmp1060);
          else
            Console.Error.WriteLine(tmp1060);
          var tmp1061 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerDirectOpenForInstr", TMessageType.Exception, seqid), cancellationToken);
          await tmp1061.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterDirectOpenForInstr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1062 = new InternalStructs.unregisterDirectOpenForInstr_args();
        await tmp1062.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1063 = new InternalStructs.unregisterDirectOpenForInstr_result();
        try
        {
          try
          {
            await _iAsync.unregisterDirectOpenForInstr(tmp1062.P, tmp1062.Identifier, tmp1062.Instruction, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1064)
          {
            tmp1063.E = tmp1064;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterDirectOpenForInstr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1063.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1065)
        {
          var tmp1066 = $"Error occurred in {GetType().FullName}: {tmp1065.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1065, tmp1066);
          else
            Console.Error.WriteLine(tmp1066);
          var tmp1067 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterDirectOpenForInstr", TMessageType.Exception, seqid), cancellationToken);
          await tmp1067.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task property_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1068 = new InternalStructs.property_args();
        await tmp1068.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1069 = new InternalStructs.property_result();
        try
        {
          try
          {
            tmp1069.Success = await _iAsync.property(tmp1068.P, tmp1068.ItemID, tmp1068.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1070)
          {
            tmp1069.E = tmp1070;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("property", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1069.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1071)
        {
          var tmp1072 = $"Error occurred in {GetType().FullName}: {tmp1071.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1071, tmp1072);
          else
            Console.Error.WriteLine(tmp1072);
          var tmp1073 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("property", TMessageType.Exception, seqid), cancellationToken);
          await tmp1073.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setProperty_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1074 = new InternalStructs.setProperty_args();
        await tmp1074.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1075 = new InternalStructs.setProperty_result();
        try
        {
          try
          {
            await _iAsync.setProperty(tmp1074.P, tmp1074.ItemID, tmp1074.Name, tmp1074.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1076)
          {
            tmp1075.E = tmp1076;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1075.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1077)
        {
          var tmp1078 = $"Error occurred in {GetType().FullName}: {tmp1077.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1077, tmp1078);
          else
            Console.Error.WriteLine(tmp1078);
          var tmp1079 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Exception, seqid), cancellationToken);
          await tmp1079.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setProperties_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1080 = new InternalStructs.setProperties_args();
        await tmp1080.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setProperties(tmp1080.P, tmp1080.PropValuesList, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1082)
        {
          var tmp1083 = $"Error occurred in {GetType().FullName}: {tmp1082.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1082, tmp1083);
          else
            Console.Error.WriteLine(tmp1083);
        }
      }

      public async global::System.Threading.Tasks.Task setChartConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1084 = new InternalStructs.setChartConfig_args();
        await tmp1084.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1085 = new InternalStructs.setChartConfig_result();
        try
        {
          try
          {
            await _iAsync.setChartConfig(tmp1084.P, tmp1084.ChartID, tmp1084.Config, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1086)
          {
            tmp1085.E = tmp1086;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1085.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1087)
        {
          var tmp1088 = $"Error occurred in {GetType().FullName}: {tmp1087.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1087, tmp1088);
          else
            Console.Error.WriteLine(tmp1088);
          var tmp1089 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp1089.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getChartConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1090 = new InternalStructs.getChartConfig_args();
        await tmp1090.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1091 = new InternalStructs.getChartConfig_result();
        try
        {
          try
          {
            tmp1091.Success = await _iAsync.getChartConfig(tmp1090.P, tmp1090.ChartID, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1092)
          {
            tmp1091.E = tmp1092;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1091.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1093)
        {
          var tmp1094 = $"Error occurred in {GetType().FullName}: {tmp1093.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1093, tmp1094);
          else
            Console.Error.WriteLine(tmp1094);
          var tmp1095 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp1095.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setChartData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1096 = new InternalStructs.setChartData_args();
        await tmp1096.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1097 = new InternalStructs.setChartData_result();
        try
        {
          try
          {
            await _iAsync.setChartData(tmp1096.P, tmp1096.ChartID, tmp1096.Dataset, tmp1096.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1098)
          {
            tmp1097.E = tmp1098;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1097.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1099)
        {
          var tmp1100 = $"Error occurred in {GetType().FullName}: {tmp1099.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1099, tmp1100);
          else
            Console.Error.WriteLine(tmp1100);
          var tmp1101 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1101.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getChartData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1102 = new InternalStructs.getChartData_args();
        await tmp1102.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1103 = new InternalStructs.getChartData_result();
        try
        {
          try
          {
            tmp1103.Success = await _iAsync.getChartData(tmp1102.P, tmp1102.ChartID, tmp1102.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1104)
          {
            tmp1103.E = tmp1104;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1103.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1105)
        {
          var tmp1106 = $"Error occurred in {GetType().FullName}: {tmp1105.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1105, tmp1106);
          else
            Console.Error.WriteLine(tmp1106);
          var tmp1107 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1107.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1108 = new InternalStructs.addChartKey_args();
        await tmp1108.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1109 = new InternalStructs.addChartKey_result();
        try
        {
          try
          {
            await _iAsync.addChartKey(tmp1108.P, tmp1108.ChartID, tmp1108.Key, tmp1108.Data, tmp1108.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1110)
          {
            tmp1109.E = tmp1110;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1109.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1111)
        {
          var tmp1112 = $"Error occurred in {GetType().FullName}: {tmp1111.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1111, tmp1112);
          else
            Console.Error.WriteLine(tmp1112);
          var tmp1113 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1113.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1114 = new InternalStructs.removeChartKey_args();
        await tmp1114.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1115 = new InternalStructs.removeChartKey_result();
        try
        {
          try
          {
            await _iAsync.removeChartKey(tmp1114.P, tmp1114.ChartID, tmp1114.Key, tmp1114.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1116)
          {
            tmp1115.E = tmp1116;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1115.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1117)
        {
          var tmp1118 = $"Error occurred in {GetType().FullName}: {tmp1117.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1117, tmp1118);
          else
            Console.Error.WriteLine(tmp1118);
          var tmp1119 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1119.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task hideChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1120 = new InternalStructs.hideChartKey_args();
        await tmp1120.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1121 = new InternalStructs.hideChartKey_result();
        try
        {
          try
          {
            await _iAsync.hideChartKey(tmp1120.P, tmp1120.ChartID, tmp1120.Key, tmp1120.Hidden, tmp1120.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1122)
          {
            tmp1121.E = tmp1122;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1121.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1123)
        {
          var tmp1124 = $"Error occurred in {GetType().FullName}: {tmp1123.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1123, tmp1124);
          else
            Console.Error.WriteLine(tmp1124);
          var tmp1125 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1125.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task appendChartPoints_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1126 = new InternalStructs.appendChartPoints_args();
        await tmp1126.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.appendChartPoints(tmp1126.P, tmp1126.ChartID, tmp1126.Key, tmp1126.Points, tmp1126.Right, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1128)
        {
          var tmp1129 = $"Error occurred in {GetType().FullName}: {tmp1128.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1128, tmp1129);
          else
            Console.Error.WriteLine(tmp1129);
        }
      }

      public async global::System.Threading.Tasks.Task incrementChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1130 = new InternalStructs.incrementChartKey_args();
        await tmp1130.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1131 = new InternalStructs.incrementChartKey_result();
        try
        {
          try
          {
            await _iAsync.incrementChartKey(tmp1130.P, tmp1130.ChartID, tmp1130.Key, tmp1130.Val, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1132)
          {
            tmp1131.E = tmp1132;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1131.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1133)
        {
          var tmp1134 = $"Error occurred in {GetType().FullName}: {tmp1133.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1133, tmp1134);
          else
            Console.Error.WriteLine(tmp1134);
          var tmp1135 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1135.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exportChartImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1136 = new InternalStructs.exportChartImage_args();
        await tmp1136.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1137 = new InternalStructs.exportChartImage_result();
        try
        {
          try
          {
            tmp1137.Success = await _iAsync.exportChartImage(tmp1136.P, tmp1136.ChartID, tmp1136.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1138)
          {
            tmp1137.E = tmp1138;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1137.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1139)
        {
          var tmp1140 = $"Error occurred in {GetType().FullName}: {tmp1139.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1139, tmp1140);
          else
            Console.Error.WriteLine(tmp1140);
          var tmp1141 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Exception, seqid), cancellationToken);
          await tmp1141.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exportChartImageData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1142 = new InternalStructs.exportChartImageData_args();
        await tmp1142.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1143 = new InternalStructs.exportChartImageData_result();
        try
        {
          try
          {
            tmp1143.Success = await _iAsync.exportChartImageData(tmp1142.P, tmp1142.ChartID, tmp1142.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1144)
          {
            tmp1143.E = tmp1144;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1143.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1145)
        {
          var tmp1146 = $"Error occurred in {GetType().FullName}: {tmp1145.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1145, tmp1146);
          else
            Console.Error.WriteLine(tmp1146);
          var tmp1147 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1147.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task notice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1148 = new InternalStructs.notice_args();
        await tmp1148.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.notice(tmp1148.P, tmp1148.Title, tmp1148.Message, tmp1148.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1150)
        {
          var tmp1151 = $"Error occurred in {GetType().FullName}: {tmp1150.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1150, tmp1151);
          else
            Console.Error.WriteLine(tmp1151);
        }
      }

      public async global::System.Threading.Tasks.Task dispNotice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1152 = new InternalStructs.dispNotice_args();
        await tmp1152.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.dispNotice(tmp1152.P, tmp1152.Disposition, tmp1152.Title, tmp1152.Message, tmp1152.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1154)
        {
          var tmp1155 = $"Error occurred in {GetType().FullName}: {tmp1154.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1154, tmp1155);
          else
            Console.Error.WriteLine(tmp1155);
        }
      }

      public async global::System.Threading.Tasks.Task error_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1156 = new InternalStructs.error_args();
        await tmp1156.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.error(tmp1156.P, tmp1156.Title, tmp1156.Message, tmp1156.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1158)
        {
          var tmp1159 = $"Error occurred in {GetType().FullName}: {tmp1158.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1158, tmp1159);
          else
            Console.Error.WriteLine(tmp1159);
        }
      }

      public async global::System.Threading.Tasks.Task popupDialog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1160 = new InternalStructs.popupDialog_args();
        await tmp1160.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1161 = new InternalStructs.popupDialog_result();
        try
        {
          try
          {
            await _iAsync.popupDialog(tmp1160.P, tmp1160.Identifier, tmp1160.Title, tmp1160.Message, tmp1160.PositiveOption, tmp1160.NegativeOption, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1162)
          {
            tmp1161.E = tmp1162;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1161.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1163)
        {
          var tmp1164 = $"Error occurred in {GetType().FullName}: {tmp1163.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1163, tmp1164);
          else
            Console.Error.WriteLine(tmp1164);
          var tmp1165 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Exception, seqid), cancellationToken);
          await tmp1165.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task cancelPopupDialog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1166 = new InternalStructs.cancelPopupDialog_args();
        await tmp1166.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1167 = new InternalStructs.cancelPopupDialog_result();
        try
        {
          await _iAsync.cancelPopupDialog(tmp1166.P, tmp1166.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1167.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1168)
        {
          var tmp1169 = $"Error occurred in {GetType().FullName}: {tmp1168.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1168, tmp1169);
          else
            Console.Error.WriteLine(tmp1169);
          var tmp1170 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Exception, seqid), cancellationToken);
          await tmp1170.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task insertInstructionAtSelectedLine_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1171 = new InternalStructs.insertInstructionAtSelectedLine_args();
        await tmp1171.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1172 = new InternalStructs.insertInstructionAtSelectedLine_result();
        try
        {
          tmp1172.Success = await _iAsync.insertInstructionAtSelectedLine(tmp1171.P, tmp1171.Instruction, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1172.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1173)
        {
          var tmp1174 = $"Error occurred in {GetType().FullName}: {tmp1173.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1173, tmp1174);
          else
            Console.Error.WriteLine(tmp1174);
          var tmp1175 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Exception, seqid), cancellationToken);
          await tmp1175.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayScreen_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1176 = new InternalStructs.displayScreen_args();
        await tmp1176.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1177 = new InternalStructs.displayScreen_result();
        try
        {
          await _iAsync.displayScreen(tmp1176.P, tmp1176.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1177.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1178)
        {
          var tmp1179 = $"Error occurred in {GetType().FullName}: {tmp1178.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1178, tmp1179);
          else
            Console.Error.WriteLine(tmp1179);
          var tmp1180 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Exception, seqid), cancellationToken);
          await tmp1180.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayHelp_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1181 = new InternalStructs.displayHelp_args();
        await tmp1181.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1182 = new InternalStructs.displayHelp_result();
        try
        {
          await _iAsync.displayHelp(tmp1181.P, tmp1181.Title, tmp1181.HtmlContentFile, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1182.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1183)
        {
          var tmp1184 = $"Error occurred in {GetType().FullName}: {tmp1183.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1183, tmp1184);
          else
            Console.Error.WriteLine(tmp1184);
          var tmp1185 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Exception, seqid), cancellationToken);
          await tmp1185.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task accessLevel_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1186 = new InternalStructs.accessLevel_args();
        await tmp1186.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1187 = new InternalStructs.accessLevel_result();
        try
        {
          tmp1187.Success = await _iAsync.accessLevel(tmp1186.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("accessLevel", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1187.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1188)
        {
          var tmp1189 = $"Error occurred in {GetType().FullName}: {tmp1188.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1188, tmp1189);
          else
            Console.Error.WriteLine(tmp1189);
          var tmp1190 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("accessLevel", TMessageType.Exception, seqid), cancellationToken);
          await tmp1190.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task accessLevelIncludes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1191 = new InternalStructs.accessLevelIncludes_args();
        await tmp1191.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1192 = new InternalStructs.accessLevelIncludes_result();
        try
        {
          tmp1192.Success = await _iAsync.accessLevelIncludes(tmp1191.P, tmp1191.Level, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("accessLevelIncludes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1192.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1193)
        {
          var tmp1194 = $"Error occurred in {GetType().FullName}: {tmp1193.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1193, tmp1194);
          else
            Console.Error.WriteLine(tmp1194);
          var tmp1195 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("accessLevelIncludes", TMessageType.Exception, seqid), cancellationToken);
          await tmp1195.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task appendRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1196 = new InternalStructs.appendRow_args();
        await tmp1196.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1197 = new InternalStructs.appendRow_result();
        try
        {
          await _iAsync.appendRow(tmp1196.P, tmp1196.ContainerID, tmp1196.Dict, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("appendRow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1197.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1198)
        {
          var tmp1199 = $"Error occurred in {GetType().FullName}: {tmp1198.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1198, tmp1199);
          else
            Console.Error.WriteLine(tmp1199);
          var tmp1200 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("appendRow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1200.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task insertRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1201 = new InternalStructs.insertRow_args();
        await tmp1201.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1202 = new InternalStructs.insertRow_result();
        try
        {
          await _iAsync.insertRow(tmp1201.P, tmp1201.ContainerID, tmp1201.Index, tmp1201.Dict, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("insertRow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1202.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1203)
        {
          var tmp1204 = $"Error occurred in {GetType().FullName}: {tmp1203.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1203, tmp1204);
          else
            Console.Error.WriteLine(tmp1204);
          var tmp1205 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("insertRow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1205.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1206 = new InternalStructs.deleteRow_args();
        await tmp1206.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1207 = new InternalStructs.deleteRow_result();
        try
        {
          await _iAsync.deleteRow(tmp1206.P, tmp1206.ContainerID, tmp1206.Index, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("deleteRow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1207.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1208)
        {
          var tmp1209 = $"Error occurred in {GetType().FullName}: {tmp1208.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1208, tmp1209);
          else
            Console.Error.WriteLine(tmp1209);
          var tmp1210 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteRow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1210.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task clearRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1211 = new InternalStructs.clearRows_args();
        await tmp1211.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1212 = new InternalStructs.clearRows_result();
        try
        {
          await _iAsync.clearRows(tmp1211.P, tmp1211.ContainerID, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("clearRows", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1212.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1213)
        {
          var tmp1214 = $"Error occurred in {GetType().FullName}: {tmp1213.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1213, tmp1214);
          else
            Console.Error.WriteLine(tmp1214);
          var tmp1215 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("clearRows", TMessageType.Exception, seqid), cancellationToken);
          await tmp1215.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class pendantVersion_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public pendantVersion_args()
        {
        }

        public pendantVersion_args DeepCopy()
        {
          var tmp1216 = new pendantVersion_args();
          if(__isset.p)
          {
            tmp1216.P = this.P;
          }
          tmp1216.__isset.p = this.__isset.p;
          return tmp1216;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1217 = new TStruct("pendantVersion_args");
            await oprot.WriteStructBeginAsync(tmp1217, cancellationToken);
            var tmp1218 = new TField();
            if(__isset.p)
            {
              tmp1218.Name = "p";
              tmp1218.Type = TType.I64;
              tmp1218.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1218, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendantVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1219 = new StringBuilder("pendantVersion_args(");
          int tmp1220 = 0;
          if(__isset.p)
          {
            if(0 < tmp1220++) { tmp1219.Append(", "); }
            tmp1219.Append("P: ");
            P.ToString(tmp1219);
          }
          tmp1219.Append(')');
          return tmp1219.ToString();
        }
      }


      public partial class pendantVersion_result : TBase
      {
        private global::Yaskawa.Ext.API.Version _success;

        public global::Yaskawa.Ext.API.Version Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public pendantVersion_result()
        {
        }

        public pendantVersion_result DeepCopy()
        {
          var tmp1221 = new pendantVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp1221.Success = (global::Yaskawa.Ext.API.Version)this.Success.DeepCopy();
          }
          tmp1221.__isset.success = this.__isset.success;
          return tmp1221;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Version();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1222 = new TStruct("pendantVersion_result");
            await oprot.WriteStructBeginAsync(tmp1222, cancellationToken);
            var tmp1223 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1223.Name = "Success";
                tmp1223.Type = TType.Struct;
                tmp1223.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1223, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendantVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1224 = new StringBuilder("pendantVersion_result(");
          int tmp1225 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1225++) { tmp1224.Append(", "); }
            tmp1224.Append("Success: ");
            Success.ToString(tmp1224);
          }
          tmp1224.Append(')');
          return tmp1224.ToString();
        }
      }


      public partial class subscribeEventTypes_args : TBase
      {
        private long _p;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool types;
        }

        public subscribeEventTypes_args()
        {
        }

        public subscribeEventTypes_args DeepCopy()
        {
          var tmp1226 = new subscribeEventTypes_args();
          if(__isset.p)
          {
            tmp1226.P = this.P;
          }
          tmp1226.__isset.p = this.__isset.p;
          if((Types != null) && __isset.types)
          {
            tmp1226.Types = this.Types.DeepCopy();
          }
          tmp1226.__isset.types = this.__isset.types;
          return tmp1226;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1227 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1227.Count);
                      for(int _i1228 = 0; _i1228 < _set1227.Count; ++_i1228)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1229;
                        _elem1229 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1229);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1230 = new TStruct("subscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1230, cancellationToken);
            var tmp1231 = new TField();
            if(__isset.p)
            {
              tmp1231.Name = "p";
              tmp1231.Type = TType.I64;
              tmp1231.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1231, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1231.Name = "types";
              tmp1231.Type = TType.Set;
              tmp1231.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1231, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1232 in Types)
              {
                await oprot.WriteI32Async((int)_iter1232, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1233 = new StringBuilder("subscribeEventTypes_args(");
          int tmp1234 = 0;
          if(__isset.p)
          {
            if(0 < tmp1234++) { tmp1233.Append(", "); }
            tmp1233.Append("P: ");
            P.ToString(tmp1233);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1234++) { tmp1233.Append(", "); }
            tmp1233.Append("Types: ");
            Types.ToString(tmp1233);
          }
          tmp1233.Append(')');
          return tmp1233.ToString();
        }
      }


      public partial class subscribeEventTypes_result : TBase
      {

        public subscribeEventTypes_result()
        {
        }

        public subscribeEventTypes_result DeepCopy()
        {
          var tmp1235 = new subscribeEventTypes_result();
          return tmp1235;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1236 = new TStruct("subscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1236, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1237 = new StringBuilder("subscribeEventTypes_result(");
          tmp1237.Append(')');
          return tmp1237.ToString();
        }
      }


      public partial class unsubscribeEventTypes_args : TBase
      {
        private long _p;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool types;
        }

        public unsubscribeEventTypes_args()
        {
        }

        public unsubscribeEventTypes_args DeepCopy()
        {
          var tmp1239 = new unsubscribeEventTypes_args();
          if(__isset.p)
          {
            tmp1239.P = this.P;
          }
          tmp1239.__isset.p = this.__isset.p;
          if((Types != null) && __isset.types)
          {
            tmp1239.Types = this.Types.DeepCopy();
          }
          tmp1239.__isset.types = this.__isset.types;
          return tmp1239;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1240 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1240.Count);
                      for(int _i1241 = 0; _i1241 < _set1240.Count; ++_i1241)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1242;
                        _elem1242 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1242);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1243 = new TStruct("unsubscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1243, cancellationToken);
            var tmp1244 = new TField();
            if(__isset.p)
            {
              tmp1244.Name = "p";
              tmp1244.Type = TType.I64;
              tmp1244.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1244, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1244.Name = "types";
              tmp1244.Type = TType.Set;
              tmp1244.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1244, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1245 in Types)
              {
                await oprot.WriteI32Async((int)_iter1245, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1246 = new StringBuilder("unsubscribeEventTypes_args(");
          int tmp1247 = 0;
          if(__isset.p)
          {
            if(0 < tmp1247++) { tmp1246.Append(", "); }
            tmp1246.Append("P: ");
            P.ToString(tmp1246);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1247++) { tmp1246.Append(", "); }
            tmp1246.Append("Types: ");
            Types.ToString(tmp1246);
          }
          tmp1246.Append(')');
          return tmp1246.ToString();
        }
      }


      public partial class unsubscribeEventTypes_result : TBase
      {

        public unsubscribeEventTypes_result()
        {
        }

        public unsubscribeEventTypes_result DeepCopy()
        {
          var tmp1248 = new unsubscribeEventTypes_result();
          return tmp1248;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1249 = new TStruct("unsubscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1249, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1250 = new StringBuilder("unsubscribeEventTypes_result(");
          tmp1250.Append(')');
          return tmp1250.ToString();
        }
      }


      public partial class subscribeItemEventTypes_args : TBase
      {
        private long _p;
        private HashSet<string> _itemIDs;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<string> ItemIDs
        {
          get
          {
            return _itemIDs;
          }
          set
          {
            __isset.itemIDs = true;
            this._itemIDs = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemIDs;
          public bool types;
        }

        public subscribeItemEventTypes_args()
        {
        }

        public subscribeItemEventTypes_args DeepCopy()
        {
          var tmp1252 = new subscribeItemEventTypes_args();
          if(__isset.p)
          {
            tmp1252.P = this.P;
          }
          tmp1252.__isset.p = this.__isset.p;
          if((ItemIDs != null) && __isset.itemIDs)
          {
            tmp1252.ItemIDs = this.ItemIDs.DeepCopy();
          }
          tmp1252.__isset.itemIDs = this.__isset.itemIDs;
          if((Types != null) && __isset.types)
          {
            tmp1252.Types = this.Types.DeepCopy();
          }
          tmp1252.__isset.types = this.__isset.types;
          return tmp1252;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1253 = await iprot.ReadSetBeginAsync(cancellationToken);
                      ItemIDs = new HashSet<string>(_set1253.Count);
                      for(int _i1254 = 0; _i1254 < _set1253.Count; ++_i1254)
                      {
                        string _elem1255;
                        _elem1255 = await iprot.ReadStringAsync(cancellationToken);
                        ItemIDs.Add(_elem1255);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1256 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1256.Count);
                      for(int _i1257 = 0; _i1257 < _set1256.Count; ++_i1257)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1258;
                        _elem1258 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1258);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1259 = new TStruct("subscribeItemEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1259, cancellationToken);
            var tmp1260 = new TField();
            if(__isset.p)
            {
              tmp1260.Name = "p";
              tmp1260.Type = TType.I64;
              tmp1260.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1260, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              tmp1260.Name = "itemIDs";
              tmp1260.Type = TType.Set;
              tmp1260.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1260, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, ItemIDs.Count), cancellationToken);
              foreach (string _iter1261 in ItemIDs)
              {
                await oprot.WriteStringAsync(_iter1261, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1260.Name = "types";
              tmp1260.Type = TType.Set;
              tmp1260.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1260, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1262 in Types)
              {
                await oprot.WriteI32Async((int)_iter1262, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeItemEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemIDs == other.__isset.itemIDs) && ((!__isset.itemIDs) || (TCollections.Equals(ItemIDs, other.ItemIDs))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(ItemIDs);
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1263 = new StringBuilder("subscribeItemEventTypes_args(");
          int tmp1264 = 0;
          if(__isset.p)
          {
            if(0 < tmp1264++) { tmp1263.Append(", "); }
            tmp1263.Append("P: ");
            P.ToString(tmp1263);
          }
          if((ItemIDs != null) && __isset.itemIDs)
          {
            if(0 < tmp1264++) { tmp1263.Append(", "); }
            tmp1263.Append("ItemIDs: ");
            ItemIDs.ToString(tmp1263);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1264++) { tmp1263.Append(", "); }
            tmp1263.Append("Types: ");
            Types.ToString(tmp1263);
          }
          tmp1263.Append(')');
          return tmp1263.ToString();
        }
      }


      public partial class subscribeItemEventTypes_result : TBase
      {

        public subscribeItemEventTypes_result()
        {
        }

        public subscribeItemEventTypes_result DeepCopy()
        {
          var tmp1265 = new subscribeItemEventTypes_result();
          return tmp1265;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1266 = new TStruct("subscribeItemEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1266, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeItemEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1267 = new StringBuilder("subscribeItemEventTypes_result(");
          tmp1267.Append(')');
          return tmp1267.ToString();
        }
      }


      public partial class unsubscribeItemEventTypes_args : TBase
      {
        private long _p;
        private HashSet<string> _itemIDs;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<string> ItemIDs
        {
          get
          {
            return _itemIDs;
          }
          set
          {
            __isset.itemIDs = true;
            this._itemIDs = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemIDs;
          public bool types;
        }

        public unsubscribeItemEventTypes_args()
        {
        }

        public unsubscribeItemEventTypes_args DeepCopy()
        {
          var tmp1269 = new unsubscribeItemEventTypes_args();
          if(__isset.p)
          {
            tmp1269.P = this.P;
          }
          tmp1269.__isset.p = this.__isset.p;
          if((ItemIDs != null) && __isset.itemIDs)
          {
            tmp1269.ItemIDs = this.ItemIDs.DeepCopy();
          }
          tmp1269.__isset.itemIDs = this.__isset.itemIDs;
          if((Types != null) && __isset.types)
          {
            tmp1269.Types = this.Types.DeepCopy();
          }
          tmp1269.__isset.types = this.__isset.types;
          return tmp1269;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1270 = await iprot.ReadSetBeginAsync(cancellationToken);
                      ItemIDs = new HashSet<string>(_set1270.Count);
                      for(int _i1271 = 0; _i1271 < _set1270.Count; ++_i1271)
                      {
                        string _elem1272;
                        _elem1272 = await iprot.ReadStringAsync(cancellationToken);
                        ItemIDs.Add(_elem1272);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1273 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1273.Count);
                      for(int _i1274 = 0; _i1274 < _set1273.Count; ++_i1274)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1275;
                        _elem1275 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1275);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1276 = new TStruct("unsubscribeItemEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1276, cancellationToken);
            var tmp1277 = new TField();
            if(__isset.p)
            {
              tmp1277.Name = "p";
              tmp1277.Type = TType.I64;
              tmp1277.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1277, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              tmp1277.Name = "itemIDs";
              tmp1277.Type = TType.Set;
              tmp1277.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1277, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, ItemIDs.Count), cancellationToken);
              foreach (string _iter1278 in ItemIDs)
              {
                await oprot.WriteStringAsync(_iter1278, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1277.Name = "types";
              tmp1277.Type = TType.Set;
              tmp1277.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1277, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1279 in Types)
              {
                await oprot.WriteI32Async((int)_iter1279, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeItemEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemIDs == other.__isset.itemIDs) && ((!__isset.itemIDs) || (TCollections.Equals(ItemIDs, other.ItemIDs))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(ItemIDs);
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1280 = new StringBuilder("unsubscribeItemEventTypes_args(");
          int tmp1281 = 0;
          if(__isset.p)
          {
            if(0 < tmp1281++) { tmp1280.Append(", "); }
            tmp1280.Append("P: ");
            P.ToString(tmp1280);
          }
          if((ItemIDs != null) && __isset.itemIDs)
          {
            if(0 < tmp1281++) { tmp1280.Append(", "); }
            tmp1280.Append("ItemIDs: ");
            ItemIDs.ToString(tmp1280);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1281++) { tmp1280.Append(", "); }
            tmp1280.Append("Types: ");
            Types.ToString(tmp1280);
          }
          tmp1280.Append(')');
          return tmp1280.ToString();
        }
      }


      public partial class unsubscribeItemEventTypes_result : TBase
      {

        public unsubscribeItemEventTypes_result()
        {
        }

        public unsubscribeItemEventTypes_result DeepCopy()
        {
          var tmp1282 = new unsubscribeItemEventTypes_result();
          return tmp1282;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1283 = new TStruct("unsubscribeItemEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1283, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeItemEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1284 = new StringBuilder("unsubscribeItemEventTypes_result(");
          tmp1284.Append(')');
          return tmp1284.ToString();
        }
      }


      public partial class events_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public events_args()
        {
        }

        public events_args DeepCopy()
        {
          var tmp1286 = new events_args();
          if(__isset.p)
          {
            tmp1286.P = this.P;
          }
          tmp1286.__isset.p = this.__isset.p;
          return tmp1286;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1287 = new TStruct("events_args");
            await oprot.WriteStructBeginAsync(tmp1287, cancellationToken);
            var tmp1288 = new TField();
            if(__isset.p)
            {
              tmp1288.Name = "p";
              tmp1288.Type = TType.I64;
              tmp1288.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1288, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1289 = new StringBuilder("events_args(");
          int tmp1290 = 0;
          if(__isset.p)
          {
            if(0 < tmp1290++) { tmp1289.Append(", "); }
            tmp1289.Append("P: ");
            P.ToString(tmp1289);
          }
          tmp1289.Append(')');
          return tmp1289.ToString();
        }
      }


      public partial class events_result : TBase
      {
        private List<global::Yaskawa.Ext.API.PendantEvent> _success;

        public List<global::Yaskawa.Ext.API.PendantEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public events_result()
        {
        }

        public events_result DeepCopy()
        {
          var tmp1291 = new events_result();
          if((Success != null) && __isset.success)
          {
            tmp1291.Success = this.Success.DeepCopy();
          }
          tmp1291.__isset.success = this.__isset.success;
          return tmp1291;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1292 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.PendantEvent>(_list1292.Count);
                      for(int _i1293 = 0; _i1293 < _list1292.Count; ++_i1293)
                      {
                        global::Yaskawa.Ext.API.PendantEvent _elem1294;
                        _elem1294 = new global::Yaskawa.Ext.API.PendantEvent();
                        await _elem1294.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1294);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1295 = new TStruct("events_result");
            await oprot.WriteStructBeginAsync(tmp1295, cancellationToken);
            var tmp1296 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1296.Name = "Success";
                tmp1296.Type = TType.List;
                tmp1296.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1296, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.PendantEvent _iter1297 in Success)
                {
                  await _iter1297.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1298 = new StringBuilder("events_result(");
          int tmp1299 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1299++) { tmp1298.Append(", "); }
            tmp1298.Append("Success: ");
            Success.ToString(tmp1298);
          }
          tmp1298.Append(')');
          return tmp1298.ToString();
        }
      }


      public partial class currentLanguage_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentLanguage_args()
        {
        }

        public currentLanguage_args DeepCopy()
        {
          var tmp1300 = new currentLanguage_args();
          if(__isset.p)
          {
            tmp1300.P = this.P;
          }
          tmp1300.__isset.p = this.__isset.p;
          return tmp1300;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1301 = new TStruct("currentLanguage_args");
            await oprot.WriteStructBeginAsync(tmp1301, cancellationToken);
            var tmp1302 = new TField();
            if(__isset.p)
            {
              tmp1302.Name = "p";
              tmp1302.Type = TType.I64;
              tmp1302.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1302, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLanguage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1303 = new StringBuilder("currentLanguage_args(");
          int tmp1304 = 0;
          if(__isset.p)
          {
            if(0 < tmp1304++) { tmp1303.Append(", "); }
            tmp1303.Append("P: ");
            P.ToString(tmp1303);
          }
          tmp1303.Append(')');
          return tmp1303.ToString();
        }
      }


      public partial class currentLanguage_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentLanguage_result()
        {
        }

        public currentLanguage_result DeepCopy()
        {
          var tmp1305 = new currentLanguage_result();
          if((Success != null) && __isset.success)
          {
            tmp1305.Success = this.Success;
          }
          tmp1305.__isset.success = this.__isset.success;
          return tmp1305;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1306 = new TStruct("currentLanguage_result");
            await oprot.WriteStructBeginAsync(tmp1306, cancellationToken);
            var tmp1307 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1307.Name = "Success";
                tmp1307.Type = TType.String;
                tmp1307.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1307, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLanguage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1308 = new StringBuilder("currentLanguage_result(");
          int tmp1309 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1309++) { tmp1308.Append(", "); }
            tmp1308.Append("Success: ");
            Success.ToString(tmp1308);
          }
          tmp1308.Append(')');
          return tmp1308.ToString();
        }
      }


      public partial class currentLocale_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentLocale_args()
        {
        }

        public currentLocale_args DeepCopy()
        {
          var tmp1310 = new currentLocale_args();
          if(__isset.p)
          {
            tmp1310.P = this.P;
          }
          tmp1310.__isset.p = this.__isset.p;
          return tmp1310;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1311 = new TStruct("currentLocale_args");
            await oprot.WriteStructBeginAsync(tmp1311, cancellationToken);
            var tmp1312 = new TField();
            if(__isset.p)
            {
              tmp1312.Name = "p";
              tmp1312.Type = TType.I64;
              tmp1312.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1312, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLocale_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1313 = new StringBuilder("currentLocale_args(");
          int tmp1314 = 0;
          if(__isset.p)
          {
            if(0 < tmp1314++) { tmp1313.Append(", "); }
            tmp1313.Append("P: ");
            P.ToString(tmp1313);
          }
          tmp1313.Append(')');
          return tmp1313.ToString();
        }
      }


      public partial class currentLocale_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentLocale_result()
        {
        }

        public currentLocale_result DeepCopy()
        {
          var tmp1315 = new currentLocale_result();
          if((Success != null) && __isset.success)
          {
            tmp1315.Success = this.Success;
          }
          tmp1315.__isset.success = this.__isset.success;
          return tmp1315;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1316 = new TStruct("currentLocale_result");
            await oprot.WriteStructBeginAsync(tmp1316, cancellationToken);
            var tmp1317 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1317.Name = "Success";
                tmp1317.Type = TType.String;
                tmp1317.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1317, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLocale_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1318 = new StringBuilder("currentLocale_result(");
          int tmp1319 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1319++) { tmp1318.Append(", "); }
            tmp1318.Append("Success: ");
            Success.ToString(tmp1318);
          }
          tmp1318.Append(')');
          return tmp1318.ToString();
        }
      }


      public partial class currentScreenName_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentScreenName_args()
        {
        }

        public currentScreenName_args DeepCopy()
        {
          var tmp1320 = new currentScreenName_args();
          if(__isset.p)
          {
            tmp1320.P = this.P;
          }
          tmp1320.__isset.p = this.__isset.p;
          return tmp1320;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1321 = new TStruct("currentScreenName_args");
            await oprot.WriteStructBeginAsync(tmp1321, cancellationToken);
            var tmp1322 = new TField();
            if(__isset.p)
            {
              tmp1322.Name = "p";
              tmp1322.Type = TType.I64;
              tmp1322.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1322, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentScreenName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1323 = new StringBuilder("currentScreenName_args(");
          int tmp1324 = 0;
          if(__isset.p)
          {
            if(0 < tmp1324++) { tmp1323.Append(", "); }
            tmp1323.Append("P: ");
            P.ToString(tmp1323);
          }
          tmp1323.Append(')');
          return tmp1323.ToString();
        }
      }


      public partial class currentScreenName_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentScreenName_result()
        {
        }

        public currentScreenName_result DeepCopy()
        {
          var tmp1325 = new currentScreenName_result();
          if((Success != null) && __isset.success)
          {
            tmp1325.Success = this.Success;
          }
          tmp1325.__isset.success = this.__isset.success;
          return tmp1325;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1326 = new TStruct("currentScreenName_result");
            await oprot.WriteStructBeginAsync(tmp1326, cancellationToken);
            var tmp1327 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1327.Name = "Success";
                tmp1327.Type = TType.String;
                tmp1327.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1327, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentScreenName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1328 = new StringBuilder("currentScreenName_result(");
          int tmp1329 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1329++) { tmp1328.Append(", "); }
            tmp1328.Append("Success: ");
            Success.ToString(tmp1328);
          }
          tmp1328.Append(')');
          return tmp1328.ToString();
        }
      }


      public partial class registerYML_args : TBase
      {
        private long _p;
        private string _ymlSource;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string YmlSource
        {
          get
          {
            return _ymlSource;
          }
          set
          {
            __isset.ymlSource = true;
            this._ymlSource = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ymlSource;
        }

        public registerYML_args()
        {
        }

        public registerYML_args DeepCopy()
        {
          var tmp1330 = new registerYML_args();
          if(__isset.p)
          {
            tmp1330.P = this.P;
          }
          tmp1330.__isset.p = this.__isset.p;
          if((YmlSource != null) && __isset.ymlSource)
          {
            tmp1330.YmlSource = this.YmlSource;
          }
          tmp1330.__isset.ymlSource = this.__isset.ymlSource;
          return tmp1330;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    YmlSource = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1331 = new TStruct("registerYML_args");
            await oprot.WriteStructBeginAsync(tmp1331, cancellationToken);
            var tmp1332 = new TField();
            if(__isset.p)
            {
              tmp1332.Name = "p";
              tmp1332.Type = TType.I64;
              tmp1332.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1332, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((YmlSource != null) && __isset.ymlSource)
            {
              tmp1332.Name = "ymlSource";
              tmp1332.Type = TType.String;
              tmp1332.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1332, cancellationToken);
              await oprot.WriteStringAsync(YmlSource, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerYML_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ymlSource == other.__isset.ymlSource) && ((!__isset.ymlSource) || (global::System.Object.Equals(YmlSource, other.YmlSource))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((YmlSource != null) && __isset.ymlSource)
            {
              hashcode = (hashcode * 397) + YmlSource.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1333 = new StringBuilder("registerYML_args(");
          int tmp1334 = 0;
          if(__isset.p)
          {
            if(0 < tmp1334++) { tmp1333.Append(", "); }
            tmp1333.Append("P: ");
            P.ToString(tmp1333);
          }
          if((YmlSource != null) && __isset.ymlSource)
          {
            if(0 < tmp1334++) { tmp1333.Append(", "); }
            tmp1333.Append("YmlSource: ");
            YmlSource.ToString(tmp1333);
          }
          tmp1333.Append(')');
          return tmp1333.ToString();
        }
      }


      public partial class registerYML_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public registerYML_result()
        {
        }

        public registerYML_result DeepCopy()
        {
          var tmp1335 = new registerYML_result();
          if((Success != null) && __isset.success)
          {
            tmp1335.Success = this.Success.DeepCopy();
          }
          tmp1335.__isset.success = this.__isset.success;
          return tmp1335;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1336 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list1336.Count);
                      for(int _i1337 = 0; _i1337 < _list1336.Count; ++_i1337)
                      {
                        string _elem1338;
                        _elem1338 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem1338);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1339 = new TStruct("registerYML_result");
            await oprot.WriteStructBeginAsync(tmp1339, cancellationToken);
            var tmp1340 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1340.Name = "Success";
                tmp1340.Type = TType.List;
                tmp1340.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1340, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter1341 in Success)
                {
                  await oprot.WriteStringAsync(_iter1341, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerYML_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1342 = new StringBuilder("registerYML_result(");
          int tmp1343 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1343++) { tmp1342.Append(", "); }
            tmp1342.Append("Success: ");
            Success.ToString(tmp1342);
          }
          tmp1342.Append(')');
          return tmp1342.ToString();
        }
      }


      public partial class registerImageFile_args : TBase
      {
        private long _p;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool imageFileName;
        }

        public registerImageFile_args()
        {
        }

        public registerImageFile_args DeepCopy()
        {
          var tmp1344 = new registerImageFile_args();
          if(__isset.p)
          {
            tmp1344.P = this.P;
          }
          tmp1344.__isset.p = this.__isset.p;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1344.ImageFileName = this.ImageFileName;
          }
          tmp1344.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1344;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1345 = new TStruct("registerImageFile_args");
            await oprot.WriteStructBeginAsync(tmp1345, cancellationToken);
            var tmp1346 = new TField();
            if(__isset.p)
            {
              tmp1346.Name = "p";
              tmp1346.Type = TType.I64;
              tmp1346.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1346, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1346.Name = "imageFileName";
              tmp1346.Type = TType.String;
              tmp1346.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1346, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1347 = new StringBuilder("registerImageFile_args(");
          int tmp1348 = 0;
          if(__isset.p)
          {
            if(0 < tmp1348++) { tmp1347.Append(", "); }
            tmp1347.Append("P: ");
            P.ToString(tmp1347);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1348++) { tmp1347.Append(", "); }
            tmp1347.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1347);
          }
          tmp1347.Append(')');
          return tmp1347.ToString();
        }
      }


      public partial class registerImageFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerImageFile_result()
        {
        }

        public registerImageFile_result DeepCopy()
        {
          var tmp1349 = new registerImageFile_result();
          if((E != null) && __isset.e)
          {
            tmp1349.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1349.__isset.e = this.__isset.e;
          return tmp1349;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1350 = new TStruct("registerImageFile_result");
            await oprot.WriteStructBeginAsync(tmp1350, cancellationToken);
            var tmp1351 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1351.Name = "E";
                tmp1351.Type = TType.Struct;
                tmp1351.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1351, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1352 = new StringBuilder("registerImageFile_result(");
          int tmp1353 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1353++) { tmp1352.Append(", "); }
            tmp1352.Append("E: ");
            E.ToString(tmp1352);
          }
          tmp1352.Append(')');
          return tmp1352.ToString();
        }
      }


      public partial class registerImageData_args : TBase
      {
        private long _p;
        private byte[] _imageData;
        private string _imageName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public byte[] ImageData
        {
          get
          {
            return _imageData;
          }
          set
          {
            __isset.imageData = true;
            this._imageData = value;
          }
        }

        public string ImageName
        {
          get
          {
            return _imageName;
          }
          set
          {
            __isset.imageName = true;
            this._imageName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool imageData;
          public bool imageName;
        }

        public registerImageData_args()
        {
        }

        public registerImageData_args DeepCopy()
        {
          var tmp1354 = new registerImageData_args();
          if(__isset.p)
          {
            tmp1354.P = this.P;
          }
          tmp1354.__isset.p = this.__isset.p;
          if((ImageData != null) && __isset.imageData)
          {
            tmp1354.ImageData = this.ImageData.ToArray();
          }
          tmp1354.__isset.imageData = this.__isset.imageData;
          if((ImageName != null) && __isset.imageName)
          {
            tmp1354.ImageName = this.ImageName;
          }
          tmp1354.__isset.imageName = this.__isset.imageName;
          return tmp1354;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ImageData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1355 = new TStruct("registerImageData_args");
            await oprot.WriteStructBeginAsync(tmp1355, cancellationToken);
            var tmp1356 = new TField();
            if(__isset.p)
            {
              tmp1356.Name = "p";
              tmp1356.Type = TType.I64;
              tmp1356.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1356, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageData != null) && __isset.imageData)
            {
              tmp1356.Name = "imageData";
              tmp1356.Type = TType.String;
              tmp1356.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1356, cancellationToken);
              await oprot.WriteBinaryAsync(ImageData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageName != null) && __isset.imageName)
            {
              tmp1356.Name = "imageName";
              tmp1356.Type = TType.String;
              tmp1356.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1356, cancellationToken);
              await oprot.WriteStringAsync(ImageName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.imageData == other.__isset.imageData) && ((!__isset.imageData) || (TCollections.Equals(ImageData, other.ImageData))))
            && ((__isset.imageName == other.__isset.imageName) && ((!__isset.imageName) || (global::System.Object.Equals(ImageName, other.ImageName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ImageData != null) && __isset.imageData)
            {
              hashcode = (hashcode * 397) + ImageData.GetHashCode();
            }
            if((ImageName != null) && __isset.imageName)
            {
              hashcode = (hashcode * 397) + ImageName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1357 = new StringBuilder("registerImageData_args(");
          int tmp1358 = 0;
          if(__isset.p)
          {
            if(0 < tmp1358++) { tmp1357.Append(", "); }
            tmp1357.Append("P: ");
            P.ToString(tmp1357);
          }
          if((ImageData != null) && __isset.imageData)
          {
            if(0 < tmp1358++) { tmp1357.Append(", "); }
            tmp1357.Append("ImageData: ");
            ImageData.ToString(tmp1357);
          }
          if((ImageName != null) && __isset.imageName)
          {
            if(0 < tmp1358++) { tmp1357.Append(", "); }
            tmp1357.Append("ImageName: ");
            ImageName.ToString(tmp1357);
          }
          tmp1357.Append(')');
          return tmp1357.ToString();
        }
      }


      public partial class registerImageData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerImageData_result()
        {
        }

        public registerImageData_result DeepCopy()
        {
          var tmp1359 = new registerImageData_result();
          if((E != null) && __isset.e)
          {
            tmp1359.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1359.__isset.e = this.__isset.e;
          return tmp1359;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1360 = new TStruct("registerImageData_result");
            await oprot.WriteStructBeginAsync(tmp1360, cancellationToken);
            var tmp1361 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1361.Name = "E";
                tmp1361.Type = TType.Struct;
                tmp1361.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1361, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1362 = new StringBuilder("registerImageData_result(");
          int tmp1363 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1363++) { tmp1362.Append(", "); }
            tmp1362.Append("E: ");
            E.ToString(tmp1362);
          }
          tmp1362.Append(')');
          return tmp1362.ToString();
        }
      }


      public partial class registerHTMLFile_args : TBase
      {
        private long _p;
        private string _htmlFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string HtmlFileName
        {
          get
          {
            return _htmlFileName;
          }
          set
          {
            __isset.htmlFileName = true;
            this._htmlFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool htmlFileName;
        }

        public registerHTMLFile_args()
        {
        }

        public registerHTMLFile_args DeepCopy()
        {
          var tmp1364 = new registerHTMLFile_args();
          if(__isset.p)
          {
            tmp1364.P = this.P;
          }
          tmp1364.__isset.p = this.__isset.p;
          if((HtmlFileName != null) && __isset.htmlFileName)
          {
            tmp1364.HtmlFileName = this.HtmlFileName;
          }
          tmp1364.__isset.htmlFileName = this.__isset.htmlFileName;
          return tmp1364;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HtmlFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1365 = new TStruct("registerHTMLFile_args");
            await oprot.WriteStructBeginAsync(tmp1365, cancellationToken);
            var tmp1366 = new TField();
            if(__isset.p)
            {
              tmp1366.Name = "p";
              tmp1366.Type = TType.I64;
              tmp1366.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1366, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlFileName != null) && __isset.htmlFileName)
            {
              tmp1366.Name = "htmlFileName";
              tmp1366.Type = TType.String;
              tmp1366.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1366, cancellationToken);
              await oprot.WriteStringAsync(HtmlFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.htmlFileName == other.__isset.htmlFileName) && ((!__isset.htmlFileName) || (global::System.Object.Equals(HtmlFileName, other.HtmlFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((HtmlFileName != null) && __isset.htmlFileName)
            {
              hashcode = (hashcode * 397) + HtmlFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1367 = new StringBuilder("registerHTMLFile_args(");
          int tmp1368 = 0;
          if(__isset.p)
          {
            if(0 < tmp1368++) { tmp1367.Append(", "); }
            tmp1367.Append("P: ");
            P.ToString(tmp1367);
          }
          if((HtmlFileName != null) && __isset.htmlFileName)
          {
            if(0 < tmp1368++) { tmp1367.Append(", "); }
            tmp1367.Append("HtmlFileName: ");
            HtmlFileName.ToString(tmp1367);
          }
          tmp1367.Append(')');
          return tmp1367.ToString();
        }
      }


      public partial class registerHTMLFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerHTMLFile_result()
        {
        }

        public registerHTMLFile_result DeepCopy()
        {
          var tmp1369 = new registerHTMLFile_result();
          if((E != null) && __isset.e)
          {
            tmp1369.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1369.__isset.e = this.__isset.e;
          return tmp1369;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1370 = new TStruct("registerHTMLFile_result");
            await oprot.WriteStructBeginAsync(tmp1370, cancellationToken);
            var tmp1371 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1371.Name = "E";
                tmp1371.Type = TType.Struct;
                tmp1371.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1371, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1372 = new StringBuilder("registerHTMLFile_result(");
          int tmp1373 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1373++) { tmp1372.Append(", "); }
            tmp1372.Append("E: ");
            E.ToString(tmp1372);
          }
          tmp1372.Append(')');
          return tmp1372.ToString();
        }
      }


      public partial class registerHTMLData_args : TBase
      {
        private long _p;
        private byte[] _htmlData;
        private string _htmlName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public byte[] HtmlData
        {
          get
          {
            return _htmlData;
          }
          set
          {
            __isset.htmlData = true;
            this._htmlData = value;
          }
        }

        public string HtmlName
        {
          get
          {
            return _htmlName;
          }
          set
          {
            __isset.htmlName = true;
            this._htmlName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool htmlData;
          public bool htmlName;
        }

        public registerHTMLData_args()
        {
        }

        public registerHTMLData_args DeepCopy()
        {
          var tmp1374 = new registerHTMLData_args();
          if(__isset.p)
          {
            tmp1374.P = this.P;
          }
          tmp1374.__isset.p = this.__isset.p;
          if((HtmlData != null) && __isset.htmlData)
          {
            tmp1374.HtmlData = this.HtmlData.ToArray();
          }
          tmp1374.__isset.htmlData = this.__isset.htmlData;
          if((HtmlName != null) && __isset.htmlName)
          {
            tmp1374.HtmlName = this.HtmlName;
          }
          tmp1374.__isset.htmlName = this.__isset.htmlName;
          return tmp1374;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HtmlData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    HtmlName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1375 = new TStruct("registerHTMLData_args");
            await oprot.WriteStructBeginAsync(tmp1375, cancellationToken);
            var tmp1376 = new TField();
            if(__isset.p)
            {
              tmp1376.Name = "p";
              tmp1376.Type = TType.I64;
              tmp1376.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1376, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlData != null) && __isset.htmlData)
            {
              tmp1376.Name = "htmlData";
              tmp1376.Type = TType.String;
              tmp1376.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1376, cancellationToken);
              await oprot.WriteBinaryAsync(HtmlData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlName != null) && __isset.htmlName)
            {
              tmp1376.Name = "htmlName";
              tmp1376.Type = TType.String;
              tmp1376.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1376, cancellationToken);
              await oprot.WriteStringAsync(HtmlName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.htmlData == other.__isset.htmlData) && ((!__isset.htmlData) || (TCollections.Equals(HtmlData, other.HtmlData))))
            && ((__isset.htmlName == other.__isset.htmlName) && ((!__isset.htmlName) || (global::System.Object.Equals(HtmlName, other.HtmlName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((HtmlData != null) && __isset.htmlData)
            {
              hashcode = (hashcode * 397) + HtmlData.GetHashCode();
            }
            if((HtmlName != null) && __isset.htmlName)
            {
              hashcode = (hashcode * 397) + HtmlName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1377 = new StringBuilder("registerHTMLData_args(");
          int tmp1378 = 0;
          if(__isset.p)
          {
            if(0 < tmp1378++) { tmp1377.Append(", "); }
            tmp1377.Append("P: ");
            P.ToString(tmp1377);
          }
          if((HtmlData != null) && __isset.htmlData)
          {
            if(0 < tmp1378++) { tmp1377.Append(", "); }
            tmp1377.Append("HtmlData: ");
            HtmlData.ToString(tmp1377);
          }
          if((HtmlName != null) && __isset.htmlName)
          {
            if(0 < tmp1378++) { tmp1377.Append(", "); }
            tmp1377.Append("HtmlName: ");
            HtmlName.ToString(tmp1377);
          }
          tmp1377.Append(')');
          return tmp1377.ToString();
        }
      }


      public partial class registerHTMLData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerHTMLData_result()
        {
        }

        public registerHTMLData_result DeepCopy()
        {
          var tmp1379 = new registerHTMLData_result();
          if((E != null) && __isset.e)
          {
            tmp1379.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1379.__isset.e = this.__isset.e;
          return tmp1379;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1380 = new TStruct("registerHTMLData_result");
            await oprot.WriteStructBeginAsync(tmp1380, cancellationToken);
            var tmp1381 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1381.Name = "E";
                tmp1381.Type = TType.Struct;
                tmp1381.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1381, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1382 = new StringBuilder("registerHTMLData_result(");
          int tmp1383 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1383++) { tmp1382.Append(", "); }
            tmp1382.Append("E: ");
            E.ToString(tmp1382);
          }
          tmp1382.Append(')');
          return tmp1382.ToString();
        }
      }


      public partial class registerTranslationFile_args : TBase
      {
        private long _p;
        private string _locale;
        private string _translationFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }

        public string TranslationFileName
        {
          get
          {
            return _translationFileName;
          }
          set
          {
            __isset.translationFileName = true;
            this._translationFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool locale;
          public bool translationFileName;
        }

        public registerTranslationFile_args()
        {
        }

        public registerTranslationFile_args DeepCopy()
        {
          var tmp1384 = new registerTranslationFile_args();
          if(__isset.p)
          {
            tmp1384.P = this.P;
          }
          tmp1384.__isset.p = this.__isset.p;
          if((Locale != null) && __isset.locale)
          {
            tmp1384.Locale = this.Locale;
          }
          tmp1384.__isset.locale = this.__isset.locale;
          if((TranslationFileName != null) && __isset.translationFileName)
          {
            tmp1384.TranslationFileName = this.TranslationFileName;
          }
          tmp1384.__isset.translationFileName = this.__isset.translationFileName;
          return tmp1384;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    TranslationFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1385 = new TStruct("registerTranslationFile_args");
            await oprot.WriteStructBeginAsync(tmp1385, cancellationToken);
            var tmp1386 = new TField();
            if(__isset.p)
            {
              tmp1386.Name = "p";
              tmp1386.Type = TType.I64;
              tmp1386.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1386, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Locale != null) && __isset.locale)
            {
              tmp1386.Name = "locale";
              tmp1386.Type = TType.String;
              tmp1386.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1386, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationFileName != null) && __isset.translationFileName)
            {
              tmp1386.Name = "translationFileName";
              tmp1386.Type = TType.String;
              tmp1386.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1386, cancellationToken);
              await oprot.WriteStringAsync(TranslationFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))))
            && ((__isset.translationFileName == other.__isset.translationFileName) && ((!__isset.translationFileName) || (global::System.Object.Equals(TranslationFileName, other.TranslationFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
            if((TranslationFileName != null) && __isset.translationFileName)
            {
              hashcode = (hashcode * 397) + TranslationFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1387 = new StringBuilder("registerTranslationFile_args(");
          int tmp1388 = 0;
          if(__isset.p)
          {
            if(0 < tmp1388++) { tmp1387.Append(", "); }
            tmp1387.Append("P: ");
            P.ToString(tmp1387);
          }
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp1388++) { tmp1387.Append(", "); }
            tmp1387.Append("Locale: ");
            Locale.ToString(tmp1387);
          }
          if((TranslationFileName != null) && __isset.translationFileName)
          {
            if(0 < tmp1388++) { tmp1387.Append(", "); }
            tmp1387.Append("TranslationFileName: ");
            TranslationFileName.ToString(tmp1387);
          }
          tmp1387.Append(')');
          return tmp1387.ToString();
        }
      }


      public partial class registerTranslationFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerTranslationFile_result()
        {
        }

        public registerTranslationFile_result DeepCopy()
        {
          var tmp1389 = new registerTranslationFile_result();
          if((E != null) && __isset.e)
          {
            tmp1389.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1389.__isset.e = this.__isset.e;
          return tmp1389;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1390 = new TStruct("registerTranslationFile_result");
            await oprot.WriteStructBeginAsync(tmp1390, cancellationToken);
            var tmp1391 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1391.Name = "E";
                tmp1391.Type = TType.Struct;
                tmp1391.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1391, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1392 = new StringBuilder("registerTranslationFile_result(");
          int tmp1393 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1393++) { tmp1392.Append(", "); }
            tmp1392.Append("E: ");
            E.ToString(tmp1392);
          }
          tmp1392.Append(')');
          return tmp1392.ToString();
        }
      }


      public partial class registerTranslationData_args : TBase
      {
        private long _p;
        private string _locale;
        private byte[] _translationData;
        private string _translationName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }

        public byte[] TranslationData
        {
          get
          {
            return _translationData;
          }
          set
          {
            __isset.translationData = true;
            this._translationData = value;
          }
        }

        public string TranslationName
        {
          get
          {
            return _translationName;
          }
          set
          {
            __isset.translationName = true;
            this._translationName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool locale;
          public bool translationData;
          public bool translationName;
        }

        public registerTranslationData_args()
        {
        }

        public registerTranslationData_args DeepCopy()
        {
          var tmp1394 = new registerTranslationData_args();
          if(__isset.p)
          {
            tmp1394.P = this.P;
          }
          tmp1394.__isset.p = this.__isset.p;
          if((Locale != null) && __isset.locale)
          {
            tmp1394.Locale = this.Locale;
          }
          tmp1394.__isset.locale = this.__isset.locale;
          if((TranslationData != null) && __isset.translationData)
          {
            tmp1394.TranslationData = this.TranslationData.ToArray();
          }
          tmp1394.__isset.translationData = this.__isset.translationData;
          if((TranslationName != null) && __isset.translationName)
          {
            tmp1394.TranslationName = this.TranslationName;
          }
          tmp1394.__isset.translationName = this.__isset.translationName;
          return tmp1394;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    TranslationData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    TranslationName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1395 = new TStruct("registerTranslationData_args");
            await oprot.WriteStructBeginAsync(tmp1395, cancellationToken);
            var tmp1396 = new TField();
            if(__isset.p)
            {
              tmp1396.Name = "p";
              tmp1396.Type = TType.I64;
              tmp1396.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1396, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Locale != null) && __isset.locale)
            {
              tmp1396.Name = "locale";
              tmp1396.Type = TType.String;
              tmp1396.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1396, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationData != null) && __isset.translationData)
            {
              tmp1396.Name = "translationData";
              tmp1396.Type = TType.String;
              tmp1396.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1396, cancellationToken);
              await oprot.WriteBinaryAsync(TranslationData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationName != null) && __isset.translationName)
            {
              tmp1396.Name = "translationName";
              tmp1396.Type = TType.String;
              tmp1396.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1396, cancellationToken);
              await oprot.WriteStringAsync(TranslationName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))))
            && ((__isset.translationData == other.__isset.translationData) && ((!__isset.translationData) || (TCollections.Equals(TranslationData, other.TranslationData))))
            && ((__isset.translationName == other.__isset.translationName) && ((!__isset.translationName) || (global::System.Object.Equals(TranslationName, other.TranslationName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
            if((TranslationData != null) && __isset.translationData)
            {
              hashcode = (hashcode * 397) + TranslationData.GetHashCode();
            }
            if((TranslationName != null) && __isset.translationName)
            {
              hashcode = (hashcode * 397) + TranslationName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1397 = new StringBuilder("registerTranslationData_args(");
          int tmp1398 = 0;
          if(__isset.p)
          {
            if(0 < tmp1398++) { tmp1397.Append(", "); }
            tmp1397.Append("P: ");
            P.ToString(tmp1397);
          }
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp1398++) { tmp1397.Append(", "); }
            tmp1397.Append("Locale: ");
            Locale.ToString(tmp1397);
          }
          if((TranslationData != null) && __isset.translationData)
          {
            if(0 < tmp1398++) { tmp1397.Append(", "); }
            tmp1397.Append("TranslationData: ");
            TranslationData.ToString(tmp1397);
          }
          if((TranslationName != null) && __isset.translationName)
          {
            if(0 < tmp1398++) { tmp1397.Append(", "); }
            tmp1397.Append("TranslationName: ");
            TranslationName.ToString(tmp1397);
          }
          tmp1397.Append(')');
          return tmp1397.ToString();
        }
      }


      public partial class registerTranslationData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerTranslationData_result()
        {
        }

        public registerTranslationData_result DeepCopy()
        {
          var tmp1399 = new registerTranslationData_result();
          if((E != null) && __isset.e)
          {
            tmp1399.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1399.__isset.e = this.__isset.e;
          return tmp1399;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1400 = new TStruct("registerTranslationData_result");
            await oprot.WriteStructBeginAsync(tmp1400, cancellationToken);
            var tmp1401 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1401.Name = "E";
                tmp1401.Type = TType.Struct;
                tmp1401.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1401, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1402 = new StringBuilder("registerTranslationData_result(");
          int tmp1403 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1403++) { tmp1402.Append(", "); }
            tmp1402.Append("E: ");
            E.ToString(tmp1402);
          }
          tmp1402.Append(')');
          return tmp1402.ToString();
        }
      }


      public partial class registerUtilityMenu_args : TBase
      {
        private long _p;
        private string _menuName;
        private string _menuText;
        private string _menuIcon;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string MenuName
        {
          get
          {
            return _menuName;
          }
          set
          {
            __isset.menuName = true;
            this._menuName = value;
          }
        }

        public string MenuText
        {
          get
          {
            return _menuText;
          }
          set
          {
            __isset.menuText = true;
            this._menuText = value;
          }
        }

        public string MenuIcon
        {
          get
          {
            return _menuIcon;
          }
          set
          {
            __isset.menuIcon = true;
            this._menuIcon = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool menuName;
          public bool menuText;
          public bool menuIcon;
        }

        public registerUtilityMenu_args()
        {
        }

        public registerUtilityMenu_args DeepCopy()
        {
          var tmp1404 = new registerUtilityMenu_args();
          if(__isset.p)
          {
            tmp1404.P = this.P;
          }
          tmp1404.__isset.p = this.__isset.p;
          if((MenuName != null) && __isset.menuName)
          {
            tmp1404.MenuName = this.MenuName;
          }
          tmp1404.__isset.menuName = this.__isset.menuName;
          if((MenuText != null) && __isset.menuText)
          {
            tmp1404.MenuText = this.MenuText;
          }
          tmp1404.__isset.menuText = this.__isset.menuText;
          if((MenuIcon != null) && __isset.menuIcon)
          {
            tmp1404.MenuIcon = this.MenuIcon;
          }
          tmp1404.__isset.menuIcon = this.__isset.menuIcon;
          return tmp1404;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MenuName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    MenuText = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuIcon = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1405 = new TStruct("registerUtilityMenu_args");
            await oprot.WriteStructBeginAsync(tmp1405, cancellationToken);
            var tmp1406 = new TField();
            if(__isset.p)
            {
              tmp1406.Name = "p";
              tmp1406.Type = TType.I64;
              tmp1406.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1406, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuName != null) && __isset.menuName)
            {
              tmp1406.Name = "menuName";
              tmp1406.Type = TType.String;
              tmp1406.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1406, cancellationToken);
              await oprot.WriteStringAsync(MenuName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuText != null) && __isset.menuText)
            {
              tmp1406.Name = "menuText";
              tmp1406.Type = TType.String;
              tmp1406.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1406, cancellationToken);
              await oprot.WriteStringAsync(MenuText, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuIcon != null) && __isset.menuIcon)
            {
              tmp1406.Name = "menuIcon";
              tmp1406.Type = TType.String;
              tmp1406.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1406, cancellationToken);
              await oprot.WriteStringAsync(MenuIcon, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityMenu_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.menuName == other.__isset.menuName) && ((!__isset.menuName) || (global::System.Object.Equals(MenuName, other.MenuName))))
            && ((__isset.menuText == other.__isset.menuText) && ((!__isset.menuText) || (global::System.Object.Equals(MenuText, other.MenuText))))
            && ((__isset.menuIcon == other.__isset.menuIcon) && ((!__isset.menuIcon) || (global::System.Object.Equals(MenuIcon, other.MenuIcon))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((MenuName != null) && __isset.menuName)
            {
              hashcode = (hashcode * 397) + MenuName.GetHashCode();
            }
            if((MenuText != null) && __isset.menuText)
            {
              hashcode = (hashcode * 397) + MenuText.GetHashCode();
            }
            if((MenuIcon != null) && __isset.menuIcon)
            {
              hashcode = (hashcode * 397) + MenuIcon.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1407 = new StringBuilder("registerUtilityMenu_args(");
          int tmp1408 = 0;
          if(__isset.p)
          {
            if(0 < tmp1408++) { tmp1407.Append(", "); }
            tmp1407.Append("P: ");
            P.ToString(tmp1407);
          }
          if((MenuName != null) && __isset.menuName)
          {
            if(0 < tmp1408++) { tmp1407.Append(", "); }
            tmp1407.Append("MenuName: ");
            MenuName.ToString(tmp1407);
          }
          if((MenuText != null) && __isset.menuText)
          {
            if(0 < tmp1408++) { tmp1407.Append(", "); }
            tmp1407.Append("MenuText: ");
            MenuText.ToString(tmp1407);
          }
          if((MenuIcon != null) && __isset.menuIcon)
          {
            if(0 < tmp1408++) { tmp1407.Append(", "); }
            tmp1407.Append("MenuIcon: ");
            MenuIcon.ToString(tmp1407);
          }
          tmp1407.Append(')');
          return tmp1407.ToString();
        }
      }


      public partial class registerUtilityMenu_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityMenu_result()
        {
        }

        public registerUtilityMenu_result DeepCopy()
        {
          var tmp1409 = new registerUtilityMenu_result();
          if((E != null) && __isset.e)
          {
            tmp1409.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1409.__isset.e = this.__isset.e;
          return tmp1409;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1410 = new TStruct("registerUtilityMenu_result");
            await oprot.WriteStructBeginAsync(tmp1410, cancellationToken);
            var tmp1411 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1411.Name = "E";
                tmp1411.Type = TType.Struct;
                tmp1411.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1411, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityMenu_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1412 = new StringBuilder("registerUtilityMenu_result(");
          int tmp1413 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1413++) { tmp1412.Append(", "); }
            tmp1412.Append("E: ");
            E.ToString(tmp1412);
          }
          tmp1412.Append(')');
          return tmp1412.ToString();
        }
      }


      public partial class unregisterUtilityMenu_args : TBase
      {
        private long _p;
        private string _menuName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string MenuName
        {
          get
          {
            return _menuName;
          }
          set
          {
            __isset.menuName = true;
            this._menuName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool menuName;
        }

        public unregisterUtilityMenu_args()
        {
        }

        public unregisterUtilityMenu_args DeepCopy()
        {
          var tmp1414 = new unregisterUtilityMenu_args();
          if(__isset.p)
          {
            tmp1414.P = this.P;
          }
          tmp1414.__isset.p = this.__isset.p;
          if((MenuName != null) && __isset.menuName)
          {
            tmp1414.MenuName = this.MenuName;
          }
          tmp1414.__isset.menuName = this.__isset.menuName;
          return tmp1414;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MenuName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1415 = new TStruct("unregisterUtilityMenu_args");
            await oprot.WriteStructBeginAsync(tmp1415, cancellationToken);
            var tmp1416 = new TField();
            if(__isset.p)
            {
              tmp1416.Name = "p";
              tmp1416.Type = TType.I64;
              tmp1416.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1416, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuName != null) && __isset.menuName)
            {
              tmp1416.Name = "menuName";
              tmp1416.Type = TType.String;
              tmp1416.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1416, cancellationToken);
              await oprot.WriteStringAsync(MenuName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityMenu_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.menuName == other.__isset.menuName) && ((!__isset.menuName) || (global::System.Object.Equals(MenuName, other.MenuName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((MenuName != null) && __isset.menuName)
            {
              hashcode = (hashcode * 397) + MenuName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1417 = new StringBuilder("unregisterUtilityMenu_args(");
          int tmp1418 = 0;
          if(__isset.p)
          {
            if(0 < tmp1418++) { tmp1417.Append(", "); }
            tmp1417.Append("P: ");
            P.ToString(tmp1417);
          }
          if((MenuName != null) && __isset.menuName)
          {
            if(0 < tmp1418++) { tmp1417.Append(", "); }
            tmp1417.Append("MenuName: ");
            MenuName.ToString(tmp1417);
          }
          tmp1417.Append(')');
          return tmp1417.ToString();
        }
      }


      public partial class unregisterUtilityMenu_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterUtilityMenu_result()
        {
        }

        public unregisterUtilityMenu_result DeepCopy()
        {
          var tmp1419 = new unregisterUtilityMenu_result();
          if((E != null) && __isset.e)
          {
            tmp1419.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1419.__isset.e = this.__isset.e;
          return tmp1419;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1420 = new TStruct("unregisterUtilityMenu_result");
            await oprot.WriteStructBeginAsync(tmp1420, cancellationToken);
            var tmp1421 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1421.Name = "E";
                tmp1421.Type = TType.Struct;
                tmp1421.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1421, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityMenu_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1422 = new StringBuilder("unregisterUtilityMenu_result(");
          int tmp1423 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1423++) { tmp1422.Append(", "); }
            tmp1422.Append("E: ");
            E.ToString(tmp1422);
          }
          tmp1422.Append(')');
          return tmp1422.ToString();
        }
      }


      public partial class registerUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _itemType;
        private string _menuItemName;
        private string _windowTitle;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string MenuItemName
        {
          get
          {
            return _menuItemName;
          }
          set
          {
            __isset.menuItemName = true;
            this._menuItemName = value;
          }
        }

        public string WindowTitle
        {
          get
          {
            return _windowTitle;
          }
          set
          {
            __isset.windowTitle = true;
            this._windowTitle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool itemType;
          public bool menuItemName;
          public bool windowTitle;
        }

        public registerUtilityWindow_args()
        {
        }

        public registerUtilityWindow_args DeepCopy()
        {
          var tmp1424 = new registerUtilityWindow_args();
          if(__isset.p)
          {
            tmp1424.P = this.P;
          }
          tmp1424.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1424.Identifier = this.Identifier;
          }
          tmp1424.__isset.identifier = this.__isset.identifier;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1424.ItemType = this.ItemType;
          }
          tmp1424.__isset.itemType = this.__isset.itemType;
          if((MenuItemName != null) && __isset.menuItemName)
          {
            tmp1424.MenuItemName = this.MenuItemName;
          }
          tmp1424.__isset.menuItemName = this.__isset.menuItemName;
          if((WindowTitle != null) && __isset.windowTitle)
          {
            tmp1424.WindowTitle = this.WindowTitle;
          }
          tmp1424.__isset.windowTitle = this.__isset.windowTitle;
          return tmp1424;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuItemName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    WindowTitle = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1425 = new TStruct("registerUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1425, cancellationToken);
            var tmp1426 = new TField();
            if(__isset.p)
            {
              tmp1426.Name = "p";
              tmp1426.Type = TType.I64;
              tmp1426.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1426, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1426.Name = "identifier";
              tmp1426.Type = TType.String;
              tmp1426.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1426, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1426.Name = "itemType";
              tmp1426.Type = TType.String;
              tmp1426.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1426, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              tmp1426.Name = "menuItemName";
              tmp1426.Type = TType.String;
              tmp1426.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1426, cancellationToken);
              await oprot.WriteStringAsync(MenuItemName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              tmp1426.Name = "windowTitle";
              tmp1426.Type = TType.String;
              tmp1426.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1426, cancellationToken);
              await oprot.WriteStringAsync(WindowTitle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.menuItemName == other.__isset.menuItemName) && ((!__isset.menuItemName) || (global::System.Object.Equals(MenuItemName, other.MenuItemName))))
            && ((__isset.windowTitle == other.__isset.windowTitle) && ((!__isset.windowTitle) || (global::System.Object.Equals(WindowTitle, other.WindowTitle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              hashcode = (hashcode * 397) + MenuItemName.GetHashCode();
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              hashcode = (hashcode * 397) + WindowTitle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1427 = new StringBuilder("registerUtilityWindow_args(");
          int tmp1428 = 0;
          if(__isset.p)
          {
            if(0 < tmp1428++) { tmp1427.Append(", "); }
            tmp1427.Append("P: ");
            P.ToString(tmp1427);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1428++) { tmp1427.Append(", "); }
            tmp1427.Append("Identifier: ");
            Identifier.ToString(tmp1427);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1428++) { tmp1427.Append(", "); }
            tmp1427.Append("ItemType: ");
            ItemType.ToString(tmp1427);
          }
          if((MenuItemName != null) && __isset.menuItemName)
          {
            if(0 < tmp1428++) { tmp1427.Append(", "); }
            tmp1427.Append("MenuItemName: ");
            MenuItemName.ToString(tmp1427);
          }
          if((WindowTitle != null) && __isset.windowTitle)
          {
            if(0 < tmp1428++) { tmp1427.Append(", "); }
            tmp1427.Append("WindowTitle: ");
            WindowTitle.ToString(tmp1427);
          }
          tmp1427.Append(')');
          return tmp1427.ToString();
        }
      }


      public partial class registerUtilityWindow_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityWindow_result()
        {
        }

        public registerUtilityWindow_result DeepCopy()
        {
          var tmp1429 = new registerUtilityWindow_result();
          if((E != null) && __isset.e)
          {
            tmp1429.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1429.__isset.e = this.__isset.e;
          return tmp1429;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1430 = new TStruct("registerUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1430, cancellationToken);
            var tmp1431 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1431.Name = "E";
                tmp1431.Type = TType.Struct;
                tmp1431.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1431, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1432 = new StringBuilder("registerUtilityWindow_result(");
          int tmp1433 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1433++) { tmp1432.Append(", "); }
            tmp1432.Append("E: ");
            E.ToString(tmp1432);
          }
          tmp1432.Append(')');
          return tmp1432.ToString();
        }
      }


      public partial class registerUtilityWindowWithMenu_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _itemType;
        private string _menuItemName;
        private string _windowTitle;
        private string _menuName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string MenuItemName
        {
          get
          {
            return _menuItemName;
          }
          set
          {
            __isset.menuItemName = true;
            this._menuItemName = value;
          }
        }

        public string WindowTitle
        {
          get
          {
            return _windowTitle;
          }
          set
          {
            __isset.windowTitle = true;
            this._windowTitle = value;
          }
        }

        public string MenuName
        {
          get
          {
            return _menuName;
          }
          set
          {
            __isset.menuName = true;
            this._menuName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool itemType;
          public bool menuItemName;
          public bool windowTitle;
          public bool menuName;
        }

        public registerUtilityWindowWithMenu_args()
        {
        }

        public registerUtilityWindowWithMenu_args DeepCopy()
        {
          var tmp1434 = new registerUtilityWindowWithMenu_args();
          if(__isset.p)
          {
            tmp1434.P = this.P;
          }
          tmp1434.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1434.Identifier = this.Identifier;
          }
          tmp1434.__isset.identifier = this.__isset.identifier;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1434.ItemType = this.ItemType;
          }
          tmp1434.__isset.itemType = this.__isset.itemType;
          if((MenuItemName != null) && __isset.menuItemName)
          {
            tmp1434.MenuItemName = this.MenuItemName;
          }
          tmp1434.__isset.menuItemName = this.__isset.menuItemName;
          if((WindowTitle != null) && __isset.windowTitle)
          {
            tmp1434.WindowTitle = this.WindowTitle;
          }
          tmp1434.__isset.windowTitle = this.__isset.windowTitle;
          if((MenuName != null) && __isset.menuName)
          {
            tmp1434.MenuName = this.MenuName;
          }
          tmp1434.__isset.menuName = this.__isset.menuName;
          return tmp1434;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuItemName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    WindowTitle = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    MenuName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1435 = new TStruct("registerUtilityWindowWithMenu_args");
            await oprot.WriteStructBeginAsync(tmp1435, cancellationToken);
            var tmp1436 = new TField();
            if(__isset.p)
            {
              tmp1436.Name = "p";
              tmp1436.Type = TType.I64;
              tmp1436.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1436, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1436.Name = "identifier";
              tmp1436.Type = TType.String;
              tmp1436.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1436, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1436.Name = "itemType";
              tmp1436.Type = TType.String;
              tmp1436.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1436, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              tmp1436.Name = "menuItemName";
              tmp1436.Type = TType.String;
              tmp1436.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1436, cancellationToken);
              await oprot.WriteStringAsync(MenuItemName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              tmp1436.Name = "windowTitle";
              tmp1436.Type = TType.String;
              tmp1436.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1436, cancellationToken);
              await oprot.WriteStringAsync(WindowTitle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuName != null) && __isset.menuName)
            {
              tmp1436.Name = "menuName";
              tmp1436.Type = TType.String;
              tmp1436.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1436, cancellationToken);
              await oprot.WriteStringAsync(MenuName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindowWithMenu_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.menuItemName == other.__isset.menuItemName) && ((!__isset.menuItemName) || (global::System.Object.Equals(MenuItemName, other.MenuItemName))))
            && ((__isset.windowTitle == other.__isset.windowTitle) && ((!__isset.windowTitle) || (global::System.Object.Equals(WindowTitle, other.WindowTitle))))
            && ((__isset.menuName == other.__isset.menuName) && ((!__isset.menuName) || (global::System.Object.Equals(MenuName, other.MenuName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              hashcode = (hashcode * 397) + MenuItemName.GetHashCode();
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              hashcode = (hashcode * 397) + WindowTitle.GetHashCode();
            }
            if((MenuName != null) && __isset.menuName)
            {
              hashcode = (hashcode * 397) + MenuName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1437 = new StringBuilder("registerUtilityWindowWithMenu_args(");
          int tmp1438 = 0;
          if(__isset.p)
          {
            if(0 < tmp1438++) { tmp1437.Append(", "); }
            tmp1437.Append("P: ");
            P.ToString(tmp1437);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1438++) { tmp1437.Append(", "); }
            tmp1437.Append("Identifier: ");
            Identifier.ToString(tmp1437);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1438++) { tmp1437.Append(", "); }
            tmp1437.Append("ItemType: ");
            ItemType.ToString(tmp1437);
          }
          if((MenuItemName != null) && __isset.menuItemName)
          {
            if(0 < tmp1438++) { tmp1437.Append(", "); }
            tmp1437.Append("MenuItemName: ");
            MenuItemName.ToString(tmp1437);
          }
          if((WindowTitle != null) && __isset.windowTitle)
          {
            if(0 < tmp1438++) { tmp1437.Append(", "); }
            tmp1437.Append("WindowTitle: ");
            WindowTitle.ToString(tmp1437);
          }
          if((MenuName != null) && __isset.menuName)
          {
            if(0 < tmp1438++) { tmp1437.Append(", "); }
            tmp1437.Append("MenuName: ");
            MenuName.ToString(tmp1437);
          }
          tmp1437.Append(')');
          return tmp1437.ToString();
        }
      }


      public partial class registerUtilityWindowWithMenu_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityWindowWithMenu_result()
        {
        }

        public registerUtilityWindowWithMenu_result DeepCopy()
        {
          var tmp1439 = new registerUtilityWindowWithMenu_result();
          if((E != null) && __isset.e)
          {
            tmp1439.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1439.__isset.e = this.__isset.e;
          return tmp1439;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1440 = new TStruct("registerUtilityWindowWithMenu_result");
            await oprot.WriteStructBeginAsync(tmp1440, cancellationToken);
            var tmp1441 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1441.Name = "E";
                tmp1441.Type = TType.Struct;
                tmp1441.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1441, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindowWithMenu_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1442 = new StringBuilder("registerUtilityWindowWithMenu_result(");
          int tmp1443 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1443++) { tmp1442.Append(", "); }
            tmp1442.Append("E: ");
            E.ToString(tmp1442);
          }
          tmp1442.Append(')');
          return tmp1442.ToString();
        }
      }


      public partial class unregisterUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public unregisterUtilityWindow_args()
        {
        }

        public unregisterUtilityWindow_args DeepCopy()
        {
          var tmp1444 = new unregisterUtilityWindow_args();
          if(__isset.p)
          {
            tmp1444.P = this.P;
          }
          tmp1444.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1444.Identifier = this.Identifier;
          }
          tmp1444.__isset.identifier = this.__isset.identifier;
          return tmp1444;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1445 = new TStruct("unregisterUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1445, cancellationToken);
            var tmp1446 = new TField();
            if(__isset.p)
            {
              tmp1446.Name = "p";
              tmp1446.Type = TType.I64;
              tmp1446.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1446, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1446.Name = "identifier";
              tmp1446.Type = TType.String;
              tmp1446.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1446, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1447 = new StringBuilder("unregisterUtilityWindow_args(");
          int tmp1448 = 0;
          if(__isset.p)
          {
            if(0 < tmp1448++) { tmp1447.Append(", "); }
            tmp1447.Append("P: ");
            P.ToString(tmp1447);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1448++) { tmp1447.Append(", "); }
            tmp1447.Append("Identifier: ");
            Identifier.ToString(tmp1447);
          }
          tmp1447.Append(')');
          return tmp1447.ToString();
        }
      }


      public partial class unregisterUtilityWindow_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterUtilityWindow_result()
        {
        }

        public unregisterUtilityWindow_result DeepCopy()
        {
          var tmp1449 = new unregisterUtilityWindow_result();
          if((E != null) && __isset.e)
          {
            tmp1449.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1449.__isset.e = this.__isset.e;
          return tmp1449;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1450 = new TStruct("unregisterUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1450, cancellationToken);
            var tmp1451 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1451.Name = "E";
                tmp1451.Type = TType.Struct;
                tmp1451.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1451, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1452 = new StringBuilder("unregisterUtilityWindow_result(");
          int tmp1453 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1453++) { tmp1452.Append(", "); }
            tmp1452.Append("E: ");
            E.ToString(tmp1452);
          }
          tmp1452.Append(')');
          return tmp1452.ToString();
        }
      }


      public partial class openUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public openUtilityWindow_args()
        {
        }

        public openUtilityWindow_args DeepCopy()
        {
          var tmp1454 = new openUtilityWindow_args();
          if(__isset.p)
          {
            tmp1454.P = this.P;
          }
          tmp1454.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1454.Identifier = this.Identifier;
          }
          tmp1454.__isset.identifier = this.__isset.identifier;
          return tmp1454;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1455 = new TStruct("openUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1455, cancellationToken);
            var tmp1456 = new TField();
            if(__isset.p)
            {
              tmp1456.Name = "p";
              tmp1456.Type = TType.I64;
              tmp1456.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1456, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1456.Name = "identifier";
              tmp1456.Type = TType.String;
              tmp1456.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1456, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1457 = new StringBuilder("openUtilityWindow_args(");
          int tmp1458 = 0;
          if(__isset.p)
          {
            if(0 < tmp1458++) { tmp1457.Append(", "); }
            tmp1457.Append("P: ");
            P.ToString(tmp1457);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1458++) { tmp1457.Append(", "); }
            tmp1457.Append("Identifier: ");
            Identifier.ToString(tmp1457);
          }
          tmp1457.Append(')');
          return tmp1457.ToString();
        }
      }


      public partial class openUtilityWindow_result : TBase
      {

        public openUtilityWindow_result()
        {
        }

        public openUtilityWindow_result DeepCopy()
        {
          var tmp1459 = new openUtilityWindow_result();
          return tmp1459;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1460 = new TStruct("openUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1460, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1461 = new StringBuilder("openUtilityWindow_result(");
          tmp1461.Append(')');
          return tmp1461.ToString();
        }
      }


      public partial class closeUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public closeUtilityWindow_args()
        {
        }

        public closeUtilityWindow_args DeepCopy()
        {
          var tmp1463 = new closeUtilityWindow_args();
          if(__isset.p)
          {
            tmp1463.P = this.P;
          }
          tmp1463.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1463.Identifier = this.Identifier;
          }
          tmp1463.__isset.identifier = this.__isset.identifier;
          return tmp1463;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1464 = new TStruct("closeUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1464, cancellationToken);
            var tmp1465 = new TField();
            if(__isset.p)
            {
              tmp1465.Name = "p";
              tmp1465.Type = TType.I64;
              tmp1465.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1465, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1465.Name = "identifier";
              tmp1465.Type = TType.String;
              tmp1465.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1465, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1466 = new StringBuilder("closeUtilityWindow_args(");
          int tmp1467 = 0;
          if(__isset.p)
          {
            if(0 < tmp1467++) { tmp1466.Append(", "); }
            tmp1466.Append("P: ");
            P.ToString(tmp1466);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1467++) { tmp1466.Append(", "); }
            tmp1466.Append("Identifier: ");
            Identifier.ToString(tmp1466);
          }
          tmp1466.Append(')');
          return tmp1466.ToString();
        }
      }


      public partial class closeUtilityWindow_result : TBase
      {

        public closeUtilityWindow_result()
        {
        }

        public closeUtilityWindow_result DeepCopy()
        {
          var tmp1468 = new closeUtilityWindow_result();
          return tmp1468;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1469 = new TStruct("closeUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1469, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1470 = new StringBuilder("closeUtilityWindow_result(");
          tmp1470.Append(')');
          return tmp1470.ToString();
        }
      }


      public partial class collapseUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public collapseUtilityWindow_args()
        {
        }

        public collapseUtilityWindow_args DeepCopy()
        {
          var tmp1472 = new collapseUtilityWindow_args();
          if(__isset.p)
          {
            tmp1472.P = this.P;
          }
          tmp1472.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1472.Identifier = this.Identifier;
          }
          tmp1472.__isset.identifier = this.__isset.identifier;
          return tmp1472;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1473 = new TStruct("collapseUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1473, cancellationToken);
            var tmp1474 = new TField();
            if(__isset.p)
            {
              tmp1474.Name = "p";
              tmp1474.Type = TType.I64;
              tmp1474.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1474, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1474.Name = "identifier";
              tmp1474.Type = TType.String;
              tmp1474.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1474, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is collapseUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1475 = new StringBuilder("collapseUtilityWindow_args(");
          int tmp1476 = 0;
          if(__isset.p)
          {
            if(0 < tmp1476++) { tmp1475.Append(", "); }
            tmp1475.Append("P: ");
            P.ToString(tmp1475);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1476++) { tmp1475.Append(", "); }
            tmp1475.Append("Identifier: ");
            Identifier.ToString(tmp1475);
          }
          tmp1475.Append(')');
          return tmp1475.ToString();
        }
      }


      public partial class collapseUtilityWindow_result : TBase
      {

        public collapseUtilityWindow_result()
        {
        }

        public collapseUtilityWindow_result DeepCopy()
        {
          var tmp1477 = new collapseUtilityWindow_result();
          return tmp1477;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1478 = new TStruct("collapseUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1478, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is collapseUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1479 = new StringBuilder("collapseUtilityWindow_result(");
          tmp1479.Append(')');
          return tmp1479.ToString();
        }
      }


      public partial class expandUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public expandUtilityWindow_args()
        {
        }

        public expandUtilityWindow_args DeepCopy()
        {
          var tmp1481 = new expandUtilityWindow_args();
          if(__isset.p)
          {
            tmp1481.P = this.P;
          }
          tmp1481.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1481.Identifier = this.Identifier;
          }
          tmp1481.__isset.identifier = this.__isset.identifier;
          return tmp1481;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1482 = new TStruct("expandUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1482, cancellationToken);
            var tmp1483 = new TField();
            if(__isset.p)
            {
              tmp1483.Name = "p";
              tmp1483.Type = TType.I64;
              tmp1483.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1483, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1483.Name = "identifier";
              tmp1483.Type = TType.String;
              tmp1483.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1483, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expandUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1484 = new StringBuilder("expandUtilityWindow_args(");
          int tmp1485 = 0;
          if(__isset.p)
          {
            if(0 < tmp1485++) { tmp1484.Append(", "); }
            tmp1484.Append("P: ");
            P.ToString(tmp1484);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1485++) { tmp1484.Append(", "); }
            tmp1484.Append("Identifier: ");
            Identifier.ToString(tmp1484);
          }
          tmp1484.Append(')');
          return tmp1484.ToString();
        }
      }


      public partial class expandUtilityWindow_result : TBase
      {

        public expandUtilityWindow_result()
        {
        }

        public expandUtilityWindow_result DeepCopy()
        {
          var tmp1486 = new expandUtilityWindow_result();
          return tmp1486;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1487 = new TStruct("expandUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1487, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expandUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1488 = new StringBuilder("expandUtilityWindow_result(");
          tmp1488.Append(')');
          return tmp1488.ToString();
        }
      }


      public partial class refreshDynamicInstructions_args : TBase
      {
        private long _p;
        private global::Yaskawa.Ext.API.DynamicInstructionType _instructionType;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.DynamicInstructionType"/>
        /// </summary>
        public global::Yaskawa.Ext.API.DynamicInstructionType InstructionType
        {
          get
          {
            return _instructionType;
          }
          set
          {
            __isset.instructionType = true;
            this._instructionType = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool instructionType;
        }

        public refreshDynamicInstructions_args()
        {
        }

        public refreshDynamicInstructions_args DeepCopy()
        {
          var tmp1490 = new refreshDynamicInstructions_args();
          if(__isset.p)
          {
            tmp1490.P = this.P;
          }
          tmp1490.__isset.p = this.__isset.p;
          if(__isset.instructionType)
          {
            tmp1490.InstructionType = this.InstructionType;
          }
          tmp1490.__isset.instructionType = this.__isset.instructionType;
          return tmp1490;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    InstructionType = (global::Yaskawa.Ext.API.DynamicInstructionType)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1491 = new TStruct("refreshDynamicInstructions_args");
            await oprot.WriteStructBeginAsync(tmp1491, cancellationToken);
            var tmp1492 = new TField();
            if(__isset.p)
            {
              tmp1492.Name = "p";
              tmp1492.Type = TType.I64;
              tmp1492.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1492, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.instructionType)
            {
              tmp1492.Name = "instructionType";
              tmp1492.Type = TType.I32;
              tmp1492.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1492, cancellationToken);
              await oprot.WriteI32Async((int)InstructionType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is refreshDynamicInstructions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.instructionType == other.__isset.instructionType) && ((!__isset.instructionType) || (global::System.Object.Equals(InstructionType, other.InstructionType))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if(__isset.instructionType)
            {
              hashcode = (hashcode * 397) + InstructionType.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1493 = new StringBuilder("refreshDynamicInstructions_args(");
          int tmp1494 = 0;
          if(__isset.p)
          {
            if(0 < tmp1494++) { tmp1493.Append(", "); }
            tmp1493.Append("P: ");
            P.ToString(tmp1493);
          }
          if(__isset.instructionType)
          {
            if(0 < tmp1494++) { tmp1493.Append(", "); }
            tmp1493.Append("InstructionType: ");
            InstructionType.ToString(tmp1493);
          }
          tmp1493.Append(')');
          return tmp1493.ToString();
        }
      }


      public partial class refreshDynamicInstructions_result : TBase
      {

        public refreshDynamicInstructions_result()
        {
        }

        public refreshDynamicInstructions_result DeepCopy()
        {
          var tmp1495 = new refreshDynamicInstructions_result();
          return tmp1495;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1496 = new TStruct("refreshDynamicInstructions_result");
            await oprot.WriteStructBeginAsync(tmp1496, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is refreshDynamicInstructions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1497 = new StringBuilder("refreshDynamicInstructions_result(");
          tmp1497.Append(')');
          return tmp1497.ToString();
        }
      }


      public partial class registerIntegration_args : TBase
      {
        private long _p;
        private string _identifier;
        private global::Yaskawa.Ext.API.IntegrationPoint _integrationPoint;
        private string _itemType;
        private string _buttonLabel;
        private string _buttonImage;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.IntegrationPoint"/>
        /// </summary>
        public global::Yaskawa.Ext.API.IntegrationPoint IntegrationPoint
        {
          get
          {
            return _integrationPoint;
          }
          set
          {
            __isset.integrationPoint = true;
            this._integrationPoint = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string ButtonLabel
        {
          get
          {
            return _buttonLabel;
          }
          set
          {
            __isset.buttonLabel = true;
            this._buttonLabel = value;
          }
        }

        public string ButtonImage
        {
          get
          {
            return _buttonImage;
          }
          set
          {
            __isset.buttonImage = true;
            this._buttonImage = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool integrationPoint;
          public bool itemType;
          public bool buttonLabel;
          public bool buttonImage;
        }

        public registerIntegration_args()
        {
        }

        public registerIntegration_args DeepCopy()
        {
          var tmp1499 = new registerIntegration_args();
          if(__isset.p)
          {
            tmp1499.P = this.P;
          }
          tmp1499.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1499.Identifier = this.Identifier;
          }
          tmp1499.__isset.identifier = this.__isset.identifier;
          if(__isset.integrationPoint)
          {
            tmp1499.IntegrationPoint = this.IntegrationPoint;
          }
          tmp1499.__isset.integrationPoint = this.__isset.integrationPoint;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1499.ItemType = this.ItemType;
          }
          tmp1499.__isset.itemType = this.__isset.itemType;
          if((ButtonLabel != null) && __isset.buttonLabel)
          {
            tmp1499.ButtonLabel = this.ButtonLabel;
          }
          tmp1499.__isset.buttonLabel = this.__isset.buttonLabel;
          if((ButtonImage != null) && __isset.buttonImage)
          {
            tmp1499.ButtonImage = this.ButtonImage;
          }
          tmp1499.__isset.buttonImage = this.__isset.buttonImage;
          return tmp1499;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    IntegrationPoint = (global::Yaskawa.Ext.API.IntegrationPoint)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    ButtonLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    ButtonImage = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1500 = new TStruct("registerIntegration_args");
            await oprot.WriteStructBeginAsync(tmp1500, cancellationToken);
            var tmp1501 = new TField();
            if(__isset.p)
            {
              tmp1501.Name = "p";
              tmp1501.Type = TType.I64;
              tmp1501.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1501, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1501.Name = "identifier";
              tmp1501.Type = TType.String;
              tmp1501.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1501, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.integrationPoint)
            {
              tmp1501.Name = "integrationPoint";
              tmp1501.Type = TType.I32;
              tmp1501.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1501, cancellationToken);
              await oprot.WriteI32Async((int)IntegrationPoint, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1501.Name = "itemType";
              tmp1501.Type = TType.String;
              tmp1501.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1501, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ButtonLabel != null) && __isset.buttonLabel)
            {
              tmp1501.Name = "buttonLabel";
              tmp1501.Type = TType.String;
              tmp1501.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1501, cancellationToken);
              await oprot.WriteStringAsync(ButtonLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ButtonImage != null) && __isset.buttonImage)
            {
              tmp1501.Name = "buttonImage";
              tmp1501.Type = TType.String;
              tmp1501.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1501, cancellationToken);
              await oprot.WriteStringAsync(ButtonImage, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerIntegration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.integrationPoint == other.__isset.integrationPoint) && ((!__isset.integrationPoint) || (global::System.Object.Equals(IntegrationPoint, other.IntegrationPoint))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.buttonLabel == other.__isset.buttonLabel) && ((!__isset.buttonLabel) || (global::System.Object.Equals(ButtonLabel, other.ButtonLabel))))
            && ((__isset.buttonImage == other.__isset.buttonImage) && ((!__isset.buttonImage) || (global::System.Object.Equals(ButtonImage, other.ButtonImage))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if(__isset.integrationPoint)
            {
              hashcode = (hashcode * 397) + IntegrationPoint.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((ButtonLabel != null) && __isset.buttonLabel)
            {
              hashcode = (hashcode * 397) + ButtonLabel.GetHashCode();
            }
            if((ButtonImage != null) && __isset.buttonImage)
            {
              hashcode = (hashcode * 397) + ButtonImage.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1502 = new StringBuilder("registerIntegration_args(");
          int tmp1503 = 0;
          if(__isset.p)
          {
            if(0 < tmp1503++) { tmp1502.Append(", "); }
            tmp1502.Append("P: ");
            P.ToString(tmp1502);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1503++) { tmp1502.Append(", "); }
            tmp1502.Append("Identifier: ");
            Identifier.ToString(tmp1502);
          }
          if(__isset.integrationPoint)
          {
            if(0 < tmp1503++) { tmp1502.Append(", "); }
            tmp1502.Append("IntegrationPoint: ");
            IntegrationPoint.ToString(tmp1502);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1503++) { tmp1502.Append(", "); }
            tmp1502.Append("ItemType: ");
            ItemType.ToString(tmp1502);
          }
          if((ButtonLabel != null) && __isset.buttonLabel)
          {
            if(0 < tmp1503++) { tmp1502.Append(", "); }
            tmp1502.Append("ButtonLabel: ");
            ButtonLabel.ToString(tmp1502);
          }
          if((ButtonImage != null) && __isset.buttonImage)
          {
            if(0 < tmp1503++) { tmp1502.Append(", "); }
            tmp1502.Append("ButtonImage: ");
            ButtonImage.ToString(tmp1502);
          }
          tmp1502.Append(')');
          return tmp1502.ToString();
        }
      }


      public partial class registerIntegration_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerIntegration_result()
        {
        }

        public registerIntegration_result DeepCopy()
        {
          var tmp1504 = new registerIntegration_result();
          if((E != null) && __isset.e)
          {
            tmp1504.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1504.__isset.e = this.__isset.e;
          return tmp1504;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1505 = new TStruct("registerIntegration_result");
            await oprot.WriteStructBeginAsync(tmp1505, cancellationToken);
            var tmp1506 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1506.Name = "E";
                tmp1506.Type = TType.Struct;
                tmp1506.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1506, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerIntegration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1507 = new StringBuilder("registerIntegration_result(");
          int tmp1508 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1508++) { tmp1507.Append(", "); }
            tmp1507.Append("E: ");
            E.ToString(tmp1507);
          }
          tmp1507.Append(')');
          return tmp1507.ToString();
        }
      }


      public partial class unregisterIntegration_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public unregisterIntegration_args()
        {
        }

        public unregisterIntegration_args DeepCopy()
        {
          var tmp1509 = new unregisterIntegration_args();
          if(__isset.p)
          {
            tmp1509.P = this.P;
          }
          tmp1509.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1509.Identifier = this.Identifier;
          }
          tmp1509.__isset.identifier = this.__isset.identifier;
          return tmp1509;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1510 = new TStruct("unregisterIntegration_args");
            await oprot.WriteStructBeginAsync(tmp1510, cancellationToken);
            var tmp1511 = new TField();
            if(__isset.p)
            {
              tmp1511.Name = "p";
              tmp1511.Type = TType.I64;
              tmp1511.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1511, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1511.Name = "identifier";
              tmp1511.Type = TType.String;
              tmp1511.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1511, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterIntegration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1512 = new StringBuilder("unregisterIntegration_args(");
          int tmp1513 = 0;
          if(__isset.p)
          {
            if(0 < tmp1513++) { tmp1512.Append(", "); }
            tmp1512.Append("P: ");
            P.ToString(tmp1512);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1513++) { tmp1512.Append(", "); }
            tmp1512.Append("Identifier: ");
            Identifier.ToString(tmp1512);
          }
          tmp1512.Append(')');
          return tmp1512.ToString();
        }
      }


      public partial class unregisterIntegration_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterIntegration_result()
        {
        }

        public unregisterIntegration_result DeepCopy()
        {
          var tmp1514 = new unregisterIntegration_result();
          if((E != null) && __isset.e)
          {
            tmp1514.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1514.__isset.e = this.__isset.e;
          return tmp1514;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1515 = new TStruct("unregisterIntegration_result");
            await oprot.WriteStructBeginAsync(tmp1515, cancellationToken);
            var tmp1516 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1516.Name = "E";
                tmp1516.Type = TType.Struct;
                tmp1516.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1516, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterIntegration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1517 = new StringBuilder("unregisterIntegration_result(");
          int tmp1518 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1518++) { tmp1517.Append(", "); }
            tmp1517.Append("E: ");
            E.ToString(tmp1517);
          }
          tmp1517.Append(')');
          return tmp1517.ToString();
        }
      }


      public partial class registerSwitch_args : TBase
      {
        private long _p;
        private string _identifier;
        private global::Yaskawa.Ext.API.IntegrationPoint _integrationPoint;
        private string _switchLabel;
        private string _offPositionLabel;
        private string _onPositionLabel;
        private bool _defaultState;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.IntegrationPoint"/>
        /// </summary>
        public global::Yaskawa.Ext.API.IntegrationPoint IntegrationPoint
        {
          get
          {
            return _integrationPoint;
          }
          set
          {
            __isset.integrationPoint = true;
            this._integrationPoint = value;
          }
        }

        public string SwitchLabel
        {
          get
          {
            return _switchLabel;
          }
          set
          {
            __isset.switchLabel = true;
            this._switchLabel = value;
          }
        }

        public string OffPositionLabel
        {
          get
          {
            return _offPositionLabel;
          }
          set
          {
            __isset.offPositionLabel = true;
            this._offPositionLabel = value;
          }
        }

        public string OnPositionLabel
        {
          get
          {
            return _onPositionLabel;
          }
          set
          {
            __isset.onPositionLabel = true;
            this._onPositionLabel = value;
          }
        }

        public bool DefaultState
        {
          get
          {
            return _defaultState;
          }
          set
          {
            __isset.defaultState = true;
            this._defaultState = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool integrationPoint;
          public bool switchLabel;
          public bool offPositionLabel;
          public bool onPositionLabel;
          public bool defaultState;
        }

        public registerSwitch_args()
        {
        }

        public registerSwitch_args DeepCopy()
        {
          var tmp1519 = new registerSwitch_args();
          if(__isset.p)
          {
            tmp1519.P = this.P;
          }
          tmp1519.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1519.Identifier = this.Identifier;
          }
          tmp1519.__isset.identifier = this.__isset.identifier;
          if(__isset.integrationPoint)
          {
            tmp1519.IntegrationPoint = this.IntegrationPoint;
          }
          tmp1519.__isset.integrationPoint = this.__isset.integrationPoint;
          if((SwitchLabel != null) && __isset.switchLabel)
          {
            tmp1519.SwitchLabel = this.SwitchLabel;
          }
          tmp1519.__isset.switchLabel = this.__isset.switchLabel;
          if((OffPositionLabel != null) && __isset.offPositionLabel)
          {
            tmp1519.OffPositionLabel = this.OffPositionLabel;
          }
          tmp1519.__isset.offPositionLabel = this.__isset.offPositionLabel;
          if((OnPositionLabel != null) && __isset.onPositionLabel)
          {
            tmp1519.OnPositionLabel = this.OnPositionLabel;
          }
          tmp1519.__isset.onPositionLabel = this.__isset.onPositionLabel;
          if(__isset.defaultState)
          {
            tmp1519.DefaultState = this.DefaultState;
          }
          tmp1519.__isset.defaultState = this.__isset.defaultState;
          return tmp1519;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    IntegrationPoint = (global::Yaskawa.Ext.API.IntegrationPoint)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    SwitchLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    OffPositionLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    OnPositionLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 7:
                  if (field.Type == TType.Bool)
                  {
                    DefaultState = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1520 = new TStruct("registerSwitch_args");
            await oprot.WriteStructBeginAsync(tmp1520, cancellationToken);
            var tmp1521 = new TField();
            if(__isset.p)
            {
              tmp1521.Name = "p";
              tmp1521.Type = TType.I64;
              tmp1521.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1521, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1521.Name = "identifier";
              tmp1521.Type = TType.String;
              tmp1521.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1521, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.integrationPoint)
            {
              tmp1521.Name = "integrationPoint";
              tmp1521.Type = TType.I32;
              tmp1521.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1521, cancellationToken);
              await oprot.WriteI32Async((int)IntegrationPoint, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SwitchLabel != null) && __isset.switchLabel)
            {
              tmp1521.Name = "switchLabel";
              tmp1521.Type = TType.String;
              tmp1521.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1521, cancellationToken);
              await oprot.WriteStringAsync(SwitchLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OffPositionLabel != null) && __isset.offPositionLabel)
            {
              tmp1521.Name = "offPositionLabel";
              tmp1521.Type = TType.String;
              tmp1521.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1521, cancellationToken);
              await oprot.WriteStringAsync(OffPositionLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OnPositionLabel != null) && __isset.onPositionLabel)
            {
              tmp1521.Name = "onPositionLabel";
              tmp1521.Type = TType.String;
              tmp1521.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1521, cancellationToken);
              await oprot.WriteStringAsync(OnPositionLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.defaultState)
            {
              tmp1521.Name = "defaultState";
              tmp1521.Type = TType.Bool;
              tmp1521.ID = 7;
              await oprot.WriteFieldBeginAsync(tmp1521, cancellationToken);
              await oprot.WriteBoolAsync(DefaultState, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerSwitch_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.integrationPoint == other.__isset.integrationPoint) && ((!__isset.integrationPoint) || (global::System.Object.Equals(IntegrationPoint, other.IntegrationPoint))))
            && ((__isset.switchLabel == other.__isset.switchLabel) && ((!__isset.switchLabel) || (global::System.Object.Equals(SwitchLabel, other.SwitchLabel))))
            && ((__isset.offPositionLabel == other.__isset.offPositionLabel) && ((!__isset.offPositionLabel) || (global::System.Object.Equals(OffPositionLabel, other.OffPositionLabel))))
            && ((__isset.onPositionLabel == other.__isset.onPositionLabel) && ((!__isset.onPositionLabel) || (global::System.Object.Equals(OnPositionLabel, other.OnPositionLabel))))
            && ((__isset.defaultState == other.__isset.defaultState) && ((!__isset.defaultState) || (global::System.Object.Equals(DefaultState, other.DefaultState))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if(__isset.integrationPoint)
            {
              hashcode = (hashcode * 397) + IntegrationPoint.GetHashCode();
            }
            if((SwitchLabel != null) && __isset.switchLabel)
            {
              hashcode = (hashcode * 397) + SwitchLabel.GetHashCode();
            }
            if((OffPositionLabel != null) && __isset.offPositionLabel)
            {
              hashcode = (hashcode * 397) + OffPositionLabel.GetHashCode();
            }
            if((OnPositionLabel != null) && __isset.onPositionLabel)
            {
              hashcode = (hashcode * 397) + OnPositionLabel.GetHashCode();
            }
            if(__isset.defaultState)
            {
              hashcode = (hashcode * 397) + DefaultState.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1522 = new StringBuilder("registerSwitch_args(");
          int tmp1523 = 0;
          if(__isset.p)
          {
            if(0 < tmp1523++) { tmp1522.Append(", "); }
            tmp1522.Append("P: ");
            P.ToString(tmp1522);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1523++) { tmp1522.Append(", "); }
            tmp1522.Append("Identifier: ");
            Identifier.ToString(tmp1522);
          }
          if(__isset.integrationPoint)
          {
            if(0 < tmp1523++) { tmp1522.Append(", "); }
            tmp1522.Append("IntegrationPoint: ");
            IntegrationPoint.ToString(tmp1522);
          }
          if((SwitchLabel != null) && __isset.switchLabel)
          {
            if(0 < tmp1523++) { tmp1522.Append(", "); }
            tmp1522.Append("SwitchLabel: ");
            SwitchLabel.ToString(tmp1522);
          }
          if((OffPositionLabel != null) && __isset.offPositionLabel)
          {
            if(0 < tmp1523++) { tmp1522.Append(", "); }
            tmp1522.Append("OffPositionLabel: ");
            OffPositionLabel.ToString(tmp1522);
          }
          if((OnPositionLabel != null) && __isset.onPositionLabel)
          {
            if(0 < tmp1523++) { tmp1522.Append(", "); }
            tmp1522.Append("OnPositionLabel: ");
            OnPositionLabel.ToString(tmp1522);
          }
          if(__isset.defaultState)
          {
            if(0 < tmp1523++) { tmp1522.Append(", "); }
            tmp1522.Append("DefaultState: ");
            DefaultState.ToString(tmp1522);
          }
          tmp1522.Append(')');
          return tmp1522.ToString();
        }
      }


      public partial class registerSwitch_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerSwitch_result()
        {
        }

        public registerSwitch_result DeepCopy()
        {
          var tmp1524 = new registerSwitch_result();
          if((E != null) && __isset.e)
          {
            tmp1524.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1524.__isset.e = this.__isset.e;
          return tmp1524;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1525 = new TStruct("registerSwitch_result");
            await oprot.WriteStructBeginAsync(tmp1525, cancellationToken);
            var tmp1526 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1526.Name = "E";
                tmp1526.Type = TType.Struct;
                tmp1526.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1526, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerSwitch_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1527 = new StringBuilder("registerSwitch_result(");
          int tmp1528 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1528++) { tmp1527.Append(", "); }
            tmp1527.Append("E: ");
            E.ToString(tmp1527);
          }
          tmp1527.Append(')');
          return tmp1527.ToString();
        }
      }


      public partial class registerDirectOpenForInstr_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _instruction;
        private List<string> _instrTags;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string Instruction
        {
          get
          {
            return _instruction;
          }
          set
          {
            __isset.instruction = true;
            this._instruction = value;
          }
        }

        public List<string> InstrTags
        {
          get
          {
            return _instrTags;
          }
          set
          {
            __isset.instrTags = true;
            this._instrTags = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool instruction;
          public bool instrTags;
        }

        public registerDirectOpenForInstr_args()
        {
        }

        public registerDirectOpenForInstr_args DeepCopy()
        {
          var tmp1529 = new registerDirectOpenForInstr_args();
          if(__isset.p)
          {
            tmp1529.P = this.P;
          }
          tmp1529.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1529.Identifier = this.Identifier;
          }
          tmp1529.__isset.identifier = this.__isset.identifier;
          if((Instruction != null) && __isset.instruction)
          {
            tmp1529.Instruction = this.Instruction;
          }
          tmp1529.__isset.instruction = this.__isset.instruction;
          if((InstrTags != null) && __isset.instrTags)
          {
            tmp1529.InstrTags = this.InstrTags.DeepCopy();
          }
          tmp1529.__isset.instrTags = this.__isset.instrTags;
          return tmp1529;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Instruction = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1530 = await iprot.ReadListBeginAsync(cancellationToken);
                      InstrTags = new List<string>(_list1530.Count);
                      for(int _i1531 = 0; _i1531 < _list1530.Count; ++_i1531)
                      {
                        string _elem1532;
                        _elem1532 = await iprot.ReadStringAsync(cancellationToken);
                        InstrTags.Add(_elem1532);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1533 = new TStruct("registerDirectOpenForInstr_args");
            await oprot.WriteStructBeginAsync(tmp1533, cancellationToken);
            var tmp1534 = new TField();
            if(__isset.p)
            {
              tmp1534.Name = "p";
              tmp1534.Type = TType.I64;
              tmp1534.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1534, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1534.Name = "identifier";
              tmp1534.Type = TType.String;
              tmp1534.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1534, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Instruction != null) && __isset.instruction)
            {
              tmp1534.Name = "instruction";
              tmp1534.Type = TType.String;
              tmp1534.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1534, cancellationToken);
              await oprot.WriteStringAsync(Instruction, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((InstrTags != null) && __isset.instrTags)
            {
              tmp1534.Name = "instrTags";
              tmp1534.Type = TType.List;
              tmp1534.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1534, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.String, InstrTags.Count), cancellationToken);
              foreach (string _iter1535 in InstrTags)
              {
                await oprot.WriteStringAsync(_iter1535, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerDirectOpenForInstr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.instruction == other.__isset.instruction) && ((!__isset.instruction) || (global::System.Object.Equals(Instruction, other.Instruction))))
            && ((__isset.instrTags == other.__isset.instrTags) && ((!__isset.instrTags) || (TCollections.Equals(InstrTags, other.InstrTags))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((Instruction != null) && __isset.instruction)
            {
              hashcode = (hashcode * 397) + Instruction.GetHashCode();
            }
            if((InstrTags != null) && __isset.instrTags)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(InstrTags);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1536 = new StringBuilder("registerDirectOpenForInstr_args(");
          int tmp1537 = 0;
          if(__isset.p)
          {
            if(0 < tmp1537++) { tmp1536.Append(", "); }
            tmp1536.Append("P: ");
            P.ToString(tmp1536);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1537++) { tmp1536.Append(", "); }
            tmp1536.Append("Identifier: ");
            Identifier.ToString(tmp1536);
          }
          if((Instruction != null) && __isset.instruction)
          {
            if(0 < tmp1537++) { tmp1536.Append(", "); }
            tmp1536.Append("Instruction: ");
            Instruction.ToString(tmp1536);
          }
          if((InstrTags != null) && __isset.instrTags)
          {
            if(0 < tmp1537++) { tmp1536.Append(", "); }
            tmp1536.Append("InstrTags: ");
            InstrTags.ToString(tmp1536);
          }
          tmp1536.Append(')');
          return tmp1536.ToString();
        }
      }


      public partial class registerDirectOpenForInstr_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerDirectOpenForInstr_result()
        {
        }

        public registerDirectOpenForInstr_result DeepCopy()
        {
          var tmp1538 = new registerDirectOpenForInstr_result();
          if((E != null) && __isset.e)
          {
            tmp1538.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1538.__isset.e = this.__isset.e;
          return tmp1538;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1539 = new TStruct("registerDirectOpenForInstr_result");
            await oprot.WriteStructBeginAsync(tmp1539, cancellationToken);
            var tmp1540 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1540.Name = "E";
                tmp1540.Type = TType.Struct;
                tmp1540.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1540, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerDirectOpenForInstr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1541 = new StringBuilder("registerDirectOpenForInstr_result(");
          int tmp1542 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1542++) { tmp1541.Append(", "); }
            tmp1541.Append("E: ");
            E.ToString(tmp1541);
          }
          tmp1541.Append(')');
          return tmp1541.ToString();
        }
      }


      public partial class unregisterDirectOpenForInstr_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _instruction;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string Instruction
        {
          get
          {
            return _instruction;
          }
          set
          {
            __isset.instruction = true;
            this._instruction = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool instruction;
        }

        public unregisterDirectOpenForInstr_args()
        {
        }

        public unregisterDirectOpenForInstr_args DeepCopy()
        {
          var tmp1543 = new unregisterDirectOpenForInstr_args();
          if(__isset.p)
          {
            tmp1543.P = this.P;
          }
          tmp1543.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1543.Identifier = this.Identifier;
          }
          tmp1543.__isset.identifier = this.__isset.identifier;
          if((Instruction != null) && __isset.instruction)
          {
            tmp1543.Instruction = this.Instruction;
          }
          tmp1543.__isset.instruction = this.__isset.instruction;
          return tmp1543;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Instruction = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1544 = new TStruct("unregisterDirectOpenForInstr_args");
            await oprot.WriteStructBeginAsync(tmp1544, cancellationToken);
            var tmp1545 = new TField();
            if(__isset.p)
            {
              tmp1545.Name = "p";
              tmp1545.Type = TType.I64;
              tmp1545.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1545, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1545.Name = "identifier";
              tmp1545.Type = TType.String;
              tmp1545.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1545, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Instruction != null) && __isset.instruction)
            {
              tmp1545.Name = "instruction";
              tmp1545.Type = TType.String;
              tmp1545.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1545, cancellationToken);
              await oprot.WriteStringAsync(Instruction, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterDirectOpenForInstr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.instruction == other.__isset.instruction) && ((!__isset.instruction) || (global::System.Object.Equals(Instruction, other.Instruction))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((Instruction != null) && __isset.instruction)
            {
              hashcode = (hashcode * 397) + Instruction.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1546 = new StringBuilder("unregisterDirectOpenForInstr_args(");
          int tmp1547 = 0;
          if(__isset.p)
          {
            if(0 < tmp1547++) { tmp1546.Append(", "); }
            tmp1546.Append("P: ");
            P.ToString(tmp1546);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1547++) { tmp1546.Append(", "); }
            tmp1546.Append("Identifier: ");
            Identifier.ToString(tmp1546);
          }
          if((Instruction != null) && __isset.instruction)
          {
            if(0 < tmp1547++) { tmp1546.Append(", "); }
            tmp1546.Append("Instruction: ");
            Instruction.ToString(tmp1546);
          }
          tmp1546.Append(')');
          return tmp1546.ToString();
        }
      }


      public partial class unregisterDirectOpenForInstr_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterDirectOpenForInstr_result()
        {
        }

        public unregisterDirectOpenForInstr_result DeepCopy()
        {
          var tmp1548 = new unregisterDirectOpenForInstr_result();
          if((E != null) && __isset.e)
          {
            tmp1548.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1548.__isset.e = this.__isset.e;
          return tmp1548;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1549 = new TStruct("unregisterDirectOpenForInstr_result");
            await oprot.WriteStructBeginAsync(tmp1549, cancellationToken);
            var tmp1550 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1550.Name = "E";
                tmp1550.Type = TType.Struct;
                tmp1550.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1550, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterDirectOpenForInstr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1551 = new StringBuilder("unregisterDirectOpenForInstr_result(");
          int tmp1552 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1552++) { tmp1551.Append(", "); }
            tmp1551.Append("E: ");
            E.ToString(tmp1551);
          }
          tmp1551.Append(')');
          return tmp1551.ToString();
        }
      }


      public partial class property_args : TBase
      {
        private long _p;
        private string _itemID;
        private string _name;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ItemID
        {
          get
          {
            return _itemID;
          }
          set
          {
            __isset.itemID = true;
            this._itemID = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemID;
          public bool name;
        }

        public property_args()
        {
        }

        public property_args DeepCopy()
        {
          var tmp1553 = new property_args();
          if(__isset.p)
          {
            tmp1553.P = this.P;
          }
          tmp1553.__isset.p = this.__isset.p;
          if((ItemID != null) && __isset.itemID)
          {
            tmp1553.ItemID = this.ItemID;
          }
          tmp1553.__isset.itemID = this.__isset.itemID;
          if((Name != null) && __isset.name)
          {
            tmp1553.Name = this.Name;
          }
          tmp1553.__isset.name = this.__isset.name;
          return tmp1553;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ItemID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1554 = new TStruct("property_args");
            await oprot.WriteStructBeginAsync(tmp1554, cancellationToken);
            var tmp1555 = new TField();
            if(__isset.p)
            {
              tmp1555.Name = "p";
              tmp1555.Type = TType.I64;
              tmp1555.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1555, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemID != null) && __isset.itemID)
            {
              tmp1555.Name = "itemID";
              tmp1555.Type = TType.String;
              tmp1555.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1555, cancellationToken);
              await oprot.WriteStringAsync(ItemID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp1555.Name = "name";
              tmp1555.Type = TType.String;
              tmp1555.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1555, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is property_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemID == other.__isset.itemID) && ((!__isset.itemID) || (global::System.Object.Equals(ItemID, other.ItemID))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemID != null) && __isset.itemID)
            {
              hashcode = (hashcode * 397) + ItemID.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1556 = new StringBuilder("property_args(");
          int tmp1557 = 0;
          if(__isset.p)
          {
            if(0 < tmp1557++) { tmp1556.Append(", "); }
            tmp1556.Append("P: ");
            P.ToString(tmp1556);
          }
          if((ItemID != null) && __isset.itemID)
          {
            if(0 < tmp1557++) { tmp1556.Append(", "); }
            tmp1556.Append("ItemID: ");
            ItemID.ToString(tmp1556);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1557++) { tmp1556.Append(", "); }
            tmp1556.Append("Name: ");
            Name.ToString(tmp1556);
          }
          tmp1556.Append(')');
          return tmp1556.ToString();
        }
      }


      public partial class property_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public property_result()
        {
        }

        public property_result DeepCopy()
        {
          var tmp1558 = new property_result();
          if((Success != null) && __isset.success)
          {
            tmp1558.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp1558.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1558.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1558.__isset.e = this.__isset.e;
          return tmp1558;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1559 = new TStruct("property_result");
            await oprot.WriteStructBeginAsync(tmp1559, cancellationToken);
            var tmp1560 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1560.Name = "Success";
                tmp1560.Type = TType.Struct;
                tmp1560.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1560, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1560.Name = "E";
                tmp1560.Type = TType.Struct;
                tmp1560.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1560, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is property_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1561 = new StringBuilder("property_result(");
          int tmp1562 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1562++) { tmp1561.Append(", "); }
            tmp1561.Append("Success: ");
            Success.ToString(tmp1561);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1562++) { tmp1561.Append(", "); }
            tmp1561.Append("E: ");
            E.ToString(tmp1561);
          }
          tmp1561.Append(')');
          return tmp1561.ToString();
        }
      }


      public partial class setProperty_args : TBase
      {
        private long _p;
        private string _itemID;
        private string _name;
        private global::Yaskawa.Ext.API.Any _value;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ItemID
        {
          get
          {
            return _itemID;
          }
          set
          {
            __isset.itemID = true;
            this._itemID = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemID;
          public bool name;
          public bool @value;
        }

        public setProperty_args()
        {
        }

        public setProperty_args DeepCopy()
        {
          var tmp1563 = new setProperty_args();
          if(__isset.p)
          {
            tmp1563.P = this.P;
          }
          tmp1563.__isset.p = this.__isset.p;
          if((ItemID != null) && __isset.itemID)
          {
            tmp1563.ItemID = this.ItemID;
          }
          tmp1563.__isset.itemID = this.__isset.itemID;
          if((Name != null) && __isset.name)
          {
            tmp1563.Name = this.Name;
          }
          tmp1563.__isset.name = this.__isset.name;
          if((Value != null) && __isset.@value)
          {
            tmp1563.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp1563.__isset.@value = this.__isset.@value;
          return tmp1563;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ItemID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1564 = new TStruct("setProperty_args");
            await oprot.WriteStructBeginAsync(tmp1564, cancellationToken);
            var tmp1565 = new TField();
            if(__isset.p)
            {
              tmp1565.Name = "p";
              tmp1565.Type = TType.I64;
              tmp1565.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1565, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemID != null) && __isset.itemID)
            {
              tmp1565.Name = "itemID";
              tmp1565.Type = TType.String;
              tmp1565.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1565, cancellationToken);
              await oprot.WriteStringAsync(ItemID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp1565.Name = "name";
              tmp1565.Type = TType.String;
              tmp1565.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1565, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp1565.Name = "value";
              tmp1565.Type = TType.Struct;
              tmp1565.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1565, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperty_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemID == other.__isset.itemID) && ((!__isset.itemID) || (global::System.Object.Equals(ItemID, other.ItemID))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemID != null) && __isset.itemID)
            {
              hashcode = (hashcode * 397) + ItemID.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1566 = new StringBuilder("setProperty_args(");
          int tmp1567 = 0;
          if(__isset.p)
          {
            if(0 < tmp1567++) { tmp1566.Append(", "); }
            tmp1566.Append("P: ");
            P.ToString(tmp1566);
          }
          if((ItemID != null) && __isset.itemID)
          {
            if(0 < tmp1567++) { tmp1566.Append(", "); }
            tmp1566.Append("ItemID: ");
            ItemID.ToString(tmp1566);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1567++) { tmp1566.Append(", "); }
            tmp1566.Append("Name: ");
            Name.ToString(tmp1566);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp1567++) { tmp1566.Append(", "); }
            tmp1566.Append("Value: ");
            Value.ToString(tmp1566);
          }
          tmp1566.Append(')');
          return tmp1566.ToString();
        }
      }


      public partial class setProperty_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setProperty_result()
        {
        }

        public setProperty_result DeepCopy()
        {
          var tmp1568 = new setProperty_result();
          if((E != null) && __isset.e)
          {
            tmp1568.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1568.__isset.e = this.__isset.e;
          return tmp1568;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1569 = new TStruct("setProperty_result");
            await oprot.WriteStructBeginAsync(tmp1569, cancellationToken);
            var tmp1570 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1570.Name = "E";
                tmp1570.Type = TType.Struct;
                tmp1570.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1570, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperty_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1571 = new StringBuilder("setProperty_result(");
          int tmp1572 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1572++) { tmp1571.Append(", "); }
            tmp1571.Append("E: ");
            E.ToString(tmp1571);
          }
          tmp1571.Append(')');
          return tmp1571.ToString();
        }
      }


      public partial class setProperties_args : TBase
      {
        private long _p;
        private List<global::Yaskawa.Ext.API.PropValues> _propValuesList;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public List<global::Yaskawa.Ext.API.PropValues> PropValuesList
        {
          get
          {
            return _propValuesList;
          }
          set
          {
            __isset.propValuesList = true;
            this._propValuesList = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool propValuesList;
        }

        public setProperties_args()
        {
        }

        public setProperties_args DeepCopy()
        {
          var tmp1573 = new setProperties_args();
          if(__isset.p)
          {
            tmp1573.P = this.P;
          }
          tmp1573.__isset.p = this.__isset.p;
          if((PropValuesList != null) && __isset.propValuesList)
          {
            tmp1573.PropValuesList = this.PropValuesList.DeepCopy();
          }
          tmp1573.__isset.propValuesList = this.__isset.propValuesList;
          return tmp1573;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1574 = await iprot.ReadListBeginAsync(cancellationToken);
                      PropValuesList = new List<global::Yaskawa.Ext.API.PropValues>(_list1574.Count);
                      for(int _i1575 = 0; _i1575 < _list1574.Count; ++_i1575)
                      {
                        global::Yaskawa.Ext.API.PropValues _elem1576;
                        _elem1576 = new global::Yaskawa.Ext.API.PropValues();
                        await _elem1576.ReadAsync(iprot, cancellationToken);
                        PropValuesList.Add(_elem1576);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1577 = new TStruct("setProperties_args");
            await oprot.WriteStructBeginAsync(tmp1577, cancellationToken);
            var tmp1578 = new TField();
            if(__isset.p)
            {
              tmp1578.Name = "p";
              tmp1578.Type = TType.I64;
              tmp1578.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1578, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PropValuesList != null) && __isset.propValuesList)
            {
              tmp1578.Name = "propValuesList";
              tmp1578.Type = TType.List;
              tmp1578.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1578, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, PropValuesList.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PropValues _iter1579 in PropValuesList)
              {
                await _iter1579.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperties_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.propValuesList == other.__isset.propValuesList) && ((!__isset.propValuesList) || (TCollections.Equals(PropValuesList, other.PropValuesList))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((PropValuesList != null) && __isset.propValuesList)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(PropValuesList);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1580 = new StringBuilder("setProperties_args(");
          int tmp1581 = 0;
          if(__isset.p)
          {
            if(0 < tmp1581++) { tmp1580.Append(", "); }
            tmp1580.Append("P: ");
            P.ToString(tmp1580);
          }
          if((PropValuesList != null) && __isset.propValuesList)
          {
            if(0 < tmp1581++) { tmp1580.Append(", "); }
            tmp1580.Append("PropValuesList: ");
            PropValuesList.ToString(tmp1580);
          }
          tmp1580.Append(')');
          return tmp1580.ToString();
        }
      }


      public partial class setChartConfig_args : TBase
      {
        private long _p;
        private string _chartID;
        private global::Yaskawa.Ext.API.Any _config;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Config
        {
          get
          {
            return _config;
          }
          set
          {
            __isset.config = true;
            this._config = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool config;
        }

        public setChartConfig_args()
        {
        }

        public setChartConfig_args DeepCopy()
        {
          var tmp1582 = new setChartConfig_args();
          if(__isset.p)
          {
            tmp1582.P = this.P;
          }
          tmp1582.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1582.ChartID = this.ChartID;
          }
          tmp1582.__isset.chartID = this.__isset.chartID;
          if((Config != null) && __isset.config)
          {
            tmp1582.Config = (global::Yaskawa.Ext.API.Any)this.Config.DeepCopy();
          }
          tmp1582.__isset.config = this.__isset.config;
          return tmp1582;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Config = new global::Yaskawa.Ext.API.Any();
                    await Config.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1583 = new TStruct("setChartConfig_args");
            await oprot.WriteStructBeginAsync(tmp1583, cancellationToken);
            var tmp1584 = new TField();
            if(__isset.p)
            {
              tmp1584.Name = "p";
              tmp1584.Type = TType.I64;
              tmp1584.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1584, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1584.Name = "chartID";
              tmp1584.Type = TType.String;
              tmp1584.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1584, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Config != null) && __isset.config)
            {
              tmp1584.Name = "config";
              tmp1584.Type = TType.Struct;
              tmp1584.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1584, cancellationToken);
              await Config.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.config == other.__isset.config) && ((!__isset.config) || (global::System.Object.Equals(Config, other.Config))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Config != null) && __isset.config)
            {
              hashcode = (hashcode * 397) + Config.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1585 = new StringBuilder("setChartConfig_args(");
          int tmp1586 = 0;
          if(__isset.p)
          {
            if(0 < tmp1586++) { tmp1585.Append(", "); }
            tmp1585.Append("P: ");
            P.ToString(tmp1585);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1586++) { tmp1585.Append(", "); }
            tmp1585.Append("ChartID: ");
            ChartID.ToString(tmp1585);
          }
          if((Config != null) && __isset.config)
          {
            if(0 < tmp1586++) { tmp1585.Append(", "); }
            tmp1585.Append("Config: ");
            Config.ToString(tmp1585);
          }
          tmp1585.Append(')');
          return tmp1585.ToString();
        }
      }


      public partial class setChartConfig_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setChartConfig_result()
        {
        }

        public setChartConfig_result DeepCopy()
        {
          var tmp1587 = new setChartConfig_result();
          if((E != null) && __isset.e)
          {
            tmp1587.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1587.__isset.e = this.__isset.e;
          return tmp1587;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1588 = new TStruct("setChartConfig_result");
            await oprot.WriteStructBeginAsync(tmp1588, cancellationToken);
            var tmp1589 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1589.Name = "E";
                tmp1589.Type = TType.Struct;
                tmp1589.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1589, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1590 = new StringBuilder("setChartConfig_result(");
          int tmp1591 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1591++) { tmp1590.Append(", "); }
            tmp1590.Append("E: ");
            E.ToString(tmp1590);
          }
          tmp1590.Append(')');
          return tmp1590.ToString();
        }
      }


      public partial class getChartConfig_args : TBase
      {
        private long _p;
        private string _chartID;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
        }

        public getChartConfig_args()
        {
        }

        public getChartConfig_args DeepCopy()
        {
          var tmp1592 = new getChartConfig_args();
          if(__isset.p)
          {
            tmp1592.P = this.P;
          }
          tmp1592.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1592.ChartID = this.ChartID;
          }
          tmp1592.__isset.chartID = this.__isset.chartID;
          return tmp1592;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1593 = new TStruct("getChartConfig_args");
            await oprot.WriteStructBeginAsync(tmp1593, cancellationToken);
            var tmp1594 = new TField();
            if(__isset.p)
            {
              tmp1594.Name = "p";
              tmp1594.Type = TType.I64;
              tmp1594.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1594, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1594.Name = "chartID";
              tmp1594.Type = TType.String;
              tmp1594.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1594, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1595 = new StringBuilder("getChartConfig_args(");
          int tmp1596 = 0;
          if(__isset.p)
          {
            if(0 < tmp1596++) { tmp1595.Append(", "); }
            tmp1595.Append("P: ");
            P.ToString(tmp1595);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1596++) { tmp1595.Append(", "); }
            tmp1595.Append("ChartID: ");
            ChartID.ToString(tmp1595);
          }
          tmp1595.Append(')');
          return tmp1595.ToString();
        }
      }


      public partial class getChartConfig_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public getChartConfig_result()
        {
        }

        public getChartConfig_result DeepCopy()
        {
          var tmp1597 = new getChartConfig_result();
          if((Success != null) && __isset.success)
          {
            tmp1597.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp1597.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1597.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1597.__isset.e = this.__isset.e;
          return tmp1597;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1598 = new TStruct("getChartConfig_result");
            await oprot.WriteStructBeginAsync(tmp1598, cancellationToken);
            var tmp1599 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1599.Name = "Success";
                tmp1599.Type = TType.Struct;
                tmp1599.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1599, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1599.Name = "E";
                tmp1599.Type = TType.Struct;
                tmp1599.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1599, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1600 = new StringBuilder("getChartConfig_result(");
          int tmp1601 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1601++) { tmp1600.Append(", "); }
            tmp1600.Append("Success: ");
            Success.ToString(tmp1600);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1601++) { tmp1600.Append(", "); }
            tmp1600.Append("E: ");
            E.ToString(tmp1600);
          }
          tmp1600.Append(')');
          return tmp1600.ToString();
        }
      }


      public partial class setChartData_args : TBase
      {
        private long _p;
        private string _chartID;
        private Dictionary<string, global::Yaskawa.Ext.API.Data> _dataset;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public Dictionary<string, global::Yaskawa.Ext.API.Data> Dataset
        {
          get
          {
            return _dataset;
          }
          set
          {
            __isset.dataset = true;
            this._dataset = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool dataset;
          public bool right;
        }

        public setChartData_args()
        {
        }

        public setChartData_args DeepCopy()
        {
          var tmp1602 = new setChartData_args();
          if(__isset.p)
          {
            tmp1602.P = this.P;
          }
          tmp1602.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1602.ChartID = this.ChartID;
          }
          tmp1602.__isset.chartID = this.__isset.chartID;
          if((Dataset != null) && __isset.dataset)
          {
            tmp1602.Dataset = this.Dataset.DeepCopy();
          }
          tmp1602.__isset.dataset = this.__isset.dataset;
          if(__isset.right)
          {
            tmp1602.Right = this.Right;
          }
          tmp1602.__isset.right = this.__isset.right;
          return tmp1602;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1603 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Dataset = new Dictionary<string, global::Yaskawa.Ext.API.Data>(_map1603.Count);
                      for(int _i1604 = 0; _i1604 < _map1603.Count; ++_i1604)
                      {
                        string _key1605;
                        global::Yaskawa.Ext.API.Data _val1606;
                        _key1605 = await iprot.ReadStringAsync(cancellationToken);
                        _val1606 = new global::Yaskawa.Ext.API.Data();
                        await _val1606.ReadAsync(iprot, cancellationToken);
                        Dataset[_key1605] = _val1606;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1607 = new TStruct("setChartData_args");
            await oprot.WriteStructBeginAsync(tmp1607, cancellationToken);
            var tmp1608 = new TField();
            if(__isset.p)
            {
              tmp1608.Name = "p";
              tmp1608.Type = TType.I64;
              tmp1608.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1608, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1608.Name = "chartID";
              tmp1608.Type = TType.String;
              tmp1608.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1608, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Dataset != null) && __isset.dataset)
            {
              tmp1608.Name = "dataset";
              tmp1608.Type = TType.Map;
              tmp1608.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1608, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Dataset.Count), cancellationToken);
              foreach (string _iter1609 in Dataset.Keys)
              {
                await oprot.WriteStringAsync(_iter1609, cancellationToken);
                await Dataset[_iter1609].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1608.Name = "right";
              tmp1608.Type = TType.Bool;
              tmp1608.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1608, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.dataset == other.__isset.dataset) && ((!__isset.dataset) || (global::System.Object.Equals(Dataset, other.Dataset))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Dataset != null) && __isset.dataset)
            {
              hashcode = (hashcode * 397) + Dataset.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1610 = new StringBuilder("setChartData_args(");
          int tmp1611 = 0;
          if(__isset.p)
          {
            if(0 < tmp1611++) { tmp1610.Append(", "); }
            tmp1610.Append("P: ");
            P.ToString(tmp1610);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1611++) { tmp1610.Append(", "); }
            tmp1610.Append("ChartID: ");
            ChartID.ToString(tmp1610);
          }
          if((Dataset != null) && __isset.dataset)
          {
            if(0 < tmp1611++) { tmp1610.Append(", "); }
            tmp1610.Append("Dataset: ");
            Dataset.ToString(tmp1610);
          }
          if(__isset.right)
          {
            if(0 < tmp1611++) { tmp1610.Append(", "); }
            tmp1610.Append("Right: ");
            Right.ToString(tmp1610);
          }
          tmp1610.Append(')');
          return tmp1610.ToString();
        }
      }


      public partial class setChartData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setChartData_result()
        {
        }

        public setChartData_result DeepCopy()
        {
          var tmp1612 = new setChartData_result();
          if((E != null) && __isset.e)
          {
            tmp1612.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1612.__isset.e = this.__isset.e;
          return tmp1612;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1613 = new TStruct("setChartData_result");
            await oprot.WriteStructBeginAsync(tmp1613, cancellationToken);
            var tmp1614 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1614.Name = "E";
                tmp1614.Type = TType.Struct;
                tmp1614.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1614, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1615 = new StringBuilder("setChartData_result(");
          int tmp1616 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1616++) { tmp1615.Append(", "); }
            tmp1615.Append("E: ");
            E.ToString(tmp1615);
          }
          tmp1615.Append(')');
          return tmp1615.ToString();
        }
      }


      public partial class getChartData_args : TBase
      {
        private long _p;
        private string _chartID;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool right;
        }

        public getChartData_args()
        {
        }

        public getChartData_args DeepCopy()
        {
          var tmp1617 = new getChartData_args();
          if(__isset.p)
          {
            tmp1617.P = this.P;
          }
          tmp1617.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1617.ChartID = this.ChartID;
          }
          tmp1617.__isset.chartID = this.__isset.chartID;
          if(__isset.right)
          {
            tmp1617.Right = this.Right;
          }
          tmp1617.__isset.right = this.__isset.right;
          return tmp1617;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1618 = new TStruct("getChartData_args");
            await oprot.WriteStructBeginAsync(tmp1618, cancellationToken);
            var tmp1619 = new TField();
            if(__isset.p)
            {
              tmp1619.Name = "p";
              tmp1619.Type = TType.I64;
              tmp1619.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1619, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1619.Name = "chartID";
              tmp1619.Type = TType.String;
              tmp1619.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1619, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1619.Name = "right";
              tmp1619.Type = TType.Bool;
              tmp1619.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1619, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1620 = new StringBuilder("getChartData_args(");
          int tmp1621 = 0;
          if(__isset.p)
          {
            if(0 < tmp1621++) { tmp1620.Append(", "); }
            tmp1620.Append("P: ");
            P.ToString(tmp1620);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1621++) { tmp1620.Append(", "); }
            tmp1620.Append("ChartID: ");
            ChartID.ToString(tmp1620);
          }
          if(__isset.right)
          {
            if(0 < tmp1621++) { tmp1620.Append(", "); }
            tmp1620.Append("Right: ");
            Right.ToString(tmp1620);
          }
          tmp1620.Append(')');
          return tmp1620.ToString();
        }
      }


      public partial class getChartData_result : TBase
      {
        private Dictionary<string, global::Yaskawa.Ext.API.Data> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<string, global::Yaskawa.Ext.API.Data> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public getChartData_result()
        {
        }

        public getChartData_result DeepCopy()
        {
          var tmp1622 = new getChartData_result();
          if((Success != null) && __isset.success)
          {
            tmp1622.Success = this.Success.DeepCopy();
          }
          tmp1622.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1622.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1622.__isset.e = this.__isset.e;
          return tmp1622;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1623 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<string, global::Yaskawa.Ext.API.Data>(_map1623.Count);
                      for(int _i1624 = 0; _i1624 < _map1623.Count; ++_i1624)
                      {
                        string _key1625;
                        global::Yaskawa.Ext.API.Data _val1626;
                        _key1625 = await iprot.ReadStringAsync(cancellationToken);
                        _val1626 = new global::Yaskawa.Ext.API.Data();
                        await _val1626.ReadAsync(iprot, cancellationToken);
                        Success[_key1625] = _val1626;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1627 = new TStruct("getChartData_result");
            await oprot.WriteStructBeginAsync(tmp1627, cancellationToken);
            var tmp1628 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1628.Name = "Success";
                tmp1628.Type = TType.Map;
                tmp1628.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1628, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
                foreach (string _iter1629 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter1629, cancellationToken);
                  await Success[_iter1629].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1628.Name = "E";
                tmp1628.Type = TType.Struct;
                tmp1628.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1628, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1630 = new StringBuilder("getChartData_result(");
          int tmp1631 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1631++) { tmp1630.Append(", "); }
            tmp1630.Append("Success: ");
            Success.ToString(tmp1630);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1631++) { tmp1630.Append(", "); }
            tmp1630.Append("E: ");
            E.ToString(tmp1630);
          }
          tmp1630.Append(')');
          return tmp1630.ToString();
        }
      }


      public partial class addChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private global::Yaskawa.Ext.API.Data _data;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public global::Yaskawa.Ext.API.Data Data
        {
          get
          {
            return _data;
          }
          set
          {
            __isset.data = true;
            this._data = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool data;
          public bool right;
        }

        public addChartKey_args()
        {
        }

        public addChartKey_args DeepCopy()
        {
          var tmp1632 = new addChartKey_args();
          if(__isset.p)
          {
            tmp1632.P = this.P;
          }
          tmp1632.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1632.ChartID = this.ChartID;
          }
          tmp1632.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1632.Key = this.Key;
          }
          tmp1632.__isset.key = this.__isset.key;
          if((Data != null) && __isset.data)
          {
            tmp1632.Data = (global::Yaskawa.Ext.API.Data)this.Data.DeepCopy();
          }
          tmp1632.__isset.data = this.__isset.data;
          if(__isset.right)
          {
            tmp1632.Right = this.Right;
          }
          tmp1632.__isset.right = this.__isset.right;
          return tmp1632;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Data = new global::Yaskawa.Ext.API.Data();
                    await Data.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1633 = new TStruct("addChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1633, cancellationToken);
            var tmp1634 = new TField();
            if(__isset.p)
            {
              tmp1634.Name = "p";
              tmp1634.Type = TType.I64;
              tmp1634.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1634, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1634.Name = "chartID";
              tmp1634.Type = TType.String;
              tmp1634.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1634, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1634.Name = "key";
              tmp1634.Type = TType.String;
              tmp1634.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1634, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Data != null) && __isset.data)
            {
              tmp1634.Name = "data";
              tmp1634.Type = TType.Struct;
              tmp1634.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1634, cancellationToken);
              await Data.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1634.Name = "right";
              tmp1634.Type = TType.Bool;
              tmp1634.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1634, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.data == other.__isset.data) && ((!__isset.data) || (global::System.Object.Equals(Data, other.Data))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Data != null) && __isset.data)
            {
              hashcode = (hashcode * 397) + Data.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1635 = new StringBuilder("addChartKey_args(");
          int tmp1636 = 0;
          if(__isset.p)
          {
            if(0 < tmp1636++) { tmp1635.Append(", "); }
            tmp1635.Append("P: ");
            P.ToString(tmp1635);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1636++) { tmp1635.Append(", "); }
            tmp1635.Append("ChartID: ");
            ChartID.ToString(tmp1635);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1636++) { tmp1635.Append(", "); }
            tmp1635.Append("Key: ");
            Key.ToString(tmp1635);
          }
          if((Data != null) && __isset.data)
          {
            if(0 < tmp1636++) { tmp1635.Append(", "); }
            tmp1635.Append("Data: ");
            Data.ToString(tmp1635);
          }
          if(__isset.right)
          {
            if(0 < tmp1636++) { tmp1635.Append(", "); }
            tmp1635.Append("Right: ");
            Right.ToString(tmp1635);
          }
          tmp1635.Append(')');
          return tmp1635.ToString();
        }
      }


      public partial class addChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public addChartKey_result()
        {
        }

        public addChartKey_result DeepCopy()
        {
          var tmp1637 = new addChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1637.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1637.__isset.e = this.__isset.e;
          return tmp1637;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1638 = new TStruct("addChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1638, cancellationToken);
            var tmp1639 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1639.Name = "E";
                tmp1639.Type = TType.Struct;
                tmp1639.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1639, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1640 = new StringBuilder("addChartKey_result(");
          int tmp1641 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1641++) { tmp1640.Append(", "); }
            tmp1640.Append("E: ");
            E.ToString(tmp1640);
          }
          tmp1640.Append(')');
          return tmp1640.ToString();
        }
      }


      public partial class removeChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool right;
        }

        public removeChartKey_args()
        {
        }

        public removeChartKey_args DeepCopy()
        {
          var tmp1642 = new removeChartKey_args();
          if(__isset.p)
          {
            tmp1642.P = this.P;
          }
          tmp1642.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1642.ChartID = this.ChartID;
          }
          tmp1642.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1642.Key = this.Key;
          }
          tmp1642.__isset.key = this.__isset.key;
          if(__isset.right)
          {
            tmp1642.Right = this.Right;
          }
          tmp1642.__isset.right = this.__isset.right;
          return tmp1642;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1643 = new TStruct("removeChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1643, cancellationToken);
            var tmp1644 = new TField();
            if(__isset.p)
            {
              tmp1644.Name = "p";
              tmp1644.Type = TType.I64;
              tmp1644.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1644, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1644.Name = "chartID";
              tmp1644.Type = TType.String;
              tmp1644.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1644, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1644.Name = "key";
              tmp1644.Type = TType.String;
              tmp1644.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1644, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1644.Name = "right";
              tmp1644.Type = TType.Bool;
              tmp1644.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1644, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1645 = new StringBuilder("removeChartKey_args(");
          int tmp1646 = 0;
          if(__isset.p)
          {
            if(0 < tmp1646++) { tmp1645.Append(", "); }
            tmp1645.Append("P: ");
            P.ToString(tmp1645);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1646++) { tmp1645.Append(", "); }
            tmp1645.Append("ChartID: ");
            ChartID.ToString(tmp1645);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1646++) { tmp1645.Append(", "); }
            tmp1645.Append("Key: ");
            Key.ToString(tmp1645);
          }
          if(__isset.right)
          {
            if(0 < tmp1646++) { tmp1645.Append(", "); }
            tmp1645.Append("Right: ");
            Right.ToString(tmp1645);
          }
          tmp1645.Append(')');
          return tmp1645.ToString();
        }
      }


      public partial class removeChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeChartKey_result()
        {
        }

        public removeChartKey_result DeepCopy()
        {
          var tmp1647 = new removeChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1647.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1647.__isset.e = this.__isset.e;
          return tmp1647;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1648 = new TStruct("removeChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1648, cancellationToken);
            var tmp1649 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1649.Name = "E";
                tmp1649.Type = TType.Struct;
                tmp1649.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1649, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1650 = new StringBuilder("removeChartKey_result(");
          int tmp1651 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1651++) { tmp1650.Append(", "); }
            tmp1650.Append("E: ");
            E.ToString(tmp1650);
          }
          tmp1650.Append(')');
          return tmp1650.ToString();
        }
      }


      public partial class hideChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private bool _hidden;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public bool Hidden
        {
          get
          {
            return _hidden;
          }
          set
          {
            __isset.hidden = true;
            this._hidden = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool hidden;
          public bool right;
        }

        public hideChartKey_args()
        {
        }

        public hideChartKey_args DeepCopy()
        {
          var tmp1652 = new hideChartKey_args();
          if(__isset.p)
          {
            tmp1652.P = this.P;
          }
          tmp1652.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1652.ChartID = this.ChartID;
          }
          tmp1652.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1652.Key = this.Key;
          }
          tmp1652.__isset.key = this.__isset.key;
          if(__isset.hidden)
          {
            tmp1652.Hidden = this.Hidden;
          }
          tmp1652.__isset.hidden = this.__isset.hidden;
          if(__isset.right)
          {
            tmp1652.Right = this.Right;
          }
          tmp1652.__isset.right = this.__isset.right;
          return tmp1652;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Hidden = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1653 = new TStruct("hideChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1653, cancellationToken);
            var tmp1654 = new TField();
            if(__isset.p)
            {
              tmp1654.Name = "p";
              tmp1654.Type = TType.I64;
              tmp1654.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1654, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1654.Name = "chartID";
              tmp1654.Type = TType.String;
              tmp1654.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1654, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1654.Name = "key";
              tmp1654.Type = TType.String;
              tmp1654.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1654, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.hidden)
            {
              tmp1654.Name = "hidden";
              tmp1654.Type = TType.Bool;
              tmp1654.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1654, cancellationToken);
              await oprot.WriteBoolAsync(Hidden, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1654.Name = "right";
              tmp1654.Type = TType.Bool;
              tmp1654.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1654, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is hideChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.hidden == other.__isset.hidden) && ((!__isset.hidden) || (global::System.Object.Equals(Hidden, other.Hidden))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.hidden)
            {
              hashcode = (hashcode * 397) + Hidden.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1655 = new StringBuilder("hideChartKey_args(");
          int tmp1656 = 0;
          if(__isset.p)
          {
            if(0 < tmp1656++) { tmp1655.Append(", "); }
            tmp1655.Append("P: ");
            P.ToString(tmp1655);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1656++) { tmp1655.Append(", "); }
            tmp1655.Append("ChartID: ");
            ChartID.ToString(tmp1655);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1656++) { tmp1655.Append(", "); }
            tmp1655.Append("Key: ");
            Key.ToString(tmp1655);
          }
          if(__isset.hidden)
          {
            if(0 < tmp1656++) { tmp1655.Append(", "); }
            tmp1655.Append("Hidden: ");
            Hidden.ToString(tmp1655);
          }
          if(__isset.right)
          {
            if(0 < tmp1656++) { tmp1655.Append(", "); }
            tmp1655.Append("Right: ");
            Right.ToString(tmp1655);
          }
          tmp1655.Append(')');
          return tmp1655.ToString();
        }
      }


      public partial class hideChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public hideChartKey_result()
        {
        }

        public hideChartKey_result DeepCopy()
        {
          var tmp1657 = new hideChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1657.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1657.__isset.e = this.__isset.e;
          return tmp1657;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1658 = new TStruct("hideChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1658, cancellationToken);
            var tmp1659 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1659.Name = "E";
                tmp1659.Type = TType.Struct;
                tmp1659.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1659, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is hideChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1660 = new StringBuilder("hideChartKey_result(");
          int tmp1661 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1661++) { tmp1660.Append(", "); }
            tmp1660.Append("E: ");
            E.ToString(tmp1660);
          }
          tmp1660.Append(')');
          return tmp1660.ToString();
        }
      }


      public partial class appendChartPoints_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private List<global::Yaskawa.Ext.API.DataPoint> _points;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public List<global::Yaskawa.Ext.API.DataPoint> Points
        {
          get
          {
            return _points;
          }
          set
          {
            __isset.points = true;
            this._points = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool points;
          public bool right;
        }

        public appendChartPoints_args()
        {
        }

        public appendChartPoints_args DeepCopy()
        {
          var tmp1662 = new appendChartPoints_args();
          if(__isset.p)
          {
            tmp1662.P = this.P;
          }
          tmp1662.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1662.ChartID = this.ChartID;
          }
          tmp1662.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1662.Key = this.Key;
          }
          tmp1662.__isset.key = this.__isset.key;
          if((Points != null) && __isset.points)
          {
            tmp1662.Points = this.Points.DeepCopy();
          }
          tmp1662.__isset.points = this.__isset.points;
          if(__isset.right)
          {
            tmp1662.Right = this.Right;
          }
          tmp1662.__isset.right = this.__isset.right;
          return tmp1662;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1663 = await iprot.ReadListBeginAsync(cancellationToken);
                      Points = new List<global::Yaskawa.Ext.API.DataPoint>(_list1663.Count);
                      for(int _i1664 = 0; _i1664 < _list1663.Count; ++_i1664)
                      {
                        global::Yaskawa.Ext.API.DataPoint _elem1665;
                        _elem1665 = new global::Yaskawa.Ext.API.DataPoint();
                        await _elem1665.ReadAsync(iprot, cancellationToken);
                        Points.Add(_elem1665);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1666 = new TStruct("appendChartPoints_args");
            await oprot.WriteStructBeginAsync(tmp1666, cancellationToken);
            var tmp1667 = new TField();
            if(__isset.p)
            {
              tmp1667.Name = "p";
              tmp1667.Type = TType.I64;
              tmp1667.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1667, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1667.Name = "chartID";
              tmp1667.Type = TType.String;
              tmp1667.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1667, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1667.Name = "key";
              tmp1667.Type = TType.String;
              tmp1667.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1667, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Points != null) && __isset.points)
            {
              tmp1667.Name = "points";
              tmp1667.Type = TType.List;
              tmp1667.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1667, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Points.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.DataPoint _iter1668 in Points)
              {
                await _iter1668.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1667.Name = "right";
              tmp1667.Type = TType.Bool;
              tmp1667.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1667, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendChartPoints_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.points == other.__isset.points) && ((!__isset.points) || (TCollections.Equals(Points, other.Points))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Points != null) && __isset.points)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Points);
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1669 = new StringBuilder("appendChartPoints_args(");
          int tmp1670 = 0;
          if(__isset.p)
          {
            if(0 < tmp1670++) { tmp1669.Append(", "); }
            tmp1669.Append("P: ");
            P.ToString(tmp1669);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1670++) { tmp1669.Append(", "); }
            tmp1669.Append("ChartID: ");
            ChartID.ToString(tmp1669);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1670++) { tmp1669.Append(", "); }
            tmp1669.Append("Key: ");
            Key.ToString(tmp1669);
          }
          if((Points != null) && __isset.points)
          {
            if(0 < tmp1670++) { tmp1669.Append(", "); }
            tmp1669.Append("Points: ");
            Points.ToString(tmp1669);
          }
          if(__isset.right)
          {
            if(0 < tmp1670++) { tmp1669.Append(", "); }
            tmp1669.Append("Right: ");
            Right.ToString(tmp1669);
          }
          tmp1669.Append(')');
          return tmp1669.ToString();
        }
      }


      public partial class incrementChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private double _val;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public double Val
        {
          get
          {
            return _val;
          }
          set
          {
            __isset.val = true;
            this._val = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool val;
        }

        public incrementChartKey_args()
        {
        }

        public incrementChartKey_args DeepCopy()
        {
          var tmp1671 = new incrementChartKey_args();
          if(__isset.p)
          {
            tmp1671.P = this.P;
          }
          tmp1671.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1671.ChartID = this.ChartID;
          }
          tmp1671.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1671.Key = this.Key;
          }
          tmp1671.__isset.key = this.__isset.key;
          if(__isset.val)
          {
            tmp1671.Val = this.Val;
          }
          tmp1671.__isset.val = this.__isset.val;
          return tmp1671;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Double)
                  {
                    Val = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1672 = new TStruct("incrementChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1672, cancellationToken);
            var tmp1673 = new TField();
            if(__isset.p)
            {
              tmp1673.Name = "p";
              tmp1673.Type = TType.I64;
              tmp1673.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1673, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1673.Name = "chartID";
              tmp1673.Type = TType.String;
              tmp1673.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1673, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1673.Name = "key";
              tmp1673.Type = TType.String;
              tmp1673.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1673, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.val)
            {
              tmp1673.Name = "val";
              tmp1673.Type = TType.Double;
              tmp1673.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1673, cancellationToken);
              await oprot.WriteDoubleAsync(Val, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is incrementChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.val == other.__isset.val) && ((!__isset.val) || (global::System.Object.Equals(Val, other.Val))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.val)
            {
              hashcode = (hashcode * 397) + Val.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1674 = new StringBuilder("incrementChartKey_args(");
          int tmp1675 = 0;
          if(__isset.p)
          {
            if(0 < tmp1675++) { tmp1674.Append(", "); }
            tmp1674.Append("P: ");
            P.ToString(tmp1674);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1675++) { tmp1674.Append(", "); }
            tmp1674.Append("ChartID: ");
            ChartID.ToString(tmp1674);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1675++) { tmp1674.Append(", "); }
            tmp1674.Append("Key: ");
            Key.ToString(tmp1674);
          }
          if(__isset.val)
          {
            if(0 < tmp1675++) { tmp1674.Append(", "); }
            tmp1674.Append("Val: ");
            Val.ToString(tmp1674);
          }
          tmp1674.Append(')');
          return tmp1674.ToString();
        }
      }


      public partial class incrementChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public incrementChartKey_result()
        {
        }

        public incrementChartKey_result DeepCopy()
        {
          var tmp1676 = new incrementChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1676.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1676.__isset.e = this.__isset.e;
          return tmp1676;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1677 = new TStruct("incrementChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1677, cancellationToken);
            var tmp1678 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1678.Name = "E";
                tmp1678.Type = TType.Struct;
                tmp1678.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1678, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is incrementChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1679 = new StringBuilder("incrementChartKey_result(");
          int tmp1680 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1680++) { tmp1679.Append(", "); }
            tmp1679.Append("E: ");
            E.ToString(tmp1679);
          }
          tmp1679.Append(')');
          return tmp1679.ToString();
        }
      }


      public partial class exportChartImage_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool imageFileName;
        }

        public exportChartImage_args()
        {
        }

        public exportChartImage_args DeepCopy()
        {
          var tmp1681 = new exportChartImage_args();
          if(__isset.p)
          {
            tmp1681.P = this.P;
          }
          tmp1681.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1681.ChartID = this.ChartID;
          }
          tmp1681.__isset.chartID = this.__isset.chartID;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1681.ImageFileName = this.ImageFileName;
          }
          tmp1681.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1681;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1682 = new TStruct("exportChartImage_args");
            await oprot.WriteStructBeginAsync(tmp1682, cancellationToken);
            var tmp1683 = new TField();
            if(__isset.p)
            {
              tmp1683.Name = "p";
              tmp1683.Type = TType.I64;
              tmp1683.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1683, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1683.Name = "chartID";
              tmp1683.Type = TType.String;
              tmp1683.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1683, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1683.Name = "imageFileName";
              tmp1683.Type = TType.String;
              tmp1683.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1683, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1684 = new StringBuilder("exportChartImage_args(");
          int tmp1685 = 0;
          if(__isset.p)
          {
            if(0 < tmp1685++) { tmp1684.Append(", "); }
            tmp1684.Append("P: ");
            P.ToString(tmp1684);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1685++) { tmp1684.Append(", "); }
            tmp1684.Append("ChartID: ");
            ChartID.ToString(tmp1684);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1685++) { tmp1684.Append(", "); }
            tmp1684.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1684);
          }
          tmp1684.Append(')');
          return tmp1684.ToString();
        }
      }


      public partial class exportChartImage_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public exportChartImage_result()
        {
        }

        public exportChartImage_result DeepCopy()
        {
          var tmp1686 = new exportChartImage_result();
          if((Success != null) && __isset.success)
          {
            tmp1686.Success = this.Success;
          }
          tmp1686.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1686.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1686.__isset.e = this.__isset.e;
          return tmp1686;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1687 = new TStruct("exportChartImage_result");
            await oprot.WriteStructBeginAsync(tmp1687, cancellationToken);
            var tmp1688 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1688.Name = "Success";
                tmp1688.Type = TType.String;
                tmp1688.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1688, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1688.Name = "E";
                tmp1688.Type = TType.Struct;
                tmp1688.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1688, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1689 = new StringBuilder("exportChartImage_result(");
          int tmp1690 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1690++) { tmp1689.Append(", "); }
            tmp1689.Append("Success: ");
            Success.ToString(tmp1689);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1690++) { tmp1689.Append(", "); }
            tmp1689.Append("E: ");
            E.ToString(tmp1689);
          }
          tmp1689.Append(')');
          return tmp1689.ToString();
        }
      }


      public partial class exportChartImageData_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool imageFileName;
        }

        public exportChartImageData_args()
        {
        }

        public exportChartImageData_args DeepCopy()
        {
          var tmp1691 = new exportChartImageData_args();
          if(__isset.p)
          {
            tmp1691.P = this.P;
          }
          tmp1691.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1691.ChartID = this.ChartID;
          }
          tmp1691.__isset.chartID = this.__isset.chartID;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1691.ImageFileName = this.ImageFileName;
          }
          tmp1691.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1691;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1692 = new TStruct("exportChartImageData_args");
            await oprot.WriteStructBeginAsync(tmp1692, cancellationToken);
            var tmp1693 = new TField();
            if(__isset.p)
            {
              tmp1693.Name = "p";
              tmp1693.Type = TType.I64;
              tmp1693.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1693, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1693.Name = "chartID";
              tmp1693.Type = TType.String;
              tmp1693.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1693, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1693.Name = "imageFileName";
              tmp1693.Type = TType.String;
              tmp1693.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1693, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImageData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1694 = new StringBuilder("exportChartImageData_args(");
          int tmp1695 = 0;
          if(__isset.p)
          {
            if(0 < tmp1695++) { tmp1694.Append(", "); }
            tmp1694.Append("P: ");
            P.ToString(tmp1694);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1695++) { tmp1694.Append(", "); }
            tmp1694.Append("ChartID: ");
            ChartID.ToString(tmp1694);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1695++) { tmp1694.Append(", "); }
            tmp1694.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1694);
          }
          tmp1694.Append(')');
          return tmp1694.ToString();
        }
      }


      public partial class exportChartImageData_result : TBase
      {
        private byte[] _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public exportChartImageData_result()
        {
        }

        public exportChartImageData_result DeepCopy()
        {
          var tmp1696 = new exportChartImageData_result();
          if((Success != null) && __isset.success)
          {
            tmp1696.Success = this.Success.ToArray();
          }
          tmp1696.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1696.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1696.__isset.e = this.__isset.e;
          return tmp1696;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1697 = new TStruct("exportChartImageData_result");
            await oprot.WriteStructBeginAsync(tmp1697, cancellationToken);
            var tmp1698 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1698.Name = "Success";
                tmp1698.Type = TType.String;
                tmp1698.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1698, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1698.Name = "E";
                tmp1698.Type = TType.Struct;
                tmp1698.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1698, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImageData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1699 = new StringBuilder("exportChartImageData_result(");
          int tmp1700 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1700++) { tmp1699.Append(", "); }
            tmp1699.Append("Success: ");
            Success.ToString(tmp1699);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1700++) { tmp1699.Append(", "); }
            tmp1699.Append("E: ");
            E.ToString(tmp1699);
          }
          tmp1699.Append(')');
          return tmp1699.ToString();
        }
      }


      public partial class notice_args : TBase
      {
        private long _p;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool message;
          public bool log;
        }

        public notice_args()
        {
        }

        public notice_args DeepCopy()
        {
          var tmp1701 = new notice_args();
          if(__isset.p)
          {
            tmp1701.P = this.P;
          }
          tmp1701.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1701.Title = this.Title;
          }
          tmp1701.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1701.Message = this.Message;
          }
          tmp1701.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1701.Log = this.Log;
          }
          tmp1701.__isset.log = this.__isset.log;
          return tmp1701;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1702 = new TStruct("notice_args");
            await oprot.WriteStructBeginAsync(tmp1702, cancellationToken);
            var tmp1703 = new TField();
            if(__isset.p)
            {
              tmp1703.Name = "p";
              tmp1703.Type = TType.I64;
              tmp1703.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1703, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1703.Name = "title";
              tmp1703.Type = TType.String;
              tmp1703.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1703, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1703.Name = "message";
              tmp1703.Type = TType.String;
              tmp1703.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1703, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1703.Name = "log";
              tmp1703.Type = TType.String;
              tmp1703.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1703, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is notice_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1704 = new StringBuilder("notice_args(");
          int tmp1705 = 0;
          if(__isset.p)
          {
            if(0 < tmp1705++) { tmp1704.Append(", "); }
            tmp1704.Append("P: ");
            P.ToString(tmp1704);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1705++) { tmp1704.Append(", "); }
            tmp1704.Append("Title: ");
            Title.ToString(tmp1704);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1705++) { tmp1704.Append(", "); }
            tmp1704.Append("Message: ");
            Message.ToString(tmp1704);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1705++) { tmp1704.Append(", "); }
            tmp1704.Append("Log: ");
            Log.ToString(tmp1704);
          }
          tmp1704.Append(')');
          return tmp1704.ToString();
        }
      }


      public partial class dispNotice_args : TBase
      {
        private long _p;
        private global::Yaskawa.Ext.API.Disposition _disposition;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.Disposition"/>
        /// </summary>
        public global::Yaskawa.Ext.API.Disposition Disposition
        {
          get
          {
            return _disposition;
          }
          set
          {
            __isset.disposition = true;
            this._disposition = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool disposition;
          public bool title;
          public bool message;
          public bool log;
        }

        public dispNotice_args()
        {
        }

        public dispNotice_args DeepCopy()
        {
          var tmp1706 = new dispNotice_args();
          if(__isset.p)
          {
            tmp1706.P = this.P;
          }
          tmp1706.__isset.p = this.__isset.p;
          if(__isset.disposition)
          {
            tmp1706.Disposition = this.Disposition;
          }
          tmp1706.__isset.disposition = this.__isset.disposition;
          if((Title != null) && __isset.title)
          {
            tmp1706.Title = this.Title;
          }
          tmp1706.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1706.Message = this.Message;
          }
          tmp1706.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1706.Log = this.Log;
          }
          tmp1706.__isset.log = this.__isset.log;
          return tmp1706;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Disposition = (global::Yaskawa.Ext.API.Disposition)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1707 = new TStruct("dispNotice_args");
            await oprot.WriteStructBeginAsync(tmp1707, cancellationToken);
            var tmp1708 = new TField();
            if(__isset.p)
            {
              tmp1708.Name = "p";
              tmp1708.Type = TType.I64;
              tmp1708.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1708, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.disposition)
            {
              tmp1708.Name = "disposition";
              tmp1708.Type = TType.I32;
              tmp1708.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1708, cancellationToken);
              await oprot.WriteI32Async((int)Disposition, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1708.Name = "title";
              tmp1708.Type = TType.String;
              tmp1708.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1708, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1708.Name = "message";
              tmp1708.Type = TType.String;
              tmp1708.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1708, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1708.Name = "log";
              tmp1708.Type = TType.String;
              tmp1708.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1708, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dispNotice_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.disposition == other.__isset.disposition) && ((!__isset.disposition) || (global::System.Object.Equals(Disposition, other.Disposition))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if(__isset.disposition)
            {
              hashcode = (hashcode * 397) + Disposition.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1709 = new StringBuilder("dispNotice_args(");
          int tmp1710 = 0;
          if(__isset.p)
          {
            if(0 < tmp1710++) { tmp1709.Append(", "); }
            tmp1709.Append("P: ");
            P.ToString(tmp1709);
          }
          if(__isset.disposition)
          {
            if(0 < tmp1710++) { tmp1709.Append(", "); }
            tmp1709.Append("Disposition: ");
            Disposition.ToString(tmp1709);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1710++) { tmp1709.Append(", "); }
            tmp1709.Append("Title: ");
            Title.ToString(tmp1709);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1710++) { tmp1709.Append(", "); }
            tmp1709.Append("Message: ");
            Message.ToString(tmp1709);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1710++) { tmp1709.Append(", "); }
            tmp1709.Append("Log: ");
            Log.ToString(tmp1709);
          }
          tmp1709.Append(')');
          return tmp1709.ToString();
        }
      }


      public partial class error_args : TBase
      {
        private long _p;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool message;
          public bool log;
        }

        public error_args()
        {
        }

        public error_args DeepCopy()
        {
          var tmp1711 = new error_args();
          if(__isset.p)
          {
            tmp1711.P = this.P;
          }
          tmp1711.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1711.Title = this.Title;
          }
          tmp1711.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1711.Message = this.Message;
          }
          tmp1711.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1711.Log = this.Log;
          }
          tmp1711.__isset.log = this.__isset.log;
          return tmp1711;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1712 = new TStruct("error_args");
            await oprot.WriteStructBeginAsync(tmp1712, cancellationToken);
            var tmp1713 = new TField();
            if(__isset.p)
            {
              tmp1713.Name = "p";
              tmp1713.Type = TType.I64;
              tmp1713.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1713, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1713.Name = "title";
              tmp1713.Type = TType.String;
              tmp1713.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1713, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1713.Name = "message";
              tmp1713.Type = TType.String;
              tmp1713.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1713, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1713.Name = "log";
              tmp1713.Type = TType.String;
              tmp1713.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1713, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is error_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1714 = new StringBuilder("error_args(");
          int tmp1715 = 0;
          if(__isset.p)
          {
            if(0 < tmp1715++) { tmp1714.Append(", "); }
            tmp1714.Append("P: ");
            P.ToString(tmp1714);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1715++) { tmp1714.Append(", "); }
            tmp1714.Append("Title: ");
            Title.ToString(tmp1714);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1715++) { tmp1714.Append(", "); }
            tmp1714.Append("Message: ");
            Message.ToString(tmp1714);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1715++) { tmp1714.Append(", "); }
            tmp1714.Append("Log: ");
            Log.ToString(tmp1714);
          }
          tmp1714.Append(')');
          return tmp1714.ToString();
        }
      }


      public partial class popupDialog_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _title;
        private string _message;
        private string _positiveOption;
        private string _negativeOption;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string PositiveOption
        {
          get
          {
            return _positiveOption;
          }
          set
          {
            __isset.positiveOption = true;
            this._positiveOption = value;
          }
        }

        public string NegativeOption
        {
          get
          {
            return _negativeOption;
          }
          set
          {
            __isset.negativeOption = true;
            this._negativeOption = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool title;
          public bool message;
          public bool positiveOption;
          public bool negativeOption;
        }

        public popupDialog_args()
        {
        }

        public popupDialog_args DeepCopy()
        {
          var tmp1716 = new popupDialog_args();
          if(__isset.p)
          {
            tmp1716.P = this.P;
          }
          tmp1716.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1716.Identifier = this.Identifier;
          }
          tmp1716.__isset.identifier = this.__isset.identifier;
          if((Title != null) && __isset.title)
          {
            tmp1716.Title = this.Title;
          }
          tmp1716.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1716.Message = this.Message;
          }
          tmp1716.__isset.message = this.__isset.message;
          if((PositiveOption != null) && __isset.positiveOption)
          {
            tmp1716.PositiveOption = this.PositiveOption;
          }
          tmp1716.__isset.positiveOption = this.__isset.positiveOption;
          if((NegativeOption != null) && __isset.negativeOption)
          {
            tmp1716.NegativeOption = this.NegativeOption;
          }
          tmp1716.__isset.negativeOption = this.__isset.negativeOption;
          return tmp1716;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    PositiveOption = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    NegativeOption = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1717 = new TStruct("popupDialog_args");
            await oprot.WriteStructBeginAsync(tmp1717, cancellationToken);
            var tmp1718 = new TField();
            if(__isset.p)
            {
              tmp1718.Name = "p";
              tmp1718.Type = TType.I64;
              tmp1718.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1718, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1718.Name = "identifier";
              tmp1718.Type = TType.String;
              tmp1718.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1718, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1718.Name = "title";
              tmp1718.Type = TType.String;
              tmp1718.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1718, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1718.Name = "message";
              tmp1718.Type = TType.String;
              tmp1718.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1718, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PositiveOption != null) && __isset.positiveOption)
            {
              tmp1718.Name = "positiveOption";
              tmp1718.Type = TType.String;
              tmp1718.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1718, cancellationToken);
              await oprot.WriteStringAsync(PositiveOption, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NegativeOption != null) && __isset.negativeOption)
            {
              tmp1718.Name = "negativeOption";
              tmp1718.Type = TType.String;
              tmp1718.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1718, cancellationToken);
              await oprot.WriteStringAsync(NegativeOption, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is popupDialog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.positiveOption == other.__isset.positiveOption) && ((!__isset.positiveOption) || (global::System.Object.Equals(PositiveOption, other.PositiveOption))))
            && ((__isset.negativeOption == other.__isset.negativeOption) && ((!__isset.negativeOption) || (global::System.Object.Equals(NegativeOption, other.NegativeOption))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((PositiveOption != null) && __isset.positiveOption)
            {
              hashcode = (hashcode * 397) + PositiveOption.GetHashCode();
            }
            if((NegativeOption != null) && __isset.negativeOption)
            {
              hashcode = (hashcode * 397) + NegativeOption.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1719 = new StringBuilder("popupDialog_args(");
          int tmp1720 = 0;
          if(__isset.p)
          {
            if(0 < tmp1720++) { tmp1719.Append(", "); }
            tmp1719.Append("P: ");
            P.ToString(tmp1719);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1720++) { tmp1719.Append(", "); }
            tmp1719.Append("Identifier: ");
            Identifier.ToString(tmp1719);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1720++) { tmp1719.Append(", "); }
            tmp1719.Append("Title: ");
            Title.ToString(tmp1719);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1720++) { tmp1719.Append(", "); }
            tmp1719.Append("Message: ");
            Message.ToString(tmp1719);
          }
          if((PositiveOption != null) && __isset.positiveOption)
          {
            if(0 < tmp1720++) { tmp1719.Append(", "); }
            tmp1719.Append("PositiveOption: ");
            PositiveOption.ToString(tmp1719);
          }
          if((NegativeOption != null) && __isset.negativeOption)
          {
            if(0 < tmp1720++) { tmp1719.Append(", "); }
            tmp1719.Append("NegativeOption: ");
            NegativeOption.ToString(tmp1719);
          }
          tmp1719.Append(')');
          return tmp1719.ToString();
        }
      }


      public partial class popupDialog_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public popupDialog_result()
        {
        }

        public popupDialog_result DeepCopy()
        {
          var tmp1721 = new popupDialog_result();
          if((E != null) && __isset.e)
          {
            tmp1721.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1721.__isset.e = this.__isset.e;
          return tmp1721;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1722 = new TStruct("popupDialog_result");
            await oprot.WriteStructBeginAsync(tmp1722, cancellationToken);
            var tmp1723 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1723.Name = "E";
                tmp1723.Type = TType.Struct;
                tmp1723.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1723, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is popupDialog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1724 = new StringBuilder("popupDialog_result(");
          int tmp1725 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1725++) { tmp1724.Append(", "); }
            tmp1724.Append("E: ");
            E.ToString(tmp1724);
          }
          tmp1724.Append(')');
          return tmp1724.ToString();
        }
      }


      public partial class cancelPopupDialog_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public cancelPopupDialog_args()
        {
        }

        public cancelPopupDialog_args DeepCopy()
        {
          var tmp1726 = new cancelPopupDialog_args();
          if(__isset.p)
          {
            tmp1726.P = this.P;
          }
          tmp1726.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1726.Identifier = this.Identifier;
          }
          tmp1726.__isset.identifier = this.__isset.identifier;
          return tmp1726;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1727 = new TStruct("cancelPopupDialog_args");
            await oprot.WriteStructBeginAsync(tmp1727, cancellationToken);
            var tmp1728 = new TField();
            if(__isset.p)
            {
              tmp1728.Name = "p";
              tmp1728.Type = TType.I64;
              tmp1728.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1728, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1728.Name = "identifier";
              tmp1728.Type = TType.String;
              tmp1728.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1728, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelPopupDialog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1729 = new StringBuilder("cancelPopupDialog_args(");
          int tmp1730 = 0;
          if(__isset.p)
          {
            if(0 < tmp1730++) { tmp1729.Append(", "); }
            tmp1729.Append("P: ");
            P.ToString(tmp1729);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1730++) { tmp1729.Append(", "); }
            tmp1729.Append("Identifier: ");
            Identifier.ToString(tmp1729);
          }
          tmp1729.Append(')');
          return tmp1729.ToString();
        }
      }


      public partial class cancelPopupDialog_result : TBase
      {

        public cancelPopupDialog_result()
        {
        }

        public cancelPopupDialog_result DeepCopy()
        {
          var tmp1731 = new cancelPopupDialog_result();
          return tmp1731;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1732 = new TStruct("cancelPopupDialog_result");
            await oprot.WriteStructBeginAsync(tmp1732, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelPopupDialog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1733 = new StringBuilder("cancelPopupDialog_result(");
          tmp1733.Append(')');
          return tmp1733.ToString();
        }
      }


      public partial class insertInstructionAtSelectedLine_args : TBase
      {
        private long _p;
        private string _instruction;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Instruction
        {
          get
          {
            return _instruction;
          }
          set
          {
            __isset.instruction = true;
            this._instruction = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool instruction;
        }

        public insertInstructionAtSelectedLine_args()
        {
        }

        public insertInstructionAtSelectedLine_args DeepCopy()
        {
          var tmp1735 = new insertInstructionAtSelectedLine_args();
          if(__isset.p)
          {
            tmp1735.P = this.P;
          }
          tmp1735.__isset.p = this.__isset.p;
          if((Instruction != null) && __isset.instruction)
          {
            tmp1735.Instruction = this.Instruction;
          }
          tmp1735.__isset.instruction = this.__isset.instruction;
          return tmp1735;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Instruction = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1736 = new TStruct("insertInstructionAtSelectedLine_args");
            await oprot.WriteStructBeginAsync(tmp1736, cancellationToken);
            var tmp1737 = new TField();
            if(__isset.p)
            {
              tmp1737.Name = "p";
              tmp1737.Type = TType.I64;
              tmp1737.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1737, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Instruction != null) && __isset.instruction)
            {
              tmp1737.Name = "instruction";
              tmp1737.Type = TType.String;
              tmp1737.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1737, cancellationToken);
              await oprot.WriteStringAsync(Instruction, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertInstructionAtSelectedLine_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.instruction == other.__isset.instruction) && ((!__isset.instruction) || (global::System.Object.Equals(Instruction, other.Instruction))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Instruction != null) && __isset.instruction)
            {
              hashcode = (hashcode * 397) + Instruction.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1738 = new StringBuilder("insertInstructionAtSelectedLine_args(");
          int tmp1739 = 0;
          if(__isset.p)
          {
            if(0 < tmp1739++) { tmp1738.Append(", "); }
            tmp1738.Append("P: ");
            P.ToString(tmp1738);
          }
          if((Instruction != null) && __isset.instruction)
          {
            if(0 < tmp1739++) { tmp1738.Append(", "); }
            tmp1738.Append("Instruction: ");
            Instruction.ToString(tmp1738);
          }
          tmp1738.Append(')');
          return tmp1738.ToString();
        }
      }


      public partial class insertInstructionAtSelectedLine_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public insertInstructionAtSelectedLine_result()
        {
        }

        public insertInstructionAtSelectedLine_result DeepCopy()
        {
          var tmp1740 = new insertInstructionAtSelectedLine_result();
          if((Success != null) && __isset.success)
          {
            tmp1740.Success = this.Success;
          }
          tmp1740.__isset.success = this.__isset.success;
          return tmp1740;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1741 = new TStruct("insertInstructionAtSelectedLine_result");
            await oprot.WriteStructBeginAsync(tmp1741, cancellationToken);
            var tmp1742 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1742.Name = "Success";
                tmp1742.Type = TType.String;
                tmp1742.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1742, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertInstructionAtSelectedLine_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1743 = new StringBuilder("insertInstructionAtSelectedLine_result(");
          int tmp1744 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1744++) { tmp1743.Append(", "); }
            tmp1743.Append("Success: ");
            Success.ToString(tmp1743);
          }
          tmp1743.Append(')');
          return tmp1743.ToString();
        }
      }


      public partial class displayScreen_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public displayScreen_args()
        {
        }

        public displayScreen_args DeepCopy()
        {
          var tmp1745 = new displayScreen_args();
          if(__isset.p)
          {
            tmp1745.P = this.P;
          }
          tmp1745.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1745.Identifier = this.Identifier;
          }
          tmp1745.__isset.identifier = this.__isset.identifier;
          return tmp1745;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1746 = new TStruct("displayScreen_args");
            await oprot.WriteStructBeginAsync(tmp1746, cancellationToken);
            var tmp1747 = new TField();
            if(__isset.p)
            {
              tmp1747.Name = "p";
              tmp1747.Type = TType.I64;
              tmp1747.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1747, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1747.Name = "identifier";
              tmp1747.Type = TType.String;
              tmp1747.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1747, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayScreen_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1748 = new StringBuilder("displayScreen_args(");
          int tmp1749 = 0;
          if(__isset.p)
          {
            if(0 < tmp1749++) { tmp1748.Append(", "); }
            tmp1748.Append("P: ");
            P.ToString(tmp1748);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1749++) { tmp1748.Append(", "); }
            tmp1748.Append("Identifier: ");
            Identifier.ToString(tmp1748);
          }
          tmp1748.Append(')');
          return tmp1748.ToString();
        }
      }


      public partial class displayScreen_result : TBase
      {

        public displayScreen_result()
        {
        }

        public displayScreen_result DeepCopy()
        {
          var tmp1750 = new displayScreen_result();
          return tmp1750;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1751 = new TStruct("displayScreen_result");
            await oprot.WriteStructBeginAsync(tmp1751, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayScreen_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1752 = new StringBuilder("displayScreen_result(");
          tmp1752.Append(')');
          return tmp1752.ToString();
        }
      }


      public partial class displayHelp_args : TBase
      {
        private long _p;
        private string _title;
        private string _htmlContentFile;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string HtmlContentFile
        {
          get
          {
            return _htmlContentFile;
          }
          set
          {
            __isset.htmlContentFile = true;
            this._htmlContentFile = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool htmlContentFile;
        }

        public displayHelp_args()
        {
        }

        public displayHelp_args DeepCopy()
        {
          var tmp1754 = new displayHelp_args();
          if(__isset.p)
          {
            tmp1754.P = this.P;
          }
          tmp1754.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1754.Title = this.Title;
          }
          tmp1754.__isset.title = this.__isset.title;
          if((HtmlContentFile != null) && __isset.htmlContentFile)
          {
            tmp1754.HtmlContentFile = this.HtmlContentFile;
          }
          tmp1754.__isset.htmlContentFile = this.__isset.htmlContentFile;
          return tmp1754;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    HtmlContentFile = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1755 = new TStruct("displayHelp_args");
            await oprot.WriteStructBeginAsync(tmp1755, cancellationToken);
            var tmp1756 = new TField();
            if(__isset.p)
            {
              tmp1756.Name = "p";
              tmp1756.Type = TType.I64;
              tmp1756.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1756, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1756.Name = "title";
              tmp1756.Type = TType.String;
              tmp1756.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1756, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlContentFile != null) && __isset.htmlContentFile)
            {
              tmp1756.Name = "htmlContentFile";
              tmp1756.Type = TType.String;
              tmp1756.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1756, cancellationToken);
              await oprot.WriteStringAsync(HtmlContentFile, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayHelp_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.htmlContentFile == other.__isset.htmlContentFile) && ((!__isset.htmlContentFile) || (global::System.Object.Equals(HtmlContentFile, other.HtmlContentFile))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((HtmlContentFile != null) && __isset.htmlContentFile)
            {
              hashcode = (hashcode * 397) + HtmlContentFile.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1757 = new StringBuilder("displayHelp_args(");
          int tmp1758 = 0;
          if(__isset.p)
          {
            if(0 < tmp1758++) { tmp1757.Append(", "); }
            tmp1757.Append("P: ");
            P.ToString(tmp1757);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1758++) { tmp1757.Append(", "); }
            tmp1757.Append("Title: ");
            Title.ToString(tmp1757);
          }
          if((HtmlContentFile != null) && __isset.htmlContentFile)
          {
            if(0 < tmp1758++) { tmp1757.Append(", "); }
            tmp1757.Append("HtmlContentFile: ");
            HtmlContentFile.ToString(tmp1757);
          }
          tmp1757.Append(')');
          return tmp1757.ToString();
        }
      }


      public partial class displayHelp_result : TBase
      {

        public displayHelp_result()
        {
        }

        public displayHelp_result DeepCopy()
        {
          var tmp1759 = new displayHelp_result();
          return tmp1759;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1760 = new TStruct("displayHelp_result");
            await oprot.WriteStructBeginAsync(tmp1760, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayHelp_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1761 = new StringBuilder("displayHelp_result(");
          tmp1761.Append(')');
          return tmp1761.ToString();
        }
      }


      public partial class accessLevel_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public accessLevel_args()
        {
        }

        public accessLevel_args DeepCopy()
        {
          var tmp1763 = new accessLevel_args();
          if(__isset.p)
          {
            tmp1763.P = this.P;
          }
          tmp1763.__isset.p = this.__isset.p;
          return tmp1763;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1764 = new TStruct("accessLevel_args");
            await oprot.WriteStructBeginAsync(tmp1764, cancellationToken);
            var tmp1765 = new TField();
            if(__isset.p)
            {
              tmp1765.Name = "p";
              tmp1765.Type = TType.I64;
              tmp1765.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1765, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is accessLevel_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1766 = new StringBuilder("accessLevel_args(");
          int tmp1767 = 0;
          if(__isset.p)
          {
            if(0 < tmp1767++) { tmp1766.Append(", "); }
            tmp1766.Append("P: ");
            P.ToString(tmp1766);
          }
          tmp1766.Append(')');
          return tmp1766.ToString();
        }
      }


      public partial class accessLevel_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public accessLevel_result()
        {
        }

        public accessLevel_result DeepCopy()
        {
          var tmp1768 = new accessLevel_result();
          if((Success != null) && __isset.success)
          {
            tmp1768.Success = this.Success;
          }
          tmp1768.__isset.success = this.__isset.success;
          return tmp1768;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1769 = new TStruct("accessLevel_result");
            await oprot.WriteStructBeginAsync(tmp1769, cancellationToken);
            var tmp1770 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1770.Name = "Success";
                tmp1770.Type = TType.String;
                tmp1770.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1770, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is accessLevel_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1771 = new StringBuilder("accessLevel_result(");
          int tmp1772 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1772++) { tmp1771.Append(", "); }
            tmp1771.Append("Success: ");
            Success.ToString(tmp1771);
          }
          tmp1771.Append(')');
          return tmp1771.ToString();
        }
      }


      public partial class accessLevelIncludes_args : TBase
      {
        private long _p;
        private string _level;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Level
        {
          get
          {
            return _level;
          }
          set
          {
            __isset.level = true;
            this._level = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool level;
        }

        public accessLevelIncludes_args()
        {
        }

        public accessLevelIncludes_args DeepCopy()
        {
          var tmp1773 = new accessLevelIncludes_args();
          if(__isset.p)
          {
            tmp1773.P = this.P;
          }
          tmp1773.__isset.p = this.__isset.p;
          if((Level != null) && __isset.level)
          {
            tmp1773.Level = this.Level;
          }
          tmp1773.__isset.level = this.__isset.level;
          return tmp1773;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Level = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1774 = new TStruct("accessLevelIncludes_args");
            await oprot.WriteStructBeginAsync(tmp1774, cancellationToken);
            var tmp1775 = new TField();
            if(__isset.p)
            {
              tmp1775.Name = "p";
              tmp1775.Type = TType.I64;
              tmp1775.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1775, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Level != null) && __isset.level)
            {
              tmp1775.Name = "level";
              tmp1775.Type = TType.String;
              tmp1775.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1775, cancellationToken);
              await oprot.WriteStringAsync(Level, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is accessLevelIncludes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.level == other.__isset.level) && ((!__isset.level) || (global::System.Object.Equals(Level, other.Level))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Level != null) && __isset.level)
            {
              hashcode = (hashcode * 397) + Level.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1776 = new StringBuilder("accessLevelIncludes_args(");
          int tmp1777 = 0;
          if(__isset.p)
          {
            if(0 < tmp1777++) { tmp1776.Append(", "); }
            tmp1776.Append("P: ");
            P.ToString(tmp1776);
          }
          if((Level != null) && __isset.level)
          {
            if(0 < tmp1777++) { tmp1776.Append(", "); }
            tmp1776.Append("Level: ");
            Level.ToString(tmp1776);
          }
          tmp1776.Append(')');
          return tmp1776.ToString();
        }
      }


      public partial class accessLevelIncludes_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public accessLevelIncludes_result()
        {
        }

        public accessLevelIncludes_result DeepCopy()
        {
          var tmp1778 = new accessLevelIncludes_result();
          if(__isset.success)
          {
            tmp1778.Success = this.Success;
          }
          tmp1778.__isset.success = this.__isset.success;
          return tmp1778;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1779 = new TStruct("accessLevelIncludes_result");
            await oprot.WriteStructBeginAsync(tmp1779, cancellationToken);
            var tmp1780 = new TField();

            if(this.__isset.success)
            {
              tmp1780.Name = "Success";
              tmp1780.Type = TType.Bool;
              tmp1780.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1780, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is accessLevelIncludes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1781 = new StringBuilder("accessLevelIncludes_result(");
          int tmp1782 = 0;
          if(__isset.success)
          {
            if(0 < tmp1782++) { tmp1781.Append(", "); }
            tmp1781.Append("Success: ");
            Success.ToString(tmp1781);
          }
          tmp1781.Append(')');
          return tmp1781.ToString();
        }
      }


      public partial class appendRow_args : TBase
      {
        private long _p;
        private string _ContainerID;
        private Dictionary<string, global::Yaskawa.Ext.API.Any> _dict;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ContainerID
        {
          get
          {
            return _ContainerID;
          }
          set
          {
            __isset.ContainerID = true;
            this._ContainerID = value;
          }
        }

        public Dictionary<string, global::Yaskawa.Ext.API.Any> Dict
        {
          get
          {
            return _dict;
          }
          set
          {
            __isset.dict = true;
            this._dict = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ContainerID;
          public bool dict;
        }

        public appendRow_args()
        {
        }

        public appendRow_args DeepCopy()
        {
          var tmp1783 = new appendRow_args();
          if(__isset.p)
          {
            tmp1783.P = this.P;
          }
          tmp1783.__isset.p = this.__isset.p;
          if((ContainerID != null) && __isset.ContainerID)
          {
            tmp1783.ContainerID = this.ContainerID;
          }
          tmp1783.__isset.ContainerID = this.__isset.ContainerID;
          if((Dict != null) && __isset.dict)
          {
            tmp1783.Dict = this.Dict.DeepCopy();
          }
          tmp1783.__isset.dict = this.__isset.dict;
          return tmp1783;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ContainerID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1784 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Dict = new Dictionary<string, global::Yaskawa.Ext.API.Any>(_map1784.Count);
                      for(int _i1785 = 0; _i1785 < _map1784.Count; ++_i1785)
                      {
                        string _key1786;
                        global::Yaskawa.Ext.API.Any _val1787;
                        _key1786 = await iprot.ReadStringAsync(cancellationToken);
                        _val1787 = new global::Yaskawa.Ext.API.Any();
                        await _val1787.ReadAsync(iprot, cancellationToken);
                        Dict[_key1786] = _val1787;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1788 = new TStruct("appendRow_args");
            await oprot.WriteStructBeginAsync(tmp1788, cancellationToken);
            var tmp1789 = new TField();
            if(__isset.p)
            {
              tmp1789.Name = "p";
              tmp1789.Type = TType.I64;
              tmp1789.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1789, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              tmp1789.Name = "ContainerID";
              tmp1789.Type = TType.String;
              tmp1789.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1789, cancellationToken);
              await oprot.WriteStringAsync(ContainerID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Dict != null) && __isset.dict)
            {
              tmp1789.Name = "dict";
              tmp1789.Type = TType.Map;
              tmp1789.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1789, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Dict.Count), cancellationToken);
              foreach (string _iter1790 in Dict.Keys)
              {
                await oprot.WriteStringAsync(_iter1790, cancellationToken);
                await Dict[_iter1790].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendRow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ContainerID == other.__isset.ContainerID) && ((!__isset.ContainerID) || (global::System.Object.Equals(ContainerID, other.ContainerID))))
            && ((__isset.dict == other.__isset.dict) && ((!__isset.dict) || (TCollections.Equals(Dict, other.Dict))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              hashcode = (hashcode * 397) + ContainerID.GetHashCode();
            }
            if((Dict != null) && __isset.dict)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Dict);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1791 = new StringBuilder("appendRow_args(");
          int tmp1792 = 0;
          if(__isset.p)
          {
            if(0 < tmp1792++) { tmp1791.Append(", "); }
            tmp1791.Append("P: ");
            P.ToString(tmp1791);
          }
          if((ContainerID != null) && __isset.ContainerID)
          {
            if(0 < tmp1792++) { tmp1791.Append(", "); }
            tmp1791.Append("ContainerID: ");
            ContainerID.ToString(tmp1791);
          }
          if((Dict != null) && __isset.dict)
          {
            if(0 < tmp1792++) { tmp1791.Append(", "); }
            tmp1791.Append("Dict: ");
            Dict.ToString(tmp1791);
          }
          tmp1791.Append(')');
          return tmp1791.ToString();
        }
      }


      public partial class appendRow_result : TBase
      {

        public appendRow_result()
        {
        }

        public appendRow_result DeepCopy()
        {
          var tmp1793 = new appendRow_result();
          return tmp1793;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1794 = new TStruct("appendRow_result");
            await oprot.WriteStructBeginAsync(tmp1794, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendRow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1795 = new StringBuilder("appendRow_result(");
          tmp1795.Append(')');
          return tmp1795.ToString();
        }
      }


      public partial class insertRow_args : TBase
      {
        private long _p;
        private string _ContainerID;
        private long _index;
        private Dictionary<string, global::Yaskawa.Ext.API.Any> _dict;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ContainerID
        {
          get
          {
            return _ContainerID;
          }
          set
          {
            __isset.ContainerID = true;
            this._ContainerID = value;
          }
        }

        public long Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public Dictionary<string, global::Yaskawa.Ext.API.Any> Dict
        {
          get
          {
            return _dict;
          }
          set
          {
            __isset.dict = true;
            this._dict = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ContainerID;
          public bool index;
          public bool dict;
        }

        public insertRow_args()
        {
        }

        public insertRow_args DeepCopy()
        {
          var tmp1797 = new insertRow_args();
          if(__isset.p)
          {
            tmp1797.P = this.P;
          }
          tmp1797.__isset.p = this.__isset.p;
          if((ContainerID != null) && __isset.ContainerID)
          {
            tmp1797.ContainerID = this.ContainerID;
          }
          tmp1797.__isset.ContainerID = this.__isset.ContainerID;
          if(__isset.index)
          {
            tmp1797.Index = this.Index;
          }
          tmp1797.__isset.index = this.__isset.index;
          if((Dict != null) && __isset.dict)
          {
            tmp1797.Dict = this.Dict.DeepCopy();
          }
          tmp1797.__isset.dict = this.__isset.dict;
          return tmp1797;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ContainerID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I64)
                  {
                    Index = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1798 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Dict = new Dictionary<string, global::Yaskawa.Ext.API.Any>(_map1798.Count);
                      for(int _i1799 = 0; _i1799 < _map1798.Count; ++_i1799)
                      {
                        string _key1800;
                        global::Yaskawa.Ext.API.Any _val1801;
                        _key1800 = await iprot.ReadStringAsync(cancellationToken);
                        _val1801 = new global::Yaskawa.Ext.API.Any();
                        await _val1801.ReadAsync(iprot, cancellationToken);
                        Dict[_key1800] = _val1801;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1802 = new TStruct("insertRow_args");
            await oprot.WriteStructBeginAsync(tmp1802, cancellationToken);
            var tmp1803 = new TField();
            if(__isset.p)
            {
              tmp1803.Name = "p";
              tmp1803.Type = TType.I64;
              tmp1803.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1803, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              tmp1803.Name = "ContainerID";
              tmp1803.Type = TType.String;
              tmp1803.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1803, cancellationToken);
              await oprot.WriteStringAsync(ContainerID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp1803.Name = "index";
              tmp1803.Type = TType.I64;
              tmp1803.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1803, cancellationToken);
              await oprot.WriteI64Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Dict != null) && __isset.dict)
            {
              tmp1803.Name = "dict";
              tmp1803.Type = TType.Map;
              tmp1803.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1803, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Dict.Count), cancellationToken);
              foreach (string _iter1804 in Dict.Keys)
              {
                await oprot.WriteStringAsync(_iter1804, cancellationToken);
                await Dict[_iter1804].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertRow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ContainerID == other.__isset.ContainerID) && ((!__isset.ContainerID) || (global::System.Object.Equals(ContainerID, other.ContainerID))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.dict == other.__isset.dict) && ((!__isset.dict) || (TCollections.Equals(Dict, other.Dict))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              hashcode = (hashcode * 397) + ContainerID.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if((Dict != null) && __isset.dict)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Dict);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1805 = new StringBuilder("insertRow_args(");
          int tmp1806 = 0;
          if(__isset.p)
          {
            if(0 < tmp1806++) { tmp1805.Append(", "); }
            tmp1805.Append("P: ");
            P.ToString(tmp1805);
          }
          if((ContainerID != null) && __isset.ContainerID)
          {
            if(0 < tmp1806++) { tmp1805.Append(", "); }
            tmp1805.Append("ContainerID: ");
            ContainerID.ToString(tmp1805);
          }
          if(__isset.index)
          {
            if(0 < tmp1806++) { tmp1805.Append(", "); }
            tmp1805.Append("Index: ");
            Index.ToString(tmp1805);
          }
          if((Dict != null) && __isset.dict)
          {
            if(0 < tmp1806++) { tmp1805.Append(", "); }
            tmp1805.Append("Dict: ");
            Dict.ToString(tmp1805);
          }
          tmp1805.Append(')');
          return tmp1805.ToString();
        }
      }


      public partial class insertRow_result : TBase
      {

        public insertRow_result()
        {
        }

        public insertRow_result DeepCopy()
        {
          var tmp1807 = new insertRow_result();
          return tmp1807;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1808 = new TStruct("insertRow_result");
            await oprot.WriteStructBeginAsync(tmp1808, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertRow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1809 = new StringBuilder("insertRow_result(");
          tmp1809.Append(')');
          return tmp1809.ToString();
        }
      }


      public partial class deleteRow_args : TBase
      {
        private long _p;
        private string _ContainerID;
        private long _index;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ContainerID
        {
          get
          {
            return _ContainerID;
          }
          set
          {
            __isset.ContainerID = true;
            this._ContainerID = value;
          }
        }

        public long Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ContainerID;
          public bool index;
        }

        public deleteRow_args()
        {
        }

        public deleteRow_args DeepCopy()
        {
          var tmp1811 = new deleteRow_args();
          if(__isset.p)
          {
            tmp1811.P = this.P;
          }
          tmp1811.__isset.p = this.__isset.p;
          if((ContainerID != null) && __isset.ContainerID)
          {
            tmp1811.ContainerID = this.ContainerID;
          }
          tmp1811.__isset.ContainerID = this.__isset.ContainerID;
          if(__isset.index)
          {
            tmp1811.Index = this.Index;
          }
          tmp1811.__isset.index = this.__isset.index;
          return tmp1811;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ContainerID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I64)
                  {
                    Index = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1812 = new TStruct("deleteRow_args");
            await oprot.WriteStructBeginAsync(tmp1812, cancellationToken);
            var tmp1813 = new TField();
            if(__isset.p)
            {
              tmp1813.Name = "p";
              tmp1813.Type = TType.I64;
              tmp1813.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1813, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              tmp1813.Name = "ContainerID";
              tmp1813.Type = TType.String;
              tmp1813.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1813, cancellationToken);
              await oprot.WriteStringAsync(ContainerID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp1813.Name = "index";
              tmp1813.Type = TType.I64;
              tmp1813.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1813, cancellationToken);
              await oprot.WriteI64Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteRow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ContainerID == other.__isset.ContainerID) && ((!__isset.ContainerID) || (global::System.Object.Equals(ContainerID, other.ContainerID))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              hashcode = (hashcode * 397) + ContainerID.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1814 = new StringBuilder("deleteRow_args(");
          int tmp1815 = 0;
          if(__isset.p)
          {
            if(0 < tmp1815++) { tmp1814.Append(", "); }
            tmp1814.Append("P: ");
            P.ToString(tmp1814);
          }
          if((ContainerID != null) && __isset.ContainerID)
          {
            if(0 < tmp1815++) { tmp1814.Append(", "); }
            tmp1814.Append("ContainerID: ");
            ContainerID.ToString(tmp1814);
          }
          if(__isset.index)
          {
            if(0 < tmp1815++) { tmp1814.Append(", "); }
            tmp1814.Append("Index: ");
            Index.ToString(tmp1814);
          }
          tmp1814.Append(')');
          return tmp1814.ToString();
        }
      }


      public partial class deleteRow_result : TBase
      {

        public deleteRow_result()
        {
        }

        public deleteRow_result DeepCopy()
        {
          var tmp1816 = new deleteRow_result();
          return tmp1816;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1817 = new TStruct("deleteRow_result");
            await oprot.WriteStructBeginAsync(tmp1817, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteRow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1818 = new StringBuilder("deleteRow_result(");
          tmp1818.Append(')');
          return tmp1818.ToString();
        }
      }


      public partial class clearRows_args : TBase
      {
        private long _p;
        private string _ContainerID;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ContainerID
        {
          get
          {
            return _ContainerID;
          }
          set
          {
            __isset.ContainerID = true;
            this._ContainerID = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ContainerID;
        }

        public clearRows_args()
        {
        }

        public clearRows_args DeepCopy()
        {
          var tmp1820 = new clearRows_args();
          if(__isset.p)
          {
            tmp1820.P = this.P;
          }
          tmp1820.__isset.p = this.__isset.p;
          if((ContainerID != null) && __isset.ContainerID)
          {
            tmp1820.ContainerID = this.ContainerID;
          }
          tmp1820.__isset.ContainerID = this.__isset.ContainerID;
          return tmp1820;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ContainerID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1821 = new TStruct("clearRows_args");
            await oprot.WriteStructBeginAsync(tmp1821, cancellationToken);
            var tmp1822 = new TField();
            if(__isset.p)
            {
              tmp1822.Name = "p";
              tmp1822.Type = TType.I64;
              tmp1822.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1822, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              tmp1822.Name = "ContainerID";
              tmp1822.Type = TType.String;
              tmp1822.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1822, cancellationToken);
              await oprot.WriteStringAsync(ContainerID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is clearRows_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ContainerID == other.__isset.ContainerID) && ((!__isset.ContainerID) || (global::System.Object.Equals(ContainerID, other.ContainerID))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              hashcode = (hashcode * 397) + ContainerID.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1823 = new StringBuilder("clearRows_args(");
          int tmp1824 = 0;
          if(__isset.p)
          {
            if(0 < tmp1824++) { tmp1823.Append(", "); }
            tmp1823.Append("P: ");
            P.ToString(tmp1823);
          }
          if((ContainerID != null) && __isset.ContainerID)
          {
            if(0 < tmp1824++) { tmp1823.Append(", "); }
            tmp1823.Append("ContainerID: ");
            ContainerID.ToString(tmp1823);
          }
          tmp1823.Append(')');
          return tmp1823.ToString();
        }
      }


      public partial class clearRows_result : TBase
      {

        public clearRows_result()
        {
        }

        public clearRows_result DeepCopy()
        {
          var tmp1825 = new clearRows_result();
          return tmp1825;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1826 = new TStruct("clearRows_result");
            await oprot.WriteStructBeginAsync(tmp1826, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is clearRows_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1827 = new StringBuilder("clearRows_result(");
          tmp1827.Append(')');
          return tmp1827.ToString();
        }
      }

    }

  }
}
