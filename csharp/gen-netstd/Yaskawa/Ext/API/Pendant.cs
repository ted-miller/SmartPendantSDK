/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Pendant
  {
    /// <summary>
    /// The Pendant API provides functions for interacting with and
    /// integrating the main Smart Pendant user-interface.
    /// 
    /// (Extensions are not required to have a user-interface)
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Version of the Smart Pendant itself
      /// (avoid using this for conditional feature use - use the Extension apiVersion() instead)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> pendantVersion(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to specified set of Pendant service events.  May be called multiple times to add to subscription.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from specified set of Pendant service events.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to specified set of Pendant service YML Item-specific events.
      /// Specified events will be sent for all specified items.  May be called multiple times to add to subscription.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemIDs"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from specified set of Pendant service YML Item-specific events.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemIDs"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain list of Pendant service events that have occured since last call
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> events(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query the current UI language of the pendant interface.
      /// Returns IETF language codes (RFCs 5646, 5645, 4647) of languages
      /// (typically ISO 693-1 code when region insignificant)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> currentLanguage(long p, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> currentLocale(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// The UI screen currently shown to the pendant user
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> currentScreenName(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an Item type described using a YML source code string
      /// Returns a list of parsing errors (0 on success)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ymlSource"></param>
      global::System.Threading.Tasks.Task<List<string>> registerYML(long p, string ymlSource, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an image file for later reference by filename (must be uniquely named, with .jpg or .png).
      /// If file cannot be accessed by service, it will be locally read and registerImageData called instead.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an image for later reference by name (must be uniquely named, with .jpg or .png extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="imageData"></param>
      /// <param name="imageName"></param>
      global::System.Threading.Tasks.Task registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a HTML file for later reference by filename (must be uniquely named, with .html).
      /// If file cannot be accessed by service, it will be locally read and registerHTMLData called instead.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="htmlFileName"></param>
      global::System.Threading.Tasks.Task registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register HTML for later reference by name (must be uniquely named, with .html extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="htmlData"></param>
      /// <param name="htmlName"></param>
      global::System.Threading.Tasks.Task registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a translation file (e.g. a Java properties file for a language); extension is used to determine format
      /// </summary>
      /// <param name="p"></param>
      /// <param name="locale"></param>
      /// <param name="translationFileName"></param>
      global::System.Threading.Tasks.Task registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register translation file data (translationName typically filename-like; extension is used to determine format)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="locale"></param>
      /// <param name="translationData"></param>
      /// <param name="translationName"></param>
      global::System.Threading.Tasks.Task registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a menu that utilities can be registered under *
      /// </summary>
      /// <param name="p"></param>
      /// <param name="menuName"></param>
      /// <param name="menuText"></param>
      /// <param name="menuIcon"></param>
      global::System.Threading.Tasks.Task registerUtilityMenu(long p, string menuName, string menuText, string menuIcon, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unregisters a user added menu - All Utilities within the menu must be unregistered with 'unregisterUtilityWindow' first
      /// </summary>
      /// <param name="p"></param>
      /// <param name="menuName"></param>
      global::System.Threading.Tasks.Task unregisterUtilityMenu(long p, string menuName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a Utility window with the UI.
      /// The itemType references a previously registered YML item instantiated for the window
      /// UI content.
      /// The menuName refers to a previously registered menu that the utility will apear under on the
      /// main menu or if none is specified it will be under 'Utility'
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="itemType"></param>
      /// <param name="menuItemName"></param>
      /// <param name="windowTitle"></param>
      global::System.Threading.Tasks.Task registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task registerUtilityWindowWithMenu(long p, string identifier, string itemType, string menuItemName, string windowTitle, string menuName, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Open (make visible) previously registered Utility Window
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Close a visible Utility Window (make invisible - state is maintained)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Collapse previously registered Utility Window, if in expanded state (and expandCollapseResize true)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Expand previously registered Utility Window, if in collapsed state (and expandCollapseResize true)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Refresh the Inform grammar for instructions with the specified type *
      /// </summary>
      /// <param name="p"></param>
      /// <param name="instructionType"></param>
      global::System.Threading.Tasks.Task refreshDynamicInstructions(long p, global::Yaskawa.Ext.API.DynamicInstructionType instructionType, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register UI content at the specified integration point in the pendant UI.
      /// The itemType should reference a YML item previously registered via registerYML().
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="integrationPoint"></param>
      /// <param name="itemType"></param>
      /// <param name="buttonLabel"></param>
      /// <param name="buttonImage"></param>
      global::System.Threading.Tasks.Task registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a Switch component at the specified integraiton point in the pendant UI.
      /// When the switch is toggled, it creates a PendantEvent with a type of IntegrationPointSwitchStateChanged that can be gotten via events()
      /// Switches registered with registerSwitch() can be unregistered with unregisterIntegration()
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="integrationPoint"></param>
      /// <param name="switchLabel"></param>
      /// <param name="offPositionLabel"></param>
      /// <param name="onPositionLabel"></param>
      /// <param name="defaultState"></param>
      global::System.Threading.Tasks.Task registerSwitch(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string switchLabel, string offPositionLabel, string onPositionLabel, bool defaultState, CancellationToken cancellationToken = default);

      /// <summary>
      /// Registers the extension as a link directly from any given instruction, if the specified tags are in the line
      /// Note: the informTags are treated as disparate cases, not cumulative where all the tags specified have to be active
      /// for the direct open functionality
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="instruction"></param>
      /// <param name="instrTags"></param>
      global::System.Threading.Tasks.Task registerDirectOpenForInstr(long p, string identifier, string instruction, List<string> instrTags, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unregisters the extension as a link directly from the specified inform command
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="instruction"></param>
      global::System.Threading.Tasks.Task unregisterDirectOpenForInstr(long p, string identifier, string instruction, CancellationToken cancellationToken = default);

      /// <summary>
      /// get property of an item by id
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemID"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> property(long p, string itemID, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set property of an item by id
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemID"></param>
      /// <param name="name"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set several properties (potentially for different items) at once.  This is more
      /// efficient that many repeated calls to setProperty().
      /// Note it is asynchronous so no errors/exceptions are thrown
      /// </summary>
      /// <param name="p"></param>
      /// <param name="propValuesList"></param>
      global::System.Threading.Tasks.Task setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the configuration of a chart by ID.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="config"></param>
      global::System.Threading.Tasks.Task setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the configuration of a chart by ID
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> getChartConfig(long p, string chartID, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to pass the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="dataset"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to access the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Add a new key to the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to pass the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="data"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Removes an existing key from the dataset of a chart by ID. In line and
      /// scatter charts, you can set 'right' to true to remove from the
      /// secondary dataset.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Hides an existing key from the dataset of a chart by ID. In line and
      /// scatter charts, you can set 'right' to true to hide a key from the
      /// secondary dataset.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="hidden"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Append new data points to a specified key in the data of a chart by ID.
      /// This function will only have an effect on line/scatter charts. Set
      /// 'right' to true to pass the dataset for a secondary scale on the right
      /// hand side.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="points"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Increments a category value by `val`.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="val"></param>
      global::System.Threading.Tasks.Task incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default);

      /// <summary>
      /// Export the current chart contents to the specified filename (must be uniquely named, with .jpg or .png).
      /// Calls exportChartImageData if the extension is unable to access the file.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task<string> exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Export the current chart contents to a binary blob (must be uniquely named, with .jpg or .png extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task<byte[]> exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show notice to user.
      /// Notices are automaticlly hidden after a short display period.
      /// Notice messages are logged, if log parameter if provided, that will be logged instead of title & message.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task notice(long p, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show notice to user with specified disposition.
      /// As for notice() but displayed in a way that connotes the specified disposition.
      /// For example, a Positive disposition may be shown in green.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// (API version 2.1 and later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="disposition"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show error to user.
      /// Errors should only indicate important situations that the user must be aware of and for which deliberate
      /// acknowledgement is required before proceeding.  Typically, some action will be required to correct the situation.
      /// Errors are displayed until dismissed by the user.
      /// Error messages are logged, if log parameter if provided, that will be logged instead of title & message.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task error(long p, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Display modal pop-up dialog.  Typically, Yes/No, although negativeOption can be omitted
      /// The identifier can be used to associate the corresponding PopupOpened & PopupClosed events triggered by
      /// user positive/negative selection or automatic dismissal/cancellation - for example is screen switched, alarm etc.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="positiveOption"></param>
      /// <param name="negativeOption"></param>
      global::System.Threading.Tasks.Task popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default);

      /// <summary>
      /// Cancel an open popup dialog.  If the dialog has a negative option, behaves as if user selected it, otherwise
      /// no event is generated
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Inserts an instruction, returns a string:
      /// Success,
      /// UnsupportedCommand,
      /// InvalidFormat,
      /// ProgrammingViewClosed,
      /// JobDoesNotExist,
      /// CallingJobFromSameJob,
      /// ExceededMaxArguments,
      /// JobNotEditable,
      /// MultiSelectActive,
      /// TimedOut,
      /// Unknown
      /// </summary>
      /// <param name="p"></param>
      /// <param name="instruction"></param>
      global::System.Threading.Tasks.Task<string> insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default);

      /// <summary>
      /// Displays a standard pendant UI screen by passing a string with the screen identifier. (Only available from SDK API 2.2 onward)
      /// Refer to the YML - URI Links documentation for the list of supported screens and settings.
      /// Do not include the URI "&lt;a href&gt; screen:" portion in the identifier.  For example to display the jogging panel use:
      /// pendant.displayScreen("programmingView?panel=jogging");
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task displayScreen(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Displays an html file in a standard Smart Pendant help dialog. (Only available from SDK API 3.0 onward)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="htmlContentFile"></param>
      global::System.Threading.Tasks.Task displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default);

      /// <summary>
      /// Retrieves the security level on the controller. Returns:
      /// - Operate
      /// - Edit
      /// - Management
      /// - Safety
      /// - Yaskawa
      ///  (API 3.1 and Later)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> accessLevel(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Queries if the current security level is at least specified security level
      /// Accepts:
      /// 	-"Operate"
      /// 	-"Edit"
      /// 	-"Management"
      /// 	-"Safety"
      /// 	-"Yaskawa"
      /// Other inputs will return an error.
      /// (API 3.1 and Later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="level"></param>
      global::System.Threading.Tasks.Task<bool> accessLevelIncludes(long p, string level, CancellationToken cancellationToken = default);

      /// <summary>
      /// Append a row to a container
      /// (API 3.5 and Later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ContainerID"></param>
      /// <param name="dict"></param>
      global::System.Threading.Tasks.Task appendRow(long p, string ContainerID, Dictionary<string, global::Yaskawa.Ext.API.Any> dict, CancellationToken cancellationToken = default);

      /// <summary>
      /// Insert a row to a container
      /// (API 3.5 and Later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ContainerID"></param>
      /// <param name="index"></param>
      /// <param name="dict"></param>
      global::System.Threading.Tasks.Task insertRow(long p, string ContainerID, long index, Dictionary<string, global::Yaskawa.Ext.API.Any> dict, CancellationToken cancellationToken = default);

      /// <summary>
      /// Delete a row from a container
      /// (API 3.5 and Later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ContainerID"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task deleteRow(long p, string ContainerID, long index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Remove all row from a container
      /// (API 3.5 and Later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ContainerID"></param>
      global::System.Threading.Tasks.Task clearRows(long p, string ContainerID, CancellationToken cancellationToken = default);

      /// <summary>
      /// Append rows to a container
      /// (API 3.5 and Later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ContainerID"></param>
      /// <param name="dicts"></param>
      global::System.Threading.Tasks.Task appendRows(long p, string ContainerID, List<global::Yaskawa.Ext.API.Any> dicts, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// The Pendant API provides functions for interacting with and
    /// integrating the main Smart Pendant user-interface.
    /// 
    /// (Extensions are not required to have a user-interface)
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> pendantVersion(long p, CancellationToken cancellationToken = default)
      {
        await send_pendantVersion(p, cancellationToken);
        return await recv_pendantVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pendantVersion(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp671 = new InternalStructs.pendantVersion_args() {
          P = p,
        };
        
        await tmp671.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> recv_pendantVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp672 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp672.Type == TMessageType.Exception)
        {
          var tmp673 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp673;
        }

        var tmp674 = new InternalStructs.pendantVersion_result();
        await tmp674.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp674.__isset.success)
        {
          return tmp674.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pendantVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeEventTypes(p, types, cancellationToken);
        await recv_subscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp675 = new InternalStructs.subscribeEventTypes_args() {
          P = p,
          Types = types,
        };
        
        await tmp675.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp676 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp676.Type == TMessageType.Exception)
        {
          var tmp677 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp677;
        }

        var tmp678 = new InternalStructs.subscribeEventTypes_result();
        await tmp678.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeEventTypes(p, types, cancellationToken);
        await recv_unsubscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp679 = new InternalStructs.unsubscribeEventTypes_args() {
          P = p,
          Types = types,
        };
        
        await tmp679.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp680 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp680.Type == TMessageType.Exception)
        {
          var tmp681 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp681;
        }

        var tmp682 = new InternalStructs.unsubscribeEventTypes_result();
        await tmp682.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeItemEventTypes(p, itemIDs, types, cancellationToken);
        await recv_subscribeItemEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp683 = new InternalStructs.subscribeItemEventTypes_args() {
          P = p,
          ItemIDs = itemIDs,
          Types = types,
        };
        
        await tmp683.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeItemEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp684 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp684.Type == TMessageType.Exception)
        {
          var tmp685 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp685;
        }

        var tmp686 = new InternalStructs.subscribeItemEventTypes_result();
        await tmp686.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeItemEventTypes(p, itemIDs, types, cancellationToken);
        await recv_unsubscribeItemEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp687 = new InternalStructs.unsubscribeItemEventTypes_args() {
          P = p,
          ItemIDs = itemIDs,
          Types = types,
        };
        
        await tmp687.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeItemEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp688 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp688.Type == TMessageType.Exception)
        {
          var tmp689 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp689;
        }

        var tmp690 = new InternalStructs.unsubscribeItemEventTypes_result();
        await tmp690.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> events(long p, CancellationToken cancellationToken = default)
      {
        await send_events(p, cancellationToken);
        return await recv_events(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_events(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("events", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp691 = new InternalStructs.events_args() {
          P = p,
        };
        
        await tmp691.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> recv_events(CancellationToken cancellationToken = default)
      {
        
        var tmp692 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp692.Type == TMessageType.Exception)
        {
          var tmp693 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp693;
        }

        var tmp694 = new InternalStructs.events_result();
        await tmp694.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp694.__isset.success)
        {
          return tmp694.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "events failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentLanguage(long p, CancellationToken cancellationToken = default)
      {
        await send_currentLanguage(p, cancellationToken);
        return await recv_currentLanguage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentLanguage(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp695 = new InternalStructs.currentLanguage_args() {
          P = p,
        };
        
        await tmp695.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentLanguage(CancellationToken cancellationToken = default)
      {
        
        var tmp696 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp696.Type == TMessageType.Exception)
        {
          var tmp697 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp697;
        }

        var tmp698 = new InternalStructs.currentLanguage_result();
        await tmp698.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp698.__isset.success)
        {
          return tmp698.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentLanguage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentLocale(long p, CancellationToken cancellationToken = default)
      {
        await send_currentLocale(p, cancellationToken);
        return await recv_currentLocale(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentLocale(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp699 = new InternalStructs.currentLocale_args() {
          P = p,
        };
        
        await tmp699.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentLocale(CancellationToken cancellationToken = default)
      {
        
        var tmp700 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp700.Type == TMessageType.Exception)
        {
          var tmp701 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp701;
        }

        var tmp702 = new InternalStructs.currentLocale_result();
        await tmp702.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp702.__isset.success)
        {
          return tmp702.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentLocale failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentScreenName(long p, CancellationToken cancellationToken = default)
      {
        await send_currentScreenName(p, cancellationToken);
        return await recv_currentScreenName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentScreenName(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp703 = new InternalStructs.currentScreenName_args() {
          P = p,
        };
        
        await tmp703.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentScreenName(CancellationToken cancellationToken = default)
      {
        
        var tmp704 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp704.Type == TMessageType.Exception)
        {
          var tmp705 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp705;
        }

        var tmp706 = new InternalStructs.currentScreenName_result();
        await tmp706.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp706.__isset.success)
        {
          return tmp706.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentScreenName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> registerYML(long p, string ymlSource, CancellationToken cancellationToken = default)
      {
        await send_registerYML(p, ymlSource, cancellationToken);
        return await recv_registerYML(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerYML(long p, string ymlSource, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp707 = new InternalStructs.registerYML_args() {
          P = p,
          YmlSource = ymlSource,
        };
        
        await tmp707.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_registerYML(CancellationToken cancellationToken = default)
      {
        
        var tmp708 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp708.Type == TMessageType.Exception)
        {
          var tmp709 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp709;
        }

        var tmp710 = new InternalStructs.registerYML_result();
        await tmp710.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp710.__isset.success)
        {
          return tmp710.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerYML failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_registerImageFile(p, imageFileName, cancellationToken);
        await recv_registerImageFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp711 = new InternalStructs.registerImageFile_args() {
          P = p,
          ImageFileName = imageFileName,
        };
        
        await tmp711.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerImageFile(CancellationToken cancellationToken = default)
      {
        
        var tmp712 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp712.Type == TMessageType.Exception)
        {
          var tmp713 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp713;
        }

        var tmp714 = new InternalStructs.registerImageFile_result();
        await tmp714.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp714.__isset.e)
        {
          throw tmp714.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default)
      {
        await send_registerImageData(p, imageData, imageName, cancellationToken);
        await recv_registerImageData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp715 = new InternalStructs.registerImageData_args() {
          P = p,
          ImageData = imageData,
          ImageName = imageName,
        };
        
        await tmp715.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerImageData(CancellationToken cancellationToken = default)
      {
        
        var tmp716 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp716.Type == TMessageType.Exception)
        {
          var tmp717 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp717;
        }

        var tmp718 = new InternalStructs.registerImageData_result();
        await tmp718.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp718.__isset.e)
        {
          throw tmp718.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default)
      {
        await send_registerHTMLFile(p, htmlFileName, cancellationToken);
        await recv_registerHTMLFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp719 = new InternalStructs.registerHTMLFile_args() {
          P = p,
          HtmlFileName = htmlFileName,
        };
        
        await tmp719.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerHTMLFile(CancellationToken cancellationToken = default)
      {
        
        var tmp720 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp720.Type == TMessageType.Exception)
        {
          var tmp721 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp721;
        }

        var tmp722 = new InternalStructs.registerHTMLFile_result();
        await tmp722.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp722.__isset.e)
        {
          throw tmp722.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default)
      {
        await send_registerHTMLData(p, htmlData, htmlName, cancellationToken);
        await recv_registerHTMLData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp723 = new InternalStructs.registerHTMLData_args() {
          P = p,
          HtmlData = htmlData,
          HtmlName = htmlName,
        };
        
        await tmp723.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerHTMLData(CancellationToken cancellationToken = default)
      {
        
        var tmp724 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp724.Type == TMessageType.Exception)
        {
          var tmp725 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp725;
        }

        var tmp726 = new InternalStructs.registerHTMLData_result();
        await tmp726.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp726.__isset.e)
        {
          throw tmp726.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default)
      {
        await send_registerTranslationFile(p, locale, translationFileName, cancellationToken);
        await recv_registerTranslationFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp727 = new InternalStructs.registerTranslationFile_args() {
          P = p,
          Locale = locale,
          TranslationFileName = translationFileName,
        };
        
        await tmp727.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerTranslationFile(CancellationToken cancellationToken = default)
      {
        
        var tmp728 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp728.Type == TMessageType.Exception)
        {
          var tmp729 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp729;
        }

        var tmp730 = new InternalStructs.registerTranslationFile_result();
        await tmp730.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp730.__isset.e)
        {
          throw tmp730.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default)
      {
        await send_registerTranslationData(p, locale, translationData, translationName, cancellationToken);
        await recv_registerTranslationData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp731 = new InternalStructs.registerTranslationData_args() {
          P = p,
          Locale = locale,
          TranslationData = translationData,
          TranslationName = translationName,
        };
        
        await tmp731.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerTranslationData(CancellationToken cancellationToken = default)
      {
        
        var tmp732 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp732.Type == TMessageType.Exception)
        {
          var tmp733 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp733;
        }

        var tmp734 = new InternalStructs.registerTranslationData_result();
        await tmp734.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp734.__isset.e)
        {
          throw tmp734.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityMenu(long p, string menuName, string menuText, string menuIcon, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityMenu(p, menuName, menuText, menuIcon, cancellationToken);
        await recv_registerUtilityMenu(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityMenu(long p, string menuName, string menuText, string menuIcon, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityMenu", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp735 = new InternalStructs.registerUtilityMenu_args() {
          P = p,
          MenuName = menuName,
          MenuText = menuText,
          MenuIcon = menuIcon,
        };
        
        await tmp735.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityMenu(CancellationToken cancellationToken = default)
      {
        
        var tmp736 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp736.Type == TMessageType.Exception)
        {
          var tmp737 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp737;
        }

        var tmp738 = new InternalStructs.registerUtilityMenu_result();
        await tmp738.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp738.__isset.e)
        {
          throw tmp738.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityMenu(long p, string menuName, CancellationToken cancellationToken = default)
      {
        await send_unregisterUtilityMenu(p, menuName, cancellationToken);
        await recv_unregisterUtilityMenu(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterUtilityMenu(long p, string menuName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterUtilityMenu", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp739 = new InternalStructs.unregisterUtilityMenu_args() {
          P = p,
          MenuName = menuName,
        };
        
        await tmp739.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterUtilityMenu(CancellationToken cancellationToken = default)
      {
        
        var tmp740 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp740.Type == TMessageType.Exception)
        {
          var tmp741 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp741;
        }

        var tmp742 = new InternalStructs.unregisterUtilityMenu_result();
        await tmp742.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp742.__isset.e)
        {
          throw tmp742.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityWindow(p, identifier, itemType, menuItemName, windowTitle, cancellationToken);
        await recv_registerUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp743 = new InternalStructs.registerUtilityWindow_args() {
          P = p,
          Identifier = identifier,
          ItemType = itemType,
          MenuItemName = menuItemName,
          WindowTitle = windowTitle,
        };
        
        await tmp743.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp744 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp744.Type == TMessageType.Exception)
        {
          var tmp745 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp745;
        }

        var tmp746 = new InternalStructs.registerUtilityWindow_result();
        await tmp746.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp746.__isset.e)
        {
          throw tmp746.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindowWithMenu(long p, string identifier, string itemType, string menuItemName, string windowTitle, string menuName, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityWindowWithMenu(p, identifier, itemType, menuItemName, windowTitle, menuName, cancellationToken);
        await recv_registerUtilityWindowWithMenu(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityWindowWithMenu(long p, string identifier, string itemType, string menuItemName, string windowTitle, string menuName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityWindowWithMenu", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp747 = new InternalStructs.registerUtilityWindowWithMenu_args() {
          P = p,
          Identifier = identifier,
          ItemType = itemType,
          MenuItemName = menuItemName,
          WindowTitle = windowTitle,
          MenuName = menuName,
        };
        
        await tmp747.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityWindowWithMenu(CancellationToken cancellationToken = default)
      {
        
        var tmp748 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp748.Type == TMessageType.Exception)
        {
          var tmp749 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp749;
        }

        var tmp750 = new InternalStructs.registerUtilityWindowWithMenu_result();
        await tmp750.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp750.__isset.e)
        {
          throw tmp750.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_unregisterUtilityWindow(p, identifier, cancellationToken);
        await recv_unregisterUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp751 = new InternalStructs.unregisterUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp751.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp752 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp752.Type == TMessageType.Exception)
        {
          var tmp753 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp753;
        }

        var tmp754 = new InternalStructs.unregisterUtilityWindow_result();
        await tmp754.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp754.__isset.e)
        {
          throw tmp754.E;
        }
      }

      public async global::System.Threading.Tasks.Task openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_openUtilityWindow(p, identifier, cancellationToken);
        await recv_openUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp755 = new InternalStructs.openUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp755.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_openUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp756 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp756.Type == TMessageType.Exception)
        {
          var tmp757 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp757;
        }

        var tmp758 = new InternalStructs.openUtilityWindow_result();
        await tmp758.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_closeUtilityWindow(p, identifier, cancellationToken);
        await recv_closeUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp759 = new InternalStructs.closeUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp759.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_closeUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp760 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp760.Type == TMessageType.Exception)
        {
          var tmp761 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp761;
        }

        var tmp762 = new InternalStructs.closeUtilityWindow_result();
        await tmp762.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_collapseUtilityWindow(p, identifier, cancellationToken);
        await recv_collapseUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp763 = new InternalStructs.collapseUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp763.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_collapseUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp764 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp764.Type == TMessageType.Exception)
        {
          var tmp765 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp765;
        }

        var tmp766 = new InternalStructs.collapseUtilityWindow_result();
        await tmp766.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_expandUtilityWindow(p, identifier, cancellationToken);
        await recv_expandUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp767 = new InternalStructs.expandUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp767.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_expandUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp768 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp768.Type == TMessageType.Exception)
        {
          var tmp769 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp769;
        }

        var tmp770 = new InternalStructs.expandUtilityWindow_result();
        await tmp770.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task refreshDynamicInstructions(long p, global::Yaskawa.Ext.API.DynamicInstructionType instructionType, CancellationToken cancellationToken = default)
      {
        await send_refreshDynamicInstructions(p, instructionType, cancellationToken);
        await recv_refreshDynamicInstructions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_refreshDynamicInstructions(long p, global::Yaskawa.Ext.API.DynamicInstructionType instructionType, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("refreshDynamicInstructions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp771 = new InternalStructs.refreshDynamicInstructions_args() {
          P = p,
          InstructionType = instructionType,
        };
        
        await tmp771.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_refreshDynamicInstructions(CancellationToken cancellationToken = default)
      {
        
        var tmp772 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp772.Type == TMessageType.Exception)
        {
          var tmp773 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp773;
        }

        var tmp774 = new InternalStructs.refreshDynamicInstructions_result();
        await tmp774.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default)
      {
        await send_registerIntegration(p, identifier, integrationPoint, itemType, buttonLabel, buttonImage, cancellationToken);
        await recv_registerIntegration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp775 = new InternalStructs.registerIntegration_args() {
          P = p,
          Identifier = identifier,
          IntegrationPoint = integrationPoint,
          ItemType = itemType,
          ButtonLabel = buttonLabel,
          ButtonImage = buttonImage,
        };
        
        await tmp775.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerIntegration(CancellationToken cancellationToken = default)
      {
        
        var tmp776 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp776.Type == TMessageType.Exception)
        {
          var tmp777 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp777;
        }

        var tmp778 = new InternalStructs.registerIntegration_result();
        await tmp778.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp778.__isset.e)
        {
          throw tmp778.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_unregisterIntegration(p, identifier, cancellationToken);
        await recv_unregisterIntegration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp779 = new InternalStructs.unregisterIntegration_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp779.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterIntegration(CancellationToken cancellationToken = default)
      {
        
        var tmp780 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp780.Type == TMessageType.Exception)
        {
          var tmp781 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp781;
        }

        var tmp782 = new InternalStructs.unregisterIntegration_result();
        await tmp782.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp782.__isset.e)
        {
          throw tmp782.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerSwitch(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string switchLabel, string offPositionLabel, string onPositionLabel, bool defaultState, CancellationToken cancellationToken = default)
      {
        await send_registerSwitch(p, identifier, integrationPoint, switchLabel, offPositionLabel, onPositionLabel, defaultState, cancellationToken);
        await recv_registerSwitch(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerSwitch(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string switchLabel, string offPositionLabel, string onPositionLabel, bool defaultState, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerSwitch", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp783 = new InternalStructs.registerSwitch_args() {
          P = p,
          Identifier = identifier,
          IntegrationPoint = integrationPoint,
          SwitchLabel = switchLabel,
          OffPositionLabel = offPositionLabel,
          OnPositionLabel = onPositionLabel,
          DefaultState = defaultState,
        };
        
        await tmp783.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerSwitch(CancellationToken cancellationToken = default)
      {
        
        var tmp784 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp784.Type == TMessageType.Exception)
        {
          var tmp785 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp785;
        }

        var tmp786 = new InternalStructs.registerSwitch_result();
        await tmp786.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp786.__isset.e)
        {
          throw tmp786.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerDirectOpenForInstr(long p, string identifier, string instruction, List<string> instrTags, CancellationToken cancellationToken = default)
      {
        await send_registerDirectOpenForInstr(p, identifier, instruction, instrTags, cancellationToken);
        await recv_registerDirectOpenForInstr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerDirectOpenForInstr(long p, string identifier, string instruction, List<string> instrTags, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerDirectOpenForInstr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp787 = new InternalStructs.registerDirectOpenForInstr_args() {
          P = p,
          Identifier = identifier,
          Instruction = instruction,
          InstrTags = instrTags,
        };
        
        await tmp787.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerDirectOpenForInstr(CancellationToken cancellationToken = default)
      {
        
        var tmp788 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp788.Type == TMessageType.Exception)
        {
          var tmp789 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp789;
        }

        var tmp790 = new InternalStructs.registerDirectOpenForInstr_result();
        await tmp790.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp790.__isset.e)
        {
          throw tmp790.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterDirectOpenForInstr(long p, string identifier, string instruction, CancellationToken cancellationToken = default)
      {
        await send_unregisterDirectOpenForInstr(p, identifier, instruction, cancellationToken);
        await recv_unregisterDirectOpenForInstr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterDirectOpenForInstr(long p, string identifier, string instruction, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterDirectOpenForInstr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp791 = new InternalStructs.unregisterDirectOpenForInstr_args() {
          P = p,
          Identifier = identifier,
          Instruction = instruction,
        };
        
        await tmp791.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterDirectOpenForInstr(CancellationToken cancellationToken = default)
      {
        
        var tmp792 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp792.Type == TMessageType.Exception)
        {
          var tmp793 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp793;
        }

        var tmp794 = new InternalStructs.unregisterDirectOpenForInstr_result();
        await tmp794.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp794.__isset.e)
        {
          throw tmp794.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> property(long p, string itemID, string name, CancellationToken cancellationToken = default)
      {
        await send_property(p, itemID, name, cancellationToken);
        return await recv_property(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_property(long p, string itemID, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("property", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp795 = new InternalStructs.property_args() {
          P = p,
          ItemID = itemID,
          Name = name,
        };
        
        await tmp795.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_property(CancellationToken cancellationToken = default)
      {
        
        var tmp796 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp796.Type == TMessageType.Exception)
        {
          var tmp797 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp797;
        }

        var tmp798 = new InternalStructs.property_result();
        await tmp798.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp798.__isset.success)
        {
          return tmp798.Success;
        }
        if (tmp798.__isset.e)
        {
          throw tmp798.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "property failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setProperty(p, itemID, name, @value, cancellationToken);
        await recv_setProperty(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp799 = new InternalStructs.setProperty_args() {
          P = p,
          ItemID = itemID,
          Name = name,
          Value = @value,
        };
        
        await tmp799.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setProperty(CancellationToken cancellationToken = default)
      {
        
        var tmp800 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp800.Type == TMessageType.Exception)
        {
          var tmp801 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp801;
        }

        var tmp802 = new InternalStructs.setProperty_result();
        await tmp802.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp802.__isset.e)
        {
          throw tmp802.E;
        }
      }

      public async global::System.Threading.Tasks.Task setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default)
      {
        await send_setProperties(p, propValuesList, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setProperties", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp803 = new InternalStructs.setProperties_args() {
          P = p,
          PropValuesList = propValuesList,
        };
        
        await tmp803.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default)
      {
        await send_setChartConfig(p, chartID, config, cancellationToken);
        await recv_setChartConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp804 = new InternalStructs.setChartConfig_args() {
          P = p,
          ChartID = chartID,
          Config = config,
        };
        
        await tmp804.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setChartConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp805 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp805.Type == TMessageType.Exception)
        {
          var tmp806 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp806;
        }

        var tmp807 = new InternalStructs.setChartConfig_result();
        await tmp807.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp807.__isset.e)
        {
          throw tmp807.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> getChartConfig(long p, string chartID, CancellationToken cancellationToken = default)
      {
        await send_getChartConfig(p, chartID, cancellationToken);
        return await recv_getChartConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getChartConfig(long p, string chartID, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp808 = new InternalStructs.getChartConfig_args() {
          P = p,
          ChartID = chartID,
        };
        
        await tmp808.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_getChartConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp809 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp809.Type == TMessageType.Exception)
        {
          var tmp810 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp810;
        }

        var tmp811 = new InternalStructs.getChartConfig_result();
        await tmp811.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp811.__isset.success)
        {
          return tmp811.Success;
        }
        if (tmp811.__isset.e)
        {
          throw tmp811.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChartConfig failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default)
      {
        await send_setChartData(p, chartID, dataset, right, cancellationToken);
        await recv_setChartData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp812 = new InternalStructs.setChartData_args() {
          P = p,
          ChartID = chartID,
          Dataset = dataset,
          Right = right,
        };
        
        await tmp812.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setChartData(CancellationToken cancellationToken = default)
      {
        
        var tmp813 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp813.Type == TMessageType.Exception)
        {
          var tmp814 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp814;
        }

        var tmp815 = new InternalStructs.setChartData_result();
        await tmp815.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp815.__isset.e)
        {
          throw tmp815.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default)
      {
        await send_getChartData(p, chartID, right, cancellationToken);
        return await recv_getChartData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp816 = new InternalStructs.getChartData_args() {
          P = p,
          ChartID = chartID,
          Right = right,
        };
        
        await tmp816.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> recv_getChartData(CancellationToken cancellationToken = default)
      {
        
        var tmp817 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp817.Type == TMessageType.Exception)
        {
          var tmp818 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp818;
        }

        var tmp819 = new InternalStructs.getChartData_result();
        await tmp819.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp819.__isset.success)
        {
          return tmp819.Success;
        }
        if (tmp819.__isset.e)
        {
          throw tmp819.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChartData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default)
      {
        await send_addChartKey(p, chartID, key, data, right, cancellationToken);
        await recv_addChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp820 = new InternalStructs.addChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Data = data,
          Right = right,
        };
        
        await tmp820.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_addChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp821 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp821.Type == TMessageType.Exception)
        {
          var tmp822 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp822;
        }

        var tmp823 = new InternalStructs.addChartKey_result();
        await tmp823.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp823.__isset.e)
        {
          throw tmp823.E;
        }
      }

      public async global::System.Threading.Tasks.Task removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default)
      {
        await send_removeChartKey(p, chartID, key, right, cancellationToken);
        await recv_removeChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp824 = new InternalStructs.removeChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Right = right,
        };
        
        await tmp824.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp825 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp825.Type == TMessageType.Exception)
        {
          var tmp826 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp826;
        }

        var tmp827 = new InternalStructs.removeChartKey_result();
        await tmp827.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp827.__isset.e)
        {
          throw tmp827.E;
        }
      }

      public async global::System.Threading.Tasks.Task hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default)
      {
        await send_hideChartKey(p, chartID, key, hidden, right, cancellationToken);
        await recv_hideChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp828 = new InternalStructs.hideChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Hidden = hidden,
          Right = right,
        };
        
        await tmp828.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_hideChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp829 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp829.Type == TMessageType.Exception)
        {
          var tmp830 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp830;
        }

        var tmp831 = new InternalStructs.hideChartKey_result();
        await tmp831.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp831.__isset.e)
        {
          throw tmp831.E;
        }
      }

      public async global::System.Threading.Tasks.Task appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default)
      {
        await send_appendChartPoints(p, chartID, key, points, right, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("appendChartPoints", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp832 = new InternalStructs.appendChartPoints_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Points = points,
          Right = right,
        };
        
        await tmp832.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default)
      {
        await send_incrementChartKey(p, chartID, key, val, cancellationToken);
        await recv_incrementChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp833 = new InternalStructs.incrementChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Val = val,
        };
        
        await tmp833.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_incrementChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp834 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp834.Type == TMessageType.Exception)
        {
          var tmp835 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp835;
        }

        var tmp836 = new InternalStructs.incrementChartKey_result();
        await tmp836.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp836.__isset.e)
        {
          throw tmp836.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_exportChartImage(p, chartID, imageFileName, cancellationToken);
        return await recv_exportChartImage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp837 = new InternalStructs.exportChartImage_args() {
          P = p,
          ChartID = chartID,
          ImageFileName = imageFileName,
        };
        
        await tmp837.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_exportChartImage(CancellationToken cancellationToken = default)
      {
        
        var tmp838 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp838.Type == TMessageType.Exception)
        {
          var tmp839 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp839;
        }

        var tmp840 = new InternalStructs.exportChartImage_result();
        await tmp840.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp840.__isset.success)
        {
          return tmp840.Success;
        }
        if (tmp840.__isset.e)
        {
          throw tmp840.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exportChartImage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_exportChartImageData(p, chartID, imageFileName, cancellationToken);
        return await recv_exportChartImageData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp841 = new InternalStructs.exportChartImageData_args() {
          P = p,
          ChartID = chartID,
          ImageFileName = imageFileName,
        };
        
        await tmp841.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_exportChartImageData(CancellationToken cancellationToken = default)
      {
        
        var tmp842 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp842.Type == TMessageType.Exception)
        {
          var tmp843 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp843;
        }

        var tmp844 = new InternalStructs.exportChartImageData_result();
        await tmp844.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp844.__isset.success)
        {
          return tmp844.Success;
        }
        if (tmp844.__isset.e)
        {
          throw tmp844.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exportChartImageData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task notice(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_notice(p, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_notice(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("notice", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp845 = new InternalStructs.notice_args() {
          P = p,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp845.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_dispNotice(p, disposition, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dispNotice", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp846 = new InternalStructs.dispNotice_args() {
          P = p,
          Disposition = disposition,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp846.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task error(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_error(p, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_error(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("error", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp847 = new InternalStructs.error_args() {
          P = p,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp847.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default)
      {
        await send_popupDialog(p, identifier, title, message, positiveOption, negativeOption, cancellationToken);
        await recv_popupDialog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp848 = new InternalStructs.popupDialog_args() {
          P = p,
          Identifier = identifier,
          Title = title,
          Message = message,
          PositiveOption = positiveOption,
          NegativeOption = negativeOption,
        };
        
        await tmp848.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_popupDialog(CancellationToken cancellationToken = default)
      {
        
        var tmp849 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp849.Type == TMessageType.Exception)
        {
          var tmp850 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp850;
        }

        var tmp851 = new InternalStructs.popupDialog_result();
        await tmp851.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp851.__isset.e)
        {
          throw tmp851.E;
        }
      }

      public async global::System.Threading.Tasks.Task cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_cancelPopupDialog(p, identifier, cancellationToken);
        await recv_cancelPopupDialog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp852 = new InternalStructs.cancelPopupDialog_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp852.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_cancelPopupDialog(CancellationToken cancellationToken = default)
      {
        
        var tmp853 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp853.Type == TMessageType.Exception)
        {
          var tmp854 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp854;
        }

        var tmp855 = new InternalStructs.cancelPopupDialog_result();
        await tmp855.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default)
      {
        await send_insertInstructionAtSelectedLine(p, instruction, cancellationToken);
        return await recv_insertInstructionAtSelectedLine(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp856 = new InternalStructs.insertInstructionAtSelectedLine_args() {
          P = p,
          Instruction = instruction,
        };
        
        await tmp856.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_insertInstructionAtSelectedLine(CancellationToken cancellationToken = default)
      {
        
        var tmp857 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp857.Type == TMessageType.Exception)
        {
          var tmp858 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp858;
        }

        var tmp859 = new InternalStructs.insertInstructionAtSelectedLine_result();
        await tmp859.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp859.__isset.success)
        {
          return tmp859.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertInstructionAtSelectedLine failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task displayScreen(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_displayScreen(p, identifier, cancellationToken);
        await recv_displayScreen(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_displayScreen(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp860 = new InternalStructs.displayScreen_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp860.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_displayScreen(CancellationToken cancellationToken = default)
      {
        
        var tmp861 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp861.Type == TMessageType.Exception)
        {
          var tmp862 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp862;
        }

        var tmp863 = new InternalStructs.displayScreen_result();
        await tmp863.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default)
      {
        await send_displayHelp(p, title, htmlContentFile, cancellationToken);
        await recv_displayHelp(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp864 = new InternalStructs.displayHelp_args() {
          P = p,
          Title = title,
          HtmlContentFile = htmlContentFile,
        };
        
        await tmp864.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_displayHelp(CancellationToken cancellationToken = default)
      {
        
        var tmp865 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp865.Type == TMessageType.Exception)
        {
          var tmp866 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp866;
        }

        var tmp867 = new InternalStructs.displayHelp_result();
        await tmp867.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> accessLevel(long p, CancellationToken cancellationToken = default)
      {
        await send_accessLevel(p, cancellationToken);
        return await recv_accessLevel(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_accessLevel(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("accessLevel", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp868 = new InternalStructs.accessLevel_args() {
          P = p,
        };
        
        await tmp868.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_accessLevel(CancellationToken cancellationToken = default)
      {
        
        var tmp869 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp869.Type == TMessageType.Exception)
        {
          var tmp870 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp870;
        }

        var tmp871 = new InternalStructs.accessLevel_result();
        await tmp871.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp871.__isset.success)
        {
          return tmp871.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "accessLevel failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> accessLevelIncludes(long p, string level, CancellationToken cancellationToken = default)
      {
        await send_accessLevelIncludes(p, level, cancellationToken);
        return await recv_accessLevelIncludes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_accessLevelIncludes(long p, string level, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("accessLevelIncludes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp872 = new InternalStructs.accessLevelIncludes_args() {
          P = p,
          Level = level,
        };
        
        await tmp872.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_accessLevelIncludes(CancellationToken cancellationToken = default)
      {
        
        var tmp873 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp873.Type == TMessageType.Exception)
        {
          var tmp874 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp874;
        }

        var tmp875 = new InternalStructs.accessLevelIncludes_result();
        await tmp875.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp875.__isset.success)
        {
          return tmp875.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "accessLevelIncludes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task appendRow(long p, string ContainerID, Dictionary<string, global::Yaskawa.Ext.API.Any> dict, CancellationToken cancellationToken = default)
      {
        await send_appendRow(p, ContainerID, dict, cancellationToken);
        await recv_appendRow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_appendRow(long p, string ContainerID, Dictionary<string, global::Yaskawa.Ext.API.Any> dict, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("appendRow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp876 = new InternalStructs.appendRow_args() {
          P = p,
          ContainerID = ContainerID,
          Dict = dict,
        };
        
        await tmp876.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_appendRow(CancellationToken cancellationToken = default)
      {
        
        var tmp877 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp877.Type == TMessageType.Exception)
        {
          var tmp878 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp878;
        }

        var tmp879 = new InternalStructs.appendRow_result();
        await tmp879.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task insertRow(long p, string ContainerID, long index, Dictionary<string, global::Yaskawa.Ext.API.Any> dict, CancellationToken cancellationToken = default)
      {
        await send_insertRow(p, ContainerID, index, dict, cancellationToken);
        await recv_insertRow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_insertRow(long p, string ContainerID, long index, Dictionary<string, global::Yaskawa.Ext.API.Any> dict, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertRow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp880 = new InternalStructs.insertRow_args() {
          P = p,
          ContainerID = ContainerID,
          Index = index,
          Dict = dict,
        };
        
        await tmp880.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_insertRow(CancellationToken cancellationToken = default)
      {
        
        var tmp881 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp881.Type == TMessageType.Exception)
        {
          var tmp882 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp882;
        }

        var tmp883 = new InternalStructs.insertRow_result();
        await tmp883.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteRow(long p, string ContainerID, long index, CancellationToken cancellationToken = default)
      {
        await send_deleteRow(p, ContainerID, index, cancellationToken);
        await recv_deleteRow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteRow(long p, string ContainerID, long index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteRow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp884 = new InternalStructs.deleteRow_args() {
          P = p,
          ContainerID = ContainerID,
          Index = index,
        };
        
        await tmp884.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteRow(CancellationToken cancellationToken = default)
      {
        
        var tmp885 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp885.Type == TMessageType.Exception)
        {
          var tmp886 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp886;
        }

        var tmp887 = new InternalStructs.deleteRow_result();
        await tmp887.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task clearRows(long p, string ContainerID, CancellationToken cancellationToken = default)
      {
        await send_clearRows(p, ContainerID, cancellationToken);
        await recv_clearRows(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_clearRows(long p, string ContainerID, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("clearRows", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp888 = new InternalStructs.clearRows_args() {
          P = p,
          ContainerID = ContainerID,
        };
        
        await tmp888.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_clearRows(CancellationToken cancellationToken = default)
      {
        
        var tmp889 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp889.Type == TMessageType.Exception)
        {
          var tmp890 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp890;
        }

        var tmp891 = new InternalStructs.clearRows_result();
        await tmp891.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task appendRows(long p, string ContainerID, List<global::Yaskawa.Ext.API.Any> dicts, CancellationToken cancellationToken = default)
      {
        await send_appendRows(p, ContainerID, dicts, cancellationToken);
        await recv_appendRows(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_appendRows(long p, string ContainerID, List<global::Yaskawa.Ext.API.Any> dicts, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("appendRows", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp892 = new InternalStructs.appendRows_args() {
          P = p,
          ContainerID = ContainerID,
          Dicts = dicts,
        };
        
        await tmp892.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_appendRows(CancellationToken cancellationToken = default)
      {
        
        var tmp893 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp893.Type == TMessageType.Exception)
        {
          var tmp894 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp894;
        }

        var tmp895 = new InternalStructs.appendRows_result();
        await tmp895.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["pendantVersion"] = pendantVersion_ProcessAsync;
        processMap_["subscribeEventTypes"] = subscribeEventTypes_ProcessAsync;
        processMap_["unsubscribeEventTypes"] = unsubscribeEventTypes_ProcessAsync;
        processMap_["subscribeItemEventTypes"] = subscribeItemEventTypes_ProcessAsync;
        processMap_["unsubscribeItemEventTypes"] = unsubscribeItemEventTypes_ProcessAsync;
        processMap_["events"] = events_ProcessAsync;
        processMap_["currentLanguage"] = currentLanguage_ProcessAsync;
        processMap_["currentLocale"] = currentLocale_ProcessAsync;
        processMap_["currentScreenName"] = currentScreenName_ProcessAsync;
        processMap_["registerYML"] = registerYML_ProcessAsync;
        processMap_["registerImageFile"] = registerImageFile_ProcessAsync;
        processMap_["registerImageData"] = registerImageData_ProcessAsync;
        processMap_["registerHTMLFile"] = registerHTMLFile_ProcessAsync;
        processMap_["registerHTMLData"] = registerHTMLData_ProcessAsync;
        processMap_["registerTranslationFile"] = registerTranslationFile_ProcessAsync;
        processMap_["registerTranslationData"] = registerTranslationData_ProcessAsync;
        processMap_["registerUtilityMenu"] = registerUtilityMenu_ProcessAsync;
        processMap_["unregisterUtilityMenu"] = unregisterUtilityMenu_ProcessAsync;
        processMap_["registerUtilityWindow"] = registerUtilityWindow_ProcessAsync;
        processMap_["registerUtilityWindowWithMenu"] = registerUtilityWindowWithMenu_ProcessAsync;
        processMap_["unregisterUtilityWindow"] = unregisterUtilityWindow_ProcessAsync;
        processMap_["openUtilityWindow"] = openUtilityWindow_ProcessAsync;
        processMap_["closeUtilityWindow"] = closeUtilityWindow_ProcessAsync;
        processMap_["collapseUtilityWindow"] = collapseUtilityWindow_ProcessAsync;
        processMap_["expandUtilityWindow"] = expandUtilityWindow_ProcessAsync;
        processMap_["refreshDynamicInstructions"] = refreshDynamicInstructions_ProcessAsync;
        processMap_["registerIntegration"] = registerIntegration_ProcessAsync;
        processMap_["unregisterIntegration"] = unregisterIntegration_ProcessAsync;
        processMap_["registerSwitch"] = registerSwitch_ProcessAsync;
        processMap_["registerDirectOpenForInstr"] = registerDirectOpenForInstr_ProcessAsync;
        processMap_["unregisterDirectOpenForInstr"] = unregisterDirectOpenForInstr_ProcessAsync;
        processMap_["property"] = property_ProcessAsync;
        processMap_["setProperty"] = setProperty_ProcessAsync;
        processMap_["setProperties"] = setProperties_ProcessAsync;
        processMap_["setChartConfig"] = setChartConfig_ProcessAsync;
        processMap_["getChartConfig"] = getChartConfig_ProcessAsync;
        processMap_["setChartData"] = setChartData_ProcessAsync;
        processMap_["getChartData"] = getChartData_ProcessAsync;
        processMap_["addChartKey"] = addChartKey_ProcessAsync;
        processMap_["removeChartKey"] = removeChartKey_ProcessAsync;
        processMap_["hideChartKey"] = hideChartKey_ProcessAsync;
        processMap_["appendChartPoints"] = appendChartPoints_ProcessAsync;
        processMap_["incrementChartKey"] = incrementChartKey_ProcessAsync;
        processMap_["exportChartImage"] = exportChartImage_ProcessAsync;
        processMap_["exportChartImageData"] = exportChartImageData_ProcessAsync;
        processMap_["notice"] = notice_ProcessAsync;
        processMap_["dispNotice"] = dispNotice_ProcessAsync;
        processMap_["error"] = error_ProcessAsync;
        processMap_["popupDialog"] = popupDialog_ProcessAsync;
        processMap_["cancelPopupDialog"] = cancelPopupDialog_ProcessAsync;
        processMap_["insertInstructionAtSelectedLine"] = insertInstructionAtSelectedLine_ProcessAsync;
        processMap_["displayScreen"] = displayScreen_ProcessAsync;
        processMap_["displayHelp"] = displayHelp_ProcessAsync;
        processMap_["accessLevel"] = accessLevel_ProcessAsync;
        processMap_["accessLevelIncludes"] = accessLevelIncludes_ProcessAsync;
        processMap_["appendRow"] = appendRow_ProcessAsync;
        processMap_["insertRow"] = insertRow_ProcessAsync;
        processMap_["deleteRow"] = deleteRow_ProcessAsync;
        processMap_["clearRows"] = clearRows_ProcessAsync;
        processMap_["appendRows"] = appendRows_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task pendantVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp896 = new InternalStructs.pendantVersion_args();
        await tmp896.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp897 = new InternalStructs.pendantVersion_result();
        try
        {
          tmp897.Success = await _iAsync.pendantVersion(tmp896.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp897.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp898)
        {
          var tmp899 = $"Error occurred in {GetType().FullName}: {tmp898.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp898, tmp899);
          else
            Console.Error.WriteLine(tmp899);
          var tmp900 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp900.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp901 = new InternalStructs.subscribeEventTypes_args();
        await tmp901.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp902 = new InternalStructs.subscribeEventTypes_result();
        try
        {
          await _iAsync.subscribeEventTypes(tmp901.P, tmp901.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp902.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp903)
        {
          var tmp904 = $"Error occurred in {GetType().FullName}: {tmp903.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp903, tmp904);
          else
            Console.Error.WriteLine(tmp904);
          var tmp905 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp905.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp906 = new InternalStructs.unsubscribeEventTypes_args();
        await tmp906.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp907 = new InternalStructs.unsubscribeEventTypes_result();
        try
        {
          await _iAsync.unsubscribeEventTypes(tmp906.P, tmp906.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp907.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp908)
        {
          var tmp909 = $"Error occurred in {GetType().FullName}: {tmp908.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp908, tmp909);
          else
            Console.Error.WriteLine(tmp909);
          var tmp910 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp910.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeItemEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp911 = new InternalStructs.subscribeItemEventTypes_args();
        await tmp911.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp912 = new InternalStructs.subscribeItemEventTypes_result();
        try
        {
          await _iAsync.subscribeItemEventTypes(tmp911.P, tmp911.ItemIDs, tmp911.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp912.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp913)
        {
          var tmp914 = $"Error occurred in {GetType().FullName}: {tmp913.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp913, tmp914);
          else
            Console.Error.WriteLine(tmp914);
          var tmp915 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp915.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeItemEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp916 = new InternalStructs.unsubscribeItemEventTypes_args();
        await tmp916.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp917 = new InternalStructs.unsubscribeItemEventTypes_result();
        try
        {
          await _iAsync.unsubscribeItemEventTypes(tmp916.P, tmp916.ItemIDs, tmp916.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp917.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp918)
        {
          var tmp919 = $"Error occurred in {GetType().FullName}: {tmp918.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp918, tmp919);
          else
            Console.Error.WriteLine(tmp919);
          var tmp920 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp920.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task events_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp921 = new InternalStructs.events_args();
        await tmp921.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp922 = new InternalStructs.events_result();
        try
        {
          tmp922.Success = await _iAsync.events(tmp921.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Reply, seqid), cancellationToken); 
          await tmp922.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp923)
        {
          var tmp924 = $"Error occurred in {GetType().FullName}: {tmp923.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp923, tmp924);
          else
            Console.Error.WriteLine(tmp924);
          var tmp925 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Exception, seqid), cancellationToken);
          await tmp925.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentLanguage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp926 = new InternalStructs.currentLanguage_args();
        await tmp926.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp927 = new InternalStructs.currentLanguage_result();
        try
        {
          tmp927.Success = await _iAsync.currentLanguage(tmp926.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp927.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp928)
        {
          var tmp929 = $"Error occurred in {GetType().FullName}: {tmp928.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp928, tmp929);
          else
            Console.Error.WriteLine(tmp929);
          var tmp930 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Exception, seqid), cancellationToken);
          await tmp930.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentLocale_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp931 = new InternalStructs.currentLocale_args();
        await tmp931.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp932 = new InternalStructs.currentLocale_result();
        try
        {
          tmp932.Success = await _iAsync.currentLocale(tmp931.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Reply, seqid), cancellationToken); 
          await tmp932.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp933)
        {
          var tmp934 = $"Error occurred in {GetType().FullName}: {tmp933.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp933, tmp934);
          else
            Console.Error.WriteLine(tmp934);
          var tmp935 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Exception, seqid), cancellationToken);
          await tmp935.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentScreenName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp936 = new InternalStructs.currentScreenName_args();
        await tmp936.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp937 = new InternalStructs.currentScreenName_result();
        try
        {
          tmp937.Success = await _iAsync.currentScreenName(tmp936.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp937.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp938)
        {
          var tmp939 = $"Error occurred in {GetType().FullName}: {tmp938.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp938, tmp939);
          else
            Console.Error.WriteLine(tmp939);
          var tmp940 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Exception, seqid), cancellationToken);
          await tmp940.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerYML_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp941 = new InternalStructs.registerYML_args();
        await tmp941.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp942 = new InternalStructs.registerYML_result();
        try
        {
          tmp942.Success = await _iAsync.registerYML(tmp941.P, tmp941.YmlSource, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Reply, seqid), cancellationToken); 
          await tmp942.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp943)
        {
          var tmp944 = $"Error occurred in {GetType().FullName}: {tmp943.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp943, tmp944);
          else
            Console.Error.WriteLine(tmp944);
          var tmp945 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Exception, seqid), cancellationToken);
          await tmp945.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerImageFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp946 = new InternalStructs.registerImageFile_args();
        await tmp946.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp947 = new InternalStructs.registerImageFile_result();
        try
        {
          try
          {
            await _iAsync.registerImageFile(tmp946.P, tmp946.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp948)
          {
            tmp947.E = tmp948;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp947.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp949)
        {
          var tmp950 = $"Error occurred in {GetType().FullName}: {tmp949.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp949, tmp950);
          else
            Console.Error.WriteLine(tmp950);
          var tmp951 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp951.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerImageData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp952 = new InternalStructs.registerImageData_args();
        await tmp952.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp953 = new InternalStructs.registerImageData_result();
        try
        {
          try
          {
            await _iAsync.registerImageData(tmp952.P, tmp952.ImageData, tmp952.ImageName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp954)
          {
            tmp953.E = tmp954;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp953.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp955)
        {
          var tmp956 = $"Error occurred in {GetType().FullName}: {tmp955.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp955, tmp956);
          else
            Console.Error.WriteLine(tmp956);
          var tmp957 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Exception, seqid), cancellationToken);
          await tmp957.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerHTMLFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp958 = new InternalStructs.registerHTMLFile_args();
        await tmp958.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp959 = new InternalStructs.registerHTMLFile_result();
        try
        {
          try
          {
            await _iAsync.registerHTMLFile(tmp958.P, tmp958.HtmlFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp960)
          {
            tmp959.E = tmp960;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp959.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp961)
        {
          var tmp962 = $"Error occurred in {GetType().FullName}: {tmp961.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp961, tmp962);
          else
            Console.Error.WriteLine(tmp962);
          var tmp963 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp963.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerHTMLData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp964 = new InternalStructs.registerHTMLData_args();
        await tmp964.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp965 = new InternalStructs.registerHTMLData_result();
        try
        {
          try
          {
            await _iAsync.registerHTMLData(tmp964.P, tmp964.HtmlData, tmp964.HtmlName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp966)
          {
            tmp965.E = tmp966;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp965.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp967)
        {
          var tmp968 = $"Error occurred in {GetType().FullName}: {tmp967.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp967, tmp968);
          else
            Console.Error.WriteLine(tmp968);
          var tmp969 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Exception, seqid), cancellationToken);
          await tmp969.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerTranslationFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp970 = new InternalStructs.registerTranslationFile_args();
        await tmp970.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp971 = new InternalStructs.registerTranslationFile_result();
        try
        {
          try
          {
            await _iAsync.registerTranslationFile(tmp970.P, tmp970.Locale, tmp970.TranslationFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp972)
          {
            tmp971.E = tmp972;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp971.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp973)
        {
          var tmp974 = $"Error occurred in {GetType().FullName}: {tmp973.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp973, tmp974);
          else
            Console.Error.WriteLine(tmp974);
          var tmp975 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp975.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerTranslationData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp976 = new InternalStructs.registerTranslationData_args();
        await tmp976.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp977 = new InternalStructs.registerTranslationData_result();
        try
        {
          try
          {
            await _iAsync.registerTranslationData(tmp976.P, tmp976.Locale, tmp976.TranslationData, tmp976.TranslationName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp978)
          {
            tmp977.E = tmp978;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp977.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp979)
        {
          var tmp980 = $"Error occurred in {GetType().FullName}: {tmp979.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp979, tmp980);
          else
            Console.Error.WriteLine(tmp980);
          var tmp981 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Exception, seqid), cancellationToken);
          await tmp981.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityMenu_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp982 = new InternalStructs.registerUtilityMenu_args();
        await tmp982.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp983 = new InternalStructs.registerUtilityMenu_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityMenu(tmp982.P, tmp982.MenuName, tmp982.MenuText, tmp982.MenuIcon, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp984)
          {
            tmp983.E = tmp984;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityMenu", TMessageType.Reply, seqid), cancellationToken); 
          await tmp983.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp985)
        {
          var tmp986 = $"Error occurred in {GetType().FullName}: {tmp985.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp985, tmp986);
          else
            Console.Error.WriteLine(tmp986);
          var tmp987 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityMenu", TMessageType.Exception, seqid), cancellationToken);
          await tmp987.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityMenu_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp988 = new InternalStructs.unregisterUtilityMenu_args();
        await tmp988.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp989 = new InternalStructs.unregisterUtilityMenu_result();
        try
        {
          try
          {
            await _iAsync.unregisterUtilityMenu(tmp988.P, tmp988.MenuName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp990)
          {
            tmp989.E = tmp990;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityMenu", TMessageType.Reply, seqid), cancellationToken); 
          await tmp989.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp991)
        {
          var tmp992 = $"Error occurred in {GetType().FullName}: {tmp991.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp991, tmp992);
          else
            Console.Error.WriteLine(tmp992);
          var tmp993 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityMenu", TMessageType.Exception, seqid), cancellationToken);
          await tmp993.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp994 = new InternalStructs.registerUtilityWindow_args();
        await tmp994.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp995 = new InternalStructs.registerUtilityWindow_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityWindow(tmp994.P, tmp994.Identifier, tmp994.ItemType, tmp994.MenuItemName, tmp994.WindowTitle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp996)
          {
            tmp995.E = tmp996;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp995.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp997)
        {
          var tmp998 = $"Error occurred in {GetType().FullName}: {tmp997.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp997, tmp998);
          else
            Console.Error.WriteLine(tmp998);
          var tmp999 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp999.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindowWithMenu_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1000 = new InternalStructs.registerUtilityWindowWithMenu_args();
        await tmp1000.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1001 = new InternalStructs.registerUtilityWindowWithMenu_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityWindowWithMenu(tmp1000.P, tmp1000.Identifier, tmp1000.ItemType, tmp1000.MenuItemName, tmp1000.WindowTitle, tmp1000.MenuName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1002)
          {
            tmp1001.E = tmp1002;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindowWithMenu", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1001.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1003)
        {
          var tmp1004 = $"Error occurred in {GetType().FullName}: {tmp1003.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1003, tmp1004);
          else
            Console.Error.WriteLine(tmp1004);
          var tmp1005 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindowWithMenu", TMessageType.Exception, seqid), cancellationToken);
          await tmp1005.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1006 = new InternalStructs.unregisterUtilityWindow_args();
        await tmp1006.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1007 = new InternalStructs.unregisterUtilityWindow_result();
        try
        {
          try
          {
            await _iAsync.unregisterUtilityWindow(tmp1006.P, tmp1006.Identifier, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1008)
          {
            tmp1007.E = tmp1008;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1007.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1009)
        {
          var tmp1010 = $"Error occurred in {GetType().FullName}: {tmp1009.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1009, tmp1010);
          else
            Console.Error.WriteLine(tmp1010);
          var tmp1011 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1011.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task openUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1012 = new InternalStructs.openUtilityWindow_args();
        await tmp1012.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1013 = new InternalStructs.openUtilityWindow_result();
        try
        {
          await _iAsync.openUtilityWindow(tmp1012.P, tmp1012.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1013.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1014)
        {
          var tmp1015 = $"Error occurred in {GetType().FullName}: {tmp1014.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1014, tmp1015);
          else
            Console.Error.WriteLine(tmp1015);
          var tmp1016 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1016.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1017 = new InternalStructs.closeUtilityWindow_args();
        await tmp1017.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1018 = new InternalStructs.closeUtilityWindow_result();
        try
        {
          await _iAsync.closeUtilityWindow(tmp1017.P, tmp1017.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1018.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1019)
        {
          var tmp1020 = $"Error occurred in {GetType().FullName}: {tmp1019.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1019, tmp1020);
          else
            Console.Error.WriteLine(tmp1020);
          var tmp1021 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1021.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task collapseUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1022 = new InternalStructs.collapseUtilityWindow_args();
        await tmp1022.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1023 = new InternalStructs.collapseUtilityWindow_result();
        try
        {
          await _iAsync.collapseUtilityWindow(tmp1022.P, tmp1022.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1023.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1024)
        {
          var tmp1025 = $"Error occurred in {GetType().FullName}: {tmp1024.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1024, tmp1025);
          else
            Console.Error.WriteLine(tmp1025);
          var tmp1026 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1026.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expandUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1027 = new InternalStructs.expandUtilityWindow_args();
        await tmp1027.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1028 = new InternalStructs.expandUtilityWindow_result();
        try
        {
          await _iAsync.expandUtilityWindow(tmp1027.P, tmp1027.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1028.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1029)
        {
          var tmp1030 = $"Error occurred in {GetType().FullName}: {tmp1029.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1029, tmp1030);
          else
            Console.Error.WriteLine(tmp1030);
          var tmp1031 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1031.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task refreshDynamicInstructions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1032 = new InternalStructs.refreshDynamicInstructions_args();
        await tmp1032.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1033 = new InternalStructs.refreshDynamicInstructions_result();
        try
        {
          await _iAsync.refreshDynamicInstructions(tmp1032.P, tmp1032.InstructionType, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("refreshDynamicInstructions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1033.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1034)
        {
          var tmp1035 = $"Error occurred in {GetType().FullName}: {tmp1034.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1034, tmp1035);
          else
            Console.Error.WriteLine(tmp1035);
          var tmp1036 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("refreshDynamicInstructions", TMessageType.Exception, seqid), cancellationToken);
          await tmp1036.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerIntegration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1037 = new InternalStructs.registerIntegration_args();
        await tmp1037.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1038 = new InternalStructs.registerIntegration_result();
        try
        {
          try
          {
            await _iAsync.registerIntegration(tmp1037.P, tmp1037.Identifier, tmp1037.IntegrationPoint, tmp1037.ItemType, tmp1037.ButtonLabel, tmp1037.ButtonImage, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1039)
          {
            tmp1038.E = tmp1039;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1038.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1040)
        {
          var tmp1041 = $"Error occurred in {GetType().FullName}: {tmp1040.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1040, tmp1041);
          else
            Console.Error.WriteLine(tmp1041);
          var tmp1042 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Exception, seqid), cancellationToken);
          await tmp1042.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterIntegration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1043 = new InternalStructs.unregisterIntegration_args();
        await tmp1043.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1044 = new InternalStructs.unregisterIntegration_result();
        try
        {
          try
          {
            await _iAsync.unregisterIntegration(tmp1043.P, tmp1043.Identifier, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1045)
          {
            tmp1044.E = tmp1045;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1044.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1046)
        {
          var tmp1047 = $"Error occurred in {GetType().FullName}: {tmp1046.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1046, tmp1047);
          else
            Console.Error.WriteLine(tmp1047);
          var tmp1048 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Exception, seqid), cancellationToken);
          await tmp1048.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerSwitch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1049 = new InternalStructs.registerSwitch_args();
        await tmp1049.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1050 = new InternalStructs.registerSwitch_result();
        try
        {
          try
          {
            await _iAsync.registerSwitch(tmp1049.P, tmp1049.Identifier, tmp1049.IntegrationPoint, tmp1049.SwitchLabel, tmp1049.OffPositionLabel, tmp1049.OnPositionLabel, tmp1049.DefaultState, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1051)
          {
            tmp1050.E = tmp1051;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerSwitch", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1050.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1052)
        {
          var tmp1053 = $"Error occurred in {GetType().FullName}: {tmp1052.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1052, tmp1053);
          else
            Console.Error.WriteLine(tmp1053);
          var tmp1054 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerSwitch", TMessageType.Exception, seqid), cancellationToken);
          await tmp1054.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerDirectOpenForInstr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1055 = new InternalStructs.registerDirectOpenForInstr_args();
        await tmp1055.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1056 = new InternalStructs.registerDirectOpenForInstr_result();
        try
        {
          try
          {
            await _iAsync.registerDirectOpenForInstr(tmp1055.P, tmp1055.Identifier, tmp1055.Instruction, tmp1055.InstrTags, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1057)
          {
            tmp1056.E = tmp1057;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerDirectOpenForInstr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1056.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1058)
        {
          var tmp1059 = $"Error occurred in {GetType().FullName}: {tmp1058.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1058, tmp1059);
          else
            Console.Error.WriteLine(tmp1059);
          var tmp1060 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerDirectOpenForInstr", TMessageType.Exception, seqid), cancellationToken);
          await tmp1060.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterDirectOpenForInstr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1061 = new InternalStructs.unregisterDirectOpenForInstr_args();
        await tmp1061.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1062 = new InternalStructs.unregisterDirectOpenForInstr_result();
        try
        {
          try
          {
            await _iAsync.unregisterDirectOpenForInstr(tmp1061.P, tmp1061.Identifier, tmp1061.Instruction, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1063)
          {
            tmp1062.E = tmp1063;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterDirectOpenForInstr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1062.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1064)
        {
          var tmp1065 = $"Error occurred in {GetType().FullName}: {tmp1064.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1064, tmp1065);
          else
            Console.Error.WriteLine(tmp1065);
          var tmp1066 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterDirectOpenForInstr", TMessageType.Exception, seqid), cancellationToken);
          await tmp1066.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task property_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1067 = new InternalStructs.property_args();
        await tmp1067.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1068 = new InternalStructs.property_result();
        try
        {
          try
          {
            tmp1068.Success = await _iAsync.property(tmp1067.P, tmp1067.ItemID, tmp1067.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1069)
          {
            tmp1068.E = tmp1069;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("property", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1068.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1070)
        {
          var tmp1071 = $"Error occurred in {GetType().FullName}: {tmp1070.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1070, tmp1071);
          else
            Console.Error.WriteLine(tmp1071);
          var tmp1072 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("property", TMessageType.Exception, seqid), cancellationToken);
          await tmp1072.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setProperty_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1073 = new InternalStructs.setProperty_args();
        await tmp1073.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1074 = new InternalStructs.setProperty_result();
        try
        {
          try
          {
            await _iAsync.setProperty(tmp1073.P, tmp1073.ItemID, tmp1073.Name, tmp1073.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1075)
          {
            tmp1074.E = tmp1075;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1074.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1076)
        {
          var tmp1077 = $"Error occurred in {GetType().FullName}: {tmp1076.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1076, tmp1077);
          else
            Console.Error.WriteLine(tmp1077);
          var tmp1078 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Exception, seqid), cancellationToken);
          await tmp1078.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setProperties_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1079 = new InternalStructs.setProperties_args();
        await tmp1079.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setProperties(tmp1079.P, tmp1079.PropValuesList, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1081)
        {
          var tmp1082 = $"Error occurred in {GetType().FullName}: {tmp1081.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1081, tmp1082);
          else
            Console.Error.WriteLine(tmp1082);
        }
      }

      public async global::System.Threading.Tasks.Task setChartConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1083 = new InternalStructs.setChartConfig_args();
        await tmp1083.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1084 = new InternalStructs.setChartConfig_result();
        try
        {
          try
          {
            await _iAsync.setChartConfig(tmp1083.P, tmp1083.ChartID, tmp1083.Config, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1085)
          {
            tmp1084.E = tmp1085;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1084.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1086)
        {
          var tmp1087 = $"Error occurred in {GetType().FullName}: {tmp1086.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1086, tmp1087);
          else
            Console.Error.WriteLine(tmp1087);
          var tmp1088 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp1088.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getChartConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1089 = new InternalStructs.getChartConfig_args();
        await tmp1089.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1090 = new InternalStructs.getChartConfig_result();
        try
        {
          try
          {
            tmp1090.Success = await _iAsync.getChartConfig(tmp1089.P, tmp1089.ChartID, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1091)
          {
            tmp1090.E = tmp1091;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1090.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1092)
        {
          var tmp1093 = $"Error occurred in {GetType().FullName}: {tmp1092.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1092, tmp1093);
          else
            Console.Error.WriteLine(tmp1093);
          var tmp1094 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp1094.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setChartData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1095 = new InternalStructs.setChartData_args();
        await tmp1095.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1096 = new InternalStructs.setChartData_result();
        try
        {
          try
          {
            await _iAsync.setChartData(tmp1095.P, tmp1095.ChartID, tmp1095.Dataset, tmp1095.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1097)
          {
            tmp1096.E = tmp1097;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1096.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1098)
        {
          var tmp1099 = $"Error occurred in {GetType().FullName}: {tmp1098.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1098, tmp1099);
          else
            Console.Error.WriteLine(tmp1099);
          var tmp1100 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1100.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getChartData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1101 = new InternalStructs.getChartData_args();
        await tmp1101.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1102 = new InternalStructs.getChartData_result();
        try
        {
          try
          {
            tmp1102.Success = await _iAsync.getChartData(tmp1101.P, tmp1101.ChartID, tmp1101.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1103)
          {
            tmp1102.E = tmp1103;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1102.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1104)
        {
          var tmp1105 = $"Error occurred in {GetType().FullName}: {tmp1104.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1104, tmp1105);
          else
            Console.Error.WriteLine(tmp1105);
          var tmp1106 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1106.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1107 = new InternalStructs.addChartKey_args();
        await tmp1107.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1108 = new InternalStructs.addChartKey_result();
        try
        {
          try
          {
            await _iAsync.addChartKey(tmp1107.P, tmp1107.ChartID, tmp1107.Key, tmp1107.Data, tmp1107.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1109)
          {
            tmp1108.E = tmp1109;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1108.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1110)
        {
          var tmp1111 = $"Error occurred in {GetType().FullName}: {tmp1110.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1110, tmp1111);
          else
            Console.Error.WriteLine(tmp1111);
          var tmp1112 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1112.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1113 = new InternalStructs.removeChartKey_args();
        await tmp1113.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1114 = new InternalStructs.removeChartKey_result();
        try
        {
          try
          {
            await _iAsync.removeChartKey(tmp1113.P, tmp1113.ChartID, tmp1113.Key, tmp1113.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1115)
          {
            tmp1114.E = tmp1115;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1114.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1116)
        {
          var tmp1117 = $"Error occurred in {GetType().FullName}: {tmp1116.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1116, tmp1117);
          else
            Console.Error.WriteLine(tmp1117);
          var tmp1118 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1118.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task hideChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1119 = new InternalStructs.hideChartKey_args();
        await tmp1119.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1120 = new InternalStructs.hideChartKey_result();
        try
        {
          try
          {
            await _iAsync.hideChartKey(tmp1119.P, tmp1119.ChartID, tmp1119.Key, tmp1119.Hidden, tmp1119.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1121)
          {
            tmp1120.E = tmp1121;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1120.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1122)
        {
          var tmp1123 = $"Error occurred in {GetType().FullName}: {tmp1122.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1122, tmp1123);
          else
            Console.Error.WriteLine(tmp1123);
          var tmp1124 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1124.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task appendChartPoints_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1125 = new InternalStructs.appendChartPoints_args();
        await tmp1125.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.appendChartPoints(tmp1125.P, tmp1125.ChartID, tmp1125.Key, tmp1125.Points, tmp1125.Right, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1127)
        {
          var tmp1128 = $"Error occurred in {GetType().FullName}: {tmp1127.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1127, tmp1128);
          else
            Console.Error.WriteLine(tmp1128);
        }
      }

      public async global::System.Threading.Tasks.Task incrementChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1129 = new InternalStructs.incrementChartKey_args();
        await tmp1129.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1130 = new InternalStructs.incrementChartKey_result();
        try
        {
          try
          {
            await _iAsync.incrementChartKey(tmp1129.P, tmp1129.ChartID, tmp1129.Key, tmp1129.Val, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1131)
          {
            tmp1130.E = tmp1131;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1130.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1132)
        {
          var tmp1133 = $"Error occurred in {GetType().FullName}: {tmp1132.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1132, tmp1133);
          else
            Console.Error.WriteLine(tmp1133);
          var tmp1134 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1134.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exportChartImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1135 = new InternalStructs.exportChartImage_args();
        await tmp1135.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1136 = new InternalStructs.exportChartImage_result();
        try
        {
          try
          {
            tmp1136.Success = await _iAsync.exportChartImage(tmp1135.P, tmp1135.ChartID, tmp1135.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1137)
          {
            tmp1136.E = tmp1137;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1136.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1138)
        {
          var tmp1139 = $"Error occurred in {GetType().FullName}: {tmp1138.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1138, tmp1139);
          else
            Console.Error.WriteLine(tmp1139);
          var tmp1140 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Exception, seqid), cancellationToken);
          await tmp1140.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exportChartImageData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1141 = new InternalStructs.exportChartImageData_args();
        await tmp1141.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1142 = new InternalStructs.exportChartImageData_result();
        try
        {
          try
          {
            tmp1142.Success = await _iAsync.exportChartImageData(tmp1141.P, tmp1141.ChartID, tmp1141.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1143)
          {
            tmp1142.E = tmp1143;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1142.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1144)
        {
          var tmp1145 = $"Error occurred in {GetType().FullName}: {tmp1144.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1144, tmp1145);
          else
            Console.Error.WriteLine(tmp1145);
          var tmp1146 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1146.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task notice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1147 = new InternalStructs.notice_args();
        await tmp1147.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.notice(tmp1147.P, tmp1147.Title, tmp1147.Message, tmp1147.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1149)
        {
          var tmp1150 = $"Error occurred in {GetType().FullName}: {tmp1149.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1149, tmp1150);
          else
            Console.Error.WriteLine(tmp1150);
        }
      }

      public async global::System.Threading.Tasks.Task dispNotice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1151 = new InternalStructs.dispNotice_args();
        await tmp1151.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.dispNotice(tmp1151.P, tmp1151.Disposition, tmp1151.Title, tmp1151.Message, tmp1151.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1153)
        {
          var tmp1154 = $"Error occurred in {GetType().FullName}: {tmp1153.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1153, tmp1154);
          else
            Console.Error.WriteLine(tmp1154);
        }
      }

      public async global::System.Threading.Tasks.Task error_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1155 = new InternalStructs.error_args();
        await tmp1155.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.error(tmp1155.P, tmp1155.Title, tmp1155.Message, tmp1155.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1157)
        {
          var tmp1158 = $"Error occurred in {GetType().FullName}: {tmp1157.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1157, tmp1158);
          else
            Console.Error.WriteLine(tmp1158);
        }
      }

      public async global::System.Threading.Tasks.Task popupDialog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1159 = new InternalStructs.popupDialog_args();
        await tmp1159.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1160 = new InternalStructs.popupDialog_result();
        try
        {
          try
          {
            await _iAsync.popupDialog(tmp1159.P, tmp1159.Identifier, tmp1159.Title, tmp1159.Message, tmp1159.PositiveOption, tmp1159.NegativeOption, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1161)
          {
            tmp1160.E = tmp1161;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1160.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1162)
        {
          var tmp1163 = $"Error occurred in {GetType().FullName}: {tmp1162.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1162, tmp1163);
          else
            Console.Error.WriteLine(tmp1163);
          var tmp1164 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Exception, seqid), cancellationToken);
          await tmp1164.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task cancelPopupDialog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1165 = new InternalStructs.cancelPopupDialog_args();
        await tmp1165.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1166 = new InternalStructs.cancelPopupDialog_result();
        try
        {
          await _iAsync.cancelPopupDialog(tmp1165.P, tmp1165.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1166.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1167)
        {
          var tmp1168 = $"Error occurred in {GetType().FullName}: {tmp1167.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1167, tmp1168);
          else
            Console.Error.WriteLine(tmp1168);
          var tmp1169 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Exception, seqid), cancellationToken);
          await tmp1169.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task insertInstructionAtSelectedLine_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1170 = new InternalStructs.insertInstructionAtSelectedLine_args();
        await tmp1170.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1171 = new InternalStructs.insertInstructionAtSelectedLine_result();
        try
        {
          tmp1171.Success = await _iAsync.insertInstructionAtSelectedLine(tmp1170.P, tmp1170.Instruction, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1171.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1172)
        {
          var tmp1173 = $"Error occurred in {GetType().FullName}: {tmp1172.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1172, tmp1173);
          else
            Console.Error.WriteLine(tmp1173);
          var tmp1174 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Exception, seqid), cancellationToken);
          await tmp1174.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayScreen_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1175 = new InternalStructs.displayScreen_args();
        await tmp1175.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1176 = new InternalStructs.displayScreen_result();
        try
        {
          await _iAsync.displayScreen(tmp1175.P, tmp1175.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1176.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1177)
        {
          var tmp1178 = $"Error occurred in {GetType().FullName}: {tmp1177.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1177, tmp1178);
          else
            Console.Error.WriteLine(tmp1178);
          var tmp1179 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Exception, seqid), cancellationToken);
          await tmp1179.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayHelp_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1180 = new InternalStructs.displayHelp_args();
        await tmp1180.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1181 = new InternalStructs.displayHelp_result();
        try
        {
          await _iAsync.displayHelp(tmp1180.P, tmp1180.Title, tmp1180.HtmlContentFile, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1181.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1182)
        {
          var tmp1183 = $"Error occurred in {GetType().FullName}: {tmp1182.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1182, tmp1183);
          else
            Console.Error.WriteLine(tmp1183);
          var tmp1184 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Exception, seqid), cancellationToken);
          await tmp1184.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task accessLevel_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1185 = new InternalStructs.accessLevel_args();
        await tmp1185.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1186 = new InternalStructs.accessLevel_result();
        try
        {
          tmp1186.Success = await _iAsync.accessLevel(tmp1185.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("accessLevel", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1186.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1187)
        {
          var tmp1188 = $"Error occurred in {GetType().FullName}: {tmp1187.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1187, tmp1188);
          else
            Console.Error.WriteLine(tmp1188);
          var tmp1189 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("accessLevel", TMessageType.Exception, seqid), cancellationToken);
          await tmp1189.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task accessLevelIncludes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1190 = new InternalStructs.accessLevelIncludes_args();
        await tmp1190.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1191 = new InternalStructs.accessLevelIncludes_result();
        try
        {
          tmp1191.Success = await _iAsync.accessLevelIncludes(tmp1190.P, tmp1190.Level, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("accessLevelIncludes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1191.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1192)
        {
          var tmp1193 = $"Error occurred in {GetType().FullName}: {tmp1192.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1192, tmp1193);
          else
            Console.Error.WriteLine(tmp1193);
          var tmp1194 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("accessLevelIncludes", TMessageType.Exception, seqid), cancellationToken);
          await tmp1194.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task appendRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1195 = new InternalStructs.appendRow_args();
        await tmp1195.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1196 = new InternalStructs.appendRow_result();
        try
        {
          await _iAsync.appendRow(tmp1195.P, tmp1195.ContainerID, tmp1195.Dict, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("appendRow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1196.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1197)
        {
          var tmp1198 = $"Error occurred in {GetType().FullName}: {tmp1197.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1197, tmp1198);
          else
            Console.Error.WriteLine(tmp1198);
          var tmp1199 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("appendRow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1199.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task insertRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1200 = new InternalStructs.insertRow_args();
        await tmp1200.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1201 = new InternalStructs.insertRow_result();
        try
        {
          await _iAsync.insertRow(tmp1200.P, tmp1200.ContainerID, tmp1200.Index, tmp1200.Dict, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("insertRow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1201.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1202)
        {
          var tmp1203 = $"Error occurred in {GetType().FullName}: {tmp1202.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1202, tmp1203);
          else
            Console.Error.WriteLine(tmp1203);
          var tmp1204 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("insertRow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1204.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1205 = new InternalStructs.deleteRow_args();
        await tmp1205.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1206 = new InternalStructs.deleteRow_result();
        try
        {
          await _iAsync.deleteRow(tmp1205.P, tmp1205.ContainerID, tmp1205.Index, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("deleteRow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1206.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1207)
        {
          var tmp1208 = $"Error occurred in {GetType().FullName}: {tmp1207.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1207, tmp1208);
          else
            Console.Error.WriteLine(tmp1208);
          var tmp1209 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteRow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1209.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task clearRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1210 = new InternalStructs.clearRows_args();
        await tmp1210.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1211 = new InternalStructs.clearRows_result();
        try
        {
          await _iAsync.clearRows(tmp1210.P, tmp1210.ContainerID, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("clearRows", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1211.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1212)
        {
          var tmp1213 = $"Error occurred in {GetType().FullName}: {tmp1212.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1212, tmp1213);
          else
            Console.Error.WriteLine(tmp1213);
          var tmp1214 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("clearRows", TMessageType.Exception, seqid), cancellationToken);
          await tmp1214.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task appendRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1215 = new InternalStructs.appendRows_args();
        await tmp1215.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1216 = new InternalStructs.appendRows_result();
        try
        {
          await _iAsync.appendRows(tmp1215.P, tmp1215.ContainerID, tmp1215.Dicts, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("appendRows", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1216.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1217)
        {
          var tmp1218 = $"Error occurred in {GetType().FullName}: {tmp1217.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1217, tmp1218);
          else
            Console.Error.WriteLine(tmp1218);
          var tmp1219 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("appendRows", TMessageType.Exception, seqid), cancellationToken);
          await tmp1219.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class pendantVersion_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public pendantVersion_args()
        {
        }

        public pendantVersion_args DeepCopy()
        {
          var tmp1220 = new pendantVersion_args();
          if(__isset.p)
          {
            tmp1220.P = this.P;
          }
          tmp1220.__isset.p = this.__isset.p;
          return tmp1220;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1221 = new TStruct("pendantVersion_args");
            await oprot.WriteStructBeginAsync(tmp1221, cancellationToken);
            var tmp1222 = new TField();
            if(__isset.p)
            {
              tmp1222.Name = "p";
              tmp1222.Type = TType.I64;
              tmp1222.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1222, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendantVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1223 = new StringBuilder("pendantVersion_args(");
          int tmp1224 = 0;
          if(__isset.p)
          {
            if(0 < tmp1224++) { tmp1223.Append(", "); }
            tmp1223.Append("P: ");
            P.ToString(tmp1223);
          }
          tmp1223.Append(')');
          return tmp1223.ToString();
        }
      }


      public partial class pendantVersion_result : TBase
      {
        private global::Yaskawa.Ext.API.Version _success;

        public global::Yaskawa.Ext.API.Version Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public pendantVersion_result()
        {
        }

        public pendantVersion_result DeepCopy()
        {
          var tmp1225 = new pendantVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp1225.Success = (global::Yaskawa.Ext.API.Version)this.Success.DeepCopy();
          }
          tmp1225.__isset.success = this.__isset.success;
          return tmp1225;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Version();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1226 = new TStruct("pendantVersion_result");
            await oprot.WriteStructBeginAsync(tmp1226, cancellationToken);
            var tmp1227 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1227.Name = "Success";
                tmp1227.Type = TType.Struct;
                tmp1227.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1227, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendantVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1228 = new StringBuilder("pendantVersion_result(");
          int tmp1229 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1229++) { tmp1228.Append(", "); }
            tmp1228.Append("Success: ");
            Success.ToString(tmp1228);
          }
          tmp1228.Append(')');
          return tmp1228.ToString();
        }
      }


      public partial class subscribeEventTypes_args : TBase
      {
        private long _p;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool types;
        }

        public subscribeEventTypes_args()
        {
        }

        public subscribeEventTypes_args DeepCopy()
        {
          var tmp1230 = new subscribeEventTypes_args();
          if(__isset.p)
          {
            tmp1230.P = this.P;
          }
          tmp1230.__isset.p = this.__isset.p;
          if((Types != null) && __isset.types)
          {
            tmp1230.Types = this.Types.DeepCopy();
          }
          tmp1230.__isset.types = this.__isset.types;
          return tmp1230;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1231 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1231.Count);
                      for(int _i1232 = 0; _i1232 < _set1231.Count; ++_i1232)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1233;
                        _elem1233 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1233);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1234 = new TStruct("subscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1234, cancellationToken);
            var tmp1235 = new TField();
            if(__isset.p)
            {
              tmp1235.Name = "p";
              tmp1235.Type = TType.I64;
              tmp1235.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1235, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1235.Name = "types";
              tmp1235.Type = TType.Set;
              tmp1235.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1235, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1236 in Types)
              {
                await oprot.WriteI32Async((int)_iter1236, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1237 = new StringBuilder("subscribeEventTypes_args(");
          int tmp1238 = 0;
          if(__isset.p)
          {
            if(0 < tmp1238++) { tmp1237.Append(", "); }
            tmp1237.Append("P: ");
            P.ToString(tmp1237);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1238++) { tmp1237.Append(", "); }
            tmp1237.Append("Types: ");
            Types.ToString(tmp1237);
          }
          tmp1237.Append(')');
          return tmp1237.ToString();
        }
      }


      public partial class subscribeEventTypes_result : TBase
      {

        public subscribeEventTypes_result()
        {
        }

        public subscribeEventTypes_result DeepCopy()
        {
          var tmp1239 = new subscribeEventTypes_result();
          return tmp1239;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1240 = new TStruct("subscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1240, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1241 = new StringBuilder("subscribeEventTypes_result(");
          tmp1241.Append(')');
          return tmp1241.ToString();
        }
      }


      public partial class unsubscribeEventTypes_args : TBase
      {
        private long _p;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool types;
        }

        public unsubscribeEventTypes_args()
        {
        }

        public unsubscribeEventTypes_args DeepCopy()
        {
          var tmp1243 = new unsubscribeEventTypes_args();
          if(__isset.p)
          {
            tmp1243.P = this.P;
          }
          tmp1243.__isset.p = this.__isset.p;
          if((Types != null) && __isset.types)
          {
            tmp1243.Types = this.Types.DeepCopy();
          }
          tmp1243.__isset.types = this.__isset.types;
          return tmp1243;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1244 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1244.Count);
                      for(int _i1245 = 0; _i1245 < _set1244.Count; ++_i1245)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1246;
                        _elem1246 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1246);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1247 = new TStruct("unsubscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1247, cancellationToken);
            var tmp1248 = new TField();
            if(__isset.p)
            {
              tmp1248.Name = "p";
              tmp1248.Type = TType.I64;
              tmp1248.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1248, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1248.Name = "types";
              tmp1248.Type = TType.Set;
              tmp1248.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1248, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1249 in Types)
              {
                await oprot.WriteI32Async((int)_iter1249, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1250 = new StringBuilder("unsubscribeEventTypes_args(");
          int tmp1251 = 0;
          if(__isset.p)
          {
            if(0 < tmp1251++) { tmp1250.Append(", "); }
            tmp1250.Append("P: ");
            P.ToString(tmp1250);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1251++) { tmp1250.Append(", "); }
            tmp1250.Append("Types: ");
            Types.ToString(tmp1250);
          }
          tmp1250.Append(')');
          return tmp1250.ToString();
        }
      }


      public partial class unsubscribeEventTypes_result : TBase
      {

        public unsubscribeEventTypes_result()
        {
        }

        public unsubscribeEventTypes_result DeepCopy()
        {
          var tmp1252 = new unsubscribeEventTypes_result();
          return tmp1252;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1253 = new TStruct("unsubscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1253, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1254 = new StringBuilder("unsubscribeEventTypes_result(");
          tmp1254.Append(')');
          return tmp1254.ToString();
        }
      }


      public partial class subscribeItemEventTypes_args : TBase
      {
        private long _p;
        private HashSet<string> _itemIDs;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<string> ItemIDs
        {
          get
          {
            return _itemIDs;
          }
          set
          {
            __isset.itemIDs = true;
            this._itemIDs = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemIDs;
          public bool types;
        }

        public subscribeItemEventTypes_args()
        {
        }

        public subscribeItemEventTypes_args DeepCopy()
        {
          var tmp1256 = new subscribeItemEventTypes_args();
          if(__isset.p)
          {
            tmp1256.P = this.P;
          }
          tmp1256.__isset.p = this.__isset.p;
          if((ItemIDs != null) && __isset.itemIDs)
          {
            tmp1256.ItemIDs = this.ItemIDs.DeepCopy();
          }
          tmp1256.__isset.itemIDs = this.__isset.itemIDs;
          if((Types != null) && __isset.types)
          {
            tmp1256.Types = this.Types.DeepCopy();
          }
          tmp1256.__isset.types = this.__isset.types;
          return tmp1256;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1257 = await iprot.ReadSetBeginAsync(cancellationToken);
                      ItemIDs = new HashSet<string>(_set1257.Count);
                      for(int _i1258 = 0; _i1258 < _set1257.Count; ++_i1258)
                      {
                        string _elem1259;
                        _elem1259 = await iprot.ReadStringAsync(cancellationToken);
                        ItemIDs.Add(_elem1259);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1260 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1260.Count);
                      for(int _i1261 = 0; _i1261 < _set1260.Count; ++_i1261)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1262;
                        _elem1262 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1262);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1263 = new TStruct("subscribeItemEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1263, cancellationToken);
            var tmp1264 = new TField();
            if(__isset.p)
            {
              tmp1264.Name = "p";
              tmp1264.Type = TType.I64;
              tmp1264.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1264, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              tmp1264.Name = "itemIDs";
              tmp1264.Type = TType.Set;
              tmp1264.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1264, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, ItemIDs.Count), cancellationToken);
              foreach (string _iter1265 in ItemIDs)
              {
                await oprot.WriteStringAsync(_iter1265, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1264.Name = "types";
              tmp1264.Type = TType.Set;
              tmp1264.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1264, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1266 in Types)
              {
                await oprot.WriteI32Async((int)_iter1266, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeItemEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemIDs == other.__isset.itemIDs) && ((!__isset.itemIDs) || (TCollections.Equals(ItemIDs, other.ItemIDs))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(ItemIDs);
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1267 = new StringBuilder("subscribeItemEventTypes_args(");
          int tmp1268 = 0;
          if(__isset.p)
          {
            if(0 < tmp1268++) { tmp1267.Append(", "); }
            tmp1267.Append("P: ");
            P.ToString(tmp1267);
          }
          if((ItemIDs != null) && __isset.itemIDs)
          {
            if(0 < tmp1268++) { tmp1267.Append(", "); }
            tmp1267.Append("ItemIDs: ");
            ItemIDs.ToString(tmp1267);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1268++) { tmp1267.Append(", "); }
            tmp1267.Append("Types: ");
            Types.ToString(tmp1267);
          }
          tmp1267.Append(')');
          return tmp1267.ToString();
        }
      }


      public partial class subscribeItemEventTypes_result : TBase
      {

        public subscribeItemEventTypes_result()
        {
        }

        public subscribeItemEventTypes_result DeepCopy()
        {
          var tmp1269 = new subscribeItemEventTypes_result();
          return tmp1269;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1270 = new TStruct("subscribeItemEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1270, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeItemEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1271 = new StringBuilder("subscribeItemEventTypes_result(");
          tmp1271.Append(')');
          return tmp1271.ToString();
        }
      }


      public partial class unsubscribeItemEventTypes_args : TBase
      {
        private long _p;
        private HashSet<string> _itemIDs;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<string> ItemIDs
        {
          get
          {
            return _itemIDs;
          }
          set
          {
            __isset.itemIDs = true;
            this._itemIDs = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemIDs;
          public bool types;
        }

        public unsubscribeItemEventTypes_args()
        {
        }

        public unsubscribeItemEventTypes_args DeepCopy()
        {
          var tmp1273 = new unsubscribeItemEventTypes_args();
          if(__isset.p)
          {
            tmp1273.P = this.P;
          }
          tmp1273.__isset.p = this.__isset.p;
          if((ItemIDs != null) && __isset.itemIDs)
          {
            tmp1273.ItemIDs = this.ItemIDs.DeepCopy();
          }
          tmp1273.__isset.itemIDs = this.__isset.itemIDs;
          if((Types != null) && __isset.types)
          {
            tmp1273.Types = this.Types.DeepCopy();
          }
          tmp1273.__isset.types = this.__isset.types;
          return tmp1273;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1274 = await iprot.ReadSetBeginAsync(cancellationToken);
                      ItemIDs = new HashSet<string>(_set1274.Count);
                      for(int _i1275 = 0; _i1275 < _set1274.Count; ++_i1275)
                      {
                        string _elem1276;
                        _elem1276 = await iprot.ReadStringAsync(cancellationToken);
                        ItemIDs.Add(_elem1276);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1277 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1277.Count);
                      for(int _i1278 = 0; _i1278 < _set1277.Count; ++_i1278)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1279;
                        _elem1279 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1279);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1280 = new TStruct("unsubscribeItemEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1280, cancellationToken);
            var tmp1281 = new TField();
            if(__isset.p)
            {
              tmp1281.Name = "p";
              tmp1281.Type = TType.I64;
              tmp1281.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1281, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              tmp1281.Name = "itemIDs";
              tmp1281.Type = TType.Set;
              tmp1281.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1281, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, ItemIDs.Count), cancellationToken);
              foreach (string _iter1282 in ItemIDs)
              {
                await oprot.WriteStringAsync(_iter1282, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1281.Name = "types";
              tmp1281.Type = TType.Set;
              tmp1281.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1281, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1283 in Types)
              {
                await oprot.WriteI32Async((int)_iter1283, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeItemEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemIDs == other.__isset.itemIDs) && ((!__isset.itemIDs) || (TCollections.Equals(ItemIDs, other.ItemIDs))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(ItemIDs);
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1284 = new StringBuilder("unsubscribeItemEventTypes_args(");
          int tmp1285 = 0;
          if(__isset.p)
          {
            if(0 < tmp1285++) { tmp1284.Append(", "); }
            tmp1284.Append("P: ");
            P.ToString(tmp1284);
          }
          if((ItemIDs != null) && __isset.itemIDs)
          {
            if(0 < tmp1285++) { tmp1284.Append(", "); }
            tmp1284.Append("ItemIDs: ");
            ItemIDs.ToString(tmp1284);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1285++) { tmp1284.Append(", "); }
            tmp1284.Append("Types: ");
            Types.ToString(tmp1284);
          }
          tmp1284.Append(')');
          return tmp1284.ToString();
        }
      }


      public partial class unsubscribeItemEventTypes_result : TBase
      {

        public unsubscribeItemEventTypes_result()
        {
        }

        public unsubscribeItemEventTypes_result DeepCopy()
        {
          var tmp1286 = new unsubscribeItemEventTypes_result();
          return tmp1286;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1287 = new TStruct("unsubscribeItemEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1287, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeItemEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1288 = new StringBuilder("unsubscribeItemEventTypes_result(");
          tmp1288.Append(')');
          return tmp1288.ToString();
        }
      }


      public partial class events_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public events_args()
        {
        }

        public events_args DeepCopy()
        {
          var tmp1290 = new events_args();
          if(__isset.p)
          {
            tmp1290.P = this.P;
          }
          tmp1290.__isset.p = this.__isset.p;
          return tmp1290;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1291 = new TStruct("events_args");
            await oprot.WriteStructBeginAsync(tmp1291, cancellationToken);
            var tmp1292 = new TField();
            if(__isset.p)
            {
              tmp1292.Name = "p";
              tmp1292.Type = TType.I64;
              tmp1292.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1292, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1293 = new StringBuilder("events_args(");
          int tmp1294 = 0;
          if(__isset.p)
          {
            if(0 < tmp1294++) { tmp1293.Append(", "); }
            tmp1293.Append("P: ");
            P.ToString(tmp1293);
          }
          tmp1293.Append(')');
          return tmp1293.ToString();
        }
      }


      public partial class events_result : TBase
      {
        private List<global::Yaskawa.Ext.API.PendantEvent> _success;

        public List<global::Yaskawa.Ext.API.PendantEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public events_result()
        {
        }

        public events_result DeepCopy()
        {
          var tmp1295 = new events_result();
          if((Success != null) && __isset.success)
          {
            tmp1295.Success = this.Success.DeepCopy();
          }
          tmp1295.__isset.success = this.__isset.success;
          return tmp1295;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1296 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.PendantEvent>(_list1296.Count);
                      for(int _i1297 = 0; _i1297 < _list1296.Count; ++_i1297)
                      {
                        global::Yaskawa.Ext.API.PendantEvent _elem1298;
                        _elem1298 = new global::Yaskawa.Ext.API.PendantEvent();
                        await _elem1298.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1298);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1299 = new TStruct("events_result");
            await oprot.WriteStructBeginAsync(tmp1299, cancellationToken);
            var tmp1300 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1300.Name = "Success";
                tmp1300.Type = TType.List;
                tmp1300.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1300, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.PendantEvent _iter1301 in Success)
                {
                  await _iter1301.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1302 = new StringBuilder("events_result(");
          int tmp1303 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1303++) { tmp1302.Append(", "); }
            tmp1302.Append("Success: ");
            Success.ToString(tmp1302);
          }
          tmp1302.Append(')');
          return tmp1302.ToString();
        }
      }


      public partial class currentLanguage_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentLanguage_args()
        {
        }

        public currentLanguage_args DeepCopy()
        {
          var tmp1304 = new currentLanguage_args();
          if(__isset.p)
          {
            tmp1304.P = this.P;
          }
          tmp1304.__isset.p = this.__isset.p;
          return tmp1304;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1305 = new TStruct("currentLanguage_args");
            await oprot.WriteStructBeginAsync(tmp1305, cancellationToken);
            var tmp1306 = new TField();
            if(__isset.p)
            {
              tmp1306.Name = "p";
              tmp1306.Type = TType.I64;
              tmp1306.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1306, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLanguage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1307 = new StringBuilder("currentLanguage_args(");
          int tmp1308 = 0;
          if(__isset.p)
          {
            if(0 < tmp1308++) { tmp1307.Append(", "); }
            tmp1307.Append("P: ");
            P.ToString(tmp1307);
          }
          tmp1307.Append(')');
          return tmp1307.ToString();
        }
      }


      public partial class currentLanguage_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentLanguage_result()
        {
        }

        public currentLanguage_result DeepCopy()
        {
          var tmp1309 = new currentLanguage_result();
          if((Success != null) && __isset.success)
          {
            tmp1309.Success = this.Success;
          }
          tmp1309.__isset.success = this.__isset.success;
          return tmp1309;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1310 = new TStruct("currentLanguage_result");
            await oprot.WriteStructBeginAsync(tmp1310, cancellationToken);
            var tmp1311 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1311.Name = "Success";
                tmp1311.Type = TType.String;
                tmp1311.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1311, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLanguage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1312 = new StringBuilder("currentLanguage_result(");
          int tmp1313 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1313++) { tmp1312.Append(", "); }
            tmp1312.Append("Success: ");
            Success.ToString(tmp1312);
          }
          tmp1312.Append(')');
          return tmp1312.ToString();
        }
      }


      public partial class currentLocale_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentLocale_args()
        {
        }

        public currentLocale_args DeepCopy()
        {
          var tmp1314 = new currentLocale_args();
          if(__isset.p)
          {
            tmp1314.P = this.P;
          }
          tmp1314.__isset.p = this.__isset.p;
          return tmp1314;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1315 = new TStruct("currentLocale_args");
            await oprot.WriteStructBeginAsync(tmp1315, cancellationToken);
            var tmp1316 = new TField();
            if(__isset.p)
            {
              tmp1316.Name = "p";
              tmp1316.Type = TType.I64;
              tmp1316.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1316, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLocale_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1317 = new StringBuilder("currentLocale_args(");
          int tmp1318 = 0;
          if(__isset.p)
          {
            if(0 < tmp1318++) { tmp1317.Append(", "); }
            tmp1317.Append("P: ");
            P.ToString(tmp1317);
          }
          tmp1317.Append(')');
          return tmp1317.ToString();
        }
      }


      public partial class currentLocale_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentLocale_result()
        {
        }

        public currentLocale_result DeepCopy()
        {
          var tmp1319 = new currentLocale_result();
          if((Success != null) && __isset.success)
          {
            tmp1319.Success = this.Success;
          }
          tmp1319.__isset.success = this.__isset.success;
          return tmp1319;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1320 = new TStruct("currentLocale_result");
            await oprot.WriteStructBeginAsync(tmp1320, cancellationToken);
            var tmp1321 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1321.Name = "Success";
                tmp1321.Type = TType.String;
                tmp1321.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1321, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLocale_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1322 = new StringBuilder("currentLocale_result(");
          int tmp1323 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1323++) { tmp1322.Append(", "); }
            tmp1322.Append("Success: ");
            Success.ToString(tmp1322);
          }
          tmp1322.Append(')');
          return tmp1322.ToString();
        }
      }


      public partial class currentScreenName_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentScreenName_args()
        {
        }

        public currentScreenName_args DeepCopy()
        {
          var tmp1324 = new currentScreenName_args();
          if(__isset.p)
          {
            tmp1324.P = this.P;
          }
          tmp1324.__isset.p = this.__isset.p;
          return tmp1324;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1325 = new TStruct("currentScreenName_args");
            await oprot.WriteStructBeginAsync(tmp1325, cancellationToken);
            var tmp1326 = new TField();
            if(__isset.p)
            {
              tmp1326.Name = "p";
              tmp1326.Type = TType.I64;
              tmp1326.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1326, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentScreenName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1327 = new StringBuilder("currentScreenName_args(");
          int tmp1328 = 0;
          if(__isset.p)
          {
            if(0 < tmp1328++) { tmp1327.Append(", "); }
            tmp1327.Append("P: ");
            P.ToString(tmp1327);
          }
          tmp1327.Append(')');
          return tmp1327.ToString();
        }
      }


      public partial class currentScreenName_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentScreenName_result()
        {
        }

        public currentScreenName_result DeepCopy()
        {
          var tmp1329 = new currentScreenName_result();
          if((Success != null) && __isset.success)
          {
            tmp1329.Success = this.Success;
          }
          tmp1329.__isset.success = this.__isset.success;
          return tmp1329;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1330 = new TStruct("currentScreenName_result");
            await oprot.WriteStructBeginAsync(tmp1330, cancellationToken);
            var tmp1331 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1331.Name = "Success";
                tmp1331.Type = TType.String;
                tmp1331.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1331, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentScreenName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1332 = new StringBuilder("currentScreenName_result(");
          int tmp1333 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1333++) { tmp1332.Append(", "); }
            tmp1332.Append("Success: ");
            Success.ToString(tmp1332);
          }
          tmp1332.Append(')');
          return tmp1332.ToString();
        }
      }


      public partial class registerYML_args : TBase
      {
        private long _p;
        private string _ymlSource;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string YmlSource
        {
          get
          {
            return _ymlSource;
          }
          set
          {
            __isset.ymlSource = true;
            this._ymlSource = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ymlSource;
        }

        public registerYML_args()
        {
        }

        public registerYML_args DeepCopy()
        {
          var tmp1334 = new registerYML_args();
          if(__isset.p)
          {
            tmp1334.P = this.P;
          }
          tmp1334.__isset.p = this.__isset.p;
          if((YmlSource != null) && __isset.ymlSource)
          {
            tmp1334.YmlSource = this.YmlSource;
          }
          tmp1334.__isset.ymlSource = this.__isset.ymlSource;
          return tmp1334;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    YmlSource = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1335 = new TStruct("registerYML_args");
            await oprot.WriteStructBeginAsync(tmp1335, cancellationToken);
            var tmp1336 = new TField();
            if(__isset.p)
            {
              tmp1336.Name = "p";
              tmp1336.Type = TType.I64;
              tmp1336.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1336, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((YmlSource != null) && __isset.ymlSource)
            {
              tmp1336.Name = "ymlSource";
              tmp1336.Type = TType.String;
              tmp1336.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1336, cancellationToken);
              await oprot.WriteStringAsync(YmlSource, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerYML_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ymlSource == other.__isset.ymlSource) && ((!__isset.ymlSource) || (global::System.Object.Equals(YmlSource, other.YmlSource))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((YmlSource != null) && __isset.ymlSource)
            {
              hashcode = (hashcode * 397) + YmlSource.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1337 = new StringBuilder("registerYML_args(");
          int tmp1338 = 0;
          if(__isset.p)
          {
            if(0 < tmp1338++) { tmp1337.Append(", "); }
            tmp1337.Append("P: ");
            P.ToString(tmp1337);
          }
          if((YmlSource != null) && __isset.ymlSource)
          {
            if(0 < tmp1338++) { tmp1337.Append(", "); }
            tmp1337.Append("YmlSource: ");
            YmlSource.ToString(tmp1337);
          }
          tmp1337.Append(')');
          return tmp1337.ToString();
        }
      }


      public partial class registerYML_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public registerYML_result()
        {
        }

        public registerYML_result DeepCopy()
        {
          var tmp1339 = new registerYML_result();
          if((Success != null) && __isset.success)
          {
            tmp1339.Success = this.Success.DeepCopy();
          }
          tmp1339.__isset.success = this.__isset.success;
          return tmp1339;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1340 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list1340.Count);
                      for(int _i1341 = 0; _i1341 < _list1340.Count; ++_i1341)
                      {
                        string _elem1342;
                        _elem1342 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem1342);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1343 = new TStruct("registerYML_result");
            await oprot.WriteStructBeginAsync(tmp1343, cancellationToken);
            var tmp1344 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1344.Name = "Success";
                tmp1344.Type = TType.List;
                tmp1344.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1344, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter1345 in Success)
                {
                  await oprot.WriteStringAsync(_iter1345, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerYML_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1346 = new StringBuilder("registerYML_result(");
          int tmp1347 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1347++) { tmp1346.Append(", "); }
            tmp1346.Append("Success: ");
            Success.ToString(tmp1346);
          }
          tmp1346.Append(')');
          return tmp1346.ToString();
        }
      }


      public partial class registerImageFile_args : TBase
      {
        private long _p;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool imageFileName;
        }

        public registerImageFile_args()
        {
        }

        public registerImageFile_args DeepCopy()
        {
          var tmp1348 = new registerImageFile_args();
          if(__isset.p)
          {
            tmp1348.P = this.P;
          }
          tmp1348.__isset.p = this.__isset.p;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1348.ImageFileName = this.ImageFileName;
          }
          tmp1348.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1348;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1349 = new TStruct("registerImageFile_args");
            await oprot.WriteStructBeginAsync(tmp1349, cancellationToken);
            var tmp1350 = new TField();
            if(__isset.p)
            {
              tmp1350.Name = "p";
              tmp1350.Type = TType.I64;
              tmp1350.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1350, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1350.Name = "imageFileName";
              tmp1350.Type = TType.String;
              tmp1350.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1350, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1351 = new StringBuilder("registerImageFile_args(");
          int tmp1352 = 0;
          if(__isset.p)
          {
            if(0 < tmp1352++) { tmp1351.Append(", "); }
            tmp1351.Append("P: ");
            P.ToString(tmp1351);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1352++) { tmp1351.Append(", "); }
            tmp1351.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1351);
          }
          tmp1351.Append(')');
          return tmp1351.ToString();
        }
      }


      public partial class registerImageFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerImageFile_result()
        {
        }

        public registerImageFile_result DeepCopy()
        {
          var tmp1353 = new registerImageFile_result();
          if((E != null) && __isset.e)
          {
            tmp1353.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1353.__isset.e = this.__isset.e;
          return tmp1353;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1354 = new TStruct("registerImageFile_result");
            await oprot.WriteStructBeginAsync(tmp1354, cancellationToken);
            var tmp1355 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1355.Name = "E";
                tmp1355.Type = TType.Struct;
                tmp1355.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1355, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1356 = new StringBuilder("registerImageFile_result(");
          int tmp1357 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1357++) { tmp1356.Append(", "); }
            tmp1356.Append("E: ");
            E.ToString(tmp1356);
          }
          tmp1356.Append(')');
          return tmp1356.ToString();
        }
      }


      public partial class registerImageData_args : TBase
      {
        private long _p;
        private byte[] _imageData;
        private string _imageName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public byte[] ImageData
        {
          get
          {
            return _imageData;
          }
          set
          {
            __isset.imageData = true;
            this._imageData = value;
          }
        }

        public string ImageName
        {
          get
          {
            return _imageName;
          }
          set
          {
            __isset.imageName = true;
            this._imageName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool imageData;
          public bool imageName;
        }

        public registerImageData_args()
        {
        }

        public registerImageData_args DeepCopy()
        {
          var tmp1358 = new registerImageData_args();
          if(__isset.p)
          {
            tmp1358.P = this.P;
          }
          tmp1358.__isset.p = this.__isset.p;
          if((ImageData != null) && __isset.imageData)
          {
            tmp1358.ImageData = this.ImageData.ToArray();
          }
          tmp1358.__isset.imageData = this.__isset.imageData;
          if((ImageName != null) && __isset.imageName)
          {
            tmp1358.ImageName = this.ImageName;
          }
          tmp1358.__isset.imageName = this.__isset.imageName;
          return tmp1358;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ImageData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1359 = new TStruct("registerImageData_args");
            await oprot.WriteStructBeginAsync(tmp1359, cancellationToken);
            var tmp1360 = new TField();
            if(__isset.p)
            {
              tmp1360.Name = "p";
              tmp1360.Type = TType.I64;
              tmp1360.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1360, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageData != null) && __isset.imageData)
            {
              tmp1360.Name = "imageData";
              tmp1360.Type = TType.String;
              tmp1360.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1360, cancellationToken);
              await oprot.WriteBinaryAsync(ImageData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageName != null) && __isset.imageName)
            {
              tmp1360.Name = "imageName";
              tmp1360.Type = TType.String;
              tmp1360.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1360, cancellationToken);
              await oprot.WriteStringAsync(ImageName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.imageData == other.__isset.imageData) && ((!__isset.imageData) || (TCollections.Equals(ImageData, other.ImageData))))
            && ((__isset.imageName == other.__isset.imageName) && ((!__isset.imageName) || (global::System.Object.Equals(ImageName, other.ImageName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ImageData != null) && __isset.imageData)
            {
              hashcode = (hashcode * 397) + ImageData.GetHashCode();
            }
            if((ImageName != null) && __isset.imageName)
            {
              hashcode = (hashcode * 397) + ImageName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1361 = new StringBuilder("registerImageData_args(");
          int tmp1362 = 0;
          if(__isset.p)
          {
            if(0 < tmp1362++) { tmp1361.Append(", "); }
            tmp1361.Append("P: ");
            P.ToString(tmp1361);
          }
          if((ImageData != null) && __isset.imageData)
          {
            if(0 < tmp1362++) { tmp1361.Append(", "); }
            tmp1361.Append("ImageData: ");
            ImageData.ToString(tmp1361);
          }
          if((ImageName != null) && __isset.imageName)
          {
            if(0 < tmp1362++) { tmp1361.Append(", "); }
            tmp1361.Append("ImageName: ");
            ImageName.ToString(tmp1361);
          }
          tmp1361.Append(')');
          return tmp1361.ToString();
        }
      }


      public partial class registerImageData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerImageData_result()
        {
        }

        public registerImageData_result DeepCopy()
        {
          var tmp1363 = new registerImageData_result();
          if((E != null) && __isset.e)
          {
            tmp1363.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1363.__isset.e = this.__isset.e;
          return tmp1363;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1364 = new TStruct("registerImageData_result");
            await oprot.WriteStructBeginAsync(tmp1364, cancellationToken);
            var tmp1365 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1365.Name = "E";
                tmp1365.Type = TType.Struct;
                tmp1365.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1365, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1366 = new StringBuilder("registerImageData_result(");
          int tmp1367 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1367++) { tmp1366.Append(", "); }
            tmp1366.Append("E: ");
            E.ToString(tmp1366);
          }
          tmp1366.Append(')');
          return tmp1366.ToString();
        }
      }


      public partial class registerHTMLFile_args : TBase
      {
        private long _p;
        private string _htmlFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string HtmlFileName
        {
          get
          {
            return _htmlFileName;
          }
          set
          {
            __isset.htmlFileName = true;
            this._htmlFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool htmlFileName;
        }

        public registerHTMLFile_args()
        {
        }

        public registerHTMLFile_args DeepCopy()
        {
          var tmp1368 = new registerHTMLFile_args();
          if(__isset.p)
          {
            tmp1368.P = this.P;
          }
          tmp1368.__isset.p = this.__isset.p;
          if((HtmlFileName != null) && __isset.htmlFileName)
          {
            tmp1368.HtmlFileName = this.HtmlFileName;
          }
          tmp1368.__isset.htmlFileName = this.__isset.htmlFileName;
          return tmp1368;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HtmlFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1369 = new TStruct("registerHTMLFile_args");
            await oprot.WriteStructBeginAsync(tmp1369, cancellationToken);
            var tmp1370 = new TField();
            if(__isset.p)
            {
              tmp1370.Name = "p";
              tmp1370.Type = TType.I64;
              tmp1370.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1370, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlFileName != null) && __isset.htmlFileName)
            {
              tmp1370.Name = "htmlFileName";
              tmp1370.Type = TType.String;
              tmp1370.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1370, cancellationToken);
              await oprot.WriteStringAsync(HtmlFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.htmlFileName == other.__isset.htmlFileName) && ((!__isset.htmlFileName) || (global::System.Object.Equals(HtmlFileName, other.HtmlFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((HtmlFileName != null) && __isset.htmlFileName)
            {
              hashcode = (hashcode * 397) + HtmlFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1371 = new StringBuilder("registerHTMLFile_args(");
          int tmp1372 = 0;
          if(__isset.p)
          {
            if(0 < tmp1372++) { tmp1371.Append(", "); }
            tmp1371.Append("P: ");
            P.ToString(tmp1371);
          }
          if((HtmlFileName != null) && __isset.htmlFileName)
          {
            if(0 < tmp1372++) { tmp1371.Append(", "); }
            tmp1371.Append("HtmlFileName: ");
            HtmlFileName.ToString(tmp1371);
          }
          tmp1371.Append(')');
          return tmp1371.ToString();
        }
      }


      public partial class registerHTMLFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerHTMLFile_result()
        {
        }

        public registerHTMLFile_result DeepCopy()
        {
          var tmp1373 = new registerHTMLFile_result();
          if((E != null) && __isset.e)
          {
            tmp1373.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1373.__isset.e = this.__isset.e;
          return tmp1373;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1374 = new TStruct("registerHTMLFile_result");
            await oprot.WriteStructBeginAsync(tmp1374, cancellationToken);
            var tmp1375 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1375.Name = "E";
                tmp1375.Type = TType.Struct;
                tmp1375.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1375, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1376 = new StringBuilder("registerHTMLFile_result(");
          int tmp1377 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1377++) { tmp1376.Append(", "); }
            tmp1376.Append("E: ");
            E.ToString(tmp1376);
          }
          tmp1376.Append(')');
          return tmp1376.ToString();
        }
      }


      public partial class registerHTMLData_args : TBase
      {
        private long _p;
        private byte[] _htmlData;
        private string _htmlName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public byte[] HtmlData
        {
          get
          {
            return _htmlData;
          }
          set
          {
            __isset.htmlData = true;
            this._htmlData = value;
          }
        }

        public string HtmlName
        {
          get
          {
            return _htmlName;
          }
          set
          {
            __isset.htmlName = true;
            this._htmlName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool htmlData;
          public bool htmlName;
        }

        public registerHTMLData_args()
        {
        }

        public registerHTMLData_args DeepCopy()
        {
          var tmp1378 = new registerHTMLData_args();
          if(__isset.p)
          {
            tmp1378.P = this.P;
          }
          tmp1378.__isset.p = this.__isset.p;
          if((HtmlData != null) && __isset.htmlData)
          {
            tmp1378.HtmlData = this.HtmlData.ToArray();
          }
          tmp1378.__isset.htmlData = this.__isset.htmlData;
          if((HtmlName != null) && __isset.htmlName)
          {
            tmp1378.HtmlName = this.HtmlName;
          }
          tmp1378.__isset.htmlName = this.__isset.htmlName;
          return tmp1378;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HtmlData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    HtmlName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1379 = new TStruct("registerHTMLData_args");
            await oprot.WriteStructBeginAsync(tmp1379, cancellationToken);
            var tmp1380 = new TField();
            if(__isset.p)
            {
              tmp1380.Name = "p";
              tmp1380.Type = TType.I64;
              tmp1380.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1380, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlData != null) && __isset.htmlData)
            {
              tmp1380.Name = "htmlData";
              tmp1380.Type = TType.String;
              tmp1380.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1380, cancellationToken);
              await oprot.WriteBinaryAsync(HtmlData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlName != null) && __isset.htmlName)
            {
              tmp1380.Name = "htmlName";
              tmp1380.Type = TType.String;
              tmp1380.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1380, cancellationToken);
              await oprot.WriteStringAsync(HtmlName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.htmlData == other.__isset.htmlData) && ((!__isset.htmlData) || (TCollections.Equals(HtmlData, other.HtmlData))))
            && ((__isset.htmlName == other.__isset.htmlName) && ((!__isset.htmlName) || (global::System.Object.Equals(HtmlName, other.HtmlName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((HtmlData != null) && __isset.htmlData)
            {
              hashcode = (hashcode * 397) + HtmlData.GetHashCode();
            }
            if((HtmlName != null) && __isset.htmlName)
            {
              hashcode = (hashcode * 397) + HtmlName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1381 = new StringBuilder("registerHTMLData_args(");
          int tmp1382 = 0;
          if(__isset.p)
          {
            if(0 < tmp1382++) { tmp1381.Append(", "); }
            tmp1381.Append("P: ");
            P.ToString(tmp1381);
          }
          if((HtmlData != null) && __isset.htmlData)
          {
            if(0 < tmp1382++) { tmp1381.Append(", "); }
            tmp1381.Append("HtmlData: ");
            HtmlData.ToString(tmp1381);
          }
          if((HtmlName != null) && __isset.htmlName)
          {
            if(0 < tmp1382++) { tmp1381.Append(", "); }
            tmp1381.Append("HtmlName: ");
            HtmlName.ToString(tmp1381);
          }
          tmp1381.Append(')');
          return tmp1381.ToString();
        }
      }


      public partial class registerHTMLData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerHTMLData_result()
        {
        }

        public registerHTMLData_result DeepCopy()
        {
          var tmp1383 = new registerHTMLData_result();
          if((E != null) && __isset.e)
          {
            tmp1383.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1383.__isset.e = this.__isset.e;
          return tmp1383;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1384 = new TStruct("registerHTMLData_result");
            await oprot.WriteStructBeginAsync(tmp1384, cancellationToken);
            var tmp1385 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1385.Name = "E";
                tmp1385.Type = TType.Struct;
                tmp1385.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1385, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1386 = new StringBuilder("registerHTMLData_result(");
          int tmp1387 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1387++) { tmp1386.Append(", "); }
            tmp1386.Append("E: ");
            E.ToString(tmp1386);
          }
          tmp1386.Append(')');
          return tmp1386.ToString();
        }
      }


      public partial class registerTranslationFile_args : TBase
      {
        private long _p;
        private string _locale;
        private string _translationFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }

        public string TranslationFileName
        {
          get
          {
            return _translationFileName;
          }
          set
          {
            __isset.translationFileName = true;
            this._translationFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool locale;
          public bool translationFileName;
        }

        public registerTranslationFile_args()
        {
        }

        public registerTranslationFile_args DeepCopy()
        {
          var tmp1388 = new registerTranslationFile_args();
          if(__isset.p)
          {
            tmp1388.P = this.P;
          }
          tmp1388.__isset.p = this.__isset.p;
          if((Locale != null) && __isset.locale)
          {
            tmp1388.Locale = this.Locale;
          }
          tmp1388.__isset.locale = this.__isset.locale;
          if((TranslationFileName != null) && __isset.translationFileName)
          {
            tmp1388.TranslationFileName = this.TranslationFileName;
          }
          tmp1388.__isset.translationFileName = this.__isset.translationFileName;
          return tmp1388;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    TranslationFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1389 = new TStruct("registerTranslationFile_args");
            await oprot.WriteStructBeginAsync(tmp1389, cancellationToken);
            var tmp1390 = new TField();
            if(__isset.p)
            {
              tmp1390.Name = "p";
              tmp1390.Type = TType.I64;
              tmp1390.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1390, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Locale != null) && __isset.locale)
            {
              tmp1390.Name = "locale";
              tmp1390.Type = TType.String;
              tmp1390.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1390, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationFileName != null) && __isset.translationFileName)
            {
              tmp1390.Name = "translationFileName";
              tmp1390.Type = TType.String;
              tmp1390.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1390, cancellationToken);
              await oprot.WriteStringAsync(TranslationFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))))
            && ((__isset.translationFileName == other.__isset.translationFileName) && ((!__isset.translationFileName) || (global::System.Object.Equals(TranslationFileName, other.TranslationFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
            if((TranslationFileName != null) && __isset.translationFileName)
            {
              hashcode = (hashcode * 397) + TranslationFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1391 = new StringBuilder("registerTranslationFile_args(");
          int tmp1392 = 0;
          if(__isset.p)
          {
            if(0 < tmp1392++) { tmp1391.Append(", "); }
            tmp1391.Append("P: ");
            P.ToString(tmp1391);
          }
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp1392++) { tmp1391.Append(", "); }
            tmp1391.Append("Locale: ");
            Locale.ToString(tmp1391);
          }
          if((TranslationFileName != null) && __isset.translationFileName)
          {
            if(0 < tmp1392++) { tmp1391.Append(", "); }
            tmp1391.Append("TranslationFileName: ");
            TranslationFileName.ToString(tmp1391);
          }
          tmp1391.Append(')');
          return tmp1391.ToString();
        }
      }


      public partial class registerTranslationFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerTranslationFile_result()
        {
        }

        public registerTranslationFile_result DeepCopy()
        {
          var tmp1393 = new registerTranslationFile_result();
          if((E != null) && __isset.e)
          {
            tmp1393.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1393.__isset.e = this.__isset.e;
          return tmp1393;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1394 = new TStruct("registerTranslationFile_result");
            await oprot.WriteStructBeginAsync(tmp1394, cancellationToken);
            var tmp1395 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1395.Name = "E";
                tmp1395.Type = TType.Struct;
                tmp1395.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1395, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1396 = new StringBuilder("registerTranslationFile_result(");
          int tmp1397 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1397++) { tmp1396.Append(", "); }
            tmp1396.Append("E: ");
            E.ToString(tmp1396);
          }
          tmp1396.Append(')');
          return tmp1396.ToString();
        }
      }


      public partial class registerTranslationData_args : TBase
      {
        private long _p;
        private string _locale;
        private byte[] _translationData;
        private string _translationName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }

        public byte[] TranslationData
        {
          get
          {
            return _translationData;
          }
          set
          {
            __isset.translationData = true;
            this._translationData = value;
          }
        }

        public string TranslationName
        {
          get
          {
            return _translationName;
          }
          set
          {
            __isset.translationName = true;
            this._translationName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool locale;
          public bool translationData;
          public bool translationName;
        }

        public registerTranslationData_args()
        {
        }

        public registerTranslationData_args DeepCopy()
        {
          var tmp1398 = new registerTranslationData_args();
          if(__isset.p)
          {
            tmp1398.P = this.P;
          }
          tmp1398.__isset.p = this.__isset.p;
          if((Locale != null) && __isset.locale)
          {
            tmp1398.Locale = this.Locale;
          }
          tmp1398.__isset.locale = this.__isset.locale;
          if((TranslationData != null) && __isset.translationData)
          {
            tmp1398.TranslationData = this.TranslationData.ToArray();
          }
          tmp1398.__isset.translationData = this.__isset.translationData;
          if((TranslationName != null) && __isset.translationName)
          {
            tmp1398.TranslationName = this.TranslationName;
          }
          tmp1398.__isset.translationName = this.__isset.translationName;
          return tmp1398;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    TranslationData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    TranslationName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1399 = new TStruct("registerTranslationData_args");
            await oprot.WriteStructBeginAsync(tmp1399, cancellationToken);
            var tmp1400 = new TField();
            if(__isset.p)
            {
              tmp1400.Name = "p";
              tmp1400.Type = TType.I64;
              tmp1400.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1400, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Locale != null) && __isset.locale)
            {
              tmp1400.Name = "locale";
              tmp1400.Type = TType.String;
              tmp1400.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1400, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationData != null) && __isset.translationData)
            {
              tmp1400.Name = "translationData";
              tmp1400.Type = TType.String;
              tmp1400.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1400, cancellationToken);
              await oprot.WriteBinaryAsync(TranslationData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationName != null) && __isset.translationName)
            {
              tmp1400.Name = "translationName";
              tmp1400.Type = TType.String;
              tmp1400.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1400, cancellationToken);
              await oprot.WriteStringAsync(TranslationName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))))
            && ((__isset.translationData == other.__isset.translationData) && ((!__isset.translationData) || (TCollections.Equals(TranslationData, other.TranslationData))))
            && ((__isset.translationName == other.__isset.translationName) && ((!__isset.translationName) || (global::System.Object.Equals(TranslationName, other.TranslationName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
            if((TranslationData != null) && __isset.translationData)
            {
              hashcode = (hashcode * 397) + TranslationData.GetHashCode();
            }
            if((TranslationName != null) && __isset.translationName)
            {
              hashcode = (hashcode * 397) + TranslationName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1401 = new StringBuilder("registerTranslationData_args(");
          int tmp1402 = 0;
          if(__isset.p)
          {
            if(0 < tmp1402++) { tmp1401.Append(", "); }
            tmp1401.Append("P: ");
            P.ToString(tmp1401);
          }
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp1402++) { tmp1401.Append(", "); }
            tmp1401.Append("Locale: ");
            Locale.ToString(tmp1401);
          }
          if((TranslationData != null) && __isset.translationData)
          {
            if(0 < tmp1402++) { tmp1401.Append(", "); }
            tmp1401.Append("TranslationData: ");
            TranslationData.ToString(tmp1401);
          }
          if((TranslationName != null) && __isset.translationName)
          {
            if(0 < tmp1402++) { tmp1401.Append(", "); }
            tmp1401.Append("TranslationName: ");
            TranslationName.ToString(tmp1401);
          }
          tmp1401.Append(')');
          return tmp1401.ToString();
        }
      }


      public partial class registerTranslationData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerTranslationData_result()
        {
        }

        public registerTranslationData_result DeepCopy()
        {
          var tmp1403 = new registerTranslationData_result();
          if((E != null) && __isset.e)
          {
            tmp1403.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1403.__isset.e = this.__isset.e;
          return tmp1403;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1404 = new TStruct("registerTranslationData_result");
            await oprot.WriteStructBeginAsync(tmp1404, cancellationToken);
            var tmp1405 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1405.Name = "E";
                tmp1405.Type = TType.Struct;
                tmp1405.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1405, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1406 = new StringBuilder("registerTranslationData_result(");
          int tmp1407 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1407++) { tmp1406.Append(", "); }
            tmp1406.Append("E: ");
            E.ToString(tmp1406);
          }
          tmp1406.Append(')');
          return tmp1406.ToString();
        }
      }


      public partial class registerUtilityMenu_args : TBase
      {
        private long _p;
        private string _menuName;
        private string _menuText;
        private string _menuIcon;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string MenuName
        {
          get
          {
            return _menuName;
          }
          set
          {
            __isset.menuName = true;
            this._menuName = value;
          }
        }

        public string MenuText
        {
          get
          {
            return _menuText;
          }
          set
          {
            __isset.menuText = true;
            this._menuText = value;
          }
        }

        public string MenuIcon
        {
          get
          {
            return _menuIcon;
          }
          set
          {
            __isset.menuIcon = true;
            this._menuIcon = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool menuName;
          public bool menuText;
          public bool menuIcon;
        }

        public registerUtilityMenu_args()
        {
        }

        public registerUtilityMenu_args DeepCopy()
        {
          var tmp1408 = new registerUtilityMenu_args();
          if(__isset.p)
          {
            tmp1408.P = this.P;
          }
          tmp1408.__isset.p = this.__isset.p;
          if((MenuName != null) && __isset.menuName)
          {
            tmp1408.MenuName = this.MenuName;
          }
          tmp1408.__isset.menuName = this.__isset.menuName;
          if((MenuText != null) && __isset.menuText)
          {
            tmp1408.MenuText = this.MenuText;
          }
          tmp1408.__isset.menuText = this.__isset.menuText;
          if((MenuIcon != null) && __isset.menuIcon)
          {
            tmp1408.MenuIcon = this.MenuIcon;
          }
          tmp1408.__isset.menuIcon = this.__isset.menuIcon;
          return tmp1408;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MenuName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    MenuText = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuIcon = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1409 = new TStruct("registerUtilityMenu_args");
            await oprot.WriteStructBeginAsync(tmp1409, cancellationToken);
            var tmp1410 = new TField();
            if(__isset.p)
            {
              tmp1410.Name = "p";
              tmp1410.Type = TType.I64;
              tmp1410.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1410, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuName != null) && __isset.menuName)
            {
              tmp1410.Name = "menuName";
              tmp1410.Type = TType.String;
              tmp1410.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1410, cancellationToken);
              await oprot.WriteStringAsync(MenuName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuText != null) && __isset.menuText)
            {
              tmp1410.Name = "menuText";
              tmp1410.Type = TType.String;
              tmp1410.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1410, cancellationToken);
              await oprot.WriteStringAsync(MenuText, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuIcon != null) && __isset.menuIcon)
            {
              tmp1410.Name = "menuIcon";
              tmp1410.Type = TType.String;
              tmp1410.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1410, cancellationToken);
              await oprot.WriteStringAsync(MenuIcon, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityMenu_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.menuName == other.__isset.menuName) && ((!__isset.menuName) || (global::System.Object.Equals(MenuName, other.MenuName))))
            && ((__isset.menuText == other.__isset.menuText) && ((!__isset.menuText) || (global::System.Object.Equals(MenuText, other.MenuText))))
            && ((__isset.menuIcon == other.__isset.menuIcon) && ((!__isset.menuIcon) || (global::System.Object.Equals(MenuIcon, other.MenuIcon))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((MenuName != null) && __isset.menuName)
            {
              hashcode = (hashcode * 397) + MenuName.GetHashCode();
            }
            if((MenuText != null) && __isset.menuText)
            {
              hashcode = (hashcode * 397) + MenuText.GetHashCode();
            }
            if((MenuIcon != null) && __isset.menuIcon)
            {
              hashcode = (hashcode * 397) + MenuIcon.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1411 = new StringBuilder("registerUtilityMenu_args(");
          int tmp1412 = 0;
          if(__isset.p)
          {
            if(0 < tmp1412++) { tmp1411.Append(", "); }
            tmp1411.Append("P: ");
            P.ToString(tmp1411);
          }
          if((MenuName != null) && __isset.menuName)
          {
            if(0 < tmp1412++) { tmp1411.Append(", "); }
            tmp1411.Append("MenuName: ");
            MenuName.ToString(tmp1411);
          }
          if((MenuText != null) && __isset.menuText)
          {
            if(0 < tmp1412++) { tmp1411.Append(", "); }
            tmp1411.Append("MenuText: ");
            MenuText.ToString(tmp1411);
          }
          if((MenuIcon != null) && __isset.menuIcon)
          {
            if(0 < tmp1412++) { tmp1411.Append(", "); }
            tmp1411.Append("MenuIcon: ");
            MenuIcon.ToString(tmp1411);
          }
          tmp1411.Append(')');
          return tmp1411.ToString();
        }
      }


      public partial class registerUtilityMenu_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityMenu_result()
        {
        }

        public registerUtilityMenu_result DeepCopy()
        {
          var tmp1413 = new registerUtilityMenu_result();
          if((E != null) && __isset.e)
          {
            tmp1413.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1413.__isset.e = this.__isset.e;
          return tmp1413;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1414 = new TStruct("registerUtilityMenu_result");
            await oprot.WriteStructBeginAsync(tmp1414, cancellationToken);
            var tmp1415 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1415.Name = "E";
                tmp1415.Type = TType.Struct;
                tmp1415.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1415, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityMenu_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1416 = new StringBuilder("registerUtilityMenu_result(");
          int tmp1417 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1417++) { tmp1416.Append(", "); }
            tmp1416.Append("E: ");
            E.ToString(tmp1416);
          }
          tmp1416.Append(')');
          return tmp1416.ToString();
        }
      }


      public partial class unregisterUtilityMenu_args : TBase
      {
        private long _p;
        private string _menuName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string MenuName
        {
          get
          {
            return _menuName;
          }
          set
          {
            __isset.menuName = true;
            this._menuName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool menuName;
        }

        public unregisterUtilityMenu_args()
        {
        }

        public unregisterUtilityMenu_args DeepCopy()
        {
          var tmp1418 = new unregisterUtilityMenu_args();
          if(__isset.p)
          {
            tmp1418.P = this.P;
          }
          tmp1418.__isset.p = this.__isset.p;
          if((MenuName != null) && __isset.menuName)
          {
            tmp1418.MenuName = this.MenuName;
          }
          tmp1418.__isset.menuName = this.__isset.menuName;
          return tmp1418;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MenuName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1419 = new TStruct("unregisterUtilityMenu_args");
            await oprot.WriteStructBeginAsync(tmp1419, cancellationToken);
            var tmp1420 = new TField();
            if(__isset.p)
            {
              tmp1420.Name = "p";
              tmp1420.Type = TType.I64;
              tmp1420.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1420, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuName != null) && __isset.menuName)
            {
              tmp1420.Name = "menuName";
              tmp1420.Type = TType.String;
              tmp1420.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1420, cancellationToken);
              await oprot.WriteStringAsync(MenuName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityMenu_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.menuName == other.__isset.menuName) && ((!__isset.menuName) || (global::System.Object.Equals(MenuName, other.MenuName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((MenuName != null) && __isset.menuName)
            {
              hashcode = (hashcode * 397) + MenuName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1421 = new StringBuilder("unregisterUtilityMenu_args(");
          int tmp1422 = 0;
          if(__isset.p)
          {
            if(0 < tmp1422++) { tmp1421.Append(", "); }
            tmp1421.Append("P: ");
            P.ToString(tmp1421);
          }
          if((MenuName != null) && __isset.menuName)
          {
            if(0 < tmp1422++) { tmp1421.Append(", "); }
            tmp1421.Append("MenuName: ");
            MenuName.ToString(tmp1421);
          }
          tmp1421.Append(')');
          return tmp1421.ToString();
        }
      }


      public partial class unregisterUtilityMenu_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterUtilityMenu_result()
        {
        }

        public unregisterUtilityMenu_result DeepCopy()
        {
          var tmp1423 = new unregisterUtilityMenu_result();
          if((E != null) && __isset.e)
          {
            tmp1423.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1423.__isset.e = this.__isset.e;
          return tmp1423;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1424 = new TStruct("unregisterUtilityMenu_result");
            await oprot.WriteStructBeginAsync(tmp1424, cancellationToken);
            var tmp1425 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1425.Name = "E";
                tmp1425.Type = TType.Struct;
                tmp1425.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1425, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityMenu_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1426 = new StringBuilder("unregisterUtilityMenu_result(");
          int tmp1427 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1427++) { tmp1426.Append(", "); }
            tmp1426.Append("E: ");
            E.ToString(tmp1426);
          }
          tmp1426.Append(')');
          return tmp1426.ToString();
        }
      }


      public partial class registerUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _itemType;
        private string _menuItemName;
        private string _windowTitle;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string MenuItemName
        {
          get
          {
            return _menuItemName;
          }
          set
          {
            __isset.menuItemName = true;
            this._menuItemName = value;
          }
        }

        public string WindowTitle
        {
          get
          {
            return _windowTitle;
          }
          set
          {
            __isset.windowTitle = true;
            this._windowTitle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool itemType;
          public bool menuItemName;
          public bool windowTitle;
        }

        public registerUtilityWindow_args()
        {
        }

        public registerUtilityWindow_args DeepCopy()
        {
          var tmp1428 = new registerUtilityWindow_args();
          if(__isset.p)
          {
            tmp1428.P = this.P;
          }
          tmp1428.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1428.Identifier = this.Identifier;
          }
          tmp1428.__isset.identifier = this.__isset.identifier;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1428.ItemType = this.ItemType;
          }
          tmp1428.__isset.itemType = this.__isset.itemType;
          if((MenuItemName != null) && __isset.menuItemName)
          {
            tmp1428.MenuItemName = this.MenuItemName;
          }
          tmp1428.__isset.menuItemName = this.__isset.menuItemName;
          if((WindowTitle != null) && __isset.windowTitle)
          {
            tmp1428.WindowTitle = this.WindowTitle;
          }
          tmp1428.__isset.windowTitle = this.__isset.windowTitle;
          return tmp1428;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuItemName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    WindowTitle = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1429 = new TStruct("registerUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1429, cancellationToken);
            var tmp1430 = new TField();
            if(__isset.p)
            {
              tmp1430.Name = "p";
              tmp1430.Type = TType.I64;
              tmp1430.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1430, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1430.Name = "identifier";
              tmp1430.Type = TType.String;
              tmp1430.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1430, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1430.Name = "itemType";
              tmp1430.Type = TType.String;
              tmp1430.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1430, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              tmp1430.Name = "menuItemName";
              tmp1430.Type = TType.String;
              tmp1430.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1430, cancellationToken);
              await oprot.WriteStringAsync(MenuItemName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              tmp1430.Name = "windowTitle";
              tmp1430.Type = TType.String;
              tmp1430.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1430, cancellationToken);
              await oprot.WriteStringAsync(WindowTitle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.menuItemName == other.__isset.menuItemName) && ((!__isset.menuItemName) || (global::System.Object.Equals(MenuItemName, other.MenuItemName))))
            && ((__isset.windowTitle == other.__isset.windowTitle) && ((!__isset.windowTitle) || (global::System.Object.Equals(WindowTitle, other.WindowTitle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              hashcode = (hashcode * 397) + MenuItemName.GetHashCode();
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              hashcode = (hashcode * 397) + WindowTitle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1431 = new StringBuilder("registerUtilityWindow_args(");
          int tmp1432 = 0;
          if(__isset.p)
          {
            if(0 < tmp1432++) { tmp1431.Append(", "); }
            tmp1431.Append("P: ");
            P.ToString(tmp1431);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1432++) { tmp1431.Append(", "); }
            tmp1431.Append("Identifier: ");
            Identifier.ToString(tmp1431);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1432++) { tmp1431.Append(", "); }
            tmp1431.Append("ItemType: ");
            ItemType.ToString(tmp1431);
          }
          if((MenuItemName != null) && __isset.menuItemName)
          {
            if(0 < tmp1432++) { tmp1431.Append(", "); }
            tmp1431.Append("MenuItemName: ");
            MenuItemName.ToString(tmp1431);
          }
          if((WindowTitle != null) && __isset.windowTitle)
          {
            if(0 < tmp1432++) { tmp1431.Append(", "); }
            tmp1431.Append("WindowTitle: ");
            WindowTitle.ToString(tmp1431);
          }
          tmp1431.Append(')');
          return tmp1431.ToString();
        }
      }


      public partial class registerUtilityWindow_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityWindow_result()
        {
        }

        public registerUtilityWindow_result DeepCopy()
        {
          var tmp1433 = new registerUtilityWindow_result();
          if((E != null) && __isset.e)
          {
            tmp1433.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1433.__isset.e = this.__isset.e;
          return tmp1433;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1434 = new TStruct("registerUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1434, cancellationToken);
            var tmp1435 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1435.Name = "E";
                tmp1435.Type = TType.Struct;
                tmp1435.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1435, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1436 = new StringBuilder("registerUtilityWindow_result(");
          int tmp1437 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1437++) { tmp1436.Append(", "); }
            tmp1436.Append("E: ");
            E.ToString(tmp1436);
          }
          tmp1436.Append(')');
          return tmp1436.ToString();
        }
      }


      public partial class registerUtilityWindowWithMenu_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _itemType;
        private string _menuItemName;
        private string _windowTitle;
        private string _menuName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string MenuItemName
        {
          get
          {
            return _menuItemName;
          }
          set
          {
            __isset.menuItemName = true;
            this._menuItemName = value;
          }
        }

        public string WindowTitle
        {
          get
          {
            return _windowTitle;
          }
          set
          {
            __isset.windowTitle = true;
            this._windowTitle = value;
          }
        }

        public string MenuName
        {
          get
          {
            return _menuName;
          }
          set
          {
            __isset.menuName = true;
            this._menuName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool itemType;
          public bool menuItemName;
          public bool windowTitle;
          public bool menuName;
        }

        public registerUtilityWindowWithMenu_args()
        {
        }

        public registerUtilityWindowWithMenu_args DeepCopy()
        {
          var tmp1438 = new registerUtilityWindowWithMenu_args();
          if(__isset.p)
          {
            tmp1438.P = this.P;
          }
          tmp1438.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1438.Identifier = this.Identifier;
          }
          tmp1438.__isset.identifier = this.__isset.identifier;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1438.ItemType = this.ItemType;
          }
          tmp1438.__isset.itemType = this.__isset.itemType;
          if((MenuItemName != null) && __isset.menuItemName)
          {
            tmp1438.MenuItemName = this.MenuItemName;
          }
          tmp1438.__isset.menuItemName = this.__isset.menuItemName;
          if((WindowTitle != null) && __isset.windowTitle)
          {
            tmp1438.WindowTitle = this.WindowTitle;
          }
          tmp1438.__isset.windowTitle = this.__isset.windowTitle;
          if((MenuName != null) && __isset.menuName)
          {
            tmp1438.MenuName = this.MenuName;
          }
          tmp1438.__isset.menuName = this.__isset.menuName;
          return tmp1438;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuItemName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    WindowTitle = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    MenuName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1439 = new TStruct("registerUtilityWindowWithMenu_args");
            await oprot.WriteStructBeginAsync(tmp1439, cancellationToken);
            var tmp1440 = new TField();
            if(__isset.p)
            {
              tmp1440.Name = "p";
              tmp1440.Type = TType.I64;
              tmp1440.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1440, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1440.Name = "identifier";
              tmp1440.Type = TType.String;
              tmp1440.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1440, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1440.Name = "itemType";
              tmp1440.Type = TType.String;
              tmp1440.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1440, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              tmp1440.Name = "menuItemName";
              tmp1440.Type = TType.String;
              tmp1440.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1440, cancellationToken);
              await oprot.WriteStringAsync(MenuItemName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              tmp1440.Name = "windowTitle";
              tmp1440.Type = TType.String;
              tmp1440.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1440, cancellationToken);
              await oprot.WriteStringAsync(WindowTitle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuName != null) && __isset.menuName)
            {
              tmp1440.Name = "menuName";
              tmp1440.Type = TType.String;
              tmp1440.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1440, cancellationToken);
              await oprot.WriteStringAsync(MenuName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindowWithMenu_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.menuItemName == other.__isset.menuItemName) && ((!__isset.menuItemName) || (global::System.Object.Equals(MenuItemName, other.MenuItemName))))
            && ((__isset.windowTitle == other.__isset.windowTitle) && ((!__isset.windowTitle) || (global::System.Object.Equals(WindowTitle, other.WindowTitle))))
            && ((__isset.menuName == other.__isset.menuName) && ((!__isset.menuName) || (global::System.Object.Equals(MenuName, other.MenuName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              hashcode = (hashcode * 397) + MenuItemName.GetHashCode();
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              hashcode = (hashcode * 397) + WindowTitle.GetHashCode();
            }
            if((MenuName != null) && __isset.menuName)
            {
              hashcode = (hashcode * 397) + MenuName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1441 = new StringBuilder("registerUtilityWindowWithMenu_args(");
          int tmp1442 = 0;
          if(__isset.p)
          {
            if(0 < tmp1442++) { tmp1441.Append(", "); }
            tmp1441.Append("P: ");
            P.ToString(tmp1441);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1442++) { tmp1441.Append(", "); }
            tmp1441.Append("Identifier: ");
            Identifier.ToString(tmp1441);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1442++) { tmp1441.Append(", "); }
            tmp1441.Append("ItemType: ");
            ItemType.ToString(tmp1441);
          }
          if((MenuItemName != null) && __isset.menuItemName)
          {
            if(0 < tmp1442++) { tmp1441.Append(", "); }
            tmp1441.Append("MenuItemName: ");
            MenuItemName.ToString(tmp1441);
          }
          if((WindowTitle != null) && __isset.windowTitle)
          {
            if(0 < tmp1442++) { tmp1441.Append(", "); }
            tmp1441.Append("WindowTitle: ");
            WindowTitle.ToString(tmp1441);
          }
          if((MenuName != null) && __isset.menuName)
          {
            if(0 < tmp1442++) { tmp1441.Append(", "); }
            tmp1441.Append("MenuName: ");
            MenuName.ToString(tmp1441);
          }
          tmp1441.Append(')');
          return tmp1441.ToString();
        }
      }


      public partial class registerUtilityWindowWithMenu_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityWindowWithMenu_result()
        {
        }

        public registerUtilityWindowWithMenu_result DeepCopy()
        {
          var tmp1443 = new registerUtilityWindowWithMenu_result();
          if((E != null) && __isset.e)
          {
            tmp1443.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1443.__isset.e = this.__isset.e;
          return tmp1443;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1444 = new TStruct("registerUtilityWindowWithMenu_result");
            await oprot.WriteStructBeginAsync(tmp1444, cancellationToken);
            var tmp1445 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1445.Name = "E";
                tmp1445.Type = TType.Struct;
                tmp1445.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1445, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindowWithMenu_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1446 = new StringBuilder("registerUtilityWindowWithMenu_result(");
          int tmp1447 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1447++) { tmp1446.Append(", "); }
            tmp1446.Append("E: ");
            E.ToString(tmp1446);
          }
          tmp1446.Append(')');
          return tmp1446.ToString();
        }
      }


      public partial class unregisterUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public unregisterUtilityWindow_args()
        {
        }

        public unregisterUtilityWindow_args DeepCopy()
        {
          var tmp1448 = new unregisterUtilityWindow_args();
          if(__isset.p)
          {
            tmp1448.P = this.P;
          }
          tmp1448.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1448.Identifier = this.Identifier;
          }
          tmp1448.__isset.identifier = this.__isset.identifier;
          return tmp1448;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1449 = new TStruct("unregisterUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1449, cancellationToken);
            var tmp1450 = new TField();
            if(__isset.p)
            {
              tmp1450.Name = "p";
              tmp1450.Type = TType.I64;
              tmp1450.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1450, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1450.Name = "identifier";
              tmp1450.Type = TType.String;
              tmp1450.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1450, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1451 = new StringBuilder("unregisterUtilityWindow_args(");
          int tmp1452 = 0;
          if(__isset.p)
          {
            if(0 < tmp1452++) { tmp1451.Append(", "); }
            tmp1451.Append("P: ");
            P.ToString(tmp1451);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1452++) { tmp1451.Append(", "); }
            tmp1451.Append("Identifier: ");
            Identifier.ToString(tmp1451);
          }
          tmp1451.Append(')');
          return tmp1451.ToString();
        }
      }


      public partial class unregisterUtilityWindow_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterUtilityWindow_result()
        {
        }

        public unregisterUtilityWindow_result DeepCopy()
        {
          var tmp1453 = new unregisterUtilityWindow_result();
          if((E != null) && __isset.e)
          {
            tmp1453.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1453.__isset.e = this.__isset.e;
          return tmp1453;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1454 = new TStruct("unregisterUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1454, cancellationToken);
            var tmp1455 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1455.Name = "E";
                tmp1455.Type = TType.Struct;
                tmp1455.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1455, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1456 = new StringBuilder("unregisterUtilityWindow_result(");
          int tmp1457 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1457++) { tmp1456.Append(", "); }
            tmp1456.Append("E: ");
            E.ToString(tmp1456);
          }
          tmp1456.Append(')');
          return tmp1456.ToString();
        }
      }


      public partial class openUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public openUtilityWindow_args()
        {
        }

        public openUtilityWindow_args DeepCopy()
        {
          var tmp1458 = new openUtilityWindow_args();
          if(__isset.p)
          {
            tmp1458.P = this.P;
          }
          tmp1458.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1458.Identifier = this.Identifier;
          }
          tmp1458.__isset.identifier = this.__isset.identifier;
          return tmp1458;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1459 = new TStruct("openUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1459, cancellationToken);
            var tmp1460 = new TField();
            if(__isset.p)
            {
              tmp1460.Name = "p";
              tmp1460.Type = TType.I64;
              tmp1460.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1460, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1460.Name = "identifier";
              tmp1460.Type = TType.String;
              tmp1460.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1460, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1461 = new StringBuilder("openUtilityWindow_args(");
          int tmp1462 = 0;
          if(__isset.p)
          {
            if(0 < tmp1462++) { tmp1461.Append(", "); }
            tmp1461.Append("P: ");
            P.ToString(tmp1461);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1462++) { tmp1461.Append(", "); }
            tmp1461.Append("Identifier: ");
            Identifier.ToString(tmp1461);
          }
          tmp1461.Append(')');
          return tmp1461.ToString();
        }
      }


      public partial class openUtilityWindow_result : TBase
      {

        public openUtilityWindow_result()
        {
        }

        public openUtilityWindow_result DeepCopy()
        {
          var tmp1463 = new openUtilityWindow_result();
          return tmp1463;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1464 = new TStruct("openUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1464, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1465 = new StringBuilder("openUtilityWindow_result(");
          tmp1465.Append(')');
          return tmp1465.ToString();
        }
      }


      public partial class closeUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public closeUtilityWindow_args()
        {
        }

        public closeUtilityWindow_args DeepCopy()
        {
          var tmp1467 = new closeUtilityWindow_args();
          if(__isset.p)
          {
            tmp1467.P = this.P;
          }
          tmp1467.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1467.Identifier = this.Identifier;
          }
          tmp1467.__isset.identifier = this.__isset.identifier;
          return tmp1467;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1468 = new TStruct("closeUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1468, cancellationToken);
            var tmp1469 = new TField();
            if(__isset.p)
            {
              tmp1469.Name = "p";
              tmp1469.Type = TType.I64;
              tmp1469.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1469, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1469.Name = "identifier";
              tmp1469.Type = TType.String;
              tmp1469.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1469, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1470 = new StringBuilder("closeUtilityWindow_args(");
          int tmp1471 = 0;
          if(__isset.p)
          {
            if(0 < tmp1471++) { tmp1470.Append(", "); }
            tmp1470.Append("P: ");
            P.ToString(tmp1470);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1471++) { tmp1470.Append(", "); }
            tmp1470.Append("Identifier: ");
            Identifier.ToString(tmp1470);
          }
          tmp1470.Append(')');
          return tmp1470.ToString();
        }
      }


      public partial class closeUtilityWindow_result : TBase
      {

        public closeUtilityWindow_result()
        {
        }

        public closeUtilityWindow_result DeepCopy()
        {
          var tmp1472 = new closeUtilityWindow_result();
          return tmp1472;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1473 = new TStruct("closeUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1473, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1474 = new StringBuilder("closeUtilityWindow_result(");
          tmp1474.Append(')');
          return tmp1474.ToString();
        }
      }


      public partial class collapseUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public collapseUtilityWindow_args()
        {
        }

        public collapseUtilityWindow_args DeepCopy()
        {
          var tmp1476 = new collapseUtilityWindow_args();
          if(__isset.p)
          {
            tmp1476.P = this.P;
          }
          tmp1476.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1476.Identifier = this.Identifier;
          }
          tmp1476.__isset.identifier = this.__isset.identifier;
          return tmp1476;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1477 = new TStruct("collapseUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1477, cancellationToken);
            var tmp1478 = new TField();
            if(__isset.p)
            {
              tmp1478.Name = "p";
              tmp1478.Type = TType.I64;
              tmp1478.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1478, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1478.Name = "identifier";
              tmp1478.Type = TType.String;
              tmp1478.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1478, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is collapseUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1479 = new StringBuilder("collapseUtilityWindow_args(");
          int tmp1480 = 0;
          if(__isset.p)
          {
            if(0 < tmp1480++) { tmp1479.Append(", "); }
            tmp1479.Append("P: ");
            P.ToString(tmp1479);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1480++) { tmp1479.Append(", "); }
            tmp1479.Append("Identifier: ");
            Identifier.ToString(tmp1479);
          }
          tmp1479.Append(')');
          return tmp1479.ToString();
        }
      }


      public partial class collapseUtilityWindow_result : TBase
      {

        public collapseUtilityWindow_result()
        {
        }

        public collapseUtilityWindow_result DeepCopy()
        {
          var tmp1481 = new collapseUtilityWindow_result();
          return tmp1481;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1482 = new TStruct("collapseUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1482, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is collapseUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1483 = new StringBuilder("collapseUtilityWindow_result(");
          tmp1483.Append(')');
          return tmp1483.ToString();
        }
      }


      public partial class expandUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public expandUtilityWindow_args()
        {
        }

        public expandUtilityWindow_args DeepCopy()
        {
          var tmp1485 = new expandUtilityWindow_args();
          if(__isset.p)
          {
            tmp1485.P = this.P;
          }
          tmp1485.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1485.Identifier = this.Identifier;
          }
          tmp1485.__isset.identifier = this.__isset.identifier;
          return tmp1485;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1486 = new TStruct("expandUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1486, cancellationToken);
            var tmp1487 = new TField();
            if(__isset.p)
            {
              tmp1487.Name = "p";
              tmp1487.Type = TType.I64;
              tmp1487.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1487, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1487.Name = "identifier";
              tmp1487.Type = TType.String;
              tmp1487.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1487, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expandUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1488 = new StringBuilder("expandUtilityWindow_args(");
          int tmp1489 = 0;
          if(__isset.p)
          {
            if(0 < tmp1489++) { tmp1488.Append(", "); }
            tmp1488.Append("P: ");
            P.ToString(tmp1488);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1489++) { tmp1488.Append(", "); }
            tmp1488.Append("Identifier: ");
            Identifier.ToString(tmp1488);
          }
          tmp1488.Append(')');
          return tmp1488.ToString();
        }
      }


      public partial class expandUtilityWindow_result : TBase
      {

        public expandUtilityWindow_result()
        {
        }

        public expandUtilityWindow_result DeepCopy()
        {
          var tmp1490 = new expandUtilityWindow_result();
          return tmp1490;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1491 = new TStruct("expandUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1491, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expandUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1492 = new StringBuilder("expandUtilityWindow_result(");
          tmp1492.Append(')');
          return tmp1492.ToString();
        }
      }


      public partial class refreshDynamicInstructions_args : TBase
      {
        private long _p;
        private global::Yaskawa.Ext.API.DynamicInstructionType _instructionType;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.DynamicInstructionType"/>
        /// </summary>
        public global::Yaskawa.Ext.API.DynamicInstructionType InstructionType
        {
          get
          {
            return _instructionType;
          }
          set
          {
            __isset.instructionType = true;
            this._instructionType = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool instructionType;
        }

        public refreshDynamicInstructions_args()
        {
        }

        public refreshDynamicInstructions_args DeepCopy()
        {
          var tmp1494 = new refreshDynamicInstructions_args();
          if(__isset.p)
          {
            tmp1494.P = this.P;
          }
          tmp1494.__isset.p = this.__isset.p;
          if(__isset.instructionType)
          {
            tmp1494.InstructionType = this.InstructionType;
          }
          tmp1494.__isset.instructionType = this.__isset.instructionType;
          return tmp1494;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    InstructionType = (global::Yaskawa.Ext.API.DynamicInstructionType)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1495 = new TStruct("refreshDynamicInstructions_args");
            await oprot.WriteStructBeginAsync(tmp1495, cancellationToken);
            var tmp1496 = new TField();
            if(__isset.p)
            {
              tmp1496.Name = "p";
              tmp1496.Type = TType.I64;
              tmp1496.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1496, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.instructionType)
            {
              tmp1496.Name = "instructionType";
              tmp1496.Type = TType.I32;
              tmp1496.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1496, cancellationToken);
              await oprot.WriteI32Async((int)InstructionType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is refreshDynamicInstructions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.instructionType == other.__isset.instructionType) && ((!__isset.instructionType) || (global::System.Object.Equals(InstructionType, other.InstructionType))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if(__isset.instructionType)
            {
              hashcode = (hashcode * 397) + InstructionType.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1497 = new StringBuilder("refreshDynamicInstructions_args(");
          int tmp1498 = 0;
          if(__isset.p)
          {
            if(0 < tmp1498++) { tmp1497.Append(", "); }
            tmp1497.Append("P: ");
            P.ToString(tmp1497);
          }
          if(__isset.instructionType)
          {
            if(0 < tmp1498++) { tmp1497.Append(", "); }
            tmp1497.Append("InstructionType: ");
            InstructionType.ToString(tmp1497);
          }
          tmp1497.Append(')');
          return tmp1497.ToString();
        }
      }


      public partial class refreshDynamicInstructions_result : TBase
      {

        public refreshDynamicInstructions_result()
        {
        }

        public refreshDynamicInstructions_result DeepCopy()
        {
          var tmp1499 = new refreshDynamicInstructions_result();
          return tmp1499;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1500 = new TStruct("refreshDynamicInstructions_result");
            await oprot.WriteStructBeginAsync(tmp1500, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is refreshDynamicInstructions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1501 = new StringBuilder("refreshDynamicInstructions_result(");
          tmp1501.Append(')');
          return tmp1501.ToString();
        }
      }


      public partial class registerIntegration_args : TBase
      {
        private long _p;
        private string _identifier;
        private global::Yaskawa.Ext.API.IntegrationPoint _integrationPoint;
        private string _itemType;
        private string _buttonLabel;
        private string _buttonImage;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.IntegrationPoint"/>
        /// </summary>
        public global::Yaskawa.Ext.API.IntegrationPoint IntegrationPoint
        {
          get
          {
            return _integrationPoint;
          }
          set
          {
            __isset.integrationPoint = true;
            this._integrationPoint = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string ButtonLabel
        {
          get
          {
            return _buttonLabel;
          }
          set
          {
            __isset.buttonLabel = true;
            this._buttonLabel = value;
          }
        }

        public string ButtonImage
        {
          get
          {
            return _buttonImage;
          }
          set
          {
            __isset.buttonImage = true;
            this._buttonImage = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool integrationPoint;
          public bool itemType;
          public bool buttonLabel;
          public bool buttonImage;
        }

        public registerIntegration_args()
        {
        }

        public registerIntegration_args DeepCopy()
        {
          var tmp1503 = new registerIntegration_args();
          if(__isset.p)
          {
            tmp1503.P = this.P;
          }
          tmp1503.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1503.Identifier = this.Identifier;
          }
          tmp1503.__isset.identifier = this.__isset.identifier;
          if(__isset.integrationPoint)
          {
            tmp1503.IntegrationPoint = this.IntegrationPoint;
          }
          tmp1503.__isset.integrationPoint = this.__isset.integrationPoint;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1503.ItemType = this.ItemType;
          }
          tmp1503.__isset.itemType = this.__isset.itemType;
          if((ButtonLabel != null) && __isset.buttonLabel)
          {
            tmp1503.ButtonLabel = this.ButtonLabel;
          }
          tmp1503.__isset.buttonLabel = this.__isset.buttonLabel;
          if((ButtonImage != null) && __isset.buttonImage)
          {
            tmp1503.ButtonImage = this.ButtonImage;
          }
          tmp1503.__isset.buttonImage = this.__isset.buttonImage;
          return tmp1503;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    IntegrationPoint = (global::Yaskawa.Ext.API.IntegrationPoint)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    ButtonLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    ButtonImage = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1504 = new TStruct("registerIntegration_args");
            await oprot.WriteStructBeginAsync(tmp1504, cancellationToken);
            var tmp1505 = new TField();
            if(__isset.p)
            {
              tmp1505.Name = "p";
              tmp1505.Type = TType.I64;
              tmp1505.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1505, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1505.Name = "identifier";
              tmp1505.Type = TType.String;
              tmp1505.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1505, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.integrationPoint)
            {
              tmp1505.Name = "integrationPoint";
              tmp1505.Type = TType.I32;
              tmp1505.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1505, cancellationToken);
              await oprot.WriteI32Async((int)IntegrationPoint, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1505.Name = "itemType";
              tmp1505.Type = TType.String;
              tmp1505.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1505, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ButtonLabel != null) && __isset.buttonLabel)
            {
              tmp1505.Name = "buttonLabel";
              tmp1505.Type = TType.String;
              tmp1505.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1505, cancellationToken);
              await oprot.WriteStringAsync(ButtonLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ButtonImage != null) && __isset.buttonImage)
            {
              tmp1505.Name = "buttonImage";
              tmp1505.Type = TType.String;
              tmp1505.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1505, cancellationToken);
              await oprot.WriteStringAsync(ButtonImage, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerIntegration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.integrationPoint == other.__isset.integrationPoint) && ((!__isset.integrationPoint) || (global::System.Object.Equals(IntegrationPoint, other.IntegrationPoint))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.buttonLabel == other.__isset.buttonLabel) && ((!__isset.buttonLabel) || (global::System.Object.Equals(ButtonLabel, other.ButtonLabel))))
            && ((__isset.buttonImage == other.__isset.buttonImage) && ((!__isset.buttonImage) || (global::System.Object.Equals(ButtonImage, other.ButtonImage))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if(__isset.integrationPoint)
            {
              hashcode = (hashcode * 397) + IntegrationPoint.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((ButtonLabel != null) && __isset.buttonLabel)
            {
              hashcode = (hashcode * 397) + ButtonLabel.GetHashCode();
            }
            if((ButtonImage != null) && __isset.buttonImage)
            {
              hashcode = (hashcode * 397) + ButtonImage.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1506 = new StringBuilder("registerIntegration_args(");
          int tmp1507 = 0;
          if(__isset.p)
          {
            if(0 < tmp1507++) { tmp1506.Append(", "); }
            tmp1506.Append("P: ");
            P.ToString(tmp1506);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1507++) { tmp1506.Append(", "); }
            tmp1506.Append("Identifier: ");
            Identifier.ToString(tmp1506);
          }
          if(__isset.integrationPoint)
          {
            if(0 < tmp1507++) { tmp1506.Append(", "); }
            tmp1506.Append("IntegrationPoint: ");
            IntegrationPoint.ToString(tmp1506);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1507++) { tmp1506.Append(", "); }
            tmp1506.Append("ItemType: ");
            ItemType.ToString(tmp1506);
          }
          if((ButtonLabel != null) && __isset.buttonLabel)
          {
            if(0 < tmp1507++) { tmp1506.Append(", "); }
            tmp1506.Append("ButtonLabel: ");
            ButtonLabel.ToString(tmp1506);
          }
          if((ButtonImage != null) && __isset.buttonImage)
          {
            if(0 < tmp1507++) { tmp1506.Append(", "); }
            tmp1506.Append("ButtonImage: ");
            ButtonImage.ToString(tmp1506);
          }
          tmp1506.Append(')');
          return tmp1506.ToString();
        }
      }


      public partial class registerIntegration_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerIntegration_result()
        {
        }

        public registerIntegration_result DeepCopy()
        {
          var tmp1508 = new registerIntegration_result();
          if((E != null) && __isset.e)
          {
            tmp1508.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1508.__isset.e = this.__isset.e;
          return tmp1508;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1509 = new TStruct("registerIntegration_result");
            await oprot.WriteStructBeginAsync(tmp1509, cancellationToken);
            var tmp1510 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1510.Name = "E";
                tmp1510.Type = TType.Struct;
                tmp1510.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1510, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerIntegration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1511 = new StringBuilder("registerIntegration_result(");
          int tmp1512 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1512++) { tmp1511.Append(", "); }
            tmp1511.Append("E: ");
            E.ToString(tmp1511);
          }
          tmp1511.Append(')');
          return tmp1511.ToString();
        }
      }


      public partial class unregisterIntegration_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public unregisterIntegration_args()
        {
        }

        public unregisterIntegration_args DeepCopy()
        {
          var tmp1513 = new unregisterIntegration_args();
          if(__isset.p)
          {
            tmp1513.P = this.P;
          }
          tmp1513.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1513.Identifier = this.Identifier;
          }
          tmp1513.__isset.identifier = this.__isset.identifier;
          return tmp1513;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1514 = new TStruct("unregisterIntegration_args");
            await oprot.WriteStructBeginAsync(tmp1514, cancellationToken);
            var tmp1515 = new TField();
            if(__isset.p)
            {
              tmp1515.Name = "p";
              tmp1515.Type = TType.I64;
              tmp1515.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1515, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1515.Name = "identifier";
              tmp1515.Type = TType.String;
              tmp1515.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1515, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterIntegration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1516 = new StringBuilder("unregisterIntegration_args(");
          int tmp1517 = 0;
          if(__isset.p)
          {
            if(0 < tmp1517++) { tmp1516.Append(", "); }
            tmp1516.Append("P: ");
            P.ToString(tmp1516);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1517++) { tmp1516.Append(", "); }
            tmp1516.Append("Identifier: ");
            Identifier.ToString(tmp1516);
          }
          tmp1516.Append(')');
          return tmp1516.ToString();
        }
      }


      public partial class unregisterIntegration_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterIntegration_result()
        {
        }

        public unregisterIntegration_result DeepCopy()
        {
          var tmp1518 = new unregisterIntegration_result();
          if((E != null) && __isset.e)
          {
            tmp1518.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1518.__isset.e = this.__isset.e;
          return tmp1518;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1519 = new TStruct("unregisterIntegration_result");
            await oprot.WriteStructBeginAsync(tmp1519, cancellationToken);
            var tmp1520 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1520.Name = "E";
                tmp1520.Type = TType.Struct;
                tmp1520.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1520, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterIntegration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1521 = new StringBuilder("unregisterIntegration_result(");
          int tmp1522 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1522++) { tmp1521.Append(", "); }
            tmp1521.Append("E: ");
            E.ToString(tmp1521);
          }
          tmp1521.Append(')');
          return tmp1521.ToString();
        }
      }


      public partial class registerSwitch_args : TBase
      {
        private long _p;
        private string _identifier;
        private global::Yaskawa.Ext.API.IntegrationPoint _integrationPoint;
        private string _switchLabel;
        private string _offPositionLabel;
        private string _onPositionLabel;
        private bool _defaultState;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.IntegrationPoint"/>
        /// </summary>
        public global::Yaskawa.Ext.API.IntegrationPoint IntegrationPoint
        {
          get
          {
            return _integrationPoint;
          }
          set
          {
            __isset.integrationPoint = true;
            this._integrationPoint = value;
          }
        }

        public string SwitchLabel
        {
          get
          {
            return _switchLabel;
          }
          set
          {
            __isset.switchLabel = true;
            this._switchLabel = value;
          }
        }

        public string OffPositionLabel
        {
          get
          {
            return _offPositionLabel;
          }
          set
          {
            __isset.offPositionLabel = true;
            this._offPositionLabel = value;
          }
        }

        public string OnPositionLabel
        {
          get
          {
            return _onPositionLabel;
          }
          set
          {
            __isset.onPositionLabel = true;
            this._onPositionLabel = value;
          }
        }

        public bool DefaultState
        {
          get
          {
            return _defaultState;
          }
          set
          {
            __isset.defaultState = true;
            this._defaultState = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool integrationPoint;
          public bool switchLabel;
          public bool offPositionLabel;
          public bool onPositionLabel;
          public bool defaultState;
        }

        public registerSwitch_args()
        {
        }

        public registerSwitch_args DeepCopy()
        {
          var tmp1523 = new registerSwitch_args();
          if(__isset.p)
          {
            tmp1523.P = this.P;
          }
          tmp1523.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1523.Identifier = this.Identifier;
          }
          tmp1523.__isset.identifier = this.__isset.identifier;
          if(__isset.integrationPoint)
          {
            tmp1523.IntegrationPoint = this.IntegrationPoint;
          }
          tmp1523.__isset.integrationPoint = this.__isset.integrationPoint;
          if((SwitchLabel != null) && __isset.switchLabel)
          {
            tmp1523.SwitchLabel = this.SwitchLabel;
          }
          tmp1523.__isset.switchLabel = this.__isset.switchLabel;
          if((OffPositionLabel != null) && __isset.offPositionLabel)
          {
            tmp1523.OffPositionLabel = this.OffPositionLabel;
          }
          tmp1523.__isset.offPositionLabel = this.__isset.offPositionLabel;
          if((OnPositionLabel != null) && __isset.onPositionLabel)
          {
            tmp1523.OnPositionLabel = this.OnPositionLabel;
          }
          tmp1523.__isset.onPositionLabel = this.__isset.onPositionLabel;
          if(__isset.defaultState)
          {
            tmp1523.DefaultState = this.DefaultState;
          }
          tmp1523.__isset.defaultState = this.__isset.defaultState;
          return tmp1523;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    IntegrationPoint = (global::Yaskawa.Ext.API.IntegrationPoint)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    SwitchLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    OffPositionLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    OnPositionLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 7:
                  if (field.Type == TType.Bool)
                  {
                    DefaultState = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1524 = new TStruct("registerSwitch_args");
            await oprot.WriteStructBeginAsync(tmp1524, cancellationToken);
            var tmp1525 = new TField();
            if(__isset.p)
            {
              tmp1525.Name = "p";
              tmp1525.Type = TType.I64;
              tmp1525.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1525, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1525.Name = "identifier";
              tmp1525.Type = TType.String;
              tmp1525.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1525, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.integrationPoint)
            {
              tmp1525.Name = "integrationPoint";
              tmp1525.Type = TType.I32;
              tmp1525.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1525, cancellationToken);
              await oprot.WriteI32Async((int)IntegrationPoint, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SwitchLabel != null) && __isset.switchLabel)
            {
              tmp1525.Name = "switchLabel";
              tmp1525.Type = TType.String;
              tmp1525.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1525, cancellationToken);
              await oprot.WriteStringAsync(SwitchLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OffPositionLabel != null) && __isset.offPositionLabel)
            {
              tmp1525.Name = "offPositionLabel";
              tmp1525.Type = TType.String;
              tmp1525.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1525, cancellationToken);
              await oprot.WriteStringAsync(OffPositionLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OnPositionLabel != null) && __isset.onPositionLabel)
            {
              tmp1525.Name = "onPositionLabel";
              tmp1525.Type = TType.String;
              tmp1525.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1525, cancellationToken);
              await oprot.WriteStringAsync(OnPositionLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.defaultState)
            {
              tmp1525.Name = "defaultState";
              tmp1525.Type = TType.Bool;
              tmp1525.ID = 7;
              await oprot.WriteFieldBeginAsync(tmp1525, cancellationToken);
              await oprot.WriteBoolAsync(DefaultState, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerSwitch_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.integrationPoint == other.__isset.integrationPoint) && ((!__isset.integrationPoint) || (global::System.Object.Equals(IntegrationPoint, other.IntegrationPoint))))
            && ((__isset.switchLabel == other.__isset.switchLabel) && ((!__isset.switchLabel) || (global::System.Object.Equals(SwitchLabel, other.SwitchLabel))))
            && ((__isset.offPositionLabel == other.__isset.offPositionLabel) && ((!__isset.offPositionLabel) || (global::System.Object.Equals(OffPositionLabel, other.OffPositionLabel))))
            && ((__isset.onPositionLabel == other.__isset.onPositionLabel) && ((!__isset.onPositionLabel) || (global::System.Object.Equals(OnPositionLabel, other.OnPositionLabel))))
            && ((__isset.defaultState == other.__isset.defaultState) && ((!__isset.defaultState) || (global::System.Object.Equals(DefaultState, other.DefaultState))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if(__isset.integrationPoint)
            {
              hashcode = (hashcode * 397) + IntegrationPoint.GetHashCode();
            }
            if((SwitchLabel != null) && __isset.switchLabel)
            {
              hashcode = (hashcode * 397) + SwitchLabel.GetHashCode();
            }
            if((OffPositionLabel != null) && __isset.offPositionLabel)
            {
              hashcode = (hashcode * 397) + OffPositionLabel.GetHashCode();
            }
            if((OnPositionLabel != null) && __isset.onPositionLabel)
            {
              hashcode = (hashcode * 397) + OnPositionLabel.GetHashCode();
            }
            if(__isset.defaultState)
            {
              hashcode = (hashcode * 397) + DefaultState.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1526 = new StringBuilder("registerSwitch_args(");
          int tmp1527 = 0;
          if(__isset.p)
          {
            if(0 < tmp1527++) { tmp1526.Append(", "); }
            tmp1526.Append("P: ");
            P.ToString(tmp1526);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1527++) { tmp1526.Append(", "); }
            tmp1526.Append("Identifier: ");
            Identifier.ToString(tmp1526);
          }
          if(__isset.integrationPoint)
          {
            if(0 < tmp1527++) { tmp1526.Append(", "); }
            tmp1526.Append("IntegrationPoint: ");
            IntegrationPoint.ToString(tmp1526);
          }
          if((SwitchLabel != null) && __isset.switchLabel)
          {
            if(0 < tmp1527++) { tmp1526.Append(", "); }
            tmp1526.Append("SwitchLabel: ");
            SwitchLabel.ToString(tmp1526);
          }
          if((OffPositionLabel != null) && __isset.offPositionLabel)
          {
            if(0 < tmp1527++) { tmp1526.Append(", "); }
            tmp1526.Append("OffPositionLabel: ");
            OffPositionLabel.ToString(tmp1526);
          }
          if((OnPositionLabel != null) && __isset.onPositionLabel)
          {
            if(0 < tmp1527++) { tmp1526.Append(", "); }
            tmp1526.Append("OnPositionLabel: ");
            OnPositionLabel.ToString(tmp1526);
          }
          if(__isset.defaultState)
          {
            if(0 < tmp1527++) { tmp1526.Append(", "); }
            tmp1526.Append("DefaultState: ");
            DefaultState.ToString(tmp1526);
          }
          tmp1526.Append(')');
          return tmp1526.ToString();
        }
      }


      public partial class registerSwitch_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerSwitch_result()
        {
        }

        public registerSwitch_result DeepCopy()
        {
          var tmp1528 = new registerSwitch_result();
          if((E != null) && __isset.e)
          {
            tmp1528.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1528.__isset.e = this.__isset.e;
          return tmp1528;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1529 = new TStruct("registerSwitch_result");
            await oprot.WriteStructBeginAsync(tmp1529, cancellationToken);
            var tmp1530 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1530.Name = "E";
                tmp1530.Type = TType.Struct;
                tmp1530.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1530, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerSwitch_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1531 = new StringBuilder("registerSwitch_result(");
          int tmp1532 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1532++) { tmp1531.Append(", "); }
            tmp1531.Append("E: ");
            E.ToString(tmp1531);
          }
          tmp1531.Append(')');
          return tmp1531.ToString();
        }
      }


      public partial class registerDirectOpenForInstr_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _instruction;
        private List<string> _instrTags;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string Instruction
        {
          get
          {
            return _instruction;
          }
          set
          {
            __isset.instruction = true;
            this._instruction = value;
          }
        }

        public List<string> InstrTags
        {
          get
          {
            return _instrTags;
          }
          set
          {
            __isset.instrTags = true;
            this._instrTags = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool instruction;
          public bool instrTags;
        }

        public registerDirectOpenForInstr_args()
        {
        }

        public registerDirectOpenForInstr_args DeepCopy()
        {
          var tmp1533 = new registerDirectOpenForInstr_args();
          if(__isset.p)
          {
            tmp1533.P = this.P;
          }
          tmp1533.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1533.Identifier = this.Identifier;
          }
          tmp1533.__isset.identifier = this.__isset.identifier;
          if((Instruction != null) && __isset.instruction)
          {
            tmp1533.Instruction = this.Instruction;
          }
          tmp1533.__isset.instruction = this.__isset.instruction;
          if((InstrTags != null) && __isset.instrTags)
          {
            tmp1533.InstrTags = this.InstrTags.DeepCopy();
          }
          tmp1533.__isset.instrTags = this.__isset.instrTags;
          return tmp1533;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Instruction = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1534 = await iprot.ReadListBeginAsync(cancellationToken);
                      InstrTags = new List<string>(_list1534.Count);
                      for(int _i1535 = 0; _i1535 < _list1534.Count; ++_i1535)
                      {
                        string _elem1536;
                        _elem1536 = await iprot.ReadStringAsync(cancellationToken);
                        InstrTags.Add(_elem1536);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1537 = new TStruct("registerDirectOpenForInstr_args");
            await oprot.WriteStructBeginAsync(tmp1537, cancellationToken);
            var tmp1538 = new TField();
            if(__isset.p)
            {
              tmp1538.Name = "p";
              tmp1538.Type = TType.I64;
              tmp1538.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1538, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1538.Name = "identifier";
              tmp1538.Type = TType.String;
              tmp1538.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1538, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Instruction != null) && __isset.instruction)
            {
              tmp1538.Name = "instruction";
              tmp1538.Type = TType.String;
              tmp1538.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1538, cancellationToken);
              await oprot.WriteStringAsync(Instruction, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((InstrTags != null) && __isset.instrTags)
            {
              tmp1538.Name = "instrTags";
              tmp1538.Type = TType.List;
              tmp1538.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1538, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.String, InstrTags.Count), cancellationToken);
              foreach (string _iter1539 in InstrTags)
              {
                await oprot.WriteStringAsync(_iter1539, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerDirectOpenForInstr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.instruction == other.__isset.instruction) && ((!__isset.instruction) || (global::System.Object.Equals(Instruction, other.Instruction))))
            && ((__isset.instrTags == other.__isset.instrTags) && ((!__isset.instrTags) || (TCollections.Equals(InstrTags, other.InstrTags))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((Instruction != null) && __isset.instruction)
            {
              hashcode = (hashcode * 397) + Instruction.GetHashCode();
            }
            if((InstrTags != null) && __isset.instrTags)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(InstrTags);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1540 = new StringBuilder("registerDirectOpenForInstr_args(");
          int tmp1541 = 0;
          if(__isset.p)
          {
            if(0 < tmp1541++) { tmp1540.Append(", "); }
            tmp1540.Append("P: ");
            P.ToString(tmp1540);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1541++) { tmp1540.Append(", "); }
            tmp1540.Append("Identifier: ");
            Identifier.ToString(tmp1540);
          }
          if((Instruction != null) && __isset.instruction)
          {
            if(0 < tmp1541++) { tmp1540.Append(", "); }
            tmp1540.Append("Instruction: ");
            Instruction.ToString(tmp1540);
          }
          if((InstrTags != null) && __isset.instrTags)
          {
            if(0 < tmp1541++) { tmp1540.Append(", "); }
            tmp1540.Append("InstrTags: ");
            InstrTags.ToString(tmp1540);
          }
          tmp1540.Append(')');
          return tmp1540.ToString();
        }
      }


      public partial class registerDirectOpenForInstr_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerDirectOpenForInstr_result()
        {
        }

        public registerDirectOpenForInstr_result DeepCopy()
        {
          var tmp1542 = new registerDirectOpenForInstr_result();
          if((E != null) && __isset.e)
          {
            tmp1542.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1542.__isset.e = this.__isset.e;
          return tmp1542;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1543 = new TStruct("registerDirectOpenForInstr_result");
            await oprot.WriteStructBeginAsync(tmp1543, cancellationToken);
            var tmp1544 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1544.Name = "E";
                tmp1544.Type = TType.Struct;
                tmp1544.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1544, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerDirectOpenForInstr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1545 = new StringBuilder("registerDirectOpenForInstr_result(");
          int tmp1546 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1546++) { tmp1545.Append(", "); }
            tmp1545.Append("E: ");
            E.ToString(tmp1545);
          }
          tmp1545.Append(')');
          return tmp1545.ToString();
        }
      }


      public partial class unregisterDirectOpenForInstr_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _instruction;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string Instruction
        {
          get
          {
            return _instruction;
          }
          set
          {
            __isset.instruction = true;
            this._instruction = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool instruction;
        }

        public unregisterDirectOpenForInstr_args()
        {
        }

        public unregisterDirectOpenForInstr_args DeepCopy()
        {
          var tmp1547 = new unregisterDirectOpenForInstr_args();
          if(__isset.p)
          {
            tmp1547.P = this.P;
          }
          tmp1547.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1547.Identifier = this.Identifier;
          }
          tmp1547.__isset.identifier = this.__isset.identifier;
          if((Instruction != null) && __isset.instruction)
          {
            tmp1547.Instruction = this.Instruction;
          }
          tmp1547.__isset.instruction = this.__isset.instruction;
          return tmp1547;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Instruction = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1548 = new TStruct("unregisterDirectOpenForInstr_args");
            await oprot.WriteStructBeginAsync(tmp1548, cancellationToken);
            var tmp1549 = new TField();
            if(__isset.p)
            {
              tmp1549.Name = "p";
              tmp1549.Type = TType.I64;
              tmp1549.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1549, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1549.Name = "identifier";
              tmp1549.Type = TType.String;
              tmp1549.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1549, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Instruction != null) && __isset.instruction)
            {
              tmp1549.Name = "instruction";
              tmp1549.Type = TType.String;
              tmp1549.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1549, cancellationToken);
              await oprot.WriteStringAsync(Instruction, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterDirectOpenForInstr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.instruction == other.__isset.instruction) && ((!__isset.instruction) || (global::System.Object.Equals(Instruction, other.Instruction))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((Instruction != null) && __isset.instruction)
            {
              hashcode = (hashcode * 397) + Instruction.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1550 = new StringBuilder("unregisterDirectOpenForInstr_args(");
          int tmp1551 = 0;
          if(__isset.p)
          {
            if(0 < tmp1551++) { tmp1550.Append(", "); }
            tmp1550.Append("P: ");
            P.ToString(tmp1550);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1551++) { tmp1550.Append(", "); }
            tmp1550.Append("Identifier: ");
            Identifier.ToString(tmp1550);
          }
          if((Instruction != null) && __isset.instruction)
          {
            if(0 < tmp1551++) { tmp1550.Append(", "); }
            tmp1550.Append("Instruction: ");
            Instruction.ToString(tmp1550);
          }
          tmp1550.Append(')');
          return tmp1550.ToString();
        }
      }


      public partial class unregisterDirectOpenForInstr_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterDirectOpenForInstr_result()
        {
        }

        public unregisterDirectOpenForInstr_result DeepCopy()
        {
          var tmp1552 = new unregisterDirectOpenForInstr_result();
          if((E != null) && __isset.e)
          {
            tmp1552.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1552.__isset.e = this.__isset.e;
          return tmp1552;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1553 = new TStruct("unregisterDirectOpenForInstr_result");
            await oprot.WriteStructBeginAsync(tmp1553, cancellationToken);
            var tmp1554 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1554.Name = "E";
                tmp1554.Type = TType.Struct;
                tmp1554.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1554, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterDirectOpenForInstr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1555 = new StringBuilder("unregisterDirectOpenForInstr_result(");
          int tmp1556 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1556++) { tmp1555.Append(", "); }
            tmp1555.Append("E: ");
            E.ToString(tmp1555);
          }
          tmp1555.Append(')');
          return tmp1555.ToString();
        }
      }


      public partial class property_args : TBase
      {
        private long _p;
        private string _itemID;
        private string _name;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ItemID
        {
          get
          {
            return _itemID;
          }
          set
          {
            __isset.itemID = true;
            this._itemID = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemID;
          public bool name;
        }

        public property_args()
        {
        }

        public property_args DeepCopy()
        {
          var tmp1557 = new property_args();
          if(__isset.p)
          {
            tmp1557.P = this.P;
          }
          tmp1557.__isset.p = this.__isset.p;
          if((ItemID != null) && __isset.itemID)
          {
            tmp1557.ItemID = this.ItemID;
          }
          tmp1557.__isset.itemID = this.__isset.itemID;
          if((Name != null) && __isset.name)
          {
            tmp1557.Name = this.Name;
          }
          tmp1557.__isset.name = this.__isset.name;
          return tmp1557;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ItemID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1558 = new TStruct("property_args");
            await oprot.WriteStructBeginAsync(tmp1558, cancellationToken);
            var tmp1559 = new TField();
            if(__isset.p)
            {
              tmp1559.Name = "p";
              tmp1559.Type = TType.I64;
              tmp1559.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1559, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemID != null) && __isset.itemID)
            {
              tmp1559.Name = "itemID";
              tmp1559.Type = TType.String;
              tmp1559.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1559, cancellationToken);
              await oprot.WriteStringAsync(ItemID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp1559.Name = "name";
              tmp1559.Type = TType.String;
              tmp1559.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1559, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is property_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemID == other.__isset.itemID) && ((!__isset.itemID) || (global::System.Object.Equals(ItemID, other.ItemID))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemID != null) && __isset.itemID)
            {
              hashcode = (hashcode * 397) + ItemID.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1560 = new StringBuilder("property_args(");
          int tmp1561 = 0;
          if(__isset.p)
          {
            if(0 < tmp1561++) { tmp1560.Append(", "); }
            tmp1560.Append("P: ");
            P.ToString(tmp1560);
          }
          if((ItemID != null) && __isset.itemID)
          {
            if(0 < tmp1561++) { tmp1560.Append(", "); }
            tmp1560.Append("ItemID: ");
            ItemID.ToString(tmp1560);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1561++) { tmp1560.Append(", "); }
            tmp1560.Append("Name: ");
            Name.ToString(tmp1560);
          }
          tmp1560.Append(')');
          return tmp1560.ToString();
        }
      }


      public partial class property_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public property_result()
        {
        }

        public property_result DeepCopy()
        {
          var tmp1562 = new property_result();
          if((Success != null) && __isset.success)
          {
            tmp1562.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp1562.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1562.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1562.__isset.e = this.__isset.e;
          return tmp1562;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1563 = new TStruct("property_result");
            await oprot.WriteStructBeginAsync(tmp1563, cancellationToken);
            var tmp1564 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1564.Name = "Success";
                tmp1564.Type = TType.Struct;
                tmp1564.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1564, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1564.Name = "E";
                tmp1564.Type = TType.Struct;
                tmp1564.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1564, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is property_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1565 = new StringBuilder("property_result(");
          int tmp1566 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1566++) { tmp1565.Append(", "); }
            tmp1565.Append("Success: ");
            Success.ToString(tmp1565);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1566++) { tmp1565.Append(", "); }
            tmp1565.Append("E: ");
            E.ToString(tmp1565);
          }
          tmp1565.Append(')');
          return tmp1565.ToString();
        }
      }


      public partial class setProperty_args : TBase
      {
        private long _p;
        private string _itemID;
        private string _name;
        private global::Yaskawa.Ext.API.Any _value;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ItemID
        {
          get
          {
            return _itemID;
          }
          set
          {
            __isset.itemID = true;
            this._itemID = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemID;
          public bool name;
          public bool @value;
        }

        public setProperty_args()
        {
        }

        public setProperty_args DeepCopy()
        {
          var tmp1567 = new setProperty_args();
          if(__isset.p)
          {
            tmp1567.P = this.P;
          }
          tmp1567.__isset.p = this.__isset.p;
          if((ItemID != null) && __isset.itemID)
          {
            tmp1567.ItemID = this.ItemID;
          }
          tmp1567.__isset.itemID = this.__isset.itemID;
          if((Name != null) && __isset.name)
          {
            tmp1567.Name = this.Name;
          }
          tmp1567.__isset.name = this.__isset.name;
          if((Value != null) && __isset.@value)
          {
            tmp1567.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp1567.__isset.@value = this.__isset.@value;
          return tmp1567;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ItemID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1568 = new TStruct("setProperty_args");
            await oprot.WriteStructBeginAsync(tmp1568, cancellationToken);
            var tmp1569 = new TField();
            if(__isset.p)
            {
              tmp1569.Name = "p";
              tmp1569.Type = TType.I64;
              tmp1569.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1569, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemID != null) && __isset.itemID)
            {
              tmp1569.Name = "itemID";
              tmp1569.Type = TType.String;
              tmp1569.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1569, cancellationToken);
              await oprot.WriteStringAsync(ItemID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp1569.Name = "name";
              tmp1569.Type = TType.String;
              tmp1569.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1569, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp1569.Name = "value";
              tmp1569.Type = TType.Struct;
              tmp1569.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1569, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperty_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemID == other.__isset.itemID) && ((!__isset.itemID) || (global::System.Object.Equals(ItemID, other.ItemID))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemID != null) && __isset.itemID)
            {
              hashcode = (hashcode * 397) + ItemID.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1570 = new StringBuilder("setProperty_args(");
          int tmp1571 = 0;
          if(__isset.p)
          {
            if(0 < tmp1571++) { tmp1570.Append(", "); }
            tmp1570.Append("P: ");
            P.ToString(tmp1570);
          }
          if((ItemID != null) && __isset.itemID)
          {
            if(0 < tmp1571++) { tmp1570.Append(", "); }
            tmp1570.Append("ItemID: ");
            ItemID.ToString(tmp1570);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1571++) { tmp1570.Append(", "); }
            tmp1570.Append("Name: ");
            Name.ToString(tmp1570);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp1571++) { tmp1570.Append(", "); }
            tmp1570.Append("Value: ");
            Value.ToString(tmp1570);
          }
          tmp1570.Append(')');
          return tmp1570.ToString();
        }
      }


      public partial class setProperty_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setProperty_result()
        {
        }

        public setProperty_result DeepCopy()
        {
          var tmp1572 = new setProperty_result();
          if((E != null) && __isset.e)
          {
            tmp1572.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1572.__isset.e = this.__isset.e;
          return tmp1572;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1573 = new TStruct("setProperty_result");
            await oprot.WriteStructBeginAsync(tmp1573, cancellationToken);
            var tmp1574 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1574.Name = "E";
                tmp1574.Type = TType.Struct;
                tmp1574.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1574, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperty_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1575 = new StringBuilder("setProperty_result(");
          int tmp1576 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1576++) { tmp1575.Append(", "); }
            tmp1575.Append("E: ");
            E.ToString(tmp1575);
          }
          tmp1575.Append(')');
          return tmp1575.ToString();
        }
      }


      public partial class setProperties_args : TBase
      {
        private long _p;
        private List<global::Yaskawa.Ext.API.PropValues> _propValuesList;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public List<global::Yaskawa.Ext.API.PropValues> PropValuesList
        {
          get
          {
            return _propValuesList;
          }
          set
          {
            __isset.propValuesList = true;
            this._propValuesList = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool propValuesList;
        }

        public setProperties_args()
        {
        }

        public setProperties_args DeepCopy()
        {
          var tmp1577 = new setProperties_args();
          if(__isset.p)
          {
            tmp1577.P = this.P;
          }
          tmp1577.__isset.p = this.__isset.p;
          if((PropValuesList != null) && __isset.propValuesList)
          {
            tmp1577.PropValuesList = this.PropValuesList.DeepCopy();
          }
          tmp1577.__isset.propValuesList = this.__isset.propValuesList;
          return tmp1577;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1578 = await iprot.ReadListBeginAsync(cancellationToken);
                      PropValuesList = new List<global::Yaskawa.Ext.API.PropValues>(_list1578.Count);
                      for(int _i1579 = 0; _i1579 < _list1578.Count; ++_i1579)
                      {
                        global::Yaskawa.Ext.API.PropValues _elem1580;
                        _elem1580 = new global::Yaskawa.Ext.API.PropValues();
                        await _elem1580.ReadAsync(iprot, cancellationToken);
                        PropValuesList.Add(_elem1580);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1581 = new TStruct("setProperties_args");
            await oprot.WriteStructBeginAsync(tmp1581, cancellationToken);
            var tmp1582 = new TField();
            if(__isset.p)
            {
              tmp1582.Name = "p";
              tmp1582.Type = TType.I64;
              tmp1582.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1582, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PropValuesList != null) && __isset.propValuesList)
            {
              tmp1582.Name = "propValuesList";
              tmp1582.Type = TType.List;
              tmp1582.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1582, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, PropValuesList.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PropValues _iter1583 in PropValuesList)
              {
                await _iter1583.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperties_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.propValuesList == other.__isset.propValuesList) && ((!__isset.propValuesList) || (TCollections.Equals(PropValuesList, other.PropValuesList))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((PropValuesList != null) && __isset.propValuesList)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(PropValuesList);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1584 = new StringBuilder("setProperties_args(");
          int tmp1585 = 0;
          if(__isset.p)
          {
            if(0 < tmp1585++) { tmp1584.Append(", "); }
            tmp1584.Append("P: ");
            P.ToString(tmp1584);
          }
          if((PropValuesList != null) && __isset.propValuesList)
          {
            if(0 < tmp1585++) { tmp1584.Append(", "); }
            tmp1584.Append("PropValuesList: ");
            PropValuesList.ToString(tmp1584);
          }
          tmp1584.Append(')');
          return tmp1584.ToString();
        }
      }


      public partial class setChartConfig_args : TBase
      {
        private long _p;
        private string _chartID;
        private global::Yaskawa.Ext.API.Any _config;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Config
        {
          get
          {
            return _config;
          }
          set
          {
            __isset.config = true;
            this._config = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool config;
        }

        public setChartConfig_args()
        {
        }

        public setChartConfig_args DeepCopy()
        {
          var tmp1586 = new setChartConfig_args();
          if(__isset.p)
          {
            tmp1586.P = this.P;
          }
          tmp1586.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1586.ChartID = this.ChartID;
          }
          tmp1586.__isset.chartID = this.__isset.chartID;
          if((Config != null) && __isset.config)
          {
            tmp1586.Config = (global::Yaskawa.Ext.API.Any)this.Config.DeepCopy();
          }
          tmp1586.__isset.config = this.__isset.config;
          return tmp1586;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Config = new global::Yaskawa.Ext.API.Any();
                    await Config.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1587 = new TStruct("setChartConfig_args");
            await oprot.WriteStructBeginAsync(tmp1587, cancellationToken);
            var tmp1588 = new TField();
            if(__isset.p)
            {
              tmp1588.Name = "p";
              tmp1588.Type = TType.I64;
              tmp1588.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1588, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1588.Name = "chartID";
              tmp1588.Type = TType.String;
              tmp1588.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1588, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Config != null) && __isset.config)
            {
              tmp1588.Name = "config";
              tmp1588.Type = TType.Struct;
              tmp1588.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1588, cancellationToken);
              await Config.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.config == other.__isset.config) && ((!__isset.config) || (global::System.Object.Equals(Config, other.Config))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Config != null) && __isset.config)
            {
              hashcode = (hashcode * 397) + Config.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1589 = new StringBuilder("setChartConfig_args(");
          int tmp1590 = 0;
          if(__isset.p)
          {
            if(0 < tmp1590++) { tmp1589.Append(", "); }
            tmp1589.Append("P: ");
            P.ToString(tmp1589);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1590++) { tmp1589.Append(", "); }
            tmp1589.Append("ChartID: ");
            ChartID.ToString(tmp1589);
          }
          if((Config != null) && __isset.config)
          {
            if(0 < tmp1590++) { tmp1589.Append(", "); }
            tmp1589.Append("Config: ");
            Config.ToString(tmp1589);
          }
          tmp1589.Append(')');
          return tmp1589.ToString();
        }
      }


      public partial class setChartConfig_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setChartConfig_result()
        {
        }

        public setChartConfig_result DeepCopy()
        {
          var tmp1591 = new setChartConfig_result();
          if((E != null) && __isset.e)
          {
            tmp1591.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1591.__isset.e = this.__isset.e;
          return tmp1591;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1592 = new TStruct("setChartConfig_result");
            await oprot.WriteStructBeginAsync(tmp1592, cancellationToken);
            var tmp1593 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1593.Name = "E";
                tmp1593.Type = TType.Struct;
                tmp1593.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1593, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1594 = new StringBuilder("setChartConfig_result(");
          int tmp1595 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1595++) { tmp1594.Append(", "); }
            tmp1594.Append("E: ");
            E.ToString(tmp1594);
          }
          tmp1594.Append(')');
          return tmp1594.ToString();
        }
      }


      public partial class getChartConfig_args : TBase
      {
        private long _p;
        private string _chartID;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
        }

        public getChartConfig_args()
        {
        }

        public getChartConfig_args DeepCopy()
        {
          var tmp1596 = new getChartConfig_args();
          if(__isset.p)
          {
            tmp1596.P = this.P;
          }
          tmp1596.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1596.ChartID = this.ChartID;
          }
          tmp1596.__isset.chartID = this.__isset.chartID;
          return tmp1596;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1597 = new TStruct("getChartConfig_args");
            await oprot.WriteStructBeginAsync(tmp1597, cancellationToken);
            var tmp1598 = new TField();
            if(__isset.p)
            {
              tmp1598.Name = "p";
              tmp1598.Type = TType.I64;
              tmp1598.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1598, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1598.Name = "chartID";
              tmp1598.Type = TType.String;
              tmp1598.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1598, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1599 = new StringBuilder("getChartConfig_args(");
          int tmp1600 = 0;
          if(__isset.p)
          {
            if(0 < tmp1600++) { tmp1599.Append(", "); }
            tmp1599.Append("P: ");
            P.ToString(tmp1599);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1600++) { tmp1599.Append(", "); }
            tmp1599.Append("ChartID: ");
            ChartID.ToString(tmp1599);
          }
          tmp1599.Append(')');
          return tmp1599.ToString();
        }
      }


      public partial class getChartConfig_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public getChartConfig_result()
        {
        }

        public getChartConfig_result DeepCopy()
        {
          var tmp1601 = new getChartConfig_result();
          if((Success != null) && __isset.success)
          {
            tmp1601.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp1601.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1601.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1601.__isset.e = this.__isset.e;
          return tmp1601;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1602 = new TStruct("getChartConfig_result");
            await oprot.WriteStructBeginAsync(tmp1602, cancellationToken);
            var tmp1603 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1603.Name = "Success";
                tmp1603.Type = TType.Struct;
                tmp1603.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1603, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1603.Name = "E";
                tmp1603.Type = TType.Struct;
                tmp1603.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1603, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1604 = new StringBuilder("getChartConfig_result(");
          int tmp1605 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1605++) { tmp1604.Append(", "); }
            tmp1604.Append("Success: ");
            Success.ToString(tmp1604);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1605++) { tmp1604.Append(", "); }
            tmp1604.Append("E: ");
            E.ToString(tmp1604);
          }
          tmp1604.Append(')');
          return tmp1604.ToString();
        }
      }


      public partial class setChartData_args : TBase
      {
        private long _p;
        private string _chartID;
        private Dictionary<string, global::Yaskawa.Ext.API.Data> _dataset;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public Dictionary<string, global::Yaskawa.Ext.API.Data> Dataset
        {
          get
          {
            return _dataset;
          }
          set
          {
            __isset.dataset = true;
            this._dataset = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool dataset;
          public bool right;
        }

        public setChartData_args()
        {
        }

        public setChartData_args DeepCopy()
        {
          var tmp1606 = new setChartData_args();
          if(__isset.p)
          {
            tmp1606.P = this.P;
          }
          tmp1606.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1606.ChartID = this.ChartID;
          }
          tmp1606.__isset.chartID = this.__isset.chartID;
          if((Dataset != null) && __isset.dataset)
          {
            tmp1606.Dataset = this.Dataset.DeepCopy();
          }
          tmp1606.__isset.dataset = this.__isset.dataset;
          if(__isset.right)
          {
            tmp1606.Right = this.Right;
          }
          tmp1606.__isset.right = this.__isset.right;
          return tmp1606;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1607 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Dataset = new Dictionary<string, global::Yaskawa.Ext.API.Data>(_map1607.Count);
                      for(int _i1608 = 0; _i1608 < _map1607.Count; ++_i1608)
                      {
                        string _key1609;
                        global::Yaskawa.Ext.API.Data _val1610;
                        _key1609 = await iprot.ReadStringAsync(cancellationToken);
                        _val1610 = new global::Yaskawa.Ext.API.Data();
                        await _val1610.ReadAsync(iprot, cancellationToken);
                        Dataset[_key1609] = _val1610;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1611 = new TStruct("setChartData_args");
            await oprot.WriteStructBeginAsync(tmp1611, cancellationToken);
            var tmp1612 = new TField();
            if(__isset.p)
            {
              tmp1612.Name = "p";
              tmp1612.Type = TType.I64;
              tmp1612.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1612, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1612.Name = "chartID";
              tmp1612.Type = TType.String;
              tmp1612.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1612, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Dataset != null) && __isset.dataset)
            {
              tmp1612.Name = "dataset";
              tmp1612.Type = TType.Map;
              tmp1612.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1612, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Dataset.Count), cancellationToken);
              foreach (string _iter1613 in Dataset.Keys)
              {
                await oprot.WriteStringAsync(_iter1613, cancellationToken);
                await Dataset[_iter1613].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1612.Name = "right";
              tmp1612.Type = TType.Bool;
              tmp1612.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1612, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.dataset == other.__isset.dataset) && ((!__isset.dataset) || (global::System.Object.Equals(Dataset, other.Dataset))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Dataset != null) && __isset.dataset)
            {
              hashcode = (hashcode * 397) + Dataset.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1614 = new StringBuilder("setChartData_args(");
          int tmp1615 = 0;
          if(__isset.p)
          {
            if(0 < tmp1615++) { tmp1614.Append(", "); }
            tmp1614.Append("P: ");
            P.ToString(tmp1614);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1615++) { tmp1614.Append(", "); }
            tmp1614.Append("ChartID: ");
            ChartID.ToString(tmp1614);
          }
          if((Dataset != null) && __isset.dataset)
          {
            if(0 < tmp1615++) { tmp1614.Append(", "); }
            tmp1614.Append("Dataset: ");
            Dataset.ToString(tmp1614);
          }
          if(__isset.right)
          {
            if(0 < tmp1615++) { tmp1614.Append(", "); }
            tmp1614.Append("Right: ");
            Right.ToString(tmp1614);
          }
          tmp1614.Append(')');
          return tmp1614.ToString();
        }
      }


      public partial class setChartData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setChartData_result()
        {
        }

        public setChartData_result DeepCopy()
        {
          var tmp1616 = new setChartData_result();
          if((E != null) && __isset.e)
          {
            tmp1616.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1616.__isset.e = this.__isset.e;
          return tmp1616;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1617 = new TStruct("setChartData_result");
            await oprot.WriteStructBeginAsync(tmp1617, cancellationToken);
            var tmp1618 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1618.Name = "E";
                tmp1618.Type = TType.Struct;
                tmp1618.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1618, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1619 = new StringBuilder("setChartData_result(");
          int tmp1620 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1620++) { tmp1619.Append(", "); }
            tmp1619.Append("E: ");
            E.ToString(tmp1619);
          }
          tmp1619.Append(')');
          return tmp1619.ToString();
        }
      }


      public partial class getChartData_args : TBase
      {
        private long _p;
        private string _chartID;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool right;
        }

        public getChartData_args()
        {
        }

        public getChartData_args DeepCopy()
        {
          var tmp1621 = new getChartData_args();
          if(__isset.p)
          {
            tmp1621.P = this.P;
          }
          tmp1621.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1621.ChartID = this.ChartID;
          }
          tmp1621.__isset.chartID = this.__isset.chartID;
          if(__isset.right)
          {
            tmp1621.Right = this.Right;
          }
          tmp1621.__isset.right = this.__isset.right;
          return tmp1621;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1622 = new TStruct("getChartData_args");
            await oprot.WriteStructBeginAsync(tmp1622, cancellationToken);
            var tmp1623 = new TField();
            if(__isset.p)
            {
              tmp1623.Name = "p";
              tmp1623.Type = TType.I64;
              tmp1623.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1623, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1623.Name = "chartID";
              tmp1623.Type = TType.String;
              tmp1623.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1623, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1623.Name = "right";
              tmp1623.Type = TType.Bool;
              tmp1623.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1623, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1624 = new StringBuilder("getChartData_args(");
          int tmp1625 = 0;
          if(__isset.p)
          {
            if(0 < tmp1625++) { tmp1624.Append(", "); }
            tmp1624.Append("P: ");
            P.ToString(tmp1624);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1625++) { tmp1624.Append(", "); }
            tmp1624.Append("ChartID: ");
            ChartID.ToString(tmp1624);
          }
          if(__isset.right)
          {
            if(0 < tmp1625++) { tmp1624.Append(", "); }
            tmp1624.Append("Right: ");
            Right.ToString(tmp1624);
          }
          tmp1624.Append(')');
          return tmp1624.ToString();
        }
      }


      public partial class getChartData_result : TBase
      {
        private Dictionary<string, global::Yaskawa.Ext.API.Data> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<string, global::Yaskawa.Ext.API.Data> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public getChartData_result()
        {
        }

        public getChartData_result DeepCopy()
        {
          var tmp1626 = new getChartData_result();
          if((Success != null) && __isset.success)
          {
            tmp1626.Success = this.Success.DeepCopy();
          }
          tmp1626.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1626.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1626.__isset.e = this.__isset.e;
          return tmp1626;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1627 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<string, global::Yaskawa.Ext.API.Data>(_map1627.Count);
                      for(int _i1628 = 0; _i1628 < _map1627.Count; ++_i1628)
                      {
                        string _key1629;
                        global::Yaskawa.Ext.API.Data _val1630;
                        _key1629 = await iprot.ReadStringAsync(cancellationToken);
                        _val1630 = new global::Yaskawa.Ext.API.Data();
                        await _val1630.ReadAsync(iprot, cancellationToken);
                        Success[_key1629] = _val1630;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1631 = new TStruct("getChartData_result");
            await oprot.WriteStructBeginAsync(tmp1631, cancellationToken);
            var tmp1632 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1632.Name = "Success";
                tmp1632.Type = TType.Map;
                tmp1632.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1632, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
                foreach (string _iter1633 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter1633, cancellationToken);
                  await Success[_iter1633].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1632.Name = "E";
                tmp1632.Type = TType.Struct;
                tmp1632.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1632, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1634 = new StringBuilder("getChartData_result(");
          int tmp1635 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1635++) { tmp1634.Append(", "); }
            tmp1634.Append("Success: ");
            Success.ToString(tmp1634);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1635++) { tmp1634.Append(", "); }
            tmp1634.Append("E: ");
            E.ToString(tmp1634);
          }
          tmp1634.Append(')');
          return tmp1634.ToString();
        }
      }


      public partial class addChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private global::Yaskawa.Ext.API.Data _data;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public global::Yaskawa.Ext.API.Data Data
        {
          get
          {
            return _data;
          }
          set
          {
            __isset.data = true;
            this._data = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool data;
          public bool right;
        }

        public addChartKey_args()
        {
        }

        public addChartKey_args DeepCopy()
        {
          var tmp1636 = new addChartKey_args();
          if(__isset.p)
          {
            tmp1636.P = this.P;
          }
          tmp1636.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1636.ChartID = this.ChartID;
          }
          tmp1636.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1636.Key = this.Key;
          }
          tmp1636.__isset.key = this.__isset.key;
          if((Data != null) && __isset.data)
          {
            tmp1636.Data = (global::Yaskawa.Ext.API.Data)this.Data.DeepCopy();
          }
          tmp1636.__isset.data = this.__isset.data;
          if(__isset.right)
          {
            tmp1636.Right = this.Right;
          }
          tmp1636.__isset.right = this.__isset.right;
          return tmp1636;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Data = new global::Yaskawa.Ext.API.Data();
                    await Data.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1637 = new TStruct("addChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1637, cancellationToken);
            var tmp1638 = new TField();
            if(__isset.p)
            {
              tmp1638.Name = "p";
              tmp1638.Type = TType.I64;
              tmp1638.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1638, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1638.Name = "chartID";
              tmp1638.Type = TType.String;
              tmp1638.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1638, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1638.Name = "key";
              tmp1638.Type = TType.String;
              tmp1638.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1638, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Data != null) && __isset.data)
            {
              tmp1638.Name = "data";
              tmp1638.Type = TType.Struct;
              tmp1638.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1638, cancellationToken);
              await Data.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1638.Name = "right";
              tmp1638.Type = TType.Bool;
              tmp1638.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1638, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.data == other.__isset.data) && ((!__isset.data) || (global::System.Object.Equals(Data, other.Data))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Data != null) && __isset.data)
            {
              hashcode = (hashcode * 397) + Data.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1639 = new StringBuilder("addChartKey_args(");
          int tmp1640 = 0;
          if(__isset.p)
          {
            if(0 < tmp1640++) { tmp1639.Append(", "); }
            tmp1639.Append("P: ");
            P.ToString(tmp1639);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1640++) { tmp1639.Append(", "); }
            tmp1639.Append("ChartID: ");
            ChartID.ToString(tmp1639);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1640++) { tmp1639.Append(", "); }
            tmp1639.Append("Key: ");
            Key.ToString(tmp1639);
          }
          if((Data != null) && __isset.data)
          {
            if(0 < tmp1640++) { tmp1639.Append(", "); }
            tmp1639.Append("Data: ");
            Data.ToString(tmp1639);
          }
          if(__isset.right)
          {
            if(0 < tmp1640++) { tmp1639.Append(", "); }
            tmp1639.Append("Right: ");
            Right.ToString(tmp1639);
          }
          tmp1639.Append(')');
          return tmp1639.ToString();
        }
      }


      public partial class addChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public addChartKey_result()
        {
        }

        public addChartKey_result DeepCopy()
        {
          var tmp1641 = new addChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1641.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1641.__isset.e = this.__isset.e;
          return tmp1641;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1642 = new TStruct("addChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1642, cancellationToken);
            var tmp1643 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1643.Name = "E";
                tmp1643.Type = TType.Struct;
                tmp1643.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1643, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1644 = new StringBuilder("addChartKey_result(");
          int tmp1645 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1645++) { tmp1644.Append(", "); }
            tmp1644.Append("E: ");
            E.ToString(tmp1644);
          }
          tmp1644.Append(')');
          return tmp1644.ToString();
        }
      }


      public partial class removeChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool right;
        }

        public removeChartKey_args()
        {
        }

        public removeChartKey_args DeepCopy()
        {
          var tmp1646 = new removeChartKey_args();
          if(__isset.p)
          {
            tmp1646.P = this.P;
          }
          tmp1646.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1646.ChartID = this.ChartID;
          }
          tmp1646.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1646.Key = this.Key;
          }
          tmp1646.__isset.key = this.__isset.key;
          if(__isset.right)
          {
            tmp1646.Right = this.Right;
          }
          tmp1646.__isset.right = this.__isset.right;
          return tmp1646;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1647 = new TStruct("removeChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1647, cancellationToken);
            var tmp1648 = new TField();
            if(__isset.p)
            {
              tmp1648.Name = "p";
              tmp1648.Type = TType.I64;
              tmp1648.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1648, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1648.Name = "chartID";
              tmp1648.Type = TType.String;
              tmp1648.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1648, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1648.Name = "key";
              tmp1648.Type = TType.String;
              tmp1648.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1648, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1648.Name = "right";
              tmp1648.Type = TType.Bool;
              tmp1648.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1648, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1649 = new StringBuilder("removeChartKey_args(");
          int tmp1650 = 0;
          if(__isset.p)
          {
            if(0 < tmp1650++) { tmp1649.Append(", "); }
            tmp1649.Append("P: ");
            P.ToString(tmp1649);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1650++) { tmp1649.Append(", "); }
            tmp1649.Append("ChartID: ");
            ChartID.ToString(tmp1649);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1650++) { tmp1649.Append(", "); }
            tmp1649.Append("Key: ");
            Key.ToString(tmp1649);
          }
          if(__isset.right)
          {
            if(0 < tmp1650++) { tmp1649.Append(", "); }
            tmp1649.Append("Right: ");
            Right.ToString(tmp1649);
          }
          tmp1649.Append(')');
          return tmp1649.ToString();
        }
      }


      public partial class removeChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeChartKey_result()
        {
        }

        public removeChartKey_result DeepCopy()
        {
          var tmp1651 = new removeChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1651.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1651.__isset.e = this.__isset.e;
          return tmp1651;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1652 = new TStruct("removeChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1652, cancellationToken);
            var tmp1653 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1653.Name = "E";
                tmp1653.Type = TType.Struct;
                tmp1653.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1653, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1654 = new StringBuilder("removeChartKey_result(");
          int tmp1655 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1655++) { tmp1654.Append(", "); }
            tmp1654.Append("E: ");
            E.ToString(tmp1654);
          }
          tmp1654.Append(')');
          return tmp1654.ToString();
        }
      }


      public partial class hideChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private bool _hidden;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public bool Hidden
        {
          get
          {
            return _hidden;
          }
          set
          {
            __isset.hidden = true;
            this._hidden = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool hidden;
          public bool right;
        }

        public hideChartKey_args()
        {
        }

        public hideChartKey_args DeepCopy()
        {
          var tmp1656 = new hideChartKey_args();
          if(__isset.p)
          {
            tmp1656.P = this.P;
          }
          tmp1656.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1656.ChartID = this.ChartID;
          }
          tmp1656.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1656.Key = this.Key;
          }
          tmp1656.__isset.key = this.__isset.key;
          if(__isset.hidden)
          {
            tmp1656.Hidden = this.Hidden;
          }
          tmp1656.__isset.hidden = this.__isset.hidden;
          if(__isset.right)
          {
            tmp1656.Right = this.Right;
          }
          tmp1656.__isset.right = this.__isset.right;
          return tmp1656;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Hidden = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1657 = new TStruct("hideChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1657, cancellationToken);
            var tmp1658 = new TField();
            if(__isset.p)
            {
              tmp1658.Name = "p";
              tmp1658.Type = TType.I64;
              tmp1658.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1658, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1658.Name = "chartID";
              tmp1658.Type = TType.String;
              tmp1658.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1658, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1658.Name = "key";
              tmp1658.Type = TType.String;
              tmp1658.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1658, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.hidden)
            {
              tmp1658.Name = "hidden";
              tmp1658.Type = TType.Bool;
              tmp1658.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1658, cancellationToken);
              await oprot.WriteBoolAsync(Hidden, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1658.Name = "right";
              tmp1658.Type = TType.Bool;
              tmp1658.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1658, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is hideChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.hidden == other.__isset.hidden) && ((!__isset.hidden) || (global::System.Object.Equals(Hidden, other.Hidden))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.hidden)
            {
              hashcode = (hashcode * 397) + Hidden.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1659 = new StringBuilder("hideChartKey_args(");
          int tmp1660 = 0;
          if(__isset.p)
          {
            if(0 < tmp1660++) { tmp1659.Append(", "); }
            tmp1659.Append("P: ");
            P.ToString(tmp1659);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1660++) { tmp1659.Append(", "); }
            tmp1659.Append("ChartID: ");
            ChartID.ToString(tmp1659);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1660++) { tmp1659.Append(", "); }
            tmp1659.Append("Key: ");
            Key.ToString(tmp1659);
          }
          if(__isset.hidden)
          {
            if(0 < tmp1660++) { tmp1659.Append(", "); }
            tmp1659.Append("Hidden: ");
            Hidden.ToString(tmp1659);
          }
          if(__isset.right)
          {
            if(0 < tmp1660++) { tmp1659.Append(", "); }
            tmp1659.Append("Right: ");
            Right.ToString(tmp1659);
          }
          tmp1659.Append(')');
          return tmp1659.ToString();
        }
      }


      public partial class hideChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public hideChartKey_result()
        {
        }

        public hideChartKey_result DeepCopy()
        {
          var tmp1661 = new hideChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1661.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1661.__isset.e = this.__isset.e;
          return tmp1661;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1662 = new TStruct("hideChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1662, cancellationToken);
            var tmp1663 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1663.Name = "E";
                tmp1663.Type = TType.Struct;
                tmp1663.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1663, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is hideChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1664 = new StringBuilder("hideChartKey_result(");
          int tmp1665 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1665++) { tmp1664.Append(", "); }
            tmp1664.Append("E: ");
            E.ToString(tmp1664);
          }
          tmp1664.Append(')');
          return tmp1664.ToString();
        }
      }


      public partial class appendChartPoints_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private List<global::Yaskawa.Ext.API.DataPoint> _points;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public List<global::Yaskawa.Ext.API.DataPoint> Points
        {
          get
          {
            return _points;
          }
          set
          {
            __isset.points = true;
            this._points = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool points;
          public bool right;
        }

        public appendChartPoints_args()
        {
        }

        public appendChartPoints_args DeepCopy()
        {
          var tmp1666 = new appendChartPoints_args();
          if(__isset.p)
          {
            tmp1666.P = this.P;
          }
          tmp1666.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1666.ChartID = this.ChartID;
          }
          tmp1666.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1666.Key = this.Key;
          }
          tmp1666.__isset.key = this.__isset.key;
          if((Points != null) && __isset.points)
          {
            tmp1666.Points = this.Points.DeepCopy();
          }
          tmp1666.__isset.points = this.__isset.points;
          if(__isset.right)
          {
            tmp1666.Right = this.Right;
          }
          tmp1666.__isset.right = this.__isset.right;
          return tmp1666;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1667 = await iprot.ReadListBeginAsync(cancellationToken);
                      Points = new List<global::Yaskawa.Ext.API.DataPoint>(_list1667.Count);
                      for(int _i1668 = 0; _i1668 < _list1667.Count; ++_i1668)
                      {
                        global::Yaskawa.Ext.API.DataPoint _elem1669;
                        _elem1669 = new global::Yaskawa.Ext.API.DataPoint();
                        await _elem1669.ReadAsync(iprot, cancellationToken);
                        Points.Add(_elem1669);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1670 = new TStruct("appendChartPoints_args");
            await oprot.WriteStructBeginAsync(tmp1670, cancellationToken);
            var tmp1671 = new TField();
            if(__isset.p)
            {
              tmp1671.Name = "p";
              tmp1671.Type = TType.I64;
              tmp1671.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1671, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1671.Name = "chartID";
              tmp1671.Type = TType.String;
              tmp1671.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1671, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1671.Name = "key";
              tmp1671.Type = TType.String;
              tmp1671.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1671, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Points != null) && __isset.points)
            {
              tmp1671.Name = "points";
              tmp1671.Type = TType.List;
              tmp1671.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1671, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Points.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.DataPoint _iter1672 in Points)
              {
                await _iter1672.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1671.Name = "right";
              tmp1671.Type = TType.Bool;
              tmp1671.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1671, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendChartPoints_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.points == other.__isset.points) && ((!__isset.points) || (TCollections.Equals(Points, other.Points))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Points != null) && __isset.points)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Points);
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1673 = new StringBuilder("appendChartPoints_args(");
          int tmp1674 = 0;
          if(__isset.p)
          {
            if(0 < tmp1674++) { tmp1673.Append(", "); }
            tmp1673.Append("P: ");
            P.ToString(tmp1673);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1674++) { tmp1673.Append(", "); }
            tmp1673.Append("ChartID: ");
            ChartID.ToString(tmp1673);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1674++) { tmp1673.Append(", "); }
            tmp1673.Append("Key: ");
            Key.ToString(tmp1673);
          }
          if((Points != null) && __isset.points)
          {
            if(0 < tmp1674++) { tmp1673.Append(", "); }
            tmp1673.Append("Points: ");
            Points.ToString(tmp1673);
          }
          if(__isset.right)
          {
            if(0 < tmp1674++) { tmp1673.Append(", "); }
            tmp1673.Append("Right: ");
            Right.ToString(tmp1673);
          }
          tmp1673.Append(')');
          return tmp1673.ToString();
        }
      }


      public partial class incrementChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private double _val;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public double Val
        {
          get
          {
            return _val;
          }
          set
          {
            __isset.val = true;
            this._val = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool val;
        }

        public incrementChartKey_args()
        {
        }

        public incrementChartKey_args DeepCopy()
        {
          var tmp1675 = new incrementChartKey_args();
          if(__isset.p)
          {
            tmp1675.P = this.P;
          }
          tmp1675.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1675.ChartID = this.ChartID;
          }
          tmp1675.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1675.Key = this.Key;
          }
          tmp1675.__isset.key = this.__isset.key;
          if(__isset.val)
          {
            tmp1675.Val = this.Val;
          }
          tmp1675.__isset.val = this.__isset.val;
          return tmp1675;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Double)
                  {
                    Val = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1676 = new TStruct("incrementChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1676, cancellationToken);
            var tmp1677 = new TField();
            if(__isset.p)
            {
              tmp1677.Name = "p";
              tmp1677.Type = TType.I64;
              tmp1677.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1677, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1677.Name = "chartID";
              tmp1677.Type = TType.String;
              tmp1677.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1677, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1677.Name = "key";
              tmp1677.Type = TType.String;
              tmp1677.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1677, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.val)
            {
              tmp1677.Name = "val";
              tmp1677.Type = TType.Double;
              tmp1677.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1677, cancellationToken);
              await oprot.WriteDoubleAsync(Val, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is incrementChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.val == other.__isset.val) && ((!__isset.val) || (global::System.Object.Equals(Val, other.Val))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.val)
            {
              hashcode = (hashcode * 397) + Val.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1678 = new StringBuilder("incrementChartKey_args(");
          int tmp1679 = 0;
          if(__isset.p)
          {
            if(0 < tmp1679++) { tmp1678.Append(", "); }
            tmp1678.Append("P: ");
            P.ToString(tmp1678);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1679++) { tmp1678.Append(", "); }
            tmp1678.Append("ChartID: ");
            ChartID.ToString(tmp1678);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1679++) { tmp1678.Append(", "); }
            tmp1678.Append("Key: ");
            Key.ToString(tmp1678);
          }
          if(__isset.val)
          {
            if(0 < tmp1679++) { tmp1678.Append(", "); }
            tmp1678.Append("Val: ");
            Val.ToString(tmp1678);
          }
          tmp1678.Append(')');
          return tmp1678.ToString();
        }
      }


      public partial class incrementChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public incrementChartKey_result()
        {
        }

        public incrementChartKey_result DeepCopy()
        {
          var tmp1680 = new incrementChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1680.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1680.__isset.e = this.__isset.e;
          return tmp1680;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1681 = new TStruct("incrementChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1681, cancellationToken);
            var tmp1682 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1682.Name = "E";
                tmp1682.Type = TType.Struct;
                tmp1682.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1682, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is incrementChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1683 = new StringBuilder("incrementChartKey_result(");
          int tmp1684 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1684++) { tmp1683.Append(", "); }
            tmp1683.Append("E: ");
            E.ToString(tmp1683);
          }
          tmp1683.Append(')');
          return tmp1683.ToString();
        }
      }


      public partial class exportChartImage_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool imageFileName;
        }

        public exportChartImage_args()
        {
        }

        public exportChartImage_args DeepCopy()
        {
          var tmp1685 = new exportChartImage_args();
          if(__isset.p)
          {
            tmp1685.P = this.P;
          }
          tmp1685.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1685.ChartID = this.ChartID;
          }
          tmp1685.__isset.chartID = this.__isset.chartID;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1685.ImageFileName = this.ImageFileName;
          }
          tmp1685.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1685;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1686 = new TStruct("exportChartImage_args");
            await oprot.WriteStructBeginAsync(tmp1686, cancellationToken);
            var tmp1687 = new TField();
            if(__isset.p)
            {
              tmp1687.Name = "p";
              tmp1687.Type = TType.I64;
              tmp1687.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1687, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1687.Name = "chartID";
              tmp1687.Type = TType.String;
              tmp1687.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1687, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1687.Name = "imageFileName";
              tmp1687.Type = TType.String;
              tmp1687.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1687, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1688 = new StringBuilder("exportChartImage_args(");
          int tmp1689 = 0;
          if(__isset.p)
          {
            if(0 < tmp1689++) { tmp1688.Append(", "); }
            tmp1688.Append("P: ");
            P.ToString(tmp1688);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1689++) { tmp1688.Append(", "); }
            tmp1688.Append("ChartID: ");
            ChartID.ToString(tmp1688);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1689++) { tmp1688.Append(", "); }
            tmp1688.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1688);
          }
          tmp1688.Append(')');
          return tmp1688.ToString();
        }
      }


      public partial class exportChartImage_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public exportChartImage_result()
        {
        }

        public exportChartImage_result DeepCopy()
        {
          var tmp1690 = new exportChartImage_result();
          if((Success != null) && __isset.success)
          {
            tmp1690.Success = this.Success;
          }
          tmp1690.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1690.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1690.__isset.e = this.__isset.e;
          return tmp1690;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1691 = new TStruct("exportChartImage_result");
            await oprot.WriteStructBeginAsync(tmp1691, cancellationToken);
            var tmp1692 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1692.Name = "Success";
                tmp1692.Type = TType.String;
                tmp1692.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1692, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1692.Name = "E";
                tmp1692.Type = TType.Struct;
                tmp1692.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1692, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1693 = new StringBuilder("exportChartImage_result(");
          int tmp1694 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1694++) { tmp1693.Append(", "); }
            tmp1693.Append("Success: ");
            Success.ToString(tmp1693);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1694++) { tmp1693.Append(", "); }
            tmp1693.Append("E: ");
            E.ToString(tmp1693);
          }
          tmp1693.Append(')');
          return tmp1693.ToString();
        }
      }


      public partial class exportChartImageData_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool imageFileName;
        }

        public exportChartImageData_args()
        {
        }

        public exportChartImageData_args DeepCopy()
        {
          var tmp1695 = new exportChartImageData_args();
          if(__isset.p)
          {
            tmp1695.P = this.P;
          }
          tmp1695.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1695.ChartID = this.ChartID;
          }
          tmp1695.__isset.chartID = this.__isset.chartID;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1695.ImageFileName = this.ImageFileName;
          }
          tmp1695.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1695;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1696 = new TStruct("exportChartImageData_args");
            await oprot.WriteStructBeginAsync(tmp1696, cancellationToken);
            var tmp1697 = new TField();
            if(__isset.p)
            {
              tmp1697.Name = "p";
              tmp1697.Type = TType.I64;
              tmp1697.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1697, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1697.Name = "chartID";
              tmp1697.Type = TType.String;
              tmp1697.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1697, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1697.Name = "imageFileName";
              tmp1697.Type = TType.String;
              tmp1697.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1697, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImageData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1698 = new StringBuilder("exportChartImageData_args(");
          int tmp1699 = 0;
          if(__isset.p)
          {
            if(0 < tmp1699++) { tmp1698.Append(", "); }
            tmp1698.Append("P: ");
            P.ToString(tmp1698);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1699++) { tmp1698.Append(", "); }
            tmp1698.Append("ChartID: ");
            ChartID.ToString(tmp1698);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1699++) { tmp1698.Append(", "); }
            tmp1698.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1698);
          }
          tmp1698.Append(')');
          return tmp1698.ToString();
        }
      }


      public partial class exportChartImageData_result : TBase
      {
        private byte[] _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public exportChartImageData_result()
        {
        }

        public exportChartImageData_result DeepCopy()
        {
          var tmp1700 = new exportChartImageData_result();
          if((Success != null) && __isset.success)
          {
            tmp1700.Success = this.Success.ToArray();
          }
          tmp1700.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1700.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1700.__isset.e = this.__isset.e;
          return tmp1700;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1701 = new TStruct("exportChartImageData_result");
            await oprot.WriteStructBeginAsync(tmp1701, cancellationToken);
            var tmp1702 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1702.Name = "Success";
                tmp1702.Type = TType.String;
                tmp1702.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1702, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1702.Name = "E";
                tmp1702.Type = TType.Struct;
                tmp1702.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1702, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImageData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1703 = new StringBuilder("exportChartImageData_result(");
          int tmp1704 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1704++) { tmp1703.Append(", "); }
            tmp1703.Append("Success: ");
            Success.ToString(tmp1703);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1704++) { tmp1703.Append(", "); }
            tmp1703.Append("E: ");
            E.ToString(tmp1703);
          }
          tmp1703.Append(')');
          return tmp1703.ToString();
        }
      }


      public partial class notice_args : TBase
      {
        private long _p;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool message;
          public bool log;
        }

        public notice_args()
        {
        }

        public notice_args DeepCopy()
        {
          var tmp1705 = new notice_args();
          if(__isset.p)
          {
            tmp1705.P = this.P;
          }
          tmp1705.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1705.Title = this.Title;
          }
          tmp1705.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1705.Message = this.Message;
          }
          tmp1705.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1705.Log = this.Log;
          }
          tmp1705.__isset.log = this.__isset.log;
          return tmp1705;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1706 = new TStruct("notice_args");
            await oprot.WriteStructBeginAsync(tmp1706, cancellationToken);
            var tmp1707 = new TField();
            if(__isset.p)
            {
              tmp1707.Name = "p";
              tmp1707.Type = TType.I64;
              tmp1707.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1707, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1707.Name = "title";
              tmp1707.Type = TType.String;
              tmp1707.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1707, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1707.Name = "message";
              tmp1707.Type = TType.String;
              tmp1707.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1707, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1707.Name = "log";
              tmp1707.Type = TType.String;
              tmp1707.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1707, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is notice_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1708 = new StringBuilder("notice_args(");
          int tmp1709 = 0;
          if(__isset.p)
          {
            if(0 < tmp1709++) { tmp1708.Append(", "); }
            tmp1708.Append("P: ");
            P.ToString(tmp1708);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1709++) { tmp1708.Append(", "); }
            tmp1708.Append("Title: ");
            Title.ToString(tmp1708);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1709++) { tmp1708.Append(", "); }
            tmp1708.Append("Message: ");
            Message.ToString(tmp1708);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1709++) { tmp1708.Append(", "); }
            tmp1708.Append("Log: ");
            Log.ToString(tmp1708);
          }
          tmp1708.Append(')');
          return tmp1708.ToString();
        }
      }


      public partial class dispNotice_args : TBase
      {
        private long _p;
        private global::Yaskawa.Ext.API.Disposition _disposition;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.Disposition"/>
        /// </summary>
        public global::Yaskawa.Ext.API.Disposition Disposition
        {
          get
          {
            return _disposition;
          }
          set
          {
            __isset.disposition = true;
            this._disposition = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool disposition;
          public bool title;
          public bool message;
          public bool log;
        }

        public dispNotice_args()
        {
        }

        public dispNotice_args DeepCopy()
        {
          var tmp1710 = new dispNotice_args();
          if(__isset.p)
          {
            tmp1710.P = this.P;
          }
          tmp1710.__isset.p = this.__isset.p;
          if(__isset.disposition)
          {
            tmp1710.Disposition = this.Disposition;
          }
          tmp1710.__isset.disposition = this.__isset.disposition;
          if((Title != null) && __isset.title)
          {
            tmp1710.Title = this.Title;
          }
          tmp1710.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1710.Message = this.Message;
          }
          tmp1710.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1710.Log = this.Log;
          }
          tmp1710.__isset.log = this.__isset.log;
          return tmp1710;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Disposition = (global::Yaskawa.Ext.API.Disposition)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1711 = new TStruct("dispNotice_args");
            await oprot.WriteStructBeginAsync(tmp1711, cancellationToken);
            var tmp1712 = new TField();
            if(__isset.p)
            {
              tmp1712.Name = "p";
              tmp1712.Type = TType.I64;
              tmp1712.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1712, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.disposition)
            {
              tmp1712.Name = "disposition";
              tmp1712.Type = TType.I32;
              tmp1712.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1712, cancellationToken);
              await oprot.WriteI32Async((int)Disposition, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1712.Name = "title";
              tmp1712.Type = TType.String;
              tmp1712.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1712, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1712.Name = "message";
              tmp1712.Type = TType.String;
              tmp1712.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1712, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1712.Name = "log";
              tmp1712.Type = TType.String;
              tmp1712.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1712, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dispNotice_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.disposition == other.__isset.disposition) && ((!__isset.disposition) || (global::System.Object.Equals(Disposition, other.Disposition))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if(__isset.disposition)
            {
              hashcode = (hashcode * 397) + Disposition.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1713 = new StringBuilder("dispNotice_args(");
          int tmp1714 = 0;
          if(__isset.p)
          {
            if(0 < tmp1714++) { tmp1713.Append(", "); }
            tmp1713.Append("P: ");
            P.ToString(tmp1713);
          }
          if(__isset.disposition)
          {
            if(0 < tmp1714++) { tmp1713.Append(", "); }
            tmp1713.Append("Disposition: ");
            Disposition.ToString(tmp1713);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1714++) { tmp1713.Append(", "); }
            tmp1713.Append("Title: ");
            Title.ToString(tmp1713);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1714++) { tmp1713.Append(", "); }
            tmp1713.Append("Message: ");
            Message.ToString(tmp1713);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1714++) { tmp1713.Append(", "); }
            tmp1713.Append("Log: ");
            Log.ToString(tmp1713);
          }
          tmp1713.Append(')');
          return tmp1713.ToString();
        }
      }


      public partial class error_args : TBase
      {
        private long _p;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool message;
          public bool log;
        }

        public error_args()
        {
        }

        public error_args DeepCopy()
        {
          var tmp1715 = new error_args();
          if(__isset.p)
          {
            tmp1715.P = this.P;
          }
          tmp1715.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1715.Title = this.Title;
          }
          tmp1715.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1715.Message = this.Message;
          }
          tmp1715.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1715.Log = this.Log;
          }
          tmp1715.__isset.log = this.__isset.log;
          return tmp1715;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1716 = new TStruct("error_args");
            await oprot.WriteStructBeginAsync(tmp1716, cancellationToken);
            var tmp1717 = new TField();
            if(__isset.p)
            {
              tmp1717.Name = "p";
              tmp1717.Type = TType.I64;
              tmp1717.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1717, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1717.Name = "title";
              tmp1717.Type = TType.String;
              tmp1717.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1717, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1717.Name = "message";
              tmp1717.Type = TType.String;
              tmp1717.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1717, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1717.Name = "log";
              tmp1717.Type = TType.String;
              tmp1717.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1717, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is error_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1718 = new StringBuilder("error_args(");
          int tmp1719 = 0;
          if(__isset.p)
          {
            if(0 < tmp1719++) { tmp1718.Append(", "); }
            tmp1718.Append("P: ");
            P.ToString(tmp1718);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1719++) { tmp1718.Append(", "); }
            tmp1718.Append("Title: ");
            Title.ToString(tmp1718);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1719++) { tmp1718.Append(", "); }
            tmp1718.Append("Message: ");
            Message.ToString(tmp1718);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1719++) { tmp1718.Append(", "); }
            tmp1718.Append("Log: ");
            Log.ToString(tmp1718);
          }
          tmp1718.Append(')');
          return tmp1718.ToString();
        }
      }


      public partial class popupDialog_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _title;
        private string _message;
        private string _positiveOption;
        private string _negativeOption;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string PositiveOption
        {
          get
          {
            return _positiveOption;
          }
          set
          {
            __isset.positiveOption = true;
            this._positiveOption = value;
          }
        }

        public string NegativeOption
        {
          get
          {
            return _negativeOption;
          }
          set
          {
            __isset.negativeOption = true;
            this._negativeOption = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool title;
          public bool message;
          public bool positiveOption;
          public bool negativeOption;
        }

        public popupDialog_args()
        {
        }

        public popupDialog_args DeepCopy()
        {
          var tmp1720 = new popupDialog_args();
          if(__isset.p)
          {
            tmp1720.P = this.P;
          }
          tmp1720.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1720.Identifier = this.Identifier;
          }
          tmp1720.__isset.identifier = this.__isset.identifier;
          if((Title != null) && __isset.title)
          {
            tmp1720.Title = this.Title;
          }
          tmp1720.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1720.Message = this.Message;
          }
          tmp1720.__isset.message = this.__isset.message;
          if((PositiveOption != null) && __isset.positiveOption)
          {
            tmp1720.PositiveOption = this.PositiveOption;
          }
          tmp1720.__isset.positiveOption = this.__isset.positiveOption;
          if((NegativeOption != null) && __isset.negativeOption)
          {
            tmp1720.NegativeOption = this.NegativeOption;
          }
          tmp1720.__isset.negativeOption = this.__isset.negativeOption;
          return tmp1720;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    PositiveOption = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    NegativeOption = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1721 = new TStruct("popupDialog_args");
            await oprot.WriteStructBeginAsync(tmp1721, cancellationToken);
            var tmp1722 = new TField();
            if(__isset.p)
            {
              tmp1722.Name = "p";
              tmp1722.Type = TType.I64;
              tmp1722.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1722, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1722.Name = "identifier";
              tmp1722.Type = TType.String;
              tmp1722.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1722, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1722.Name = "title";
              tmp1722.Type = TType.String;
              tmp1722.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1722, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1722.Name = "message";
              tmp1722.Type = TType.String;
              tmp1722.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1722, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PositiveOption != null) && __isset.positiveOption)
            {
              tmp1722.Name = "positiveOption";
              tmp1722.Type = TType.String;
              tmp1722.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1722, cancellationToken);
              await oprot.WriteStringAsync(PositiveOption, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NegativeOption != null) && __isset.negativeOption)
            {
              tmp1722.Name = "negativeOption";
              tmp1722.Type = TType.String;
              tmp1722.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1722, cancellationToken);
              await oprot.WriteStringAsync(NegativeOption, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is popupDialog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.positiveOption == other.__isset.positiveOption) && ((!__isset.positiveOption) || (global::System.Object.Equals(PositiveOption, other.PositiveOption))))
            && ((__isset.negativeOption == other.__isset.negativeOption) && ((!__isset.negativeOption) || (global::System.Object.Equals(NegativeOption, other.NegativeOption))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((PositiveOption != null) && __isset.positiveOption)
            {
              hashcode = (hashcode * 397) + PositiveOption.GetHashCode();
            }
            if((NegativeOption != null) && __isset.negativeOption)
            {
              hashcode = (hashcode * 397) + NegativeOption.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1723 = new StringBuilder("popupDialog_args(");
          int tmp1724 = 0;
          if(__isset.p)
          {
            if(0 < tmp1724++) { tmp1723.Append(", "); }
            tmp1723.Append("P: ");
            P.ToString(tmp1723);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1724++) { tmp1723.Append(", "); }
            tmp1723.Append("Identifier: ");
            Identifier.ToString(tmp1723);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1724++) { tmp1723.Append(", "); }
            tmp1723.Append("Title: ");
            Title.ToString(tmp1723);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1724++) { tmp1723.Append(", "); }
            tmp1723.Append("Message: ");
            Message.ToString(tmp1723);
          }
          if((PositiveOption != null) && __isset.positiveOption)
          {
            if(0 < tmp1724++) { tmp1723.Append(", "); }
            tmp1723.Append("PositiveOption: ");
            PositiveOption.ToString(tmp1723);
          }
          if((NegativeOption != null) && __isset.negativeOption)
          {
            if(0 < tmp1724++) { tmp1723.Append(", "); }
            tmp1723.Append("NegativeOption: ");
            NegativeOption.ToString(tmp1723);
          }
          tmp1723.Append(')');
          return tmp1723.ToString();
        }
      }


      public partial class popupDialog_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public popupDialog_result()
        {
        }

        public popupDialog_result DeepCopy()
        {
          var tmp1725 = new popupDialog_result();
          if((E != null) && __isset.e)
          {
            tmp1725.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1725.__isset.e = this.__isset.e;
          return tmp1725;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1726 = new TStruct("popupDialog_result");
            await oprot.WriteStructBeginAsync(tmp1726, cancellationToken);
            var tmp1727 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1727.Name = "E";
                tmp1727.Type = TType.Struct;
                tmp1727.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1727, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is popupDialog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1728 = new StringBuilder("popupDialog_result(");
          int tmp1729 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1729++) { tmp1728.Append(", "); }
            tmp1728.Append("E: ");
            E.ToString(tmp1728);
          }
          tmp1728.Append(')');
          return tmp1728.ToString();
        }
      }


      public partial class cancelPopupDialog_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public cancelPopupDialog_args()
        {
        }

        public cancelPopupDialog_args DeepCopy()
        {
          var tmp1730 = new cancelPopupDialog_args();
          if(__isset.p)
          {
            tmp1730.P = this.P;
          }
          tmp1730.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1730.Identifier = this.Identifier;
          }
          tmp1730.__isset.identifier = this.__isset.identifier;
          return tmp1730;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1731 = new TStruct("cancelPopupDialog_args");
            await oprot.WriteStructBeginAsync(tmp1731, cancellationToken);
            var tmp1732 = new TField();
            if(__isset.p)
            {
              tmp1732.Name = "p";
              tmp1732.Type = TType.I64;
              tmp1732.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1732, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1732.Name = "identifier";
              tmp1732.Type = TType.String;
              tmp1732.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1732, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelPopupDialog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1733 = new StringBuilder("cancelPopupDialog_args(");
          int tmp1734 = 0;
          if(__isset.p)
          {
            if(0 < tmp1734++) { tmp1733.Append(", "); }
            tmp1733.Append("P: ");
            P.ToString(tmp1733);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1734++) { tmp1733.Append(", "); }
            tmp1733.Append("Identifier: ");
            Identifier.ToString(tmp1733);
          }
          tmp1733.Append(')');
          return tmp1733.ToString();
        }
      }


      public partial class cancelPopupDialog_result : TBase
      {

        public cancelPopupDialog_result()
        {
        }

        public cancelPopupDialog_result DeepCopy()
        {
          var tmp1735 = new cancelPopupDialog_result();
          return tmp1735;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1736 = new TStruct("cancelPopupDialog_result");
            await oprot.WriteStructBeginAsync(tmp1736, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelPopupDialog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1737 = new StringBuilder("cancelPopupDialog_result(");
          tmp1737.Append(')');
          return tmp1737.ToString();
        }
      }


      public partial class insertInstructionAtSelectedLine_args : TBase
      {
        private long _p;
        private string _instruction;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Instruction
        {
          get
          {
            return _instruction;
          }
          set
          {
            __isset.instruction = true;
            this._instruction = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool instruction;
        }

        public insertInstructionAtSelectedLine_args()
        {
        }

        public insertInstructionAtSelectedLine_args DeepCopy()
        {
          var tmp1739 = new insertInstructionAtSelectedLine_args();
          if(__isset.p)
          {
            tmp1739.P = this.P;
          }
          tmp1739.__isset.p = this.__isset.p;
          if((Instruction != null) && __isset.instruction)
          {
            tmp1739.Instruction = this.Instruction;
          }
          tmp1739.__isset.instruction = this.__isset.instruction;
          return tmp1739;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Instruction = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1740 = new TStruct("insertInstructionAtSelectedLine_args");
            await oprot.WriteStructBeginAsync(tmp1740, cancellationToken);
            var tmp1741 = new TField();
            if(__isset.p)
            {
              tmp1741.Name = "p";
              tmp1741.Type = TType.I64;
              tmp1741.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1741, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Instruction != null) && __isset.instruction)
            {
              tmp1741.Name = "instruction";
              tmp1741.Type = TType.String;
              tmp1741.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1741, cancellationToken);
              await oprot.WriteStringAsync(Instruction, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertInstructionAtSelectedLine_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.instruction == other.__isset.instruction) && ((!__isset.instruction) || (global::System.Object.Equals(Instruction, other.Instruction))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Instruction != null) && __isset.instruction)
            {
              hashcode = (hashcode * 397) + Instruction.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1742 = new StringBuilder("insertInstructionAtSelectedLine_args(");
          int tmp1743 = 0;
          if(__isset.p)
          {
            if(0 < tmp1743++) { tmp1742.Append(", "); }
            tmp1742.Append("P: ");
            P.ToString(tmp1742);
          }
          if((Instruction != null) && __isset.instruction)
          {
            if(0 < tmp1743++) { tmp1742.Append(", "); }
            tmp1742.Append("Instruction: ");
            Instruction.ToString(tmp1742);
          }
          tmp1742.Append(')');
          return tmp1742.ToString();
        }
      }


      public partial class insertInstructionAtSelectedLine_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public insertInstructionAtSelectedLine_result()
        {
        }

        public insertInstructionAtSelectedLine_result DeepCopy()
        {
          var tmp1744 = new insertInstructionAtSelectedLine_result();
          if((Success != null) && __isset.success)
          {
            tmp1744.Success = this.Success;
          }
          tmp1744.__isset.success = this.__isset.success;
          return tmp1744;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1745 = new TStruct("insertInstructionAtSelectedLine_result");
            await oprot.WriteStructBeginAsync(tmp1745, cancellationToken);
            var tmp1746 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1746.Name = "Success";
                tmp1746.Type = TType.String;
                tmp1746.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1746, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertInstructionAtSelectedLine_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1747 = new StringBuilder("insertInstructionAtSelectedLine_result(");
          int tmp1748 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1748++) { tmp1747.Append(", "); }
            tmp1747.Append("Success: ");
            Success.ToString(tmp1747);
          }
          tmp1747.Append(')');
          return tmp1747.ToString();
        }
      }


      public partial class displayScreen_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public displayScreen_args()
        {
        }

        public displayScreen_args DeepCopy()
        {
          var tmp1749 = new displayScreen_args();
          if(__isset.p)
          {
            tmp1749.P = this.P;
          }
          tmp1749.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1749.Identifier = this.Identifier;
          }
          tmp1749.__isset.identifier = this.__isset.identifier;
          return tmp1749;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1750 = new TStruct("displayScreen_args");
            await oprot.WriteStructBeginAsync(tmp1750, cancellationToken);
            var tmp1751 = new TField();
            if(__isset.p)
            {
              tmp1751.Name = "p";
              tmp1751.Type = TType.I64;
              tmp1751.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1751, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1751.Name = "identifier";
              tmp1751.Type = TType.String;
              tmp1751.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1751, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayScreen_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1752 = new StringBuilder("displayScreen_args(");
          int tmp1753 = 0;
          if(__isset.p)
          {
            if(0 < tmp1753++) { tmp1752.Append(", "); }
            tmp1752.Append("P: ");
            P.ToString(tmp1752);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1753++) { tmp1752.Append(", "); }
            tmp1752.Append("Identifier: ");
            Identifier.ToString(tmp1752);
          }
          tmp1752.Append(')');
          return tmp1752.ToString();
        }
      }


      public partial class displayScreen_result : TBase
      {

        public displayScreen_result()
        {
        }

        public displayScreen_result DeepCopy()
        {
          var tmp1754 = new displayScreen_result();
          return tmp1754;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1755 = new TStruct("displayScreen_result");
            await oprot.WriteStructBeginAsync(tmp1755, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayScreen_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1756 = new StringBuilder("displayScreen_result(");
          tmp1756.Append(')');
          return tmp1756.ToString();
        }
      }


      public partial class displayHelp_args : TBase
      {
        private long _p;
        private string _title;
        private string _htmlContentFile;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string HtmlContentFile
        {
          get
          {
            return _htmlContentFile;
          }
          set
          {
            __isset.htmlContentFile = true;
            this._htmlContentFile = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool htmlContentFile;
        }

        public displayHelp_args()
        {
        }

        public displayHelp_args DeepCopy()
        {
          var tmp1758 = new displayHelp_args();
          if(__isset.p)
          {
            tmp1758.P = this.P;
          }
          tmp1758.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1758.Title = this.Title;
          }
          tmp1758.__isset.title = this.__isset.title;
          if((HtmlContentFile != null) && __isset.htmlContentFile)
          {
            tmp1758.HtmlContentFile = this.HtmlContentFile;
          }
          tmp1758.__isset.htmlContentFile = this.__isset.htmlContentFile;
          return tmp1758;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    HtmlContentFile = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1759 = new TStruct("displayHelp_args");
            await oprot.WriteStructBeginAsync(tmp1759, cancellationToken);
            var tmp1760 = new TField();
            if(__isset.p)
            {
              tmp1760.Name = "p";
              tmp1760.Type = TType.I64;
              tmp1760.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1760, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1760.Name = "title";
              tmp1760.Type = TType.String;
              tmp1760.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1760, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlContentFile != null) && __isset.htmlContentFile)
            {
              tmp1760.Name = "htmlContentFile";
              tmp1760.Type = TType.String;
              tmp1760.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1760, cancellationToken);
              await oprot.WriteStringAsync(HtmlContentFile, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayHelp_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.htmlContentFile == other.__isset.htmlContentFile) && ((!__isset.htmlContentFile) || (global::System.Object.Equals(HtmlContentFile, other.HtmlContentFile))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((HtmlContentFile != null) && __isset.htmlContentFile)
            {
              hashcode = (hashcode * 397) + HtmlContentFile.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1761 = new StringBuilder("displayHelp_args(");
          int tmp1762 = 0;
          if(__isset.p)
          {
            if(0 < tmp1762++) { tmp1761.Append(", "); }
            tmp1761.Append("P: ");
            P.ToString(tmp1761);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1762++) { tmp1761.Append(", "); }
            tmp1761.Append("Title: ");
            Title.ToString(tmp1761);
          }
          if((HtmlContentFile != null) && __isset.htmlContentFile)
          {
            if(0 < tmp1762++) { tmp1761.Append(", "); }
            tmp1761.Append("HtmlContentFile: ");
            HtmlContentFile.ToString(tmp1761);
          }
          tmp1761.Append(')');
          return tmp1761.ToString();
        }
      }


      public partial class displayHelp_result : TBase
      {

        public displayHelp_result()
        {
        }

        public displayHelp_result DeepCopy()
        {
          var tmp1763 = new displayHelp_result();
          return tmp1763;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1764 = new TStruct("displayHelp_result");
            await oprot.WriteStructBeginAsync(tmp1764, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayHelp_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1765 = new StringBuilder("displayHelp_result(");
          tmp1765.Append(')');
          return tmp1765.ToString();
        }
      }


      public partial class accessLevel_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public accessLevel_args()
        {
        }

        public accessLevel_args DeepCopy()
        {
          var tmp1767 = new accessLevel_args();
          if(__isset.p)
          {
            tmp1767.P = this.P;
          }
          tmp1767.__isset.p = this.__isset.p;
          return tmp1767;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1768 = new TStruct("accessLevel_args");
            await oprot.WriteStructBeginAsync(tmp1768, cancellationToken);
            var tmp1769 = new TField();
            if(__isset.p)
            {
              tmp1769.Name = "p";
              tmp1769.Type = TType.I64;
              tmp1769.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1769, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is accessLevel_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1770 = new StringBuilder("accessLevel_args(");
          int tmp1771 = 0;
          if(__isset.p)
          {
            if(0 < tmp1771++) { tmp1770.Append(", "); }
            tmp1770.Append("P: ");
            P.ToString(tmp1770);
          }
          tmp1770.Append(')');
          return tmp1770.ToString();
        }
      }


      public partial class accessLevel_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public accessLevel_result()
        {
        }

        public accessLevel_result DeepCopy()
        {
          var tmp1772 = new accessLevel_result();
          if((Success != null) && __isset.success)
          {
            tmp1772.Success = this.Success;
          }
          tmp1772.__isset.success = this.__isset.success;
          return tmp1772;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1773 = new TStruct("accessLevel_result");
            await oprot.WriteStructBeginAsync(tmp1773, cancellationToken);
            var tmp1774 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1774.Name = "Success";
                tmp1774.Type = TType.String;
                tmp1774.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1774, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is accessLevel_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1775 = new StringBuilder("accessLevel_result(");
          int tmp1776 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1776++) { tmp1775.Append(", "); }
            tmp1775.Append("Success: ");
            Success.ToString(tmp1775);
          }
          tmp1775.Append(')');
          return tmp1775.ToString();
        }
      }


      public partial class accessLevelIncludes_args : TBase
      {
        private long _p;
        private string _level;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Level
        {
          get
          {
            return _level;
          }
          set
          {
            __isset.level = true;
            this._level = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool level;
        }

        public accessLevelIncludes_args()
        {
        }

        public accessLevelIncludes_args DeepCopy()
        {
          var tmp1777 = new accessLevelIncludes_args();
          if(__isset.p)
          {
            tmp1777.P = this.P;
          }
          tmp1777.__isset.p = this.__isset.p;
          if((Level != null) && __isset.level)
          {
            tmp1777.Level = this.Level;
          }
          tmp1777.__isset.level = this.__isset.level;
          return tmp1777;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Level = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1778 = new TStruct("accessLevelIncludes_args");
            await oprot.WriteStructBeginAsync(tmp1778, cancellationToken);
            var tmp1779 = new TField();
            if(__isset.p)
            {
              tmp1779.Name = "p";
              tmp1779.Type = TType.I64;
              tmp1779.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1779, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Level != null) && __isset.level)
            {
              tmp1779.Name = "level";
              tmp1779.Type = TType.String;
              tmp1779.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1779, cancellationToken);
              await oprot.WriteStringAsync(Level, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is accessLevelIncludes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.level == other.__isset.level) && ((!__isset.level) || (global::System.Object.Equals(Level, other.Level))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Level != null) && __isset.level)
            {
              hashcode = (hashcode * 397) + Level.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1780 = new StringBuilder("accessLevelIncludes_args(");
          int tmp1781 = 0;
          if(__isset.p)
          {
            if(0 < tmp1781++) { tmp1780.Append(", "); }
            tmp1780.Append("P: ");
            P.ToString(tmp1780);
          }
          if((Level != null) && __isset.level)
          {
            if(0 < tmp1781++) { tmp1780.Append(", "); }
            tmp1780.Append("Level: ");
            Level.ToString(tmp1780);
          }
          tmp1780.Append(')');
          return tmp1780.ToString();
        }
      }


      public partial class accessLevelIncludes_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public accessLevelIncludes_result()
        {
        }

        public accessLevelIncludes_result DeepCopy()
        {
          var tmp1782 = new accessLevelIncludes_result();
          if(__isset.success)
          {
            tmp1782.Success = this.Success;
          }
          tmp1782.__isset.success = this.__isset.success;
          return tmp1782;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1783 = new TStruct("accessLevelIncludes_result");
            await oprot.WriteStructBeginAsync(tmp1783, cancellationToken);
            var tmp1784 = new TField();

            if(this.__isset.success)
            {
              tmp1784.Name = "Success";
              tmp1784.Type = TType.Bool;
              tmp1784.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1784, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is accessLevelIncludes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1785 = new StringBuilder("accessLevelIncludes_result(");
          int tmp1786 = 0;
          if(__isset.success)
          {
            if(0 < tmp1786++) { tmp1785.Append(", "); }
            tmp1785.Append("Success: ");
            Success.ToString(tmp1785);
          }
          tmp1785.Append(')');
          return tmp1785.ToString();
        }
      }


      public partial class appendRow_args : TBase
      {
        private long _p;
        private string _ContainerID;
        private Dictionary<string, global::Yaskawa.Ext.API.Any> _dict;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ContainerID
        {
          get
          {
            return _ContainerID;
          }
          set
          {
            __isset.ContainerID = true;
            this._ContainerID = value;
          }
        }

        public Dictionary<string, global::Yaskawa.Ext.API.Any> Dict
        {
          get
          {
            return _dict;
          }
          set
          {
            __isset.dict = true;
            this._dict = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ContainerID;
          public bool dict;
        }

        public appendRow_args()
        {
        }

        public appendRow_args DeepCopy()
        {
          var tmp1787 = new appendRow_args();
          if(__isset.p)
          {
            tmp1787.P = this.P;
          }
          tmp1787.__isset.p = this.__isset.p;
          if((ContainerID != null) && __isset.ContainerID)
          {
            tmp1787.ContainerID = this.ContainerID;
          }
          tmp1787.__isset.ContainerID = this.__isset.ContainerID;
          if((Dict != null) && __isset.dict)
          {
            tmp1787.Dict = this.Dict.DeepCopy();
          }
          tmp1787.__isset.dict = this.__isset.dict;
          return tmp1787;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ContainerID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1788 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Dict = new Dictionary<string, global::Yaskawa.Ext.API.Any>(_map1788.Count);
                      for(int _i1789 = 0; _i1789 < _map1788.Count; ++_i1789)
                      {
                        string _key1790;
                        global::Yaskawa.Ext.API.Any _val1791;
                        _key1790 = await iprot.ReadStringAsync(cancellationToken);
                        _val1791 = new global::Yaskawa.Ext.API.Any();
                        await _val1791.ReadAsync(iprot, cancellationToken);
                        Dict[_key1790] = _val1791;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1792 = new TStruct("appendRow_args");
            await oprot.WriteStructBeginAsync(tmp1792, cancellationToken);
            var tmp1793 = new TField();
            if(__isset.p)
            {
              tmp1793.Name = "p";
              tmp1793.Type = TType.I64;
              tmp1793.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1793, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              tmp1793.Name = "ContainerID";
              tmp1793.Type = TType.String;
              tmp1793.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1793, cancellationToken);
              await oprot.WriteStringAsync(ContainerID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Dict != null) && __isset.dict)
            {
              tmp1793.Name = "dict";
              tmp1793.Type = TType.Map;
              tmp1793.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1793, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Dict.Count), cancellationToken);
              foreach (string _iter1794 in Dict.Keys)
              {
                await oprot.WriteStringAsync(_iter1794, cancellationToken);
                await Dict[_iter1794].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendRow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ContainerID == other.__isset.ContainerID) && ((!__isset.ContainerID) || (global::System.Object.Equals(ContainerID, other.ContainerID))))
            && ((__isset.dict == other.__isset.dict) && ((!__isset.dict) || (TCollections.Equals(Dict, other.Dict))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              hashcode = (hashcode * 397) + ContainerID.GetHashCode();
            }
            if((Dict != null) && __isset.dict)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Dict);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1795 = new StringBuilder("appendRow_args(");
          int tmp1796 = 0;
          if(__isset.p)
          {
            if(0 < tmp1796++) { tmp1795.Append(", "); }
            tmp1795.Append("P: ");
            P.ToString(tmp1795);
          }
          if((ContainerID != null) && __isset.ContainerID)
          {
            if(0 < tmp1796++) { tmp1795.Append(", "); }
            tmp1795.Append("ContainerID: ");
            ContainerID.ToString(tmp1795);
          }
          if((Dict != null) && __isset.dict)
          {
            if(0 < tmp1796++) { tmp1795.Append(", "); }
            tmp1795.Append("Dict: ");
            Dict.ToString(tmp1795);
          }
          tmp1795.Append(')');
          return tmp1795.ToString();
        }
      }


      public partial class appendRow_result : TBase
      {

        public appendRow_result()
        {
        }

        public appendRow_result DeepCopy()
        {
          var tmp1797 = new appendRow_result();
          return tmp1797;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1798 = new TStruct("appendRow_result");
            await oprot.WriteStructBeginAsync(tmp1798, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendRow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1799 = new StringBuilder("appendRow_result(");
          tmp1799.Append(')');
          return tmp1799.ToString();
        }
      }


      public partial class insertRow_args : TBase
      {
        private long _p;
        private string _ContainerID;
        private long _index;
        private Dictionary<string, global::Yaskawa.Ext.API.Any> _dict;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ContainerID
        {
          get
          {
            return _ContainerID;
          }
          set
          {
            __isset.ContainerID = true;
            this._ContainerID = value;
          }
        }

        public long Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public Dictionary<string, global::Yaskawa.Ext.API.Any> Dict
        {
          get
          {
            return _dict;
          }
          set
          {
            __isset.dict = true;
            this._dict = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ContainerID;
          public bool index;
          public bool dict;
        }

        public insertRow_args()
        {
        }

        public insertRow_args DeepCopy()
        {
          var tmp1801 = new insertRow_args();
          if(__isset.p)
          {
            tmp1801.P = this.P;
          }
          tmp1801.__isset.p = this.__isset.p;
          if((ContainerID != null) && __isset.ContainerID)
          {
            tmp1801.ContainerID = this.ContainerID;
          }
          tmp1801.__isset.ContainerID = this.__isset.ContainerID;
          if(__isset.index)
          {
            tmp1801.Index = this.Index;
          }
          tmp1801.__isset.index = this.__isset.index;
          if((Dict != null) && __isset.dict)
          {
            tmp1801.Dict = this.Dict.DeepCopy();
          }
          tmp1801.__isset.dict = this.__isset.dict;
          return tmp1801;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ContainerID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I64)
                  {
                    Index = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1802 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Dict = new Dictionary<string, global::Yaskawa.Ext.API.Any>(_map1802.Count);
                      for(int _i1803 = 0; _i1803 < _map1802.Count; ++_i1803)
                      {
                        string _key1804;
                        global::Yaskawa.Ext.API.Any _val1805;
                        _key1804 = await iprot.ReadStringAsync(cancellationToken);
                        _val1805 = new global::Yaskawa.Ext.API.Any();
                        await _val1805.ReadAsync(iprot, cancellationToken);
                        Dict[_key1804] = _val1805;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1806 = new TStruct("insertRow_args");
            await oprot.WriteStructBeginAsync(tmp1806, cancellationToken);
            var tmp1807 = new TField();
            if(__isset.p)
            {
              tmp1807.Name = "p";
              tmp1807.Type = TType.I64;
              tmp1807.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1807, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              tmp1807.Name = "ContainerID";
              tmp1807.Type = TType.String;
              tmp1807.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1807, cancellationToken);
              await oprot.WriteStringAsync(ContainerID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp1807.Name = "index";
              tmp1807.Type = TType.I64;
              tmp1807.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1807, cancellationToken);
              await oprot.WriteI64Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Dict != null) && __isset.dict)
            {
              tmp1807.Name = "dict";
              tmp1807.Type = TType.Map;
              tmp1807.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1807, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Dict.Count), cancellationToken);
              foreach (string _iter1808 in Dict.Keys)
              {
                await oprot.WriteStringAsync(_iter1808, cancellationToken);
                await Dict[_iter1808].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertRow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ContainerID == other.__isset.ContainerID) && ((!__isset.ContainerID) || (global::System.Object.Equals(ContainerID, other.ContainerID))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.dict == other.__isset.dict) && ((!__isset.dict) || (TCollections.Equals(Dict, other.Dict))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              hashcode = (hashcode * 397) + ContainerID.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if((Dict != null) && __isset.dict)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Dict);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1809 = new StringBuilder("insertRow_args(");
          int tmp1810 = 0;
          if(__isset.p)
          {
            if(0 < tmp1810++) { tmp1809.Append(", "); }
            tmp1809.Append("P: ");
            P.ToString(tmp1809);
          }
          if((ContainerID != null) && __isset.ContainerID)
          {
            if(0 < tmp1810++) { tmp1809.Append(", "); }
            tmp1809.Append("ContainerID: ");
            ContainerID.ToString(tmp1809);
          }
          if(__isset.index)
          {
            if(0 < tmp1810++) { tmp1809.Append(", "); }
            tmp1809.Append("Index: ");
            Index.ToString(tmp1809);
          }
          if((Dict != null) && __isset.dict)
          {
            if(0 < tmp1810++) { tmp1809.Append(", "); }
            tmp1809.Append("Dict: ");
            Dict.ToString(tmp1809);
          }
          tmp1809.Append(')');
          return tmp1809.ToString();
        }
      }


      public partial class insertRow_result : TBase
      {

        public insertRow_result()
        {
        }

        public insertRow_result DeepCopy()
        {
          var tmp1811 = new insertRow_result();
          return tmp1811;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1812 = new TStruct("insertRow_result");
            await oprot.WriteStructBeginAsync(tmp1812, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertRow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1813 = new StringBuilder("insertRow_result(");
          tmp1813.Append(')');
          return tmp1813.ToString();
        }
      }


      public partial class deleteRow_args : TBase
      {
        private long _p;
        private string _ContainerID;
        private long _index;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ContainerID
        {
          get
          {
            return _ContainerID;
          }
          set
          {
            __isset.ContainerID = true;
            this._ContainerID = value;
          }
        }

        public long Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ContainerID;
          public bool index;
        }

        public deleteRow_args()
        {
        }

        public deleteRow_args DeepCopy()
        {
          var tmp1815 = new deleteRow_args();
          if(__isset.p)
          {
            tmp1815.P = this.P;
          }
          tmp1815.__isset.p = this.__isset.p;
          if((ContainerID != null) && __isset.ContainerID)
          {
            tmp1815.ContainerID = this.ContainerID;
          }
          tmp1815.__isset.ContainerID = this.__isset.ContainerID;
          if(__isset.index)
          {
            tmp1815.Index = this.Index;
          }
          tmp1815.__isset.index = this.__isset.index;
          return tmp1815;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ContainerID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I64)
                  {
                    Index = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1816 = new TStruct("deleteRow_args");
            await oprot.WriteStructBeginAsync(tmp1816, cancellationToken);
            var tmp1817 = new TField();
            if(__isset.p)
            {
              tmp1817.Name = "p";
              tmp1817.Type = TType.I64;
              tmp1817.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1817, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              tmp1817.Name = "ContainerID";
              tmp1817.Type = TType.String;
              tmp1817.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1817, cancellationToken);
              await oprot.WriteStringAsync(ContainerID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp1817.Name = "index";
              tmp1817.Type = TType.I64;
              tmp1817.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1817, cancellationToken);
              await oprot.WriteI64Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteRow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ContainerID == other.__isset.ContainerID) && ((!__isset.ContainerID) || (global::System.Object.Equals(ContainerID, other.ContainerID))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              hashcode = (hashcode * 397) + ContainerID.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1818 = new StringBuilder("deleteRow_args(");
          int tmp1819 = 0;
          if(__isset.p)
          {
            if(0 < tmp1819++) { tmp1818.Append(", "); }
            tmp1818.Append("P: ");
            P.ToString(tmp1818);
          }
          if((ContainerID != null) && __isset.ContainerID)
          {
            if(0 < tmp1819++) { tmp1818.Append(", "); }
            tmp1818.Append("ContainerID: ");
            ContainerID.ToString(tmp1818);
          }
          if(__isset.index)
          {
            if(0 < tmp1819++) { tmp1818.Append(", "); }
            tmp1818.Append("Index: ");
            Index.ToString(tmp1818);
          }
          tmp1818.Append(')');
          return tmp1818.ToString();
        }
      }


      public partial class deleteRow_result : TBase
      {

        public deleteRow_result()
        {
        }

        public deleteRow_result DeepCopy()
        {
          var tmp1820 = new deleteRow_result();
          return tmp1820;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1821 = new TStruct("deleteRow_result");
            await oprot.WriteStructBeginAsync(tmp1821, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteRow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1822 = new StringBuilder("deleteRow_result(");
          tmp1822.Append(')');
          return tmp1822.ToString();
        }
      }


      public partial class clearRows_args : TBase
      {
        private long _p;
        private string _ContainerID;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ContainerID
        {
          get
          {
            return _ContainerID;
          }
          set
          {
            __isset.ContainerID = true;
            this._ContainerID = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ContainerID;
        }

        public clearRows_args()
        {
        }

        public clearRows_args DeepCopy()
        {
          var tmp1824 = new clearRows_args();
          if(__isset.p)
          {
            tmp1824.P = this.P;
          }
          tmp1824.__isset.p = this.__isset.p;
          if((ContainerID != null) && __isset.ContainerID)
          {
            tmp1824.ContainerID = this.ContainerID;
          }
          tmp1824.__isset.ContainerID = this.__isset.ContainerID;
          return tmp1824;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ContainerID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1825 = new TStruct("clearRows_args");
            await oprot.WriteStructBeginAsync(tmp1825, cancellationToken);
            var tmp1826 = new TField();
            if(__isset.p)
            {
              tmp1826.Name = "p";
              tmp1826.Type = TType.I64;
              tmp1826.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1826, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              tmp1826.Name = "ContainerID";
              tmp1826.Type = TType.String;
              tmp1826.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1826, cancellationToken);
              await oprot.WriteStringAsync(ContainerID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is clearRows_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ContainerID == other.__isset.ContainerID) && ((!__isset.ContainerID) || (global::System.Object.Equals(ContainerID, other.ContainerID))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              hashcode = (hashcode * 397) + ContainerID.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1827 = new StringBuilder("clearRows_args(");
          int tmp1828 = 0;
          if(__isset.p)
          {
            if(0 < tmp1828++) { tmp1827.Append(", "); }
            tmp1827.Append("P: ");
            P.ToString(tmp1827);
          }
          if((ContainerID != null) && __isset.ContainerID)
          {
            if(0 < tmp1828++) { tmp1827.Append(", "); }
            tmp1827.Append("ContainerID: ");
            ContainerID.ToString(tmp1827);
          }
          tmp1827.Append(')');
          return tmp1827.ToString();
        }
      }


      public partial class clearRows_result : TBase
      {

        public clearRows_result()
        {
        }

        public clearRows_result DeepCopy()
        {
          var tmp1829 = new clearRows_result();
          return tmp1829;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1830 = new TStruct("clearRows_result");
            await oprot.WriteStructBeginAsync(tmp1830, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is clearRows_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1831 = new StringBuilder("clearRows_result(");
          tmp1831.Append(')');
          return tmp1831.ToString();
        }
      }


      public partial class appendRows_args : TBase
      {
        private long _p;
        private string _ContainerID;
        private List<global::Yaskawa.Ext.API.Any> _dicts;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ContainerID
        {
          get
          {
            return _ContainerID;
          }
          set
          {
            __isset.ContainerID = true;
            this._ContainerID = value;
          }
        }

        public List<global::Yaskawa.Ext.API.Any> Dicts
        {
          get
          {
            return _dicts;
          }
          set
          {
            __isset.dicts = true;
            this._dicts = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ContainerID;
          public bool dicts;
        }

        public appendRows_args()
        {
        }

        public appendRows_args DeepCopy()
        {
          var tmp1833 = new appendRows_args();
          if(__isset.p)
          {
            tmp1833.P = this.P;
          }
          tmp1833.__isset.p = this.__isset.p;
          if((ContainerID != null) && __isset.ContainerID)
          {
            tmp1833.ContainerID = this.ContainerID;
          }
          tmp1833.__isset.ContainerID = this.__isset.ContainerID;
          if((Dicts != null) && __isset.dicts)
          {
            tmp1833.Dicts = this.Dicts.DeepCopy();
          }
          tmp1833.__isset.dicts = this.__isset.dicts;
          return tmp1833;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ContainerID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1834 = await iprot.ReadListBeginAsync(cancellationToken);
                      Dicts = new List<global::Yaskawa.Ext.API.Any>(_list1834.Count);
                      for(int _i1835 = 0; _i1835 < _list1834.Count; ++_i1835)
                      {
                        global::Yaskawa.Ext.API.Any _elem1836;
                        _elem1836 = new global::Yaskawa.Ext.API.Any();
                        await _elem1836.ReadAsync(iprot, cancellationToken);
                        Dicts.Add(_elem1836);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1837 = new TStruct("appendRows_args");
            await oprot.WriteStructBeginAsync(tmp1837, cancellationToken);
            var tmp1838 = new TField();
            if(__isset.p)
            {
              tmp1838.Name = "p";
              tmp1838.Type = TType.I64;
              tmp1838.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1838, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              tmp1838.Name = "ContainerID";
              tmp1838.Type = TType.String;
              tmp1838.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1838, cancellationToken);
              await oprot.WriteStringAsync(ContainerID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Dicts != null) && __isset.dicts)
            {
              tmp1838.Name = "dicts";
              tmp1838.Type = TType.List;
              tmp1838.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1838, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Dicts.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.Any _iter1839 in Dicts)
              {
                await _iter1839.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendRows_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ContainerID == other.__isset.ContainerID) && ((!__isset.ContainerID) || (global::System.Object.Equals(ContainerID, other.ContainerID))))
            && ((__isset.dicts == other.__isset.dicts) && ((!__isset.dicts) || (TCollections.Equals(Dicts, other.Dicts))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ContainerID != null) && __isset.ContainerID)
            {
              hashcode = (hashcode * 397) + ContainerID.GetHashCode();
            }
            if((Dicts != null) && __isset.dicts)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Dicts);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1840 = new StringBuilder("appendRows_args(");
          int tmp1841 = 0;
          if(__isset.p)
          {
            if(0 < tmp1841++) { tmp1840.Append(", "); }
            tmp1840.Append("P: ");
            P.ToString(tmp1840);
          }
          if((ContainerID != null) && __isset.ContainerID)
          {
            if(0 < tmp1841++) { tmp1840.Append(", "); }
            tmp1840.Append("ContainerID: ");
            ContainerID.ToString(tmp1840);
          }
          if((Dicts != null) && __isset.dicts)
          {
            if(0 < tmp1841++) { tmp1840.Append(", "); }
            tmp1840.Append("Dicts: ");
            Dicts.ToString(tmp1840);
          }
          tmp1840.Append(')');
          return tmp1840.ToString();
        }
      }


      public partial class appendRows_result : TBase
      {

        public appendRows_result()
        {
        }

        public appendRows_result DeepCopy()
        {
          var tmp1842 = new appendRows_result();
          return tmp1842;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1843 = new TStruct("appendRows_result");
            await oprot.WriteStructBeginAsync(tmp1843, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendRows_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1844 = new StringBuilder("appendRows_result(");
          tmp1844.Append(')');
          return tmp1844.ToString();
        }
      }

    }

  }
}
