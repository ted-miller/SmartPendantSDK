/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Robot
  {
    public interface IAsync
    {
      /// <summary>
      /// The model string of this robot
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<string> model(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Number of degrees-of-freedom / axes
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<int> dof(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the joint labels for each axis of a robot (API Version 3.1 or Later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<List<string>> jointLabels(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the joint types of each axis for the specified robot (API Version 3.1 or Later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.JointType>> jointTypes(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Current position of the robot in joint coordinate frame (i.e. axis angles)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="unit"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default);

      /// <summary>
      /// Coordinates of the ToolTip (TCP) of of the specified tool
      /// in the given coordinate frame (using active tool if none specified)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="frame"></param>
      /// <param name="tool"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default);

      /// <summary>
      /// Does this robot support force limiting? (collaborative robot?)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingAvailable(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is force limiting currently active? (i.e. PFL - Power & Force Limiting)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingActive(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is the robot stopped due to an over-limit event?
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingStopped(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is an end-of-arm switch box installed?
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> switchBoxAvailable(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Index of the currently active tool
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<int> activeTool(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the currently active tool
      /// </summary>
      /// <param name="r"></param>
      /// <param name="tool"></param>
      global::System.Threading.Tasks.Task setActiveTool(int r, int tool, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the work home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> workHomePosition(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the robots current work home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the second home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> secondHomePosition(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the robots current second home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get a robot's maximum linear speed
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<double> maximumLinearSpeed(int r, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<string> model(int r, CancellationToken cancellationToken = default)
      {
        await send_model(r, cancellationToken);
        return await recv_model(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_model(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("model", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3926 = new InternalStructs.model_args() {
          R = r,
        };
        
        await tmp3926.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_model(CancellationToken cancellationToken = default)
      {
        
        var tmp3927 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3927.Type == TMessageType.Exception)
        {
          var tmp3928 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3928;
        }

        var tmp3929 = new InternalStructs.model_result();
        await tmp3929.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3929.__isset.success)
        {
          return tmp3929.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "model failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> dof(int r, CancellationToken cancellationToken = default)
      {
        await send_dof(r, cancellationToken);
        return await recv_dof(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dof(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3930 = new InternalStructs.dof_args() {
          R = r,
        };
        
        await tmp3930.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_dof(CancellationToken cancellationToken = default)
      {
        
        var tmp3931 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3931.Type == TMessageType.Exception)
        {
          var tmp3932 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3932;
        }

        var tmp3933 = new InternalStructs.dof_result();
        await tmp3933.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3933.__isset.success)
        {
          return tmp3933.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dof failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jointLabels(int r, CancellationToken cancellationToken = default)
      {
        await send_jointLabels(r, cancellationToken);
        return await recv_jointLabels(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointLabels(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointLabels", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3934 = new InternalStructs.jointLabels_args() {
          R = r,
        };
        
        await tmp3934.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jointLabels(CancellationToken cancellationToken = default)
      {
        
        var tmp3935 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3935.Type == TMessageType.Exception)
        {
          var tmp3936 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3936;
        }

        var tmp3937 = new InternalStructs.jointLabels_result();
        await tmp3937.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3937.__isset.success)
        {
          return tmp3937.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointLabels failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.JointType>> jointTypes(int r, CancellationToken cancellationToken = default)
      {
        await send_jointTypes(r, cancellationToken);
        return await recv_jointTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointTypes(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3938 = new InternalStructs.jointTypes_args() {
          R = r,
        };
        
        await tmp3938.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.JointType>> recv_jointTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp3939 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3939.Type == TMessageType.Exception)
        {
          var tmp3940 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3940;
        }

        var tmp3941 = new InternalStructs.jointTypes_result();
        await tmp3941.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3941.__isset.success)
        {
          return tmp3941.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointTypes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default)
      {
        await send_jointPosition(r, unit, cancellationToken);
        return await recv_jointPosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3942 = new InternalStructs.jointPosition_args() {
          R = r,
          Unit = unit,
        };
        
        await tmp3942.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_jointPosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3943 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3943.Type == TMessageType.Exception)
        {
          var tmp3944 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3944;
        }

        var tmp3945 = new InternalStructs.jointPosition_result();
        await tmp3945.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3945.__isset.success)
        {
          return tmp3945.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointPosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default)
      {
        await send_toolTipPosition(r, frame, tool, cancellationToken);
        return await recv_toolTipPosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3946 = new InternalStructs.toolTipPosition_args() {
          R = r,
          Frame = frame,
          Tool = tool,
        };
        
        await tmp3946.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_toolTipPosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3947 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3947.Type == TMessageType.Exception)
        {
          var tmp3948 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3948;
        }

        var tmp3949 = new InternalStructs.toolTipPosition_result();
        await tmp3949.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3949.__isset.success)
        {
          return tmp3949.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "toolTipPosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingAvailable(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingAvailable(r, cancellationToken);
        return await recv_forceLimitingAvailable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingAvailable(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3950 = new InternalStructs.forceLimitingAvailable_args() {
          R = r,
        };
        
        await tmp3950.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingAvailable(CancellationToken cancellationToken = default)
      {
        
        var tmp3951 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3951.Type == TMessageType.Exception)
        {
          var tmp3952 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3952;
        }

        var tmp3953 = new InternalStructs.forceLimitingAvailable_result();
        await tmp3953.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3953.__isset.success)
        {
          return tmp3953.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingAvailable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingActive(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingActive(r, cancellationToken);
        return await recv_forceLimitingActive(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingActive(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3954 = new InternalStructs.forceLimitingActive_args() {
          R = r,
        };
        
        await tmp3954.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingActive(CancellationToken cancellationToken = default)
      {
        
        var tmp3955 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3955.Type == TMessageType.Exception)
        {
          var tmp3956 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3956;
        }

        var tmp3957 = new InternalStructs.forceLimitingActive_result();
        await tmp3957.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3957.__isset.success)
        {
          return tmp3957.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingActive failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingStopped(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingStopped(r, cancellationToken);
        return await recv_forceLimitingStopped(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingStopped(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3958 = new InternalStructs.forceLimitingStopped_args() {
          R = r,
        };
        
        await tmp3958.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingStopped(CancellationToken cancellationToken = default)
      {
        
        var tmp3959 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3959.Type == TMessageType.Exception)
        {
          var tmp3960 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3960;
        }

        var tmp3961 = new InternalStructs.forceLimitingStopped_result();
        await tmp3961.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3961.__isset.success)
        {
          return tmp3961.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingStopped failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> switchBoxAvailable(int r, CancellationToken cancellationToken = default)
      {
        await send_switchBoxAvailable(r, cancellationToken);
        return await recv_switchBoxAvailable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_switchBoxAvailable(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3962 = new InternalStructs.switchBoxAvailable_args() {
          R = r,
        };
        
        await tmp3962.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_switchBoxAvailable(CancellationToken cancellationToken = default)
      {
        
        var tmp3963 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3963.Type == TMessageType.Exception)
        {
          var tmp3964 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3964;
        }

        var tmp3965 = new InternalStructs.switchBoxAvailable_result();
        await tmp3965.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3965.__isset.success)
        {
          return tmp3965.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "switchBoxAvailable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> activeTool(int r, CancellationToken cancellationToken = default)
      {
        await send_activeTool(r, cancellationToken);
        return await recv_activeTool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_activeTool(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3966 = new InternalStructs.activeTool_args() {
          R = r,
        };
        
        await tmp3966.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_activeTool(CancellationToken cancellationToken = default)
      {
        
        var tmp3967 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3967.Type == TMessageType.Exception)
        {
          var tmp3968 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3968;
        }

        var tmp3969 = new InternalStructs.activeTool_result();
        await tmp3969.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3969.__isset.success)
        {
          return tmp3969.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "activeTool failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setActiveTool(int r, int tool, CancellationToken cancellationToken = default)
      {
        await send_setActiveTool(r, tool, cancellationToken);
        await recv_setActiveTool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setActiveTool(int r, int tool, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3970 = new InternalStructs.setActiveTool_args() {
          R = r,
          Tool = tool,
        };
        
        await tmp3970.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setActiveTool(CancellationToken cancellationToken = default)
      {
        
        var tmp3971 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3971.Type == TMessageType.Exception)
        {
          var tmp3972 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3972;
        }

        var tmp3973 = new InternalStructs.setActiveTool_result();
        await tmp3973.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> workHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await send_workHomePosition(r, cancellationToken);
        return await recv_workHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_workHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3974 = new InternalStructs.workHomePosition_args() {
          R = r,
        };
        
        await tmp3974.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_workHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3975 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3975.Type == TMessageType.Exception)
        {
          var tmp3976 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3976;
        }

        var tmp3977 = new InternalStructs.workHomePosition_result();
        await tmp3977.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3977.__isset.success)
        {
          return tmp3977.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "workHomePosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await send_setWorkHomePosition(r, p, cancellationToken);
        await recv_setWorkHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3978 = new InternalStructs.setWorkHomePosition_args() {
          R = r,
          P = p,
        };
        
        await tmp3978.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setWorkHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3979 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3979.Type == TMessageType.Exception)
        {
          var tmp3980 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3980;
        }

        var tmp3981 = new InternalStructs.setWorkHomePosition_result();
        await tmp3981.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> secondHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await send_secondHomePosition(r, cancellationToken);
        return await recv_secondHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_secondHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3982 = new InternalStructs.secondHomePosition_args() {
          R = r,
        };
        
        await tmp3982.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_secondHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3983 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3983.Type == TMessageType.Exception)
        {
          var tmp3984 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3984;
        }

        var tmp3985 = new InternalStructs.secondHomePosition_result();
        await tmp3985.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3985.__isset.success)
        {
          return tmp3985.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "secondHomePosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await send_setSecondHomePosition(r, p, cancellationToken);
        await recv_setSecondHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3986 = new InternalStructs.setSecondHomePosition_args() {
          R = r,
          P = p,
        };
        
        await tmp3986.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setSecondHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3987 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3987.Type == TMessageType.Exception)
        {
          var tmp3988 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3988;
        }

        var tmp3989 = new InternalStructs.setSecondHomePosition_result();
        await tmp3989.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> maximumLinearSpeed(int r, CancellationToken cancellationToken = default)
      {
        await send_maximumLinearSpeed(r, cancellationToken);
        return await recv_maximumLinearSpeed(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_maximumLinearSpeed(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3990 = new InternalStructs.maximumLinearSpeed_args() {
          R = r,
        };
        
        await tmp3990.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> recv_maximumLinearSpeed(CancellationToken cancellationToken = default)
      {
        
        var tmp3991 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3991.Type == TMessageType.Exception)
        {
          var tmp3992 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3992;
        }

        var tmp3993 = new InternalStructs.maximumLinearSpeed_result();
        await tmp3993.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3993.__isset.success)
        {
          return tmp3993.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "maximumLinearSpeed failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["model"] = model_ProcessAsync;
        processMap_["dof"] = dof_ProcessAsync;
        processMap_["jointLabels"] = jointLabels_ProcessAsync;
        processMap_["jointTypes"] = jointTypes_ProcessAsync;
        processMap_["jointPosition"] = jointPosition_ProcessAsync;
        processMap_["toolTipPosition"] = toolTipPosition_ProcessAsync;
        processMap_["forceLimitingAvailable"] = forceLimitingAvailable_ProcessAsync;
        processMap_["forceLimitingActive"] = forceLimitingActive_ProcessAsync;
        processMap_["forceLimitingStopped"] = forceLimitingStopped_ProcessAsync;
        processMap_["switchBoxAvailable"] = switchBoxAvailable_ProcessAsync;
        processMap_["activeTool"] = activeTool_ProcessAsync;
        processMap_["setActiveTool"] = setActiveTool_ProcessAsync;
        processMap_["workHomePosition"] = workHomePosition_ProcessAsync;
        processMap_["setWorkHomePosition"] = setWorkHomePosition_ProcessAsync;
        processMap_["secondHomePosition"] = secondHomePosition_ProcessAsync;
        processMap_["setSecondHomePosition"] = setSecondHomePosition_ProcessAsync;
        processMap_["maximumLinearSpeed"] = maximumLinearSpeed_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task model_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3994 = new InternalStructs.model_args();
        await tmp3994.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3995 = new InternalStructs.model_result();
        try
        {
          tmp3995.Success = await _iAsync.model(tmp3994.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("model", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3995.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3996)
        {
          var tmp3997 = $"Error occurred in {GetType().FullName}: {tmp3996.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3996, tmp3997);
          else
            Console.Error.WriteLine(tmp3997);
          var tmp3998 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("model", TMessageType.Exception, seqid), cancellationToken);
          await tmp3998.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dof_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3999 = new InternalStructs.dof_args();
        await tmp3999.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4000 = new InternalStructs.dof_result();
        try
        {
          tmp4000.Success = await _iAsync.dof(tmp3999.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4000.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4001)
        {
          var tmp4002 = $"Error occurred in {GetType().FullName}: {tmp4001.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4001, tmp4002);
          else
            Console.Error.WriteLine(tmp4002);
          var tmp4003 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Exception, seqid), cancellationToken);
          await tmp4003.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointLabels_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4004 = new InternalStructs.jointLabels_args();
        await tmp4004.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4005 = new InternalStructs.jointLabels_result();
        try
        {
          tmp4005.Success = await _iAsync.jointLabels(tmp4004.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointLabels", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4005.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4006)
        {
          var tmp4007 = $"Error occurred in {GetType().FullName}: {tmp4006.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4006, tmp4007);
          else
            Console.Error.WriteLine(tmp4007);
          var tmp4008 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointLabels", TMessageType.Exception, seqid), cancellationToken);
          await tmp4008.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4009 = new InternalStructs.jointTypes_args();
        await tmp4009.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4010 = new InternalStructs.jointTypes_result();
        try
        {
          tmp4010.Success = await _iAsync.jointTypes(tmp4009.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4010.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4011)
        {
          var tmp4012 = $"Error occurred in {GetType().FullName}: {tmp4011.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4011, tmp4012);
          else
            Console.Error.WriteLine(tmp4012);
          var tmp4013 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp4013.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointPosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4014 = new InternalStructs.jointPosition_args();
        await tmp4014.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4015 = new InternalStructs.jointPosition_result();
        try
        {
          tmp4015.Success = await _iAsync.jointPosition(tmp4014.R, tmp4014.Unit, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4015.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4016)
        {
          var tmp4017 = $"Error occurred in {GetType().FullName}: {tmp4016.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4016, tmp4017);
          else
            Console.Error.WriteLine(tmp4017);
          var tmp4018 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp4018.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task toolTipPosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4019 = new InternalStructs.toolTipPosition_args();
        await tmp4019.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4020 = new InternalStructs.toolTipPosition_result();
        try
        {
          tmp4020.Success = await _iAsync.toolTipPosition(tmp4019.R, tmp4019.Frame, tmp4019.Tool, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4020.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4021)
        {
          var tmp4022 = $"Error occurred in {GetType().FullName}: {tmp4021.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4021, tmp4022);
          else
            Console.Error.WriteLine(tmp4022);
          var tmp4023 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp4023.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingAvailable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4024 = new InternalStructs.forceLimitingAvailable_args();
        await tmp4024.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4025 = new InternalStructs.forceLimitingAvailable_result();
        try
        {
          tmp4025.Success = await _iAsync.forceLimitingAvailable(tmp4024.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4025.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4026)
        {
          var tmp4027 = $"Error occurred in {GetType().FullName}: {tmp4026.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4026, tmp4027);
          else
            Console.Error.WriteLine(tmp4027);
          var tmp4028 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Exception, seqid), cancellationToken);
          await tmp4028.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingActive_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4029 = new InternalStructs.forceLimitingActive_args();
        await tmp4029.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4030 = new InternalStructs.forceLimitingActive_result();
        try
        {
          tmp4030.Success = await _iAsync.forceLimitingActive(tmp4029.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4030.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4031)
        {
          var tmp4032 = $"Error occurred in {GetType().FullName}: {tmp4031.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4031, tmp4032);
          else
            Console.Error.WriteLine(tmp4032);
          var tmp4033 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Exception, seqid), cancellationToken);
          await tmp4033.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingStopped_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4034 = new InternalStructs.forceLimitingStopped_args();
        await tmp4034.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4035 = new InternalStructs.forceLimitingStopped_result();
        try
        {
          tmp4035.Success = await _iAsync.forceLimitingStopped(tmp4034.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4035.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4036)
        {
          var tmp4037 = $"Error occurred in {GetType().FullName}: {tmp4036.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4036, tmp4037);
          else
            Console.Error.WriteLine(tmp4037);
          var tmp4038 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Exception, seqid), cancellationToken);
          await tmp4038.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task switchBoxAvailable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4039 = new InternalStructs.switchBoxAvailable_args();
        await tmp4039.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4040 = new InternalStructs.switchBoxAvailable_result();
        try
        {
          tmp4040.Success = await _iAsync.switchBoxAvailable(tmp4039.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4040.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4041)
        {
          var tmp4042 = $"Error occurred in {GetType().FullName}: {tmp4041.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4041, tmp4042);
          else
            Console.Error.WriteLine(tmp4042);
          var tmp4043 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Exception, seqid), cancellationToken);
          await tmp4043.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task activeTool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4044 = new InternalStructs.activeTool_args();
        await tmp4044.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4045 = new InternalStructs.activeTool_result();
        try
        {
          tmp4045.Success = await _iAsync.activeTool(tmp4044.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4045.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4046)
        {
          var tmp4047 = $"Error occurred in {GetType().FullName}: {tmp4046.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4046, tmp4047);
          else
            Console.Error.WriteLine(tmp4047);
          var tmp4048 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Exception, seqid), cancellationToken);
          await tmp4048.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setActiveTool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4049 = new InternalStructs.setActiveTool_args();
        await tmp4049.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4050 = new InternalStructs.setActiveTool_result();
        try
        {
          await _iAsync.setActiveTool(tmp4049.R, tmp4049.Tool, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4050.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4051)
        {
          var tmp4052 = $"Error occurred in {GetType().FullName}: {tmp4051.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4051, tmp4052);
          else
            Console.Error.WriteLine(tmp4052);
          var tmp4053 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Exception, seqid), cancellationToken);
          await tmp4053.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task workHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4054 = new InternalStructs.workHomePosition_args();
        await tmp4054.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4055 = new InternalStructs.workHomePosition_result();
        try
        {
          tmp4055.Success = await _iAsync.workHomePosition(tmp4054.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4055.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4056)
        {
          var tmp4057 = $"Error occurred in {GetType().FullName}: {tmp4056.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4056, tmp4057);
          else
            Console.Error.WriteLine(tmp4057);
          var tmp4058 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp4058.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setWorkHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4059 = new InternalStructs.setWorkHomePosition_args();
        await tmp4059.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4060 = new InternalStructs.setWorkHomePosition_result();
        try
        {
          await _iAsync.setWorkHomePosition(tmp4059.R, tmp4059.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4060.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4061)
        {
          var tmp4062 = $"Error occurred in {GetType().FullName}: {tmp4061.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4061, tmp4062);
          else
            Console.Error.WriteLine(tmp4062);
          var tmp4063 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp4063.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task secondHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4064 = new InternalStructs.secondHomePosition_args();
        await tmp4064.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4065 = new InternalStructs.secondHomePosition_result();
        try
        {
          tmp4065.Success = await _iAsync.secondHomePosition(tmp4064.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4065.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4066)
        {
          var tmp4067 = $"Error occurred in {GetType().FullName}: {tmp4066.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4066, tmp4067);
          else
            Console.Error.WriteLine(tmp4067);
          var tmp4068 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp4068.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setSecondHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4069 = new InternalStructs.setSecondHomePosition_args();
        await tmp4069.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4070 = new InternalStructs.setSecondHomePosition_result();
        try
        {
          await _iAsync.setSecondHomePosition(tmp4069.R, tmp4069.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4070.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4071)
        {
          var tmp4072 = $"Error occurred in {GetType().FullName}: {tmp4071.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4071, tmp4072);
          else
            Console.Error.WriteLine(tmp4072);
          var tmp4073 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp4073.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task maximumLinearSpeed_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4074 = new InternalStructs.maximumLinearSpeed_args();
        await tmp4074.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4075 = new InternalStructs.maximumLinearSpeed_result();
        try
        {
          tmp4075.Success = await _iAsync.maximumLinearSpeed(tmp4074.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4075.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4076)
        {
          var tmp4077 = $"Error occurred in {GetType().FullName}: {tmp4076.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4076, tmp4077);
          else
            Console.Error.WriteLine(tmp4077);
          var tmp4078 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Exception, seqid), cancellationToken);
          await tmp4078.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class model_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public model_args()
        {
        }

        public model_args DeepCopy()
        {
          var tmp4079 = new model_args();
          if(__isset.r)
          {
            tmp4079.R = this.R;
          }
          tmp4079.__isset.r = this.__isset.r;
          return tmp4079;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4080 = new TStruct("model_args");
            await oprot.WriteStructBeginAsync(tmp4080, cancellationToken);
            var tmp4081 = new TField();
            if(__isset.r)
            {
              tmp4081.Name = "r";
              tmp4081.Type = TType.I32;
              tmp4081.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4081, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is model_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4082 = new StringBuilder("model_args(");
          int tmp4083 = 0;
          if(__isset.r)
          {
            if(0 < tmp4083++) { tmp4082.Append(", "); }
            tmp4082.Append("R: ");
            R.ToString(tmp4082);
          }
          tmp4082.Append(')');
          return tmp4082.ToString();
        }
      }


      public partial class model_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public model_result()
        {
        }

        public model_result DeepCopy()
        {
          var tmp4084 = new model_result();
          if((Success != null) && __isset.success)
          {
            tmp4084.Success = this.Success;
          }
          tmp4084.__isset.success = this.__isset.success;
          return tmp4084;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4085 = new TStruct("model_result");
            await oprot.WriteStructBeginAsync(tmp4085, cancellationToken);
            var tmp4086 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4086.Name = "Success";
                tmp4086.Type = TType.String;
                tmp4086.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4086, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is model_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4087 = new StringBuilder("model_result(");
          int tmp4088 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4088++) { tmp4087.Append(", "); }
            tmp4087.Append("Success: ");
            Success.ToString(tmp4087);
          }
          tmp4087.Append(')');
          return tmp4087.ToString();
        }
      }


      public partial class dof_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public dof_args()
        {
        }

        public dof_args DeepCopy()
        {
          var tmp4089 = new dof_args();
          if(__isset.r)
          {
            tmp4089.R = this.R;
          }
          tmp4089.__isset.r = this.__isset.r;
          return tmp4089;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4090 = new TStruct("dof_args");
            await oprot.WriteStructBeginAsync(tmp4090, cancellationToken);
            var tmp4091 = new TField();
            if(__isset.r)
            {
              tmp4091.Name = "r";
              tmp4091.Type = TType.I32;
              tmp4091.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4091, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dof_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4092 = new StringBuilder("dof_args(");
          int tmp4093 = 0;
          if(__isset.r)
          {
            if(0 < tmp4093++) { tmp4092.Append(", "); }
            tmp4092.Append("R: ");
            R.ToString(tmp4092);
          }
          tmp4092.Append(')');
          return tmp4092.ToString();
        }
      }


      public partial class dof_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dof_result()
        {
        }

        public dof_result DeepCopy()
        {
          var tmp4094 = new dof_result();
          if(__isset.success)
          {
            tmp4094.Success = this.Success;
          }
          tmp4094.__isset.success = this.__isset.success;
          return tmp4094;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4095 = new TStruct("dof_result");
            await oprot.WriteStructBeginAsync(tmp4095, cancellationToken);
            var tmp4096 = new TField();

            if(this.__isset.success)
            {
              tmp4096.Name = "Success";
              tmp4096.Type = TType.I32;
              tmp4096.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4096, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dof_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4097 = new StringBuilder("dof_result(");
          int tmp4098 = 0;
          if(__isset.success)
          {
            if(0 < tmp4098++) { tmp4097.Append(", "); }
            tmp4097.Append("Success: ");
            Success.ToString(tmp4097);
          }
          tmp4097.Append(')');
          return tmp4097.ToString();
        }
      }


      public partial class jointLabels_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public jointLabels_args()
        {
        }

        public jointLabels_args DeepCopy()
        {
          var tmp4099 = new jointLabels_args();
          if(__isset.r)
          {
            tmp4099.R = this.R;
          }
          tmp4099.__isset.r = this.__isset.r;
          return tmp4099;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4100 = new TStruct("jointLabels_args");
            await oprot.WriteStructBeginAsync(tmp4100, cancellationToken);
            var tmp4101 = new TField();
            if(__isset.r)
            {
              tmp4101.Name = "r";
              tmp4101.Type = TType.I32;
              tmp4101.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4101, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointLabels_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4102 = new StringBuilder("jointLabels_args(");
          int tmp4103 = 0;
          if(__isset.r)
          {
            if(0 < tmp4103++) { tmp4102.Append(", "); }
            tmp4102.Append("R: ");
            R.ToString(tmp4102);
          }
          tmp4102.Append(')');
          return tmp4102.ToString();
        }
      }


      public partial class jointLabels_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointLabels_result()
        {
        }

        public jointLabels_result DeepCopy()
        {
          var tmp4104 = new jointLabels_result();
          if((Success != null) && __isset.success)
          {
            tmp4104.Success = this.Success.DeepCopy();
          }
          tmp4104.__isset.success = this.__isset.success;
          return tmp4104;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list4105 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list4105.Count);
                      for(int _i4106 = 0; _i4106 < _list4105.Count; ++_i4106)
                      {
                        string _elem4107;
                        _elem4107 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem4107);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4108 = new TStruct("jointLabels_result");
            await oprot.WriteStructBeginAsync(tmp4108, cancellationToken);
            var tmp4109 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4109.Name = "Success";
                tmp4109.Type = TType.List;
                tmp4109.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4109, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter4110 in Success)
                {
                  await oprot.WriteStringAsync(_iter4110, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointLabels_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4111 = new StringBuilder("jointLabels_result(");
          int tmp4112 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4112++) { tmp4111.Append(", "); }
            tmp4111.Append("Success: ");
            Success.ToString(tmp4111);
          }
          tmp4111.Append(')');
          return tmp4111.ToString();
        }
      }


      public partial class jointTypes_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public jointTypes_args()
        {
        }

        public jointTypes_args DeepCopy()
        {
          var tmp4113 = new jointTypes_args();
          if(__isset.r)
          {
            tmp4113.R = this.R;
          }
          tmp4113.__isset.r = this.__isset.r;
          return tmp4113;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4114 = new TStruct("jointTypes_args");
            await oprot.WriteStructBeginAsync(tmp4114, cancellationToken);
            var tmp4115 = new TField();
            if(__isset.r)
            {
              tmp4115.Name = "r";
              tmp4115.Type = TType.I32;
              tmp4115.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4115, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4116 = new StringBuilder("jointTypes_args(");
          int tmp4117 = 0;
          if(__isset.r)
          {
            if(0 < tmp4117++) { tmp4116.Append(", "); }
            tmp4116.Append("R: ");
            R.ToString(tmp4116);
          }
          tmp4116.Append(')');
          return tmp4116.ToString();
        }
      }


      public partial class jointTypes_result : TBase
      {
        private List<global::Yaskawa.Ext.API.JointType> _success;

        public List<global::Yaskawa.Ext.API.JointType> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointTypes_result()
        {
        }

        public jointTypes_result DeepCopy()
        {
          var tmp4118 = new jointTypes_result();
          if((Success != null) && __isset.success)
          {
            tmp4118.Success = this.Success.DeepCopy();
          }
          tmp4118.__isset.success = this.__isset.success;
          return tmp4118;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list4119 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.JointType>(_list4119.Count);
                      for(int _i4120 = 0; _i4120 < _list4119.Count; ++_i4120)
                      {
                        global::Yaskawa.Ext.API.JointType _elem4121;
                        _elem4121 = (global::Yaskawa.Ext.API.JointType)await iprot.ReadI32Async(cancellationToken);
                        Success.Add(_elem4121);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4122 = new TStruct("jointTypes_result");
            await oprot.WriteStructBeginAsync(tmp4122, cancellationToken);
            var tmp4123 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4123.Name = "Success";
                tmp4123.Type = TType.List;
                tmp4123.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4123, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.I32, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.JointType _iter4124 in Success)
                {
                  await oprot.WriteI32Async((int)_iter4124, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4125 = new StringBuilder("jointTypes_result(");
          int tmp4126 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4126++) { tmp4125.Append(", "); }
            tmp4125.Append("Success: ");
            Success.ToString(tmp4125);
          }
          tmp4125.Append(')');
          return tmp4125.ToString();
        }
      }


      public partial class jointPosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.OrientationUnit _unit;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.OrientationUnit"/>
        /// </summary>
        public global::Yaskawa.Ext.API.OrientationUnit Unit
        {
          get
          {
            return _unit;
          }
          set
          {
            __isset.unit = true;
            this._unit = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool unit;
        }

        public jointPosition_args()
        {
        }

        public jointPosition_args DeepCopy()
        {
          var tmp4127 = new jointPosition_args();
          if(__isset.r)
          {
            tmp4127.R = this.R;
          }
          tmp4127.__isset.r = this.__isset.r;
          if(__isset.unit)
          {
            tmp4127.Unit = this.Unit;
          }
          tmp4127.__isset.unit = this.__isset.unit;
          return tmp4127;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Unit = (global::Yaskawa.Ext.API.OrientationUnit)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4128 = new TStruct("jointPosition_args");
            await oprot.WriteStructBeginAsync(tmp4128, cancellationToken);
            var tmp4129 = new TField();
            if(__isset.r)
            {
              tmp4129.Name = "r";
              tmp4129.Type = TType.I32;
              tmp4129.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4129, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.unit)
            {
              tmp4129.Name = "unit";
              tmp4129.Type = TType.I32;
              tmp4129.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp4129, cancellationToken);
              await oprot.WriteI32Async((int)Unit, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointPosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.unit == other.__isset.unit) && ((!__isset.unit) || (global::System.Object.Equals(Unit, other.Unit))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if(__isset.unit)
            {
              hashcode = (hashcode * 397) + Unit.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4130 = new StringBuilder("jointPosition_args(");
          int tmp4131 = 0;
          if(__isset.r)
          {
            if(0 < tmp4131++) { tmp4130.Append(", "); }
            tmp4130.Append("R: ");
            R.ToString(tmp4130);
          }
          if(__isset.unit)
          {
            if(0 < tmp4131++) { tmp4130.Append(", "); }
            tmp4130.Append("Unit: ");
            Unit.ToString(tmp4130);
          }
          tmp4130.Append(')');
          return tmp4130.ToString();
        }
      }


      public partial class jointPosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointPosition_result()
        {
        }

        public jointPosition_result DeepCopy()
        {
          var tmp4132 = new jointPosition_result();
          if((Success != null) && __isset.success)
          {
            tmp4132.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp4132.__isset.success = this.__isset.success;
          return tmp4132;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4133 = new TStruct("jointPosition_result");
            await oprot.WriteStructBeginAsync(tmp4133, cancellationToken);
            var tmp4134 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4134.Name = "Success";
                tmp4134.Type = TType.Struct;
                tmp4134.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4134, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointPosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4135 = new StringBuilder("jointPosition_result(");
          int tmp4136 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4136++) { tmp4135.Append(", "); }
            tmp4135.Append("Success: ");
            Success.ToString(tmp4135);
          }
          tmp4135.Append(')');
          return tmp4135.ToString();
        }
      }


      public partial class toolTipPosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.CoordinateFrame _frame;
        private int _tool;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.CoordinateFrame Frame
        {
          get
          {
            return _frame;
          }
          set
          {
            __isset.frame = true;
            this._frame = value;
          }
        }

        public int Tool
        {
          get
          {
            return _tool;
          }
          set
          {
            __isset.tool = true;
            this._tool = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool frame;
          public bool tool;
        }

        public toolTipPosition_args()
        {
        }

        public toolTipPosition_args DeepCopy()
        {
          var tmp4137 = new toolTipPosition_args();
          if(__isset.r)
          {
            tmp4137.R = this.R;
          }
          tmp4137.__isset.r = this.__isset.r;
          if((Frame != null) && __isset.frame)
          {
            tmp4137.Frame = (global::Yaskawa.Ext.API.CoordinateFrame)this.Frame.DeepCopy();
          }
          tmp4137.__isset.frame = this.__isset.frame;
          if(__isset.tool)
          {
            tmp4137.Tool = this.Tool;
          }
          tmp4137.__isset.tool = this.__isset.tool;
          return tmp4137;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Frame = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await Frame.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Tool = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4138 = new TStruct("toolTipPosition_args");
            await oprot.WriteStructBeginAsync(tmp4138, cancellationToken);
            var tmp4139 = new TField();
            if(__isset.r)
            {
              tmp4139.Name = "r";
              tmp4139.Type = TType.I32;
              tmp4139.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4139, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Frame != null) && __isset.frame)
            {
              tmp4139.Name = "frame";
              tmp4139.Type = TType.Struct;
              tmp4139.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp4139, cancellationToken);
              await Frame.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.tool)
            {
              tmp4139.Name = "tool";
              tmp4139.Type = TType.I32;
              tmp4139.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp4139, cancellationToken);
              await oprot.WriteI32Async(Tool, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is toolTipPosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.frame == other.__isset.frame) && ((!__isset.frame) || (global::System.Object.Equals(Frame, other.Frame))))
            && ((__isset.tool == other.__isset.tool) && ((!__isset.tool) || (global::System.Object.Equals(Tool, other.Tool))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((Frame != null) && __isset.frame)
            {
              hashcode = (hashcode * 397) + Frame.GetHashCode();
            }
            if(__isset.tool)
            {
              hashcode = (hashcode * 397) + Tool.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4140 = new StringBuilder("toolTipPosition_args(");
          int tmp4141 = 0;
          if(__isset.r)
          {
            if(0 < tmp4141++) { tmp4140.Append(", "); }
            tmp4140.Append("R: ");
            R.ToString(tmp4140);
          }
          if((Frame != null) && __isset.frame)
          {
            if(0 < tmp4141++) { tmp4140.Append(", "); }
            tmp4140.Append("Frame: ");
            Frame.ToString(tmp4140);
          }
          if(__isset.tool)
          {
            if(0 < tmp4141++) { tmp4140.Append(", "); }
            tmp4140.Append("Tool: ");
            Tool.ToString(tmp4140);
          }
          tmp4140.Append(')');
          return tmp4140.ToString();
        }
      }


      public partial class toolTipPosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public toolTipPosition_result()
        {
        }

        public toolTipPosition_result DeepCopy()
        {
          var tmp4142 = new toolTipPosition_result();
          if((Success != null) && __isset.success)
          {
            tmp4142.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp4142.__isset.success = this.__isset.success;
          return tmp4142;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4143 = new TStruct("toolTipPosition_result");
            await oprot.WriteStructBeginAsync(tmp4143, cancellationToken);
            var tmp4144 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4144.Name = "Success";
                tmp4144.Type = TType.Struct;
                tmp4144.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4144, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is toolTipPosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4145 = new StringBuilder("toolTipPosition_result(");
          int tmp4146 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4146++) { tmp4145.Append(", "); }
            tmp4145.Append("Success: ");
            Success.ToString(tmp4145);
          }
          tmp4145.Append(')');
          return tmp4145.ToString();
        }
      }


      public partial class forceLimitingAvailable_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingAvailable_args()
        {
        }

        public forceLimitingAvailable_args DeepCopy()
        {
          var tmp4147 = new forceLimitingAvailable_args();
          if(__isset.r)
          {
            tmp4147.R = this.R;
          }
          tmp4147.__isset.r = this.__isset.r;
          return tmp4147;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4148 = new TStruct("forceLimitingAvailable_args");
            await oprot.WriteStructBeginAsync(tmp4148, cancellationToken);
            var tmp4149 = new TField();
            if(__isset.r)
            {
              tmp4149.Name = "r";
              tmp4149.Type = TType.I32;
              tmp4149.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4149, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingAvailable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4150 = new StringBuilder("forceLimitingAvailable_args(");
          int tmp4151 = 0;
          if(__isset.r)
          {
            if(0 < tmp4151++) { tmp4150.Append(", "); }
            tmp4150.Append("R: ");
            R.ToString(tmp4150);
          }
          tmp4150.Append(')');
          return tmp4150.ToString();
        }
      }


      public partial class forceLimitingAvailable_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingAvailable_result()
        {
        }

        public forceLimitingAvailable_result DeepCopy()
        {
          var tmp4152 = new forceLimitingAvailable_result();
          if(__isset.success)
          {
            tmp4152.Success = this.Success;
          }
          tmp4152.__isset.success = this.__isset.success;
          return tmp4152;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4153 = new TStruct("forceLimitingAvailable_result");
            await oprot.WriteStructBeginAsync(tmp4153, cancellationToken);
            var tmp4154 = new TField();

            if(this.__isset.success)
            {
              tmp4154.Name = "Success";
              tmp4154.Type = TType.Bool;
              tmp4154.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4154, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingAvailable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4155 = new StringBuilder("forceLimitingAvailable_result(");
          int tmp4156 = 0;
          if(__isset.success)
          {
            if(0 < tmp4156++) { tmp4155.Append(", "); }
            tmp4155.Append("Success: ");
            Success.ToString(tmp4155);
          }
          tmp4155.Append(')');
          return tmp4155.ToString();
        }
      }


      public partial class forceLimitingActive_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingActive_args()
        {
        }

        public forceLimitingActive_args DeepCopy()
        {
          var tmp4157 = new forceLimitingActive_args();
          if(__isset.r)
          {
            tmp4157.R = this.R;
          }
          tmp4157.__isset.r = this.__isset.r;
          return tmp4157;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4158 = new TStruct("forceLimitingActive_args");
            await oprot.WriteStructBeginAsync(tmp4158, cancellationToken);
            var tmp4159 = new TField();
            if(__isset.r)
            {
              tmp4159.Name = "r";
              tmp4159.Type = TType.I32;
              tmp4159.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4159, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingActive_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4160 = new StringBuilder("forceLimitingActive_args(");
          int tmp4161 = 0;
          if(__isset.r)
          {
            if(0 < tmp4161++) { tmp4160.Append(", "); }
            tmp4160.Append("R: ");
            R.ToString(tmp4160);
          }
          tmp4160.Append(')');
          return tmp4160.ToString();
        }
      }


      public partial class forceLimitingActive_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingActive_result()
        {
        }

        public forceLimitingActive_result DeepCopy()
        {
          var tmp4162 = new forceLimitingActive_result();
          if(__isset.success)
          {
            tmp4162.Success = this.Success;
          }
          tmp4162.__isset.success = this.__isset.success;
          return tmp4162;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4163 = new TStruct("forceLimitingActive_result");
            await oprot.WriteStructBeginAsync(tmp4163, cancellationToken);
            var tmp4164 = new TField();

            if(this.__isset.success)
            {
              tmp4164.Name = "Success";
              tmp4164.Type = TType.Bool;
              tmp4164.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4164, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingActive_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4165 = new StringBuilder("forceLimitingActive_result(");
          int tmp4166 = 0;
          if(__isset.success)
          {
            if(0 < tmp4166++) { tmp4165.Append(", "); }
            tmp4165.Append("Success: ");
            Success.ToString(tmp4165);
          }
          tmp4165.Append(')');
          return tmp4165.ToString();
        }
      }


      public partial class forceLimitingStopped_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingStopped_args()
        {
        }

        public forceLimitingStopped_args DeepCopy()
        {
          var tmp4167 = new forceLimitingStopped_args();
          if(__isset.r)
          {
            tmp4167.R = this.R;
          }
          tmp4167.__isset.r = this.__isset.r;
          return tmp4167;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4168 = new TStruct("forceLimitingStopped_args");
            await oprot.WriteStructBeginAsync(tmp4168, cancellationToken);
            var tmp4169 = new TField();
            if(__isset.r)
            {
              tmp4169.Name = "r";
              tmp4169.Type = TType.I32;
              tmp4169.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4169, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingStopped_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4170 = new StringBuilder("forceLimitingStopped_args(");
          int tmp4171 = 0;
          if(__isset.r)
          {
            if(0 < tmp4171++) { tmp4170.Append(", "); }
            tmp4170.Append("R: ");
            R.ToString(tmp4170);
          }
          tmp4170.Append(')');
          return tmp4170.ToString();
        }
      }


      public partial class forceLimitingStopped_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingStopped_result()
        {
        }

        public forceLimitingStopped_result DeepCopy()
        {
          var tmp4172 = new forceLimitingStopped_result();
          if(__isset.success)
          {
            tmp4172.Success = this.Success;
          }
          tmp4172.__isset.success = this.__isset.success;
          return tmp4172;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4173 = new TStruct("forceLimitingStopped_result");
            await oprot.WriteStructBeginAsync(tmp4173, cancellationToken);
            var tmp4174 = new TField();

            if(this.__isset.success)
            {
              tmp4174.Name = "Success";
              tmp4174.Type = TType.Bool;
              tmp4174.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4174, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingStopped_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4175 = new StringBuilder("forceLimitingStopped_result(");
          int tmp4176 = 0;
          if(__isset.success)
          {
            if(0 < tmp4176++) { tmp4175.Append(", "); }
            tmp4175.Append("Success: ");
            Success.ToString(tmp4175);
          }
          tmp4175.Append(')');
          return tmp4175.ToString();
        }
      }


      public partial class switchBoxAvailable_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public switchBoxAvailable_args()
        {
        }

        public switchBoxAvailable_args DeepCopy()
        {
          var tmp4177 = new switchBoxAvailable_args();
          if(__isset.r)
          {
            tmp4177.R = this.R;
          }
          tmp4177.__isset.r = this.__isset.r;
          return tmp4177;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4178 = new TStruct("switchBoxAvailable_args");
            await oprot.WriteStructBeginAsync(tmp4178, cancellationToken);
            var tmp4179 = new TField();
            if(__isset.r)
            {
              tmp4179.Name = "r";
              tmp4179.Type = TType.I32;
              tmp4179.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4179, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is switchBoxAvailable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4180 = new StringBuilder("switchBoxAvailable_args(");
          int tmp4181 = 0;
          if(__isset.r)
          {
            if(0 < tmp4181++) { tmp4180.Append(", "); }
            tmp4180.Append("R: ");
            R.ToString(tmp4180);
          }
          tmp4180.Append(')');
          return tmp4180.ToString();
        }
      }


      public partial class switchBoxAvailable_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public switchBoxAvailable_result()
        {
        }

        public switchBoxAvailable_result DeepCopy()
        {
          var tmp4182 = new switchBoxAvailable_result();
          if(__isset.success)
          {
            tmp4182.Success = this.Success;
          }
          tmp4182.__isset.success = this.__isset.success;
          return tmp4182;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4183 = new TStruct("switchBoxAvailable_result");
            await oprot.WriteStructBeginAsync(tmp4183, cancellationToken);
            var tmp4184 = new TField();

            if(this.__isset.success)
            {
              tmp4184.Name = "Success";
              tmp4184.Type = TType.Bool;
              tmp4184.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4184, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is switchBoxAvailable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4185 = new StringBuilder("switchBoxAvailable_result(");
          int tmp4186 = 0;
          if(__isset.success)
          {
            if(0 < tmp4186++) { tmp4185.Append(", "); }
            tmp4185.Append("Success: ");
            Success.ToString(tmp4185);
          }
          tmp4185.Append(')');
          return tmp4185.ToString();
        }
      }


      public partial class activeTool_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public activeTool_args()
        {
        }

        public activeTool_args DeepCopy()
        {
          var tmp4187 = new activeTool_args();
          if(__isset.r)
          {
            tmp4187.R = this.R;
          }
          tmp4187.__isset.r = this.__isset.r;
          return tmp4187;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4188 = new TStruct("activeTool_args");
            await oprot.WriteStructBeginAsync(tmp4188, cancellationToken);
            var tmp4189 = new TField();
            if(__isset.r)
            {
              tmp4189.Name = "r";
              tmp4189.Type = TType.I32;
              tmp4189.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4189, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is activeTool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4190 = new StringBuilder("activeTool_args(");
          int tmp4191 = 0;
          if(__isset.r)
          {
            if(0 < tmp4191++) { tmp4190.Append(", "); }
            tmp4190.Append("R: ");
            R.ToString(tmp4190);
          }
          tmp4190.Append(')');
          return tmp4190.ToString();
        }
      }


      public partial class activeTool_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public activeTool_result()
        {
        }

        public activeTool_result DeepCopy()
        {
          var tmp4192 = new activeTool_result();
          if(__isset.success)
          {
            tmp4192.Success = this.Success;
          }
          tmp4192.__isset.success = this.__isset.success;
          return tmp4192;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4193 = new TStruct("activeTool_result");
            await oprot.WriteStructBeginAsync(tmp4193, cancellationToken);
            var tmp4194 = new TField();

            if(this.__isset.success)
            {
              tmp4194.Name = "Success";
              tmp4194.Type = TType.I32;
              tmp4194.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4194, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is activeTool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4195 = new StringBuilder("activeTool_result(");
          int tmp4196 = 0;
          if(__isset.success)
          {
            if(0 < tmp4196++) { tmp4195.Append(", "); }
            tmp4195.Append("Success: ");
            Success.ToString(tmp4195);
          }
          tmp4195.Append(')');
          return tmp4195.ToString();
        }
      }


      public partial class setActiveTool_args : TBase
      {
        private int _r;
        private int _tool;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public int Tool
        {
          get
          {
            return _tool;
          }
          set
          {
            __isset.tool = true;
            this._tool = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool tool;
        }

        public setActiveTool_args()
        {
        }

        public setActiveTool_args DeepCopy()
        {
          var tmp4197 = new setActiveTool_args();
          if(__isset.r)
          {
            tmp4197.R = this.R;
          }
          tmp4197.__isset.r = this.__isset.r;
          if(__isset.tool)
          {
            tmp4197.Tool = this.Tool;
          }
          tmp4197.__isset.tool = this.__isset.tool;
          return tmp4197;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Tool = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4198 = new TStruct("setActiveTool_args");
            await oprot.WriteStructBeginAsync(tmp4198, cancellationToken);
            var tmp4199 = new TField();
            if(__isset.r)
            {
              tmp4199.Name = "r";
              tmp4199.Type = TType.I32;
              tmp4199.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4199, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.tool)
            {
              tmp4199.Name = "tool";
              tmp4199.Type = TType.I32;
              tmp4199.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp4199, cancellationToken);
              await oprot.WriteI32Async(Tool, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setActiveTool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.tool == other.__isset.tool) && ((!__isset.tool) || (global::System.Object.Equals(Tool, other.Tool))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if(__isset.tool)
            {
              hashcode = (hashcode * 397) + Tool.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4200 = new StringBuilder("setActiveTool_args(");
          int tmp4201 = 0;
          if(__isset.r)
          {
            if(0 < tmp4201++) { tmp4200.Append(", "); }
            tmp4200.Append("R: ");
            R.ToString(tmp4200);
          }
          if(__isset.tool)
          {
            if(0 < tmp4201++) { tmp4200.Append(", "); }
            tmp4200.Append("Tool: ");
            Tool.ToString(tmp4200);
          }
          tmp4200.Append(')');
          return tmp4200.ToString();
        }
      }


      public partial class setActiveTool_result : TBase
      {

        public setActiveTool_result()
        {
        }

        public setActiveTool_result DeepCopy()
        {
          var tmp4202 = new setActiveTool_result();
          return tmp4202;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4203 = new TStruct("setActiveTool_result");
            await oprot.WriteStructBeginAsync(tmp4203, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setActiveTool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4204 = new StringBuilder("setActiveTool_result(");
          tmp4204.Append(')');
          return tmp4204.ToString();
        }
      }


      public partial class workHomePosition_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public workHomePosition_args()
        {
        }

        public workHomePosition_args DeepCopy()
        {
          var tmp4206 = new workHomePosition_args();
          if(__isset.r)
          {
            tmp4206.R = this.R;
          }
          tmp4206.__isset.r = this.__isset.r;
          return tmp4206;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4207 = new TStruct("workHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp4207, cancellationToken);
            var tmp4208 = new TField();
            if(__isset.r)
            {
              tmp4208.Name = "r";
              tmp4208.Type = TType.I32;
              tmp4208.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4208, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is workHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4209 = new StringBuilder("workHomePosition_args(");
          int tmp4210 = 0;
          if(__isset.r)
          {
            if(0 < tmp4210++) { tmp4209.Append(", "); }
            tmp4209.Append("R: ");
            R.ToString(tmp4209);
          }
          tmp4209.Append(')');
          return tmp4209.ToString();
        }
      }


      public partial class workHomePosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public workHomePosition_result()
        {
        }

        public workHomePosition_result DeepCopy()
        {
          var tmp4211 = new workHomePosition_result();
          if((Success != null) && __isset.success)
          {
            tmp4211.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp4211.__isset.success = this.__isset.success;
          return tmp4211;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4212 = new TStruct("workHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp4212, cancellationToken);
            var tmp4213 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4213.Name = "Success";
                tmp4213.Type = TType.Struct;
                tmp4213.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4213, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is workHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4214 = new StringBuilder("workHomePosition_result(");
          int tmp4215 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4215++) { tmp4214.Append(", "); }
            tmp4214.Append("Success: ");
            Success.ToString(tmp4214);
          }
          tmp4214.Append(')');
          return tmp4214.ToString();
        }
      }


      public partial class setWorkHomePosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.Position _p;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.Position P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool p;
        }

        public setWorkHomePosition_args()
        {
        }

        public setWorkHomePosition_args DeepCopy()
        {
          var tmp4216 = new setWorkHomePosition_args();
          if(__isset.r)
          {
            tmp4216.R = this.R;
          }
          tmp4216.__isset.r = this.__isset.r;
          if((P != null) && __isset.p)
          {
            tmp4216.P = (global::Yaskawa.Ext.API.Position)this.P.DeepCopy();
          }
          tmp4216.__isset.p = this.__isset.p;
          return tmp4216;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    P = new global::Yaskawa.Ext.API.Position();
                    await P.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4217 = new TStruct("setWorkHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp4217, cancellationToken);
            var tmp4218 = new TField();
            if(__isset.r)
            {
              tmp4218.Name = "r";
              tmp4218.Type = TType.I32;
              tmp4218.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4218, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((P != null) && __isset.p)
            {
              tmp4218.Name = "p";
              tmp4218.Type = TType.Struct;
              tmp4218.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp4218, cancellationToken);
              await P.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setWorkHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((P != null) && __isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4219 = new StringBuilder("setWorkHomePosition_args(");
          int tmp4220 = 0;
          if(__isset.r)
          {
            if(0 < tmp4220++) { tmp4219.Append(", "); }
            tmp4219.Append("R: ");
            R.ToString(tmp4219);
          }
          if((P != null) && __isset.p)
          {
            if(0 < tmp4220++) { tmp4219.Append(", "); }
            tmp4219.Append("P: ");
            P.ToString(tmp4219);
          }
          tmp4219.Append(')');
          return tmp4219.ToString();
        }
      }


      public partial class setWorkHomePosition_result : TBase
      {

        public setWorkHomePosition_result()
        {
        }

        public setWorkHomePosition_result DeepCopy()
        {
          var tmp4221 = new setWorkHomePosition_result();
          return tmp4221;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4222 = new TStruct("setWorkHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp4222, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setWorkHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4223 = new StringBuilder("setWorkHomePosition_result(");
          tmp4223.Append(')');
          return tmp4223.ToString();
        }
      }


      public partial class secondHomePosition_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public secondHomePosition_args()
        {
        }

        public secondHomePosition_args DeepCopy()
        {
          var tmp4225 = new secondHomePosition_args();
          if(__isset.r)
          {
            tmp4225.R = this.R;
          }
          tmp4225.__isset.r = this.__isset.r;
          return tmp4225;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4226 = new TStruct("secondHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp4226, cancellationToken);
            var tmp4227 = new TField();
            if(__isset.r)
            {
              tmp4227.Name = "r";
              tmp4227.Type = TType.I32;
              tmp4227.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4227, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is secondHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4228 = new StringBuilder("secondHomePosition_args(");
          int tmp4229 = 0;
          if(__isset.r)
          {
            if(0 < tmp4229++) { tmp4228.Append(", "); }
            tmp4228.Append("R: ");
            R.ToString(tmp4228);
          }
          tmp4228.Append(')');
          return tmp4228.ToString();
        }
      }


      public partial class secondHomePosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public secondHomePosition_result()
        {
        }

        public secondHomePosition_result DeepCopy()
        {
          var tmp4230 = new secondHomePosition_result();
          if((Success != null) && __isset.success)
          {
            tmp4230.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp4230.__isset.success = this.__isset.success;
          return tmp4230;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4231 = new TStruct("secondHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp4231, cancellationToken);
            var tmp4232 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4232.Name = "Success";
                tmp4232.Type = TType.Struct;
                tmp4232.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4232, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is secondHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4233 = new StringBuilder("secondHomePosition_result(");
          int tmp4234 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4234++) { tmp4233.Append(", "); }
            tmp4233.Append("Success: ");
            Success.ToString(tmp4233);
          }
          tmp4233.Append(')');
          return tmp4233.ToString();
        }
      }


      public partial class setSecondHomePosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.Position _p;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.Position P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool p;
        }

        public setSecondHomePosition_args()
        {
        }

        public setSecondHomePosition_args DeepCopy()
        {
          var tmp4235 = new setSecondHomePosition_args();
          if(__isset.r)
          {
            tmp4235.R = this.R;
          }
          tmp4235.__isset.r = this.__isset.r;
          if((P != null) && __isset.p)
          {
            tmp4235.P = (global::Yaskawa.Ext.API.Position)this.P.DeepCopy();
          }
          tmp4235.__isset.p = this.__isset.p;
          return tmp4235;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    P = new global::Yaskawa.Ext.API.Position();
                    await P.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4236 = new TStruct("setSecondHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp4236, cancellationToken);
            var tmp4237 = new TField();
            if(__isset.r)
            {
              tmp4237.Name = "r";
              tmp4237.Type = TType.I32;
              tmp4237.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4237, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((P != null) && __isset.p)
            {
              tmp4237.Name = "p";
              tmp4237.Type = TType.Struct;
              tmp4237.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp4237, cancellationToken);
              await P.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setSecondHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((P != null) && __isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4238 = new StringBuilder("setSecondHomePosition_args(");
          int tmp4239 = 0;
          if(__isset.r)
          {
            if(0 < tmp4239++) { tmp4238.Append(", "); }
            tmp4238.Append("R: ");
            R.ToString(tmp4238);
          }
          if((P != null) && __isset.p)
          {
            if(0 < tmp4239++) { tmp4238.Append(", "); }
            tmp4238.Append("P: ");
            P.ToString(tmp4238);
          }
          tmp4238.Append(')');
          return tmp4238.ToString();
        }
      }


      public partial class setSecondHomePosition_result : TBase
      {

        public setSecondHomePosition_result()
        {
        }

        public setSecondHomePosition_result DeepCopy()
        {
          var tmp4240 = new setSecondHomePosition_result();
          return tmp4240;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4241 = new TStruct("setSecondHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp4241, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setSecondHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4242 = new StringBuilder("setSecondHomePosition_result(");
          tmp4242.Append(')');
          return tmp4242.ToString();
        }
      }


      public partial class maximumLinearSpeed_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public maximumLinearSpeed_args()
        {
        }

        public maximumLinearSpeed_args DeepCopy()
        {
          var tmp4244 = new maximumLinearSpeed_args();
          if(__isset.r)
          {
            tmp4244.R = this.R;
          }
          tmp4244.__isset.r = this.__isset.r;
          return tmp4244;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4245 = new TStruct("maximumLinearSpeed_args");
            await oprot.WriteStructBeginAsync(tmp4245, cancellationToken);
            var tmp4246 = new TField();
            if(__isset.r)
            {
              tmp4246.Name = "r";
              tmp4246.Type = TType.I32;
              tmp4246.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4246, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is maximumLinearSpeed_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4247 = new StringBuilder("maximumLinearSpeed_args(");
          int tmp4248 = 0;
          if(__isset.r)
          {
            if(0 < tmp4248++) { tmp4247.Append(", "); }
            tmp4247.Append("R: ");
            R.ToString(tmp4247);
          }
          tmp4247.Append(')');
          return tmp4247.ToString();
        }
      }


      public partial class maximumLinearSpeed_result : TBase
      {
        private double _success;

        public double Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public maximumLinearSpeed_result()
        {
        }

        public maximumLinearSpeed_result DeepCopy()
        {
          var tmp4249 = new maximumLinearSpeed_result();
          if(__isset.success)
          {
            tmp4249.Success = this.Success;
          }
          tmp4249.__isset.success = this.__isset.success;
          return tmp4249;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Double)
                  {
                    Success = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4250 = new TStruct("maximumLinearSpeed_result");
            await oprot.WriteStructBeginAsync(tmp4250, cancellationToken);
            var tmp4251 = new TField();

            if(this.__isset.success)
            {
              tmp4251.Name = "Success";
              tmp4251.Type = TType.Double;
              tmp4251.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4251, cancellationToken);
              await oprot.WriteDoubleAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is maximumLinearSpeed_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4252 = new StringBuilder("maximumLinearSpeed_result(");
          int tmp4253 = 0;
          if(__isset.success)
          {
            if(0 < tmp4253++) { tmp4252.Append(", "); }
            tmp4252.Append("Success: ");
            Success.ToString(tmp4252);
          }
          tmp4252.Append(')');
          return tmp4252.ToString();
        }
      }

    }

  }
}
