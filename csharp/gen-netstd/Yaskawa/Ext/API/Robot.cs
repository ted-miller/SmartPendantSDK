/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Robot
  {
    public interface IAsync
    {
      /// <summary>
      /// The model string of this robot
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<string> model(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Number of degrees-of-freedom / axes
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<int> dof(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the joint labels for each axis of a robot (API Version 3.1 or Later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<List<string>> jointLabels(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the joint types of each axis for the specified robot (API Version 3.1 or Later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.JointType>> jointTypes(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Current position of the robot in joint coordinate frame (i.e. axis angles)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="unit"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default);

      /// <summary>
      /// Coordinates of the ToolTip (TCP) of of the specified tool
      /// in the given coordinate frame (using active tool if none specified)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="frame"></param>
      /// <param name="tool"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default);

      /// <summary>
      /// Does this robot support force limiting? (collaborative robot?)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingAvailable(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is force limiting currently active? (i.e. PFL - Power & Force Limiting)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingActive(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is the robot stopped due to an over-limit event?
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingStopped(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is an end-of-arm switch box installed?
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> switchBoxAvailable(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Index of the currently active tool
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<int> activeTool(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the currently active tool
      /// </summary>
      /// <param name="r"></param>
      /// <param name="tool"></param>
      global::System.Threading.Tasks.Task setActiveTool(int r, int tool, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the work home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> workHomePosition(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the robots current work home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the second home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> secondHomePosition(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the robots current second home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get a robot's maximum linear speed
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<double> maximumLinearSpeed(int r, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<string> model(int r, CancellationToken cancellationToken = default)
      {
        await send_model(r, cancellationToken);
        return await recv_model(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_model(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("model", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3888 = new InternalStructs.model_args() {
          R = r,
        };
        
        await tmp3888.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_model(CancellationToken cancellationToken = default)
      {
        
        var tmp3889 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3889.Type == TMessageType.Exception)
        {
          var tmp3890 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3890;
        }

        var tmp3891 = new InternalStructs.model_result();
        await tmp3891.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3891.__isset.success)
        {
          return tmp3891.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "model failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> dof(int r, CancellationToken cancellationToken = default)
      {
        await send_dof(r, cancellationToken);
        return await recv_dof(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dof(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3892 = new InternalStructs.dof_args() {
          R = r,
        };
        
        await tmp3892.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_dof(CancellationToken cancellationToken = default)
      {
        
        var tmp3893 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3893.Type == TMessageType.Exception)
        {
          var tmp3894 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3894;
        }

        var tmp3895 = new InternalStructs.dof_result();
        await tmp3895.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3895.__isset.success)
        {
          return tmp3895.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dof failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jointLabels(int r, CancellationToken cancellationToken = default)
      {
        await send_jointLabels(r, cancellationToken);
        return await recv_jointLabels(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointLabels(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointLabels", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3896 = new InternalStructs.jointLabels_args() {
          R = r,
        };
        
        await tmp3896.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jointLabels(CancellationToken cancellationToken = default)
      {
        
        var tmp3897 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3897.Type == TMessageType.Exception)
        {
          var tmp3898 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3898;
        }

        var tmp3899 = new InternalStructs.jointLabels_result();
        await tmp3899.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3899.__isset.success)
        {
          return tmp3899.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointLabels failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.JointType>> jointTypes(int r, CancellationToken cancellationToken = default)
      {
        await send_jointTypes(r, cancellationToken);
        return await recv_jointTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointTypes(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3900 = new InternalStructs.jointTypes_args() {
          R = r,
        };
        
        await tmp3900.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.JointType>> recv_jointTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp3901 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3901.Type == TMessageType.Exception)
        {
          var tmp3902 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3902;
        }

        var tmp3903 = new InternalStructs.jointTypes_result();
        await tmp3903.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3903.__isset.success)
        {
          return tmp3903.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointTypes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default)
      {
        await send_jointPosition(r, unit, cancellationToken);
        return await recv_jointPosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3904 = new InternalStructs.jointPosition_args() {
          R = r,
          Unit = unit,
        };
        
        await tmp3904.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_jointPosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3905 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3905.Type == TMessageType.Exception)
        {
          var tmp3906 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3906;
        }

        var tmp3907 = new InternalStructs.jointPosition_result();
        await tmp3907.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3907.__isset.success)
        {
          return tmp3907.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointPosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default)
      {
        await send_toolTipPosition(r, frame, tool, cancellationToken);
        return await recv_toolTipPosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3908 = new InternalStructs.toolTipPosition_args() {
          R = r,
          Frame = frame,
          Tool = tool,
        };
        
        await tmp3908.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_toolTipPosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3909 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3909.Type == TMessageType.Exception)
        {
          var tmp3910 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3910;
        }

        var tmp3911 = new InternalStructs.toolTipPosition_result();
        await tmp3911.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3911.__isset.success)
        {
          return tmp3911.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "toolTipPosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingAvailable(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingAvailable(r, cancellationToken);
        return await recv_forceLimitingAvailable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingAvailable(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3912 = new InternalStructs.forceLimitingAvailable_args() {
          R = r,
        };
        
        await tmp3912.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingAvailable(CancellationToken cancellationToken = default)
      {
        
        var tmp3913 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3913.Type == TMessageType.Exception)
        {
          var tmp3914 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3914;
        }

        var tmp3915 = new InternalStructs.forceLimitingAvailable_result();
        await tmp3915.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3915.__isset.success)
        {
          return tmp3915.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingAvailable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingActive(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingActive(r, cancellationToken);
        return await recv_forceLimitingActive(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingActive(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3916 = new InternalStructs.forceLimitingActive_args() {
          R = r,
        };
        
        await tmp3916.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingActive(CancellationToken cancellationToken = default)
      {
        
        var tmp3917 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3917.Type == TMessageType.Exception)
        {
          var tmp3918 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3918;
        }

        var tmp3919 = new InternalStructs.forceLimitingActive_result();
        await tmp3919.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3919.__isset.success)
        {
          return tmp3919.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingActive failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingStopped(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingStopped(r, cancellationToken);
        return await recv_forceLimitingStopped(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingStopped(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3920 = new InternalStructs.forceLimitingStopped_args() {
          R = r,
        };
        
        await tmp3920.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingStopped(CancellationToken cancellationToken = default)
      {
        
        var tmp3921 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3921.Type == TMessageType.Exception)
        {
          var tmp3922 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3922;
        }

        var tmp3923 = new InternalStructs.forceLimitingStopped_result();
        await tmp3923.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3923.__isset.success)
        {
          return tmp3923.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingStopped failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> switchBoxAvailable(int r, CancellationToken cancellationToken = default)
      {
        await send_switchBoxAvailable(r, cancellationToken);
        return await recv_switchBoxAvailable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_switchBoxAvailable(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3924 = new InternalStructs.switchBoxAvailable_args() {
          R = r,
        };
        
        await tmp3924.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_switchBoxAvailable(CancellationToken cancellationToken = default)
      {
        
        var tmp3925 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3925.Type == TMessageType.Exception)
        {
          var tmp3926 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3926;
        }

        var tmp3927 = new InternalStructs.switchBoxAvailable_result();
        await tmp3927.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3927.__isset.success)
        {
          return tmp3927.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "switchBoxAvailable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> activeTool(int r, CancellationToken cancellationToken = default)
      {
        await send_activeTool(r, cancellationToken);
        return await recv_activeTool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_activeTool(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3928 = new InternalStructs.activeTool_args() {
          R = r,
        };
        
        await tmp3928.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_activeTool(CancellationToken cancellationToken = default)
      {
        
        var tmp3929 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3929.Type == TMessageType.Exception)
        {
          var tmp3930 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3930;
        }

        var tmp3931 = new InternalStructs.activeTool_result();
        await tmp3931.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3931.__isset.success)
        {
          return tmp3931.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "activeTool failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setActiveTool(int r, int tool, CancellationToken cancellationToken = default)
      {
        await send_setActiveTool(r, tool, cancellationToken);
        await recv_setActiveTool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setActiveTool(int r, int tool, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3932 = new InternalStructs.setActiveTool_args() {
          R = r,
          Tool = tool,
        };
        
        await tmp3932.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setActiveTool(CancellationToken cancellationToken = default)
      {
        
        var tmp3933 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3933.Type == TMessageType.Exception)
        {
          var tmp3934 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3934;
        }

        var tmp3935 = new InternalStructs.setActiveTool_result();
        await tmp3935.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> workHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await send_workHomePosition(r, cancellationToken);
        return await recv_workHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_workHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3936 = new InternalStructs.workHomePosition_args() {
          R = r,
        };
        
        await tmp3936.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_workHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3937 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3937.Type == TMessageType.Exception)
        {
          var tmp3938 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3938;
        }

        var tmp3939 = new InternalStructs.workHomePosition_result();
        await tmp3939.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3939.__isset.success)
        {
          return tmp3939.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "workHomePosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await send_setWorkHomePosition(r, p, cancellationToken);
        await recv_setWorkHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3940 = new InternalStructs.setWorkHomePosition_args() {
          R = r,
          P = p,
        };
        
        await tmp3940.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setWorkHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3941 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3941.Type == TMessageType.Exception)
        {
          var tmp3942 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3942;
        }

        var tmp3943 = new InternalStructs.setWorkHomePosition_result();
        await tmp3943.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> secondHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await send_secondHomePosition(r, cancellationToken);
        return await recv_secondHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_secondHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3944 = new InternalStructs.secondHomePosition_args() {
          R = r,
        };
        
        await tmp3944.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_secondHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3945 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3945.Type == TMessageType.Exception)
        {
          var tmp3946 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3946;
        }

        var tmp3947 = new InternalStructs.secondHomePosition_result();
        await tmp3947.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3947.__isset.success)
        {
          return tmp3947.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "secondHomePosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await send_setSecondHomePosition(r, p, cancellationToken);
        await recv_setSecondHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3948 = new InternalStructs.setSecondHomePosition_args() {
          R = r,
          P = p,
        };
        
        await tmp3948.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setSecondHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3949 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3949.Type == TMessageType.Exception)
        {
          var tmp3950 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3950;
        }

        var tmp3951 = new InternalStructs.setSecondHomePosition_result();
        await tmp3951.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> maximumLinearSpeed(int r, CancellationToken cancellationToken = default)
      {
        await send_maximumLinearSpeed(r, cancellationToken);
        return await recv_maximumLinearSpeed(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_maximumLinearSpeed(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3952 = new InternalStructs.maximumLinearSpeed_args() {
          R = r,
        };
        
        await tmp3952.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> recv_maximumLinearSpeed(CancellationToken cancellationToken = default)
      {
        
        var tmp3953 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3953.Type == TMessageType.Exception)
        {
          var tmp3954 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3954;
        }

        var tmp3955 = new InternalStructs.maximumLinearSpeed_result();
        await tmp3955.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3955.__isset.success)
        {
          return tmp3955.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "maximumLinearSpeed failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["model"] = model_ProcessAsync;
        processMap_["dof"] = dof_ProcessAsync;
        processMap_["jointLabels"] = jointLabels_ProcessAsync;
        processMap_["jointTypes"] = jointTypes_ProcessAsync;
        processMap_["jointPosition"] = jointPosition_ProcessAsync;
        processMap_["toolTipPosition"] = toolTipPosition_ProcessAsync;
        processMap_["forceLimitingAvailable"] = forceLimitingAvailable_ProcessAsync;
        processMap_["forceLimitingActive"] = forceLimitingActive_ProcessAsync;
        processMap_["forceLimitingStopped"] = forceLimitingStopped_ProcessAsync;
        processMap_["switchBoxAvailable"] = switchBoxAvailable_ProcessAsync;
        processMap_["activeTool"] = activeTool_ProcessAsync;
        processMap_["setActiveTool"] = setActiveTool_ProcessAsync;
        processMap_["workHomePosition"] = workHomePosition_ProcessAsync;
        processMap_["setWorkHomePosition"] = setWorkHomePosition_ProcessAsync;
        processMap_["secondHomePosition"] = secondHomePosition_ProcessAsync;
        processMap_["setSecondHomePosition"] = setSecondHomePosition_ProcessAsync;
        processMap_["maximumLinearSpeed"] = maximumLinearSpeed_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task model_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3956 = new InternalStructs.model_args();
        await tmp3956.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3957 = new InternalStructs.model_result();
        try
        {
          tmp3957.Success = await _iAsync.model(tmp3956.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("model", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3957.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3958)
        {
          var tmp3959 = $"Error occurred in {GetType().FullName}: {tmp3958.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3958, tmp3959);
          else
            Console.Error.WriteLine(tmp3959);
          var tmp3960 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("model", TMessageType.Exception, seqid), cancellationToken);
          await tmp3960.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dof_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3961 = new InternalStructs.dof_args();
        await tmp3961.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3962 = new InternalStructs.dof_result();
        try
        {
          tmp3962.Success = await _iAsync.dof(tmp3961.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3962.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3963)
        {
          var tmp3964 = $"Error occurred in {GetType().FullName}: {tmp3963.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3963, tmp3964);
          else
            Console.Error.WriteLine(tmp3964);
          var tmp3965 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Exception, seqid), cancellationToken);
          await tmp3965.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointLabels_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3966 = new InternalStructs.jointLabels_args();
        await tmp3966.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3967 = new InternalStructs.jointLabels_result();
        try
        {
          tmp3967.Success = await _iAsync.jointLabels(tmp3966.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointLabels", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3967.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3968)
        {
          var tmp3969 = $"Error occurred in {GetType().FullName}: {tmp3968.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3968, tmp3969);
          else
            Console.Error.WriteLine(tmp3969);
          var tmp3970 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointLabels", TMessageType.Exception, seqid), cancellationToken);
          await tmp3970.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3971 = new InternalStructs.jointTypes_args();
        await tmp3971.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3972 = new InternalStructs.jointTypes_result();
        try
        {
          tmp3972.Success = await _iAsync.jointTypes(tmp3971.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3972.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3973)
        {
          var tmp3974 = $"Error occurred in {GetType().FullName}: {tmp3973.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3973, tmp3974);
          else
            Console.Error.WriteLine(tmp3974);
          var tmp3975 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp3975.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointPosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3976 = new InternalStructs.jointPosition_args();
        await tmp3976.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3977 = new InternalStructs.jointPosition_result();
        try
        {
          tmp3977.Success = await _iAsync.jointPosition(tmp3976.R, tmp3976.Unit, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3977.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3978)
        {
          var tmp3979 = $"Error occurred in {GetType().FullName}: {tmp3978.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3978, tmp3979);
          else
            Console.Error.WriteLine(tmp3979);
          var tmp3980 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3980.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task toolTipPosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3981 = new InternalStructs.toolTipPosition_args();
        await tmp3981.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3982 = new InternalStructs.toolTipPosition_result();
        try
        {
          tmp3982.Success = await _iAsync.toolTipPosition(tmp3981.R, tmp3981.Frame, tmp3981.Tool, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3982.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3983)
        {
          var tmp3984 = $"Error occurred in {GetType().FullName}: {tmp3983.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3983, tmp3984);
          else
            Console.Error.WriteLine(tmp3984);
          var tmp3985 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3985.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingAvailable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3986 = new InternalStructs.forceLimitingAvailable_args();
        await tmp3986.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3987 = new InternalStructs.forceLimitingAvailable_result();
        try
        {
          tmp3987.Success = await _iAsync.forceLimitingAvailable(tmp3986.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3987.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3988)
        {
          var tmp3989 = $"Error occurred in {GetType().FullName}: {tmp3988.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3988, tmp3989);
          else
            Console.Error.WriteLine(tmp3989);
          var tmp3990 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Exception, seqid), cancellationToken);
          await tmp3990.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingActive_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3991 = new InternalStructs.forceLimitingActive_args();
        await tmp3991.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3992 = new InternalStructs.forceLimitingActive_result();
        try
        {
          tmp3992.Success = await _iAsync.forceLimitingActive(tmp3991.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3992.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3993)
        {
          var tmp3994 = $"Error occurred in {GetType().FullName}: {tmp3993.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3993, tmp3994);
          else
            Console.Error.WriteLine(tmp3994);
          var tmp3995 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Exception, seqid), cancellationToken);
          await tmp3995.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingStopped_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3996 = new InternalStructs.forceLimitingStopped_args();
        await tmp3996.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3997 = new InternalStructs.forceLimitingStopped_result();
        try
        {
          tmp3997.Success = await _iAsync.forceLimitingStopped(tmp3996.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3997.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3998)
        {
          var tmp3999 = $"Error occurred in {GetType().FullName}: {tmp3998.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3998, tmp3999);
          else
            Console.Error.WriteLine(tmp3999);
          var tmp4000 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Exception, seqid), cancellationToken);
          await tmp4000.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task switchBoxAvailable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4001 = new InternalStructs.switchBoxAvailable_args();
        await tmp4001.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4002 = new InternalStructs.switchBoxAvailable_result();
        try
        {
          tmp4002.Success = await _iAsync.switchBoxAvailable(tmp4001.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4002.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4003)
        {
          var tmp4004 = $"Error occurred in {GetType().FullName}: {tmp4003.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4003, tmp4004);
          else
            Console.Error.WriteLine(tmp4004);
          var tmp4005 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Exception, seqid), cancellationToken);
          await tmp4005.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task activeTool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4006 = new InternalStructs.activeTool_args();
        await tmp4006.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4007 = new InternalStructs.activeTool_result();
        try
        {
          tmp4007.Success = await _iAsync.activeTool(tmp4006.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4007.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4008)
        {
          var tmp4009 = $"Error occurred in {GetType().FullName}: {tmp4008.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4008, tmp4009);
          else
            Console.Error.WriteLine(tmp4009);
          var tmp4010 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Exception, seqid), cancellationToken);
          await tmp4010.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setActiveTool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4011 = new InternalStructs.setActiveTool_args();
        await tmp4011.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4012 = new InternalStructs.setActiveTool_result();
        try
        {
          await _iAsync.setActiveTool(tmp4011.R, tmp4011.Tool, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4012.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4013)
        {
          var tmp4014 = $"Error occurred in {GetType().FullName}: {tmp4013.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4013, tmp4014);
          else
            Console.Error.WriteLine(tmp4014);
          var tmp4015 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Exception, seqid), cancellationToken);
          await tmp4015.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task workHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4016 = new InternalStructs.workHomePosition_args();
        await tmp4016.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4017 = new InternalStructs.workHomePosition_result();
        try
        {
          tmp4017.Success = await _iAsync.workHomePosition(tmp4016.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4017.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4018)
        {
          var tmp4019 = $"Error occurred in {GetType().FullName}: {tmp4018.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4018, tmp4019);
          else
            Console.Error.WriteLine(tmp4019);
          var tmp4020 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp4020.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setWorkHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4021 = new InternalStructs.setWorkHomePosition_args();
        await tmp4021.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4022 = new InternalStructs.setWorkHomePosition_result();
        try
        {
          await _iAsync.setWorkHomePosition(tmp4021.R, tmp4021.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4022.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4023)
        {
          var tmp4024 = $"Error occurred in {GetType().FullName}: {tmp4023.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4023, tmp4024);
          else
            Console.Error.WriteLine(tmp4024);
          var tmp4025 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp4025.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task secondHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4026 = new InternalStructs.secondHomePosition_args();
        await tmp4026.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4027 = new InternalStructs.secondHomePosition_result();
        try
        {
          tmp4027.Success = await _iAsync.secondHomePosition(tmp4026.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4027.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4028)
        {
          var tmp4029 = $"Error occurred in {GetType().FullName}: {tmp4028.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4028, tmp4029);
          else
            Console.Error.WriteLine(tmp4029);
          var tmp4030 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp4030.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setSecondHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4031 = new InternalStructs.setSecondHomePosition_args();
        await tmp4031.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4032 = new InternalStructs.setSecondHomePosition_result();
        try
        {
          await _iAsync.setSecondHomePosition(tmp4031.R, tmp4031.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4032.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4033)
        {
          var tmp4034 = $"Error occurred in {GetType().FullName}: {tmp4033.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4033, tmp4034);
          else
            Console.Error.WriteLine(tmp4034);
          var tmp4035 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp4035.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task maximumLinearSpeed_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4036 = new InternalStructs.maximumLinearSpeed_args();
        await tmp4036.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp4037 = new InternalStructs.maximumLinearSpeed_result();
        try
        {
          tmp4037.Success = await _iAsync.maximumLinearSpeed(tmp4036.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Reply, seqid), cancellationToken); 
          await tmp4037.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp4038)
        {
          var tmp4039 = $"Error occurred in {GetType().FullName}: {tmp4038.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp4038, tmp4039);
          else
            Console.Error.WriteLine(tmp4039);
          var tmp4040 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Exception, seqid), cancellationToken);
          await tmp4040.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class model_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public model_args()
        {
        }

        public model_args DeepCopy()
        {
          var tmp4041 = new model_args();
          if(__isset.r)
          {
            tmp4041.R = this.R;
          }
          tmp4041.__isset.r = this.__isset.r;
          return tmp4041;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4042 = new TStruct("model_args");
            await oprot.WriteStructBeginAsync(tmp4042, cancellationToken);
            var tmp4043 = new TField();
            if(__isset.r)
            {
              tmp4043.Name = "r";
              tmp4043.Type = TType.I32;
              tmp4043.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4043, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is model_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4044 = new StringBuilder("model_args(");
          int tmp4045 = 0;
          if(__isset.r)
          {
            if(0 < tmp4045++) { tmp4044.Append(", "); }
            tmp4044.Append("R: ");
            R.ToString(tmp4044);
          }
          tmp4044.Append(')');
          return tmp4044.ToString();
        }
      }


      public partial class model_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public model_result()
        {
        }

        public model_result DeepCopy()
        {
          var tmp4046 = new model_result();
          if((Success != null) && __isset.success)
          {
            tmp4046.Success = this.Success;
          }
          tmp4046.__isset.success = this.__isset.success;
          return tmp4046;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4047 = new TStruct("model_result");
            await oprot.WriteStructBeginAsync(tmp4047, cancellationToken);
            var tmp4048 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4048.Name = "Success";
                tmp4048.Type = TType.String;
                tmp4048.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4048, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is model_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4049 = new StringBuilder("model_result(");
          int tmp4050 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4050++) { tmp4049.Append(", "); }
            tmp4049.Append("Success: ");
            Success.ToString(tmp4049);
          }
          tmp4049.Append(')');
          return tmp4049.ToString();
        }
      }


      public partial class dof_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public dof_args()
        {
        }

        public dof_args DeepCopy()
        {
          var tmp4051 = new dof_args();
          if(__isset.r)
          {
            tmp4051.R = this.R;
          }
          tmp4051.__isset.r = this.__isset.r;
          return tmp4051;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4052 = new TStruct("dof_args");
            await oprot.WriteStructBeginAsync(tmp4052, cancellationToken);
            var tmp4053 = new TField();
            if(__isset.r)
            {
              tmp4053.Name = "r";
              tmp4053.Type = TType.I32;
              tmp4053.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4053, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dof_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4054 = new StringBuilder("dof_args(");
          int tmp4055 = 0;
          if(__isset.r)
          {
            if(0 < tmp4055++) { tmp4054.Append(", "); }
            tmp4054.Append("R: ");
            R.ToString(tmp4054);
          }
          tmp4054.Append(')');
          return tmp4054.ToString();
        }
      }


      public partial class dof_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dof_result()
        {
        }

        public dof_result DeepCopy()
        {
          var tmp4056 = new dof_result();
          if(__isset.success)
          {
            tmp4056.Success = this.Success;
          }
          tmp4056.__isset.success = this.__isset.success;
          return tmp4056;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4057 = new TStruct("dof_result");
            await oprot.WriteStructBeginAsync(tmp4057, cancellationToken);
            var tmp4058 = new TField();

            if(this.__isset.success)
            {
              tmp4058.Name = "Success";
              tmp4058.Type = TType.I32;
              tmp4058.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4058, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dof_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4059 = new StringBuilder("dof_result(");
          int tmp4060 = 0;
          if(__isset.success)
          {
            if(0 < tmp4060++) { tmp4059.Append(", "); }
            tmp4059.Append("Success: ");
            Success.ToString(tmp4059);
          }
          tmp4059.Append(')');
          return tmp4059.ToString();
        }
      }


      public partial class jointLabels_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public jointLabels_args()
        {
        }

        public jointLabels_args DeepCopy()
        {
          var tmp4061 = new jointLabels_args();
          if(__isset.r)
          {
            tmp4061.R = this.R;
          }
          tmp4061.__isset.r = this.__isset.r;
          return tmp4061;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4062 = new TStruct("jointLabels_args");
            await oprot.WriteStructBeginAsync(tmp4062, cancellationToken);
            var tmp4063 = new TField();
            if(__isset.r)
            {
              tmp4063.Name = "r";
              tmp4063.Type = TType.I32;
              tmp4063.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4063, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointLabels_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4064 = new StringBuilder("jointLabels_args(");
          int tmp4065 = 0;
          if(__isset.r)
          {
            if(0 < tmp4065++) { tmp4064.Append(", "); }
            tmp4064.Append("R: ");
            R.ToString(tmp4064);
          }
          tmp4064.Append(')');
          return tmp4064.ToString();
        }
      }


      public partial class jointLabels_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointLabels_result()
        {
        }

        public jointLabels_result DeepCopy()
        {
          var tmp4066 = new jointLabels_result();
          if((Success != null) && __isset.success)
          {
            tmp4066.Success = this.Success.DeepCopy();
          }
          tmp4066.__isset.success = this.__isset.success;
          return tmp4066;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list4067 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list4067.Count);
                      for(int _i4068 = 0; _i4068 < _list4067.Count; ++_i4068)
                      {
                        string _elem4069;
                        _elem4069 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem4069);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4070 = new TStruct("jointLabels_result");
            await oprot.WriteStructBeginAsync(tmp4070, cancellationToken);
            var tmp4071 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4071.Name = "Success";
                tmp4071.Type = TType.List;
                tmp4071.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4071, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter4072 in Success)
                {
                  await oprot.WriteStringAsync(_iter4072, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointLabels_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4073 = new StringBuilder("jointLabels_result(");
          int tmp4074 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4074++) { tmp4073.Append(", "); }
            tmp4073.Append("Success: ");
            Success.ToString(tmp4073);
          }
          tmp4073.Append(')');
          return tmp4073.ToString();
        }
      }


      public partial class jointTypes_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public jointTypes_args()
        {
        }

        public jointTypes_args DeepCopy()
        {
          var tmp4075 = new jointTypes_args();
          if(__isset.r)
          {
            tmp4075.R = this.R;
          }
          tmp4075.__isset.r = this.__isset.r;
          return tmp4075;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4076 = new TStruct("jointTypes_args");
            await oprot.WriteStructBeginAsync(tmp4076, cancellationToken);
            var tmp4077 = new TField();
            if(__isset.r)
            {
              tmp4077.Name = "r";
              tmp4077.Type = TType.I32;
              tmp4077.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4077, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4078 = new StringBuilder("jointTypes_args(");
          int tmp4079 = 0;
          if(__isset.r)
          {
            if(0 < tmp4079++) { tmp4078.Append(", "); }
            tmp4078.Append("R: ");
            R.ToString(tmp4078);
          }
          tmp4078.Append(')');
          return tmp4078.ToString();
        }
      }


      public partial class jointTypes_result : TBase
      {
        private List<global::Yaskawa.Ext.API.JointType> _success;

        public List<global::Yaskawa.Ext.API.JointType> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointTypes_result()
        {
        }

        public jointTypes_result DeepCopy()
        {
          var tmp4080 = new jointTypes_result();
          if((Success != null) && __isset.success)
          {
            tmp4080.Success = this.Success.DeepCopy();
          }
          tmp4080.__isset.success = this.__isset.success;
          return tmp4080;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list4081 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.JointType>(_list4081.Count);
                      for(int _i4082 = 0; _i4082 < _list4081.Count; ++_i4082)
                      {
                        global::Yaskawa.Ext.API.JointType _elem4083;
                        _elem4083 = (global::Yaskawa.Ext.API.JointType)await iprot.ReadI32Async(cancellationToken);
                        Success.Add(_elem4083);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4084 = new TStruct("jointTypes_result");
            await oprot.WriteStructBeginAsync(tmp4084, cancellationToken);
            var tmp4085 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4085.Name = "Success";
                tmp4085.Type = TType.List;
                tmp4085.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4085, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.I32, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.JointType _iter4086 in Success)
                {
                  await oprot.WriteI32Async((int)_iter4086, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4087 = new StringBuilder("jointTypes_result(");
          int tmp4088 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4088++) { tmp4087.Append(", "); }
            tmp4087.Append("Success: ");
            Success.ToString(tmp4087);
          }
          tmp4087.Append(')');
          return tmp4087.ToString();
        }
      }


      public partial class jointPosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.OrientationUnit _unit;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.OrientationUnit"/>
        /// </summary>
        public global::Yaskawa.Ext.API.OrientationUnit Unit
        {
          get
          {
            return _unit;
          }
          set
          {
            __isset.unit = true;
            this._unit = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool unit;
        }

        public jointPosition_args()
        {
        }

        public jointPosition_args DeepCopy()
        {
          var tmp4089 = new jointPosition_args();
          if(__isset.r)
          {
            tmp4089.R = this.R;
          }
          tmp4089.__isset.r = this.__isset.r;
          if(__isset.unit)
          {
            tmp4089.Unit = this.Unit;
          }
          tmp4089.__isset.unit = this.__isset.unit;
          return tmp4089;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Unit = (global::Yaskawa.Ext.API.OrientationUnit)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4090 = new TStruct("jointPosition_args");
            await oprot.WriteStructBeginAsync(tmp4090, cancellationToken);
            var tmp4091 = new TField();
            if(__isset.r)
            {
              tmp4091.Name = "r";
              tmp4091.Type = TType.I32;
              tmp4091.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4091, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.unit)
            {
              tmp4091.Name = "unit";
              tmp4091.Type = TType.I32;
              tmp4091.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp4091, cancellationToken);
              await oprot.WriteI32Async((int)Unit, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointPosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.unit == other.__isset.unit) && ((!__isset.unit) || (global::System.Object.Equals(Unit, other.Unit))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if(__isset.unit)
            {
              hashcode = (hashcode * 397) + Unit.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4092 = new StringBuilder("jointPosition_args(");
          int tmp4093 = 0;
          if(__isset.r)
          {
            if(0 < tmp4093++) { tmp4092.Append(", "); }
            tmp4092.Append("R: ");
            R.ToString(tmp4092);
          }
          if(__isset.unit)
          {
            if(0 < tmp4093++) { tmp4092.Append(", "); }
            tmp4092.Append("Unit: ");
            Unit.ToString(tmp4092);
          }
          tmp4092.Append(')');
          return tmp4092.ToString();
        }
      }


      public partial class jointPosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointPosition_result()
        {
        }

        public jointPosition_result DeepCopy()
        {
          var tmp4094 = new jointPosition_result();
          if((Success != null) && __isset.success)
          {
            tmp4094.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp4094.__isset.success = this.__isset.success;
          return tmp4094;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4095 = new TStruct("jointPosition_result");
            await oprot.WriteStructBeginAsync(tmp4095, cancellationToken);
            var tmp4096 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4096.Name = "Success";
                tmp4096.Type = TType.Struct;
                tmp4096.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4096, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointPosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4097 = new StringBuilder("jointPosition_result(");
          int tmp4098 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4098++) { tmp4097.Append(", "); }
            tmp4097.Append("Success: ");
            Success.ToString(tmp4097);
          }
          tmp4097.Append(')');
          return tmp4097.ToString();
        }
      }


      public partial class toolTipPosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.CoordinateFrame _frame;
        private int _tool;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.CoordinateFrame Frame
        {
          get
          {
            return _frame;
          }
          set
          {
            __isset.frame = true;
            this._frame = value;
          }
        }

        public int Tool
        {
          get
          {
            return _tool;
          }
          set
          {
            __isset.tool = true;
            this._tool = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool frame;
          public bool tool;
        }

        public toolTipPosition_args()
        {
        }

        public toolTipPosition_args DeepCopy()
        {
          var tmp4099 = new toolTipPosition_args();
          if(__isset.r)
          {
            tmp4099.R = this.R;
          }
          tmp4099.__isset.r = this.__isset.r;
          if((Frame != null) && __isset.frame)
          {
            tmp4099.Frame = (global::Yaskawa.Ext.API.CoordinateFrame)this.Frame.DeepCopy();
          }
          tmp4099.__isset.frame = this.__isset.frame;
          if(__isset.tool)
          {
            tmp4099.Tool = this.Tool;
          }
          tmp4099.__isset.tool = this.__isset.tool;
          return tmp4099;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Frame = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await Frame.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Tool = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4100 = new TStruct("toolTipPosition_args");
            await oprot.WriteStructBeginAsync(tmp4100, cancellationToken);
            var tmp4101 = new TField();
            if(__isset.r)
            {
              tmp4101.Name = "r";
              tmp4101.Type = TType.I32;
              tmp4101.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4101, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Frame != null) && __isset.frame)
            {
              tmp4101.Name = "frame";
              tmp4101.Type = TType.Struct;
              tmp4101.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp4101, cancellationToken);
              await Frame.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.tool)
            {
              tmp4101.Name = "tool";
              tmp4101.Type = TType.I32;
              tmp4101.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp4101, cancellationToken);
              await oprot.WriteI32Async(Tool, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is toolTipPosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.frame == other.__isset.frame) && ((!__isset.frame) || (global::System.Object.Equals(Frame, other.Frame))))
            && ((__isset.tool == other.__isset.tool) && ((!__isset.tool) || (global::System.Object.Equals(Tool, other.Tool))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((Frame != null) && __isset.frame)
            {
              hashcode = (hashcode * 397) + Frame.GetHashCode();
            }
            if(__isset.tool)
            {
              hashcode = (hashcode * 397) + Tool.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4102 = new StringBuilder("toolTipPosition_args(");
          int tmp4103 = 0;
          if(__isset.r)
          {
            if(0 < tmp4103++) { tmp4102.Append(", "); }
            tmp4102.Append("R: ");
            R.ToString(tmp4102);
          }
          if((Frame != null) && __isset.frame)
          {
            if(0 < tmp4103++) { tmp4102.Append(", "); }
            tmp4102.Append("Frame: ");
            Frame.ToString(tmp4102);
          }
          if(__isset.tool)
          {
            if(0 < tmp4103++) { tmp4102.Append(", "); }
            tmp4102.Append("Tool: ");
            Tool.ToString(tmp4102);
          }
          tmp4102.Append(')');
          return tmp4102.ToString();
        }
      }


      public partial class toolTipPosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public toolTipPosition_result()
        {
        }

        public toolTipPosition_result DeepCopy()
        {
          var tmp4104 = new toolTipPosition_result();
          if((Success != null) && __isset.success)
          {
            tmp4104.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp4104.__isset.success = this.__isset.success;
          return tmp4104;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4105 = new TStruct("toolTipPosition_result");
            await oprot.WriteStructBeginAsync(tmp4105, cancellationToken);
            var tmp4106 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4106.Name = "Success";
                tmp4106.Type = TType.Struct;
                tmp4106.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4106, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is toolTipPosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4107 = new StringBuilder("toolTipPosition_result(");
          int tmp4108 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4108++) { tmp4107.Append(", "); }
            tmp4107.Append("Success: ");
            Success.ToString(tmp4107);
          }
          tmp4107.Append(')');
          return tmp4107.ToString();
        }
      }


      public partial class forceLimitingAvailable_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingAvailable_args()
        {
        }

        public forceLimitingAvailable_args DeepCopy()
        {
          var tmp4109 = new forceLimitingAvailable_args();
          if(__isset.r)
          {
            tmp4109.R = this.R;
          }
          tmp4109.__isset.r = this.__isset.r;
          return tmp4109;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4110 = new TStruct("forceLimitingAvailable_args");
            await oprot.WriteStructBeginAsync(tmp4110, cancellationToken);
            var tmp4111 = new TField();
            if(__isset.r)
            {
              tmp4111.Name = "r";
              tmp4111.Type = TType.I32;
              tmp4111.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4111, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingAvailable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4112 = new StringBuilder("forceLimitingAvailable_args(");
          int tmp4113 = 0;
          if(__isset.r)
          {
            if(0 < tmp4113++) { tmp4112.Append(", "); }
            tmp4112.Append("R: ");
            R.ToString(tmp4112);
          }
          tmp4112.Append(')');
          return tmp4112.ToString();
        }
      }


      public partial class forceLimitingAvailable_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingAvailable_result()
        {
        }

        public forceLimitingAvailable_result DeepCopy()
        {
          var tmp4114 = new forceLimitingAvailable_result();
          if(__isset.success)
          {
            tmp4114.Success = this.Success;
          }
          tmp4114.__isset.success = this.__isset.success;
          return tmp4114;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4115 = new TStruct("forceLimitingAvailable_result");
            await oprot.WriteStructBeginAsync(tmp4115, cancellationToken);
            var tmp4116 = new TField();

            if(this.__isset.success)
            {
              tmp4116.Name = "Success";
              tmp4116.Type = TType.Bool;
              tmp4116.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4116, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingAvailable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4117 = new StringBuilder("forceLimitingAvailable_result(");
          int tmp4118 = 0;
          if(__isset.success)
          {
            if(0 < tmp4118++) { tmp4117.Append(", "); }
            tmp4117.Append("Success: ");
            Success.ToString(tmp4117);
          }
          tmp4117.Append(')');
          return tmp4117.ToString();
        }
      }


      public partial class forceLimitingActive_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingActive_args()
        {
        }

        public forceLimitingActive_args DeepCopy()
        {
          var tmp4119 = new forceLimitingActive_args();
          if(__isset.r)
          {
            tmp4119.R = this.R;
          }
          tmp4119.__isset.r = this.__isset.r;
          return tmp4119;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4120 = new TStruct("forceLimitingActive_args");
            await oprot.WriteStructBeginAsync(tmp4120, cancellationToken);
            var tmp4121 = new TField();
            if(__isset.r)
            {
              tmp4121.Name = "r";
              tmp4121.Type = TType.I32;
              tmp4121.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4121, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingActive_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4122 = new StringBuilder("forceLimitingActive_args(");
          int tmp4123 = 0;
          if(__isset.r)
          {
            if(0 < tmp4123++) { tmp4122.Append(", "); }
            tmp4122.Append("R: ");
            R.ToString(tmp4122);
          }
          tmp4122.Append(')');
          return tmp4122.ToString();
        }
      }


      public partial class forceLimitingActive_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingActive_result()
        {
        }

        public forceLimitingActive_result DeepCopy()
        {
          var tmp4124 = new forceLimitingActive_result();
          if(__isset.success)
          {
            tmp4124.Success = this.Success;
          }
          tmp4124.__isset.success = this.__isset.success;
          return tmp4124;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4125 = new TStruct("forceLimitingActive_result");
            await oprot.WriteStructBeginAsync(tmp4125, cancellationToken);
            var tmp4126 = new TField();

            if(this.__isset.success)
            {
              tmp4126.Name = "Success";
              tmp4126.Type = TType.Bool;
              tmp4126.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4126, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingActive_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4127 = new StringBuilder("forceLimitingActive_result(");
          int tmp4128 = 0;
          if(__isset.success)
          {
            if(0 < tmp4128++) { tmp4127.Append(", "); }
            tmp4127.Append("Success: ");
            Success.ToString(tmp4127);
          }
          tmp4127.Append(')');
          return tmp4127.ToString();
        }
      }


      public partial class forceLimitingStopped_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingStopped_args()
        {
        }

        public forceLimitingStopped_args DeepCopy()
        {
          var tmp4129 = new forceLimitingStopped_args();
          if(__isset.r)
          {
            tmp4129.R = this.R;
          }
          tmp4129.__isset.r = this.__isset.r;
          return tmp4129;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4130 = new TStruct("forceLimitingStopped_args");
            await oprot.WriteStructBeginAsync(tmp4130, cancellationToken);
            var tmp4131 = new TField();
            if(__isset.r)
            {
              tmp4131.Name = "r";
              tmp4131.Type = TType.I32;
              tmp4131.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4131, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingStopped_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4132 = new StringBuilder("forceLimitingStopped_args(");
          int tmp4133 = 0;
          if(__isset.r)
          {
            if(0 < tmp4133++) { tmp4132.Append(", "); }
            tmp4132.Append("R: ");
            R.ToString(tmp4132);
          }
          tmp4132.Append(')');
          return tmp4132.ToString();
        }
      }


      public partial class forceLimitingStopped_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingStopped_result()
        {
        }

        public forceLimitingStopped_result DeepCopy()
        {
          var tmp4134 = new forceLimitingStopped_result();
          if(__isset.success)
          {
            tmp4134.Success = this.Success;
          }
          tmp4134.__isset.success = this.__isset.success;
          return tmp4134;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4135 = new TStruct("forceLimitingStopped_result");
            await oprot.WriteStructBeginAsync(tmp4135, cancellationToken);
            var tmp4136 = new TField();

            if(this.__isset.success)
            {
              tmp4136.Name = "Success";
              tmp4136.Type = TType.Bool;
              tmp4136.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4136, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingStopped_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4137 = new StringBuilder("forceLimitingStopped_result(");
          int tmp4138 = 0;
          if(__isset.success)
          {
            if(0 < tmp4138++) { tmp4137.Append(", "); }
            tmp4137.Append("Success: ");
            Success.ToString(tmp4137);
          }
          tmp4137.Append(')');
          return tmp4137.ToString();
        }
      }


      public partial class switchBoxAvailable_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public switchBoxAvailable_args()
        {
        }

        public switchBoxAvailable_args DeepCopy()
        {
          var tmp4139 = new switchBoxAvailable_args();
          if(__isset.r)
          {
            tmp4139.R = this.R;
          }
          tmp4139.__isset.r = this.__isset.r;
          return tmp4139;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4140 = new TStruct("switchBoxAvailable_args");
            await oprot.WriteStructBeginAsync(tmp4140, cancellationToken);
            var tmp4141 = new TField();
            if(__isset.r)
            {
              tmp4141.Name = "r";
              tmp4141.Type = TType.I32;
              tmp4141.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4141, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is switchBoxAvailable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4142 = new StringBuilder("switchBoxAvailable_args(");
          int tmp4143 = 0;
          if(__isset.r)
          {
            if(0 < tmp4143++) { tmp4142.Append(", "); }
            tmp4142.Append("R: ");
            R.ToString(tmp4142);
          }
          tmp4142.Append(')');
          return tmp4142.ToString();
        }
      }


      public partial class switchBoxAvailable_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public switchBoxAvailable_result()
        {
        }

        public switchBoxAvailable_result DeepCopy()
        {
          var tmp4144 = new switchBoxAvailable_result();
          if(__isset.success)
          {
            tmp4144.Success = this.Success;
          }
          tmp4144.__isset.success = this.__isset.success;
          return tmp4144;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4145 = new TStruct("switchBoxAvailable_result");
            await oprot.WriteStructBeginAsync(tmp4145, cancellationToken);
            var tmp4146 = new TField();

            if(this.__isset.success)
            {
              tmp4146.Name = "Success";
              tmp4146.Type = TType.Bool;
              tmp4146.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4146, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is switchBoxAvailable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4147 = new StringBuilder("switchBoxAvailable_result(");
          int tmp4148 = 0;
          if(__isset.success)
          {
            if(0 < tmp4148++) { tmp4147.Append(", "); }
            tmp4147.Append("Success: ");
            Success.ToString(tmp4147);
          }
          tmp4147.Append(')');
          return tmp4147.ToString();
        }
      }


      public partial class activeTool_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public activeTool_args()
        {
        }

        public activeTool_args DeepCopy()
        {
          var tmp4149 = new activeTool_args();
          if(__isset.r)
          {
            tmp4149.R = this.R;
          }
          tmp4149.__isset.r = this.__isset.r;
          return tmp4149;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4150 = new TStruct("activeTool_args");
            await oprot.WriteStructBeginAsync(tmp4150, cancellationToken);
            var tmp4151 = new TField();
            if(__isset.r)
            {
              tmp4151.Name = "r";
              tmp4151.Type = TType.I32;
              tmp4151.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4151, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is activeTool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4152 = new StringBuilder("activeTool_args(");
          int tmp4153 = 0;
          if(__isset.r)
          {
            if(0 < tmp4153++) { tmp4152.Append(", "); }
            tmp4152.Append("R: ");
            R.ToString(tmp4152);
          }
          tmp4152.Append(')');
          return tmp4152.ToString();
        }
      }


      public partial class activeTool_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public activeTool_result()
        {
        }

        public activeTool_result DeepCopy()
        {
          var tmp4154 = new activeTool_result();
          if(__isset.success)
          {
            tmp4154.Success = this.Success;
          }
          tmp4154.__isset.success = this.__isset.success;
          return tmp4154;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4155 = new TStruct("activeTool_result");
            await oprot.WriteStructBeginAsync(tmp4155, cancellationToken);
            var tmp4156 = new TField();

            if(this.__isset.success)
            {
              tmp4156.Name = "Success";
              tmp4156.Type = TType.I32;
              tmp4156.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4156, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is activeTool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4157 = new StringBuilder("activeTool_result(");
          int tmp4158 = 0;
          if(__isset.success)
          {
            if(0 < tmp4158++) { tmp4157.Append(", "); }
            tmp4157.Append("Success: ");
            Success.ToString(tmp4157);
          }
          tmp4157.Append(')');
          return tmp4157.ToString();
        }
      }


      public partial class setActiveTool_args : TBase
      {
        private int _r;
        private int _tool;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public int Tool
        {
          get
          {
            return _tool;
          }
          set
          {
            __isset.tool = true;
            this._tool = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool tool;
        }

        public setActiveTool_args()
        {
        }

        public setActiveTool_args DeepCopy()
        {
          var tmp4159 = new setActiveTool_args();
          if(__isset.r)
          {
            tmp4159.R = this.R;
          }
          tmp4159.__isset.r = this.__isset.r;
          if(__isset.tool)
          {
            tmp4159.Tool = this.Tool;
          }
          tmp4159.__isset.tool = this.__isset.tool;
          return tmp4159;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Tool = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4160 = new TStruct("setActiveTool_args");
            await oprot.WriteStructBeginAsync(tmp4160, cancellationToken);
            var tmp4161 = new TField();
            if(__isset.r)
            {
              tmp4161.Name = "r";
              tmp4161.Type = TType.I32;
              tmp4161.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4161, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.tool)
            {
              tmp4161.Name = "tool";
              tmp4161.Type = TType.I32;
              tmp4161.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp4161, cancellationToken);
              await oprot.WriteI32Async(Tool, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setActiveTool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.tool == other.__isset.tool) && ((!__isset.tool) || (global::System.Object.Equals(Tool, other.Tool))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if(__isset.tool)
            {
              hashcode = (hashcode * 397) + Tool.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4162 = new StringBuilder("setActiveTool_args(");
          int tmp4163 = 0;
          if(__isset.r)
          {
            if(0 < tmp4163++) { tmp4162.Append(", "); }
            tmp4162.Append("R: ");
            R.ToString(tmp4162);
          }
          if(__isset.tool)
          {
            if(0 < tmp4163++) { tmp4162.Append(", "); }
            tmp4162.Append("Tool: ");
            Tool.ToString(tmp4162);
          }
          tmp4162.Append(')');
          return tmp4162.ToString();
        }
      }


      public partial class setActiveTool_result : TBase
      {

        public setActiveTool_result()
        {
        }

        public setActiveTool_result DeepCopy()
        {
          var tmp4164 = new setActiveTool_result();
          return tmp4164;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4165 = new TStruct("setActiveTool_result");
            await oprot.WriteStructBeginAsync(tmp4165, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setActiveTool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4166 = new StringBuilder("setActiveTool_result(");
          tmp4166.Append(')');
          return tmp4166.ToString();
        }
      }


      public partial class workHomePosition_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public workHomePosition_args()
        {
        }

        public workHomePosition_args DeepCopy()
        {
          var tmp4168 = new workHomePosition_args();
          if(__isset.r)
          {
            tmp4168.R = this.R;
          }
          tmp4168.__isset.r = this.__isset.r;
          return tmp4168;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4169 = new TStruct("workHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp4169, cancellationToken);
            var tmp4170 = new TField();
            if(__isset.r)
            {
              tmp4170.Name = "r";
              tmp4170.Type = TType.I32;
              tmp4170.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4170, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is workHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4171 = new StringBuilder("workHomePosition_args(");
          int tmp4172 = 0;
          if(__isset.r)
          {
            if(0 < tmp4172++) { tmp4171.Append(", "); }
            tmp4171.Append("R: ");
            R.ToString(tmp4171);
          }
          tmp4171.Append(')');
          return tmp4171.ToString();
        }
      }


      public partial class workHomePosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public workHomePosition_result()
        {
        }

        public workHomePosition_result DeepCopy()
        {
          var tmp4173 = new workHomePosition_result();
          if((Success != null) && __isset.success)
          {
            tmp4173.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp4173.__isset.success = this.__isset.success;
          return tmp4173;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4174 = new TStruct("workHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp4174, cancellationToken);
            var tmp4175 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4175.Name = "Success";
                tmp4175.Type = TType.Struct;
                tmp4175.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4175, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is workHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4176 = new StringBuilder("workHomePosition_result(");
          int tmp4177 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4177++) { tmp4176.Append(", "); }
            tmp4176.Append("Success: ");
            Success.ToString(tmp4176);
          }
          tmp4176.Append(')');
          return tmp4176.ToString();
        }
      }


      public partial class setWorkHomePosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.Position _p;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.Position P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool p;
        }

        public setWorkHomePosition_args()
        {
        }

        public setWorkHomePosition_args DeepCopy()
        {
          var tmp4178 = new setWorkHomePosition_args();
          if(__isset.r)
          {
            tmp4178.R = this.R;
          }
          tmp4178.__isset.r = this.__isset.r;
          if((P != null) && __isset.p)
          {
            tmp4178.P = (global::Yaskawa.Ext.API.Position)this.P.DeepCopy();
          }
          tmp4178.__isset.p = this.__isset.p;
          return tmp4178;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    P = new global::Yaskawa.Ext.API.Position();
                    await P.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4179 = new TStruct("setWorkHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp4179, cancellationToken);
            var tmp4180 = new TField();
            if(__isset.r)
            {
              tmp4180.Name = "r";
              tmp4180.Type = TType.I32;
              tmp4180.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4180, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((P != null) && __isset.p)
            {
              tmp4180.Name = "p";
              tmp4180.Type = TType.Struct;
              tmp4180.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp4180, cancellationToken);
              await P.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setWorkHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((P != null) && __isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4181 = new StringBuilder("setWorkHomePosition_args(");
          int tmp4182 = 0;
          if(__isset.r)
          {
            if(0 < tmp4182++) { tmp4181.Append(", "); }
            tmp4181.Append("R: ");
            R.ToString(tmp4181);
          }
          if((P != null) && __isset.p)
          {
            if(0 < tmp4182++) { tmp4181.Append(", "); }
            tmp4181.Append("P: ");
            P.ToString(tmp4181);
          }
          tmp4181.Append(')');
          return tmp4181.ToString();
        }
      }


      public partial class setWorkHomePosition_result : TBase
      {

        public setWorkHomePosition_result()
        {
        }

        public setWorkHomePosition_result DeepCopy()
        {
          var tmp4183 = new setWorkHomePosition_result();
          return tmp4183;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4184 = new TStruct("setWorkHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp4184, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setWorkHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4185 = new StringBuilder("setWorkHomePosition_result(");
          tmp4185.Append(')');
          return tmp4185.ToString();
        }
      }


      public partial class secondHomePosition_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public secondHomePosition_args()
        {
        }

        public secondHomePosition_args DeepCopy()
        {
          var tmp4187 = new secondHomePosition_args();
          if(__isset.r)
          {
            tmp4187.R = this.R;
          }
          tmp4187.__isset.r = this.__isset.r;
          return tmp4187;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4188 = new TStruct("secondHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp4188, cancellationToken);
            var tmp4189 = new TField();
            if(__isset.r)
            {
              tmp4189.Name = "r";
              tmp4189.Type = TType.I32;
              tmp4189.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4189, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is secondHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4190 = new StringBuilder("secondHomePosition_args(");
          int tmp4191 = 0;
          if(__isset.r)
          {
            if(0 < tmp4191++) { tmp4190.Append(", "); }
            tmp4190.Append("R: ");
            R.ToString(tmp4190);
          }
          tmp4190.Append(')');
          return tmp4190.ToString();
        }
      }


      public partial class secondHomePosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public secondHomePosition_result()
        {
        }

        public secondHomePosition_result DeepCopy()
        {
          var tmp4192 = new secondHomePosition_result();
          if((Success != null) && __isset.success)
          {
            tmp4192.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp4192.__isset.success = this.__isset.success;
          return tmp4192;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4193 = new TStruct("secondHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp4193, cancellationToken);
            var tmp4194 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp4194.Name = "Success";
                tmp4194.Type = TType.Struct;
                tmp4194.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp4194, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is secondHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4195 = new StringBuilder("secondHomePosition_result(");
          int tmp4196 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4196++) { tmp4195.Append(", "); }
            tmp4195.Append("Success: ");
            Success.ToString(tmp4195);
          }
          tmp4195.Append(')');
          return tmp4195.ToString();
        }
      }


      public partial class setSecondHomePosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.Position _p;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.Position P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool p;
        }

        public setSecondHomePosition_args()
        {
        }

        public setSecondHomePosition_args DeepCopy()
        {
          var tmp4197 = new setSecondHomePosition_args();
          if(__isset.r)
          {
            tmp4197.R = this.R;
          }
          tmp4197.__isset.r = this.__isset.r;
          if((P != null) && __isset.p)
          {
            tmp4197.P = (global::Yaskawa.Ext.API.Position)this.P.DeepCopy();
          }
          tmp4197.__isset.p = this.__isset.p;
          return tmp4197;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    P = new global::Yaskawa.Ext.API.Position();
                    await P.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4198 = new TStruct("setSecondHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp4198, cancellationToken);
            var tmp4199 = new TField();
            if(__isset.r)
            {
              tmp4199.Name = "r";
              tmp4199.Type = TType.I32;
              tmp4199.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4199, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((P != null) && __isset.p)
            {
              tmp4199.Name = "p";
              tmp4199.Type = TType.Struct;
              tmp4199.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp4199, cancellationToken);
              await P.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setSecondHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((P != null) && __isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4200 = new StringBuilder("setSecondHomePosition_args(");
          int tmp4201 = 0;
          if(__isset.r)
          {
            if(0 < tmp4201++) { tmp4200.Append(", "); }
            tmp4200.Append("R: ");
            R.ToString(tmp4200);
          }
          if((P != null) && __isset.p)
          {
            if(0 < tmp4201++) { tmp4200.Append(", "); }
            tmp4200.Append("P: ");
            P.ToString(tmp4200);
          }
          tmp4200.Append(')');
          return tmp4200.ToString();
        }
      }


      public partial class setSecondHomePosition_result : TBase
      {

        public setSecondHomePosition_result()
        {
        }

        public setSecondHomePosition_result DeepCopy()
        {
          var tmp4202 = new setSecondHomePosition_result();
          return tmp4202;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4203 = new TStruct("setSecondHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp4203, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setSecondHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4204 = new StringBuilder("setSecondHomePosition_result(");
          tmp4204.Append(')');
          return tmp4204.ToString();
        }
      }


      public partial class maximumLinearSpeed_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public maximumLinearSpeed_args()
        {
        }

        public maximumLinearSpeed_args DeepCopy()
        {
          var tmp4206 = new maximumLinearSpeed_args();
          if(__isset.r)
          {
            tmp4206.R = this.R;
          }
          tmp4206.__isset.r = this.__isset.r;
          return tmp4206;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4207 = new TStruct("maximumLinearSpeed_args");
            await oprot.WriteStructBeginAsync(tmp4207, cancellationToken);
            var tmp4208 = new TField();
            if(__isset.r)
            {
              tmp4208.Name = "r";
              tmp4208.Type = TType.I32;
              tmp4208.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4208, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is maximumLinearSpeed_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4209 = new StringBuilder("maximumLinearSpeed_args(");
          int tmp4210 = 0;
          if(__isset.r)
          {
            if(0 < tmp4210++) { tmp4209.Append(", "); }
            tmp4209.Append("R: ");
            R.ToString(tmp4209);
          }
          tmp4209.Append(')');
          return tmp4209.ToString();
        }
      }


      public partial class maximumLinearSpeed_result : TBase
      {
        private double _success;

        public double Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public maximumLinearSpeed_result()
        {
        }

        public maximumLinearSpeed_result DeepCopy()
        {
          var tmp4211 = new maximumLinearSpeed_result();
          if(__isset.success)
          {
            tmp4211.Success = this.Success;
          }
          tmp4211.__isset.success = this.__isset.success;
          return tmp4211;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Double)
                  {
                    Success = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4212 = new TStruct("maximumLinearSpeed_result");
            await oprot.WriteStructBeginAsync(tmp4212, cancellationToken);
            var tmp4213 = new TField();

            if(this.__isset.success)
            {
              tmp4213.Name = "Success";
              tmp4213.Type = TType.Double;
              tmp4213.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4213, cancellationToken);
              await oprot.WriteDoubleAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is maximumLinearSpeed_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4214 = new StringBuilder("maximumLinearSpeed_result(");
          int tmp4215 = 0;
          if(__isset.success)
          {
            if(0 < tmp4215++) { tmp4214.Append(", "); }
            tmp4214.Append("Success: ");
            Success.ToString(tmp4214);
          }
          tmp4214.Append(')');
          return tmp4214.ToString();
        }
      }

    }

  }
}
