/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Extension
  {
    /// <summary>
    /// The Extension API.
    /// 
    /// Use this interface to initially register the extension with the main pendant
    /// API Service and obtain handle IDs to the Controller and Pendant services.
    /// 
    /// Note in this function-level documentation, functions of the Controller Service
    /// take an initial ControllerID parameter, Pendant Service functions take an initial PendantID etc.
    /// However, if you are using a Yaskawa supplied client library these may be wrapped as
    /// object methods and hence the initial id should be omitted.
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Version of API the service implements.
      /// Smart Pendant | API version
      /// 2.0           | 2.0.4
      /// 2.1           | 2.1.0
      /// 2.2           | 2.2.0
      /// 2.3           | 2.3.0
      /// 3.0           | 3.0.0
      /// </summary>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> apiVersion(CancellationToken cancellationToken = default);

      /// <summary>
      /// Register extension with Smart Pendant API service.
      /// Extension must exist in the extension database (i.e. through installation)
      /// </summary>
      /// <param name="canonicalName"></param>
      /// <param name="launchKey"></param>
      /// <param name="version"></param>
      /// <param name="vendor"></param>
      /// <param name="supportedLanguages"></param>
      global::System.Threading.Tasks.Task<long> registerExtension(string canonicalName, string launchKey, global::Yaskawa.Ext.API.Version version, string vendor, HashSet<string> supportedLanguages, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterExtension(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Indicate liveliness
      /// API service will automatically unregister extensions that are unresponsive for some period.
      /// If extension is not regularly calling events(), call ping() to indicate the extension is operational.
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task ping(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain ID handle for Robot Conroller API
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<long> controller(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain ID handle for Pendant UI API
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<long> pendant(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Log message to standard pendant logging facility
      /// Visible to end-users upon plain-text log file export.
      /// Note that Debug level logging is ignored unless in Developer access level.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="id"></param>
      /// <param name="level"></param>
      /// <param name="message"></param>
      global::System.Threading.Tasks.Task log(long id, global::Yaskawa.Ext.API.LoggingLevel level, string message, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to receive log message events via events()
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task subscribeLoggingEvents(long id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unsubscribeLoggingEvents(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain list of logging events that have occured since last call
      /// NB: For development troubleshooting only, logging events
      /// only available when development access enabled
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.LoggingEvent>> logEvents(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain a list of ExternalStorageDevice structs corresponding to USB storage
      /// available to the pendant/and or controller.  If no storage is available this
      /// list will have no elements.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.storageInfo>> listAvailableStorage(long eid, CancellationToken cancellationToken = default);

      /// <summary>
      /// list files/directories in external storage for the specified storage path
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="path"></param>
      global::System.Threading.Tasks.Task<List<string>> listFiles(long eid, string path, CancellationToken cancellationToken = default);

      /// <summary>
      /// Open files for reading and/or writing
      /// the argument path is the full path to the file of interest
      /// the argument flags can be 'r' (read) or 'w' (write w/ append)
      /// (the FileID will return -1 if it failed to open the file)
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="path"></param>
      /// <param name="flags"></param>
      global::System.Threading.Tasks.Task<long> openFile(long eid, string path, string flags, CancellationToken cancellationToken = default);

      /// <summary>
      /// Close files from reading and/or writing
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task closeFile(long eid, long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Check if the file is available for read/write.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<bool> isOpen(long eid, long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Read all data from the file.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<string> read(long eid, long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Read a chunk of data from the file.
      /// the argument offset indicates the number of bytes into the file
      /// the argument len indicates the number of bytes to read
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      /// <param name="offset"></param>
      /// <param name="len"></param>
      global::System.Threading.Tasks.Task<string> readChunk(long eid, long id, long offset, long len, CancellationToken cancellationToken = default);

      /// <summary>
      /// Write a string to a file.  This will create a new file (and or directory)
      /// if missing, but will simply append if the file already exists.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      /// <param name="data"></param>
      global::System.Threading.Tasks.Task write(long eid, long id, string data, CancellationToken cancellationToken = default);

      /// <summary>
      /// Write the file to disk.  For files not local to the pendant this
      /// will FTP them to the controller.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task flush(long eid, long id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> publicKey(long id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> oneTimeAuthToken(long id, string oneTimeSalt, byte[] publicKey, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<string>> installPackage(long id, string authToken, byte[] packageData, string overridePasscodeEnc, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// The Extension API.
    /// 
    /// Use this interface to initially register the extension with the main pendant
    /// API Service and obtain handle IDs to the Controller and Pendant services.
    /// 
    /// Note in this function-level documentation, functions of the Controller Service
    /// take an initial ControllerID parameter, Pendant Service functions take an initial PendantID etc.
    /// However, if you are using a Yaskawa supplied client library these may be wrapped as
    /// object methods and hence the initial id should be omitted.
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> apiVersion(CancellationToken cancellationToken = default)
      {
        await send_apiVersion(cancellationToken);
        return await recv_apiVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_apiVersion(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("apiVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp229 = new InternalStructs.apiVersion_args() {
        };
        
        await tmp229.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> recv_apiVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp230 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp230.Type == TMessageType.Exception)
        {
          var tmp231 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp231;
        }

        var tmp232 = new InternalStructs.apiVersion_result();
        await tmp232.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp232.__isset.success)
        {
          return tmp232.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "apiVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> registerExtension(string canonicalName, string launchKey, global::Yaskawa.Ext.API.Version version, string vendor, HashSet<string> supportedLanguages, CancellationToken cancellationToken = default)
      {
        await send_registerExtension(canonicalName, launchKey, version, vendor, supportedLanguages, cancellationToken);
        return await recv_registerExtension(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerExtension(string canonicalName, string launchKey, global::Yaskawa.Ext.API.Version version, string vendor, HashSet<string> supportedLanguages, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerExtension", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp233 = new InternalStructs.registerExtension_args() {
          CanonicalName = canonicalName,
          LaunchKey = launchKey,
          Version = version,
          Vendor = vendor,
          SupportedLanguages = supportedLanguages,
        };
        
        await tmp233.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_registerExtension(CancellationToken cancellationToken = default)
      {
        
        var tmp234 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp234.Type == TMessageType.Exception)
        {
          var tmp235 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp235;
        }

        var tmp236 = new InternalStructs.registerExtension_result();
        await tmp236.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp236.__isset.success)
        {
          return tmp236.Success;
        }
        if (tmp236.__isset.e)
        {
          throw tmp236.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerExtension failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task unregisterExtension(long id, CancellationToken cancellationToken = default)
      {
        await send_unregisterExtension(id, cancellationToken);
        await recv_unregisterExtension(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterExtension(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterExtension", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp237 = new InternalStructs.unregisterExtension_args() {
          Id = id,
        };
        
        await tmp237.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterExtension(CancellationToken cancellationToken = default)
      {
        
        var tmp238 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp238.Type == TMessageType.Exception)
        {
          var tmp239 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp239;
        }

        var tmp240 = new InternalStructs.unregisterExtension_result();
        await tmp240.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp240.__isset.e)
        {
          throw tmp240.E;
        }
      }

      public async global::System.Threading.Tasks.Task ping(long id, CancellationToken cancellationToken = default)
      {
        await send_ping(id, cancellationToken);
        await recv_ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ping(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp241 = new InternalStructs.ping_args() {
          Id = id,
        };
        
        await tmp241.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_ping(CancellationToken cancellationToken = default)
      {
        
        var tmp242 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp242.Type == TMessageType.Exception)
        {
          var tmp243 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp243;
        }

        var tmp244 = new InternalStructs.ping_result();
        await tmp244.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp244.__isset.e)
        {
          throw tmp244.E;
        }
      }

      public async global::System.Threading.Tasks.Task<long> controller(long id, CancellationToken cancellationToken = default)
      {
        await send_controller(id, cancellationToken);
        return await recv_controller(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_controller(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("controller", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp245 = new InternalStructs.controller_args() {
          Id = id,
        };
        
        await tmp245.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_controller(CancellationToken cancellationToken = default)
      {
        
        var tmp246 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp246.Type == TMessageType.Exception)
        {
          var tmp247 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp247;
        }

        var tmp248 = new InternalStructs.controller_result();
        await tmp248.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp248.__isset.success)
        {
          return tmp248.Success;
        }
        if (tmp248.__isset.e)
        {
          throw tmp248.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "controller failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> pendant(long id, CancellationToken cancellationToken = default)
      {
        await send_pendant(id, cancellationToken);
        return await recv_pendant(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pendant(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pendant", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp249 = new InternalStructs.pendant_args() {
          Id = id,
        };
        
        await tmp249.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_pendant(CancellationToken cancellationToken = default)
      {
        
        var tmp250 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp250.Type == TMessageType.Exception)
        {
          var tmp251 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp251;
        }

        var tmp252 = new InternalStructs.pendant_result();
        await tmp252.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp252.__isset.success)
        {
          return tmp252.Success;
        }
        if (tmp252.__isset.e)
        {
          throw tmp252.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pendant failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task log(long id, global::Yaskawa.Ext.API.LoggingLevel level, string message, CancellationToken cancellationToken = default)
      {
        await send_log(id, level, message, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_log(long id, global::Yaskawa.Ext.API.LoggingLevel level, string message, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("log", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp253 = new InternalStructs.log_args() {
          Id = id,
          Level = level,
          Message = message,
        };
        
        await tmp253.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await send_subscribeLoggingEvents(id, cancellationToken);
        await recv_subscribeLoggingEvents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeLoggingEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp254 = new InternalStructs.subscribeLoggingEvents_args() {
          Id = id,
        };
        
        await tmp254.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeLoggingEvents(CancellationToken cancellationToken = default)
      {
        
        var tmp255 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp255.Type == TMessageType.Exception)
        {
          var tmp256 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp256;
        }

        var tmp257 = new InternalStructs.subscribeLoggingEvents_result();
        await tmp257.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeLoggingEvents(id, cancellationToken);
        await recv_unsubscribeLoggingEvents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeLoggingEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp258 = new InternalStructs.unsubscribeLoggingEvents_args() {
          Id = id,
        };
        
        await tmp258.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeLoggingEvents(CancellationToken cancellationToken = default)
      {
        
        var tmp259 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp259.Type == TMessageType.Exception)
        {
          var tmp260 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp260;
        }

        var tmp261 = new InternalStructs.unsubscribeLoggingEvents_result();
        await tmp261.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.LoggingEvent>> logEvents(long id, CancellationToken cancellationToken = default)
      {
        await send_logEvents(id, cancellationToken);
        return await recv_logEvents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_logEvents(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("logEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp262 = new InternalStructs.logEvents_args() {
          Id = id,
        };
        
        await tmp262.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.LoggingEvent>> recv_logEvents(CancellationToken cancellationToken = default)
      {
        
        var tmp263 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp263.Type == TMessageType.Exception)
        {
          var tmp264 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp264;
        }

        var tmp265 = new InternalStructs.logEvents_result();
        await tmp265.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp265.__isset.success)
        {
          return tmp265.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "logEvents failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.storageInfo>> listAvailableStorage(long eid, CancellationToken cancellationToken = default)
      {
        await send_listAvailableStorage(eid, cancellationToken);
        return await recv_listAvailableStorage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listAvailableStorage(long eid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listAvailableStorage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp266 = new InternalStructs.listAvailableStorage_args() {
          Eid = eid,
        };
        
        await tmp266.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.storageInfo>> recv_listAvailableStorage(CancellationToken cancellationToken = default)
      {
        
        var tmp267 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp267.Type == TMessageType.Exception)
        {
          var tmp268 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp268;
        }

        var tmp269 = new InternalStructs.listAvailableStorage_result();
        await tmp269.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp269.__isset.success)
        {
          return tmp269.Success;
        }
        if (tmp269.__isset.e)
        {
          throw tmp269.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listAvailableStorage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> listFiles(long eid, string path, CancellationToken cancellationToken = default)
      {
        await send_listFiles(eid, path, cancellationToken);
        return await recv_listFiles(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listFiles(long eid, string path, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listFiles", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp270 = new InternalStructs.listFiles_args() {
          Eid = eid,
          Path = path,
        };
        
        await tmp270.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_listFiles(CancellationToken cancellationToken = default)
      {
        
        var tmp271 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp271.Type == TMessageType.Exception)
        {
          var tmp272 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp272;
        }

        var tmp273 = new InternalStructs.listFiles_result();
        await tmp273.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp273.__isset.success)
        {
          return tmp273.Success;
        }
        if (tmp273.__isset.e)
        {
          throw tmp273.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listFiles failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> openFile(long eid, string path, string flags, CancellationToken cancellationToken = default)
      {
        await send_openFile(eid, path, flags, cancellationToken);
        return await recv_openFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_openFile(long eid, string path, string flags, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("openFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp274 = new InternalStructs.openFile_args() {
          Eid = eid,
          Path = path,
          Flags = flags,
        };
        
        await tmp274.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_openFile(CancellationToken cancellationToken = default)
      {
        
        var tmp275 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp275.Type == TMessageType.Exception)
        {
          var tmp276 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp276;
        }

        var tmp277 = new InternalStructs.openFile_result();
        await tmp277.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp277.__isset.success)
        {
          return tmp277.Success;
        }
        if (tmp277.__isset.e)
        {
          throw tmp277.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "openFile failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task closeFile(long eid, long id, CancellationToken cancellationToken = default)
      {
        await send_closeFile(eid, id, cancellationToken);
        await recv_closeFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_closeFile(long eid, long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("closeFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp278 = new InternalStructs.closeFile_args() {
          Eid = eid,
          Id = id,
        };
        
        await tmp278.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_closeFile(CancellationToken cancellationToken = default)
      {
        
        var tmp279 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp279.Type == TMessageType.Exception)
        {
          var tmp280 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp280;
        }

        var tmp281 = new InternalStructs.closeFile_result();
        await tmp281.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp281.__isset.e)
        {
          throw tmp281.E;
        }
      }

      public async global::System.Threading.Tasks.Task<bool> isOpen(long eid, long id, CancellationToken cancellationToken = default)
      {
        await send_isOpen(eid, id, cancellationToken);
        return await recv_isOpen(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_isOpen(long eid, long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("isOpen", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp282 = new InternalStructs.isOpen_args() {
          Eid = eid,
          Id = id,
        };
        
        await tmp282.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_isOpen(CancellationToken cancellationToken = default)
      {
        
        var tmp283 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp283.Type == TMessageType.Exception)
        {
          var tmp284 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp284;
        }

        var tmp285 = new InternalStructs.isOpen_result();
        await tmp285.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp285.__isset.success)
        {
          return tmp285.Success;
        }
        if (tmp285.__isset.e)
        {
          throw tmp285.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isOpen failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> read(long eid, long id, CancellationToken cancellationToken = default)
      {
        await send_read(eid, id, cancellationToken);
        return await recv_read(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_read(long eid, long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("read", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp286 = new InternalStructs.read_args() {
          Eid = eid,
          Id = id,
        };
        
        await tmp286.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_read(CancellationToken cancellationToken = default)
      {
        
        var tmp287 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp287.Type == TMessageType.Exception)
        {
          var tmp288 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp288;
        }

        var tmp289 = new InternalStructs.read_result();
        await tmp289.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp289.__isset.success)
        {
          return tmp289.Success;
        }
        if (tmp289.__isset.e)
        {
          throw tmp289.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "read failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> readChunk(long eid, long id, long offset, long len, CancellationToken cancellationToken = default)
      {
        await send_readChunk(eid, id, offset, len, cancellationToken);
        return await recv_readChunk(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_readChunk(long eid, long id, long offset, long len, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("readChunk", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp290 = new InternalStructs.readChunk_args() {
          Eid = eid,
          Id = id,
          Offset = offset,
          Len = len,
        };
        
        await tmp290.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_readChunk(CancellationToken cancellationToken = default)
      {
        
        var tmp291 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp291.Type == TMessageType.Exception)
        {
          var tmp292 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp292;
        }

        var tmp293 = new InternalStructs.readChunk_result();
        await tmp293.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp293.__isset.success)
        {
          return tmp293.Success;
        }
        if (tmp293.__isset.e)
        {
          throw tmp293.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "readChunk failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task write(long eid, long id, string data, CancellationToken cancellationToken = default)
      {
        await send_write(eid, id, data, cancellationToken);
        await recv_write(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_write(long eid, long id, string data, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("write", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp294 = new InternalStructs.write_args() {
          Eid = eid,
          Id = id,
          Data = data,
        };
        
        await tmp294.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_write(CancellationToken cancellationToken = default)
      {
        
        var tmp295 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp295.Type == TMessageType.Exception)
        {
          var tmp296 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp296;
        }

        var tmp297 = new InternalStructs.write_result();
        await tmp297.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp297.__isset.e)
        {
          throw tmp297.E;
        }
      }

      public async global::System.Threading.Tasks.Task flush(long eid, long id, CancellationToken cancellationToken = default)
      {
        await send_flush(eid, id, cancellationToken);
        await recv_flush(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_flush(long eid, long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("flush", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp298 = new InternalStructs.flush_args() {
          Eid = eid,
          Id = id,
        };
        
        await tmp298.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_flush(CancellationToken cancellationToken = default)
      {
        
        var tmp299 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp299.Type == TMessageType.Exception)
        {
          var tmp300 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp300;
        }

        var tmp301 = new InternalStructs.flush_result();
        await tmp301.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp301.__isset.e)
        {
          throw tmp301.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> publicKey(long id, CancellationToken cancellationToken = default)
      {
        await send_publicKey(id, cancellationToken);
        return await recv_publicKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_publicKey(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("publicKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp302 = new InternalStructs.publicKey_args() {
          Id = id,
        };
        
        await tmp302.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_publicKey(CancellationToken cancellationToken = default)
      {
        
        var tmp303 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp303.Type == TMessageType.Exception)
        {
          var tmp304 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp304;
        }

        var tmp305 = new InternalStructs.publicKey_result();
        await tmp305.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp305.__isset.success)
        {
          return tmp305.Success;
        }
        if (tmp305.__isset.e)
        {
          throw tmp305.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "publicKey failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> oneTimeAuthToken(long id, string oneTimeSalt, byte[] publicKey, CancellationToken cancellationToken = default)
      {
        await send_oneTimeAuthToken(id, oneTimeSalt, publicKey, cancellationToken);
        return await recv_oneTimeAuthToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_oneTimeAuthToken(long id, string oneTimeSalt, byte[] publicKey, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("oneTimeAuthToken", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp306 = new InternalStructs.oneTimeAuthToken_args() {
          Id = id,
          OneTimeSalt = oneTimeSalt,
          PublicKey = publicKey,
        };
        
        await tmp306.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_oneTimeAuthToken(CancellationToken cancellationToken = default)
      {
        
        var tmp307 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp307.Type == TMessageType.Exception)
        {
          var tmp308 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp308;
        }

        var tmp309 = new InternalStructs.oneTimeAuthToken_result();
        await tmp309.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp309.__isset.success)
        {
          return tmp309.Success;
        }
        if (tmp309.__isset.e)
        {
          throw tmp309.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "oneTimeAuthToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> installPackage(long id, string authToken, byte[] packageData, string overridePasscodeEnc, CancellationToken cancellationToken = default)
      {
        await send_installPackage(id, authToken, packageData, overridePasscodeEnc, cancellationToken);
        return await recv_installPackage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_installPackage(long id, string authToken, byte[] packageData, string overridePasscodeEnc, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("installPackage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp310 = new InternalStructs.installPackage_args() {
          Id = id,
          AuthToken = authToken,
          PackageData = packageData,
          OverridePasscodeEnc = overridePasscodeEnc,
        };
        
        await tmp310.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_installPackage(CancellationToken cancellationToken = default)
      {
        
        var tmp311 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp311.Type == TMessageType.Exception)
        {
          var tmp312 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp312;
        }

        var tmp313 = new InternalStructs.installPackage_result();
        await tmp313.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp313.__isset.success)
        {
          return tmp313.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "installPackage failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["apiVersion"] = apiVersion_ProcessAsync;
        processMap_["registerExtension"] = registerExtension_ProcessAsync;
        processMap_["unregisterExtension"] = unregisterExtension_ProcessAsync;
        processMap_["ping"] = ping_ProcessAsync;
        processMap_["controller"] = controller_ProcessAsync;
        processMap_["pendant"] = pendant_ProcessAsync;
        processMap_["log"] = log_ProcessAsync;
        processMap_["subscribeLoggingEvents"] = subscribeLoggingEvents_ProcessAsync;
        processMap_["unsubscribeLoggingEvents"] = unsubscribeLoggingEvents_ProcessAsync;
        processMap_["logEvents"] = logEvents_ProcessAsync;
        processMap_["listAvailableStorage"] = listAvailableStorage_ProcessAsync;
        processMap_["listFiles"] = listFiles_ProcessAsync;
        processMap_["openFile"] = openFile_ProcessAsync;
        processMap_["closeFile"] = closeFile_ProcessAsync;
        processMap_["isOpen"] = isOpen_ProcessAsync;
        processMap_["read"] = read_ProcessAsync;
        processMap_["readChunk"] = readChunk_ProcessAsync;
        processMap_["write"] = write_ProcessAsync;
        processMap_["flush"] = flush_ProcessAsync;
        processMap_["publicKey"] = publicKey_ProcessAsync;
        processMap_["oneTimeAuthToken"] = oneTimeAuthToken_ProcessAsync;
        processMap_["installPackage"] = installPackage_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task apiVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp314 = new InternalStructs.apiVersion_args();
        await tmp314.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp315 = new InternalStructs.apiVersion_result();
        try
        {
          tmp315.Success = await _iAsync.apiVersion(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("apiVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp315.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp316)
        {
          var tmp317 = $"Error occurred in {GetType().FullName}: {tmp316.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp316, tmp317);
          else
            Console.Error.WriteLine(tmp317);
          var tmp318 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("apiVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp318.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerExtension_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp319 = new InternalStructs.registerExtension_args();
        await tmp319.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp320 = new InternalStructs.registerExtension_result();
        try
        {
          try
          {
            tmp320.Success = await _iAsync.registerExtension(tmp319.CanonicalName, tmp319.LaunchKey, tmp319.Version, tmp319.Vendor, tmp319.SupportedLanguages, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp321)
          {
            tmp320.E = tmp321;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerExtension", TMessageType.Reply, seqid), cancellationToken); 
          await tmp320.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp322)
        {
          var tmp323 = $"Error occurred in {GetType().FullName}: {tmp322.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp322, tmp323);
          else
            Console.Error.WriteLine(tmp323);
          var tmp324 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerExtension", TMessageType.Exception, seqid), cancellationToken);
          await tmp324.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterExtension_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp325 = new InternalStructs.unregisterExtension_args();
        await tmp325.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp326 = new InternalStructs.unregisterExtension_result();
        try
        {
          try
          {
            await _iAsync.unregisterExtension(tmp325.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp327)
          {
            tmp326.E = tmp327;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterExtension", TMessageType.Reply, seqid), cancellationToken); 
          await tmp326.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp328)
        {
          var tmp329 = $"Error occurred in {GetType().FullName}: {tmp328.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp328, tmp329);
          else
            Console.Error.WriteLine(tmp329);
          var tmp330 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterExtension", TMessageType.Exception, seqid), cancellationToken);
          await tmp330.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp331 = new InternalStructs.ping_args();
        await tmp331.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp332 = new InternalStructs.ping_result();
        try
        {
          try
          {
            await _iAsync.ping(tmp331.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp333)
          {
            tmp332.E = tmp333;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp332.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp334)
        {
          var tmp335 = $"Error occurred in {GetType().FullName}: {tmp334.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp334, tmp335);
          else
            Console.Error.WriteLine(tmp335);
          var tmp336 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp336.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task controller_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp337 = new InternalStructs.controller_args();
        await tmp337.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp338 = new InternalStructs.controller_result();
        try
        {
          try
          {
            tmp338.Success = await _iAsync.controller(tmp337.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp339)
          {
            tmp338.E = tmp339;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("controller", TMessageType.Reply, seqid), cancellationToken); 
          await tmp338.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp340)
        {
          var tmp341 = $"Error occurred in {GetType().FullName}: {tmp340.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp340, tmp341);
          else
            Console.Error.WriteLine(tmp341);
          var tmp342 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("controller", TMessageType.Exception, seqid), cancellationToken);
          await tmp342.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pendant_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp343 = new InternalStructs.pendant_args();
        await tmp343.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp344 = new InternalStructs.pendant_result();
        try
        {
          try
          {
            tmp344.Success = await _iAsync.pendant(tmp343.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp345)
          {
            tmp344.E = tmp345;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("pendant", TMessageType.Reply, seqid), cancellationToken); 
          await tmp344.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp346)
        {
          var tmp347 = $"Error occurred in {GetType().FullName}: {tmp346.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp346, tmp347);
          else
            Console.Error.WriteLine(tmp347);
          var tmp348 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pendant", TMessageType.Exception, seqid), cancellationToken);
          await tmp348.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task log_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp349 = new InternalStructs.log_args();
        await tmp349.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.log(tmp349.Id, tmp349.Level, tmp349.Message, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp351)
        {
          var tmp352 = $"Error occurred in {GetType().FullName}: {tmp351.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp351, tmp352);
          else
            Console.Error.WriteLine(tmp352);
        }
      }

      public async global::System.Threading.Tasks.Task subscribeLoggingEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp353 = new InternalStructs.subscribeLoggingEvents_args();
        await tmp353.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp354 = new InternalStructs.subscribeLoggingEvents_result();
        try
        {
          await _iAsync.subscribeLoggingEvents(tmp353.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeLoggingEvents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp354.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp355)
        {
          var tmp356 = $"Error occurred in {GetType().FullName}: {tmp355.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp355, tmp356);
          else
            Console.Error.WriteLine(tmp356);
          var tmp357 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeLoggingEvents", TMessageType.Exception, seqid), cancellationToken);
          await tmp357.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeLoggingEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp358 = new InternalStructs.unsubscribeLoggingEvents_args();
        await tmp358.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp359 = new InternalStructs.unsubscribeLoggingEvents_result();
        try
        {
          await _iAsync.unsubscribeLoggingEvents(tmp358.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeLoggingEvents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp359.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp360)
        {
          var tmp361 = $"Error occurred in {GetType().FullName}: {tmp360.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp360, tmp361);
          else
            Console.Error.WriteLine(tmp361);
          var tmp362 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeLoggingEvents", TMessageType.Exception, seqid), cancellationToken);
          await tmp362.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task logEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp363 = new InternalStructs.logEvents_args();
        await tmp363.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp364 = new InternalStructs.logEvents_result();
        try
        {
          tmp364.Success = await _iAsync.logEvents(tmp363.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("logEvents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp364.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp365)
        {
          var tmp366 = $"Error occurred in {GetType().FullName}: {tmp365.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp365, tmp366);
          else
            Console.Error.WriteLine(tmp366);
          var tmp367 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("logEvents", TMessageType.Exception, seqid), cancellationToken);
          await tmp367.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listAvailableStorage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp368 = new InternalStructs.listAvailableStorage_args();
        await tmp368.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp369 = new InternalStructs.listAvailableStorage_result();
        try
        {
          try
          {
            tmp369.Success = await _iAsync.listAvailableStorage(tmp368.Eid, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp370)
          {
            tmp369.E = tmp370;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listAvailableStorage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp369.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp371)
        {
          var tmp372 = $"Error occurred in {GetType().FullName}: {tmp371.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp371, tmp372);
          else
            Console.Error.WriteLine(tmp372);
          var tmp373 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listAvailableStorage", TMessageType.Exception, seqid), cancellationToken);
          await tmp373.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listFiles_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp374 = new InternalStructs.listFiles_args();
        await tmp374.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp375 = new InternalStructs.listFiles_result();
        try
        {
          try
          {
            tmp375.Success = await _iAsync.listFiles(tmp374.Eid, tmp374.Path, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp376)
          {
            tmp375.E = tmp376;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listFiles", TMessageType.Reply, seqid), cancellationToken); 
          await tmp375.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp377)
        {
          var tmp378 = $"Error occurred in {GetType().FullName}: {tmp377.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp377, tmp378);
          else
            Console.Error.WriteLine(tmp378);
          var tmp379 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listFiles", TMessageType.Exception, seqid), cancellationToken);
          await tmp379.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task openFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp380 = new InternalStructs.openFile_args();
        await tmp380.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp381 = new InternalStructs.openFile_result();
        try
        {
          try
          {
            tmp381.Success = await _iAsync.openFile(tmp380.Eid, tmp380.Path, tmp380.Flags, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp382)
          {
            tmp381.E = tmp382;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("openFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp381.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp383)
        {
          var tmp384 = $"Error occurred in {GetType().FullName}: {tmp383.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp383, tmp384);
          else
            Console.Error.WriteLine(tmp384);
          var tmp385 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("openFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp385.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp386 = new InternalStructs.closeFile_args();
        await tmp386.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp387 = new InternalStructs.closeFile_result();
        try
        {
          try
          {
            await _iAsync.closeFile(tmp386.Eid, tmp386.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp388)
          {
            tmp387.E = tmp388;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("closeFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp387.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp389)
        {
          var tmp390 = $"Error occurred in {GetType().FullName}: {tmp389.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp389, tmp390);
          else
            Console.Error.WriteLine(tmp390);
          var tmp391 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("closeFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp391.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task isOpen_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp392 = new InternalStructs.isOpen_args();
        await tmp392.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp393 = new InternalStructs.isOpen_result();
        try
        {
          try
          {
            tmp393.Success = await _iAsync.isOpen(tmp392.Eid, tmp392.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp394)
          {
            tmp393.E = tmp394;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("isOpen", TMessageType.Reply, seqid), cancellationToken); 
          await tmp393.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp395)
        {
          var tmp396 = $"Error occurred in {GetType().FullName}: {tmp395.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp395, tmp396);
          else
            Console.Error.WriteLine(tmp396);
          var tmp397 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("isOpen", TMessageType.Exception, seqid), cancellationToken);
          await tmp397.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task read_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp398 = new InternalStructs.read_args();
        await tmp398.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp399 = new InternalStructs.read_result();
        try
        {
          try
          {
            tmp399.Success = await _iAsync.read(tmp398.Eid, tmp398.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp400)
          {
            tmp399.E = tmp400;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("read", TMessageType.Reply, seqid), cancellationToken); 
          await tmp399.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp401)
        {
          var tmp402 = $"Error occurred in {GetType().FullName}: {tmp401.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp401, tmp402);
          else
            Console.Error.WriteLine(tmp402);
          var tmp403 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("read", TMessageType.Exception, seqid), cancellationToken);
          await tmp403.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task readChunk_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp404 = new InternalStructs.readChunk_args();
        await tmp404.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp405 = new InternalStructs.readChunk_result();
        try
        {
          try
          {
            tmp405.Success = await _iAsync.readChunk(tmp404.Eid, tmp404.Id, tmp404.Offset, tmp404.Len, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp406)
          {
            tmp405.E = tmp406;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("readChunk", TMessageType.Reply, seqid), cancellationToken); 
          await tmp405.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp407)
        {
          var tmp408 = $"Error occurred in {GetType().FullName}: {tmp407.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp407, tmp408);
          else
            Console.Error.WriteLine(tmp408);
          var tmp409 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("readChunk", TMessageType.Exception, seqid), cancellationToken);
          await tmp409.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task write_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp410 = new InternalStructs.write_args();
        await tmp410.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp411 = new InternalStructs.write_result();
        try
        {
          try
          {
            await _iAsync.write(tmp410.Eid, tmp410.Id, tmp410.Data, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp412)
          {
            tmp411.E = tmp412;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("write", TMessageType.Reply, seqid), cancellationToken); 
          await tmp411.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp413)
        {
          var tmp414 = $"Error occurred in {GetType().FullName}: {tmp413.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp413, tmp414);
          else
            Console.Error.WriteLine(tmp414);
          var tmp415 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("write", TMessageType.Exception, seqid), cancellationToken);
          await tmp415.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task flush_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp416 = new InternalStructs.flush_args();
        await tmp416.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp417 = new InternalStructs.flush_result();
        try
        {
          try
          {
            await _iAsync.flush(tmp416.Eid, tmp416.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp418)
          {
            tmp417.E = tmp418;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("flush", TMessageType.Reply, seqid), cancellationToken); 
          await tmp417.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp419)
        {
          var tmp420 = $"Error occurred in {GetType().FullName}: {tmp419.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp419, tmp420);
          else
            Console.Error.WriteLine(tmp420);
          var tmp421 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("flush", TMessageType.Exception, seqid), cancellationToken);
          await tmp421.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task publicKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp422 = new InternalStructs.publicKey_args();
        await tmp422.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp423 = new InternalStructs.publicKey_result();
        try
        {
          try
          {
            tmp423.Success = await _iAsync.publicKey(tmp422.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp424)
          {
            tmp423.E = tmp424;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("publicKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp423.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp425)
        {
          var tmp426 = $"Error occurred in {GetType().FullName}: {tmp425.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp425, tmp426);
          else
            Console.Error.WriteLine(tmp426);
          var tmp427 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("publicKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp427.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task oneTimeAuthToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp428 = new InternalStructs.oneTimeAuthToken_args();
        await tmp428.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp429 = new InternalStructs.oneTimeAuthToken_result();
        try
        {
          try
          {
            tmp429.Success = await _iAsync.oneTimeAuthToken(tmp428.Id, tmp428.OneTimeSalt, tmp428.PublicKey, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp430)
          {
            tmp429.E = tmp430;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("oneTimeAuthToken", TMessageType.Reply, seqid), cancellationToken); 
          await tmp429.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp431)
        {
          var tmp432 = $"Error occurred in {GetType().FullName}: {tmp431.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp431, tmp432);
          else
            Console.Error.WriteLine(tmp432);
          var tmp433 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("oneTimeAuthToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp433.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task installPackage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp434 = new InternalStructs.installPackage_args();
        await tmp434.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp435 = new InternalStructs.installPackage_result();
        try
        {
          tmp435.Success = await _iAsync.installPackage(tmp434.Id, tmp434.AuthToken, tmp434.PackageData, tmp434.OverridePasscodeEnc, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("installPackage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp435.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp436)
        {
          var tmp437 = $"Error occurred in {GetType().FullName}: {tmp436.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp436, tmp437);
          else
            Console.Error.WriteLine(tmp437);
          var tmp438 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("installPackage", TMessageType.Exception, seqid), cancellationToken);
          await tmp438.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class apiVersion_args : TBase
      {

        public apiVersion_args()
        {
        }

        public apiVersion_args DeepCopy()
        {
          var tmp439 = new apiVersion_args();
          return tmp439;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp440 = new TStruct("apiVersion_args");
            await oprot.WriteStructBeginAsync(tmp440, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is apiVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp441 = new StringBuilder("apiVersion_args(");
          tmp441.Append(')');
          return tmp441.ToString();
        }
      }


      public partial class apiVersion_result : TBase
      {
        private global::Yaskawa.Ext.API.Version _success;

        public global::Yaskawa.Ext.API.Version Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public apiVersion_result()
        {
        }

        public apiVersion_result DeepCopy()
        {
          var tmp443 = new apiVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp443.Success = (global::Yaskawa.Ext.API.Version)this.Success.DeepCopy();
          }
          tmp443.__isset.success = this.__isset.success;
          return tmp443;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Version();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp444 = new TStruct("apiVersion_result");
            await oprot.WriteStructBeginAsync(tmp444, cancellationToken);
            var tmp445 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp445.Name = "Success";
                tmp445.Type = TType.Struct;
                tmp445.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp445, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is apiVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp446 = new StringBuilder("apiVersion_result(");
          int tmp447 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp447++) { tmp446.Append(", "); }
            tmp446.Append("Success: ");
            Success.ToString(tmp446);
          }
          tmp446.Append(')');
          return tmp446.ToString();
        }
      }


      public partial class registerExtension_args : TBase
      {
        private string _canonicalName;
        private string _launchKey;
        private global::Yaskawa.Ext.API.Version _version;
        private string _vendor;
        private HashSet<string> _supportedLanguages;

        public string CanonicalName
        {
          get
          {
            return _canonicalName;
          }
          set
          {
            __isset.canonicalName = true;
            this._canonicalName = value;
          }
        }

        public string LaunchKey
        {
          get
          {
            return _launchKey;
          }
          set
          {
            __isset.launchKey = true;
            this._launchKey = value;
          }
        }

        public global::Yaskawa.Ext.API.Version Version
        {
          get
          {
            return _version;
          }
          set
          {
            __isset.version = true;
            this._version = value;
          }
        }

        public string Vendor
        {
          get
          {
            return _vendor;
          }
          set
          {
            __isset.vendor = true;
            this._vendor = value;
          }
        }

        public HashSet<string> SupportedLanguages
        {
          get
          {
            return _supportedLanguages;
          }
          set
          {
            __isset.supportedLanguages = true;
            this._supportedLanguages = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool canonicalName;
          public bool launchKey;
          public bool version;
          public bool vendor;
          public bool supportedLanguages;
        }

        public registerExtension_args()
        {
        }

        public registerExtension_args DeepCopy()
        {
          var tmp448 = new registerExtension_args();
          if((CanonicalName != null) && __isset.canonicalName)
          {
            tmp448.CanonicalName = this.CanonicalName;
          }
          tmp448.__isset.canonicalName = this.__isset.canonicalName;
          if((LaunchKey != null) && __isset.launchKey)
          {
            tmp448.LaunchKey = this.LaunchKey;
          }
          tmp448.__isset.launchKey = this.__isset.launchKey;
          if((Version != null) && __isset.version)
          {
            tmp448.Version = (global::Yaskawa.Ext.API.Version)this.Version.DeepCopy();
          }
          tmp448.__isset.version = this.__isset.version;
          if((Vendor != null) && __isset.vendor)
          {
            tmp448.Vendor = this.Vendor;
          }
          tmp448.__isset.vendor = this.__isset.vendor;
          if((SupportedLanguages != null) && __isset.supportedLanguages)
          {
            tmp448.SupportedLanguages = this.SupportedLanguages.DeepCopy();
          }
          tmp448.__isset.supportedLanguages = this.__isset.supportedLanguages;
          return tmp448;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CanonicalName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    LaunchKey = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Version = new global::Yaskawa.Ext.API.Version();
                    await Version.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Vendor = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set449 = await iprot.ReadSetBeginAsync(cancellationToken);
                      SupportedLanguages = new HashSet<string>(_set449.Count);
                      for(int _i450 = 0; _i450 < _set449.Count; ++_i450)
                      {
                        string _elem451;
                        _elem451 = await iprot.ReadStringAsync(cancellationToken);
                        SupportedLanguages.Add(_elem451);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp452 = new TStruct("registerExtension_args");
            await oprot.WriteStructBeginAsync(tmp452, cancellationToken);
            var tmp453 = new TField();
            if((CanonicalName != null) && __isset.canonicalName)
            {
              tmp453.Name = "canonicalName";
              tmp453.Type = TType.String;
              tmp453.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp453, cancellationToken);
              await oprot.WriteStringAsync(CanonicalName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((LaunchKey != null) && __isset.launchKey)
            {
              tmp453.Name = "launchKey";
              tmp453.Type = TType.String;
              tmp453.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp453, cancellationToken);
              await oprot.WriteStringAsync(LaunchKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Version != null) && __isset.version)
            {
              tmp453.Name = "version";
              tmp453.Type = TType.Struct;
              tmp453.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp453, cancellationToken);
              await Version.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Vendor != null) && __isset.vendor)
            {
              tmp453.Name = "vendor";
              tmp453.Type = TType.String;
              tmp453.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp453, cancellationToken);
              await oprot.WriteStringAsync(Vendor, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SupportedLanguages != null) && __isset.supportedLanguages)
            {
              tmp453.Name = "supportedLanguages";
              tmp453.Type = TType.Set;
              tmp453.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp453, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, SupportedLanguages.Count), cancellationToken);
              foreach (string _iter454 in SupportedLanguages)
              {
                await oprot.WriteStringAsync(_iter454, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerExtension_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.canonicalName == other.__isset.canonicalName) && ((!__isset.canonicalName) || (global::System.Object.Equals(CanonicalName, other.CanonicalName))))
            && ((__isset.launchKey == other.__isset.launchKey) && ((!__isset.launchKey) || (global::System.Object.Equals(LaunchKey, other.LaunchKey))))
            && ((__isset.version == other.__isset.version) && ((!__isset.version) || (global::System.Object.Equals(Version, other.Version))))
            && ((__isset.vendor == other.__isset.vendor) && ((!__isset.vendor) || (global::System.Object.Equals(Vendor, other.Vendor))))
            && ((__isset.supportedLanguages == other.__isset.supportedLanguages) && ((!__isset.supportedLanguages) || (TCollections.Equals(SupportedLanguages, other.SupportedLanguages))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CanonicalName != null) && __isset.canonicalName)
            {
              hashcode = (hashcode * 397) + CanonicalName.GetHashCode();
            }
            if((LaunchKey != null) && __isset.launchKey)
            {
              hashcode = (hashcode * 397) + LaunchKey.GetHashCode();
            }
            if((Version != null) && __isset.version)
            {
              hashcode = (hashcode * 397) + Version.GetHashCode();
            }
            if((Vendor != null) && __isset.vendor)
            {
              hashcode = (hashcode * 397) + Vendor.GetHashCode();
            }
            if((SupportedLanguages != null) && __isset.supportedLanguages)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(SupportedLanguages);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp455 = new StringBuilder("registerExtension_args(");
          int tmp456 = 0;
          if((CanonicalName != null) && __isset.canonicalName)
          {
            if(0 < tmp456++) { tmp455.Append(", "); }
            tmp455.Append("CanonicalName: ");
            CanonicalName.ToString(tmp455);
          }
          if((LaunchKey != null) && __isset.launchKey)
          {
            if(0 < tmp456++) { tmp455.Append(", "); }
            tmp455.Append("LaunchKey: ");
            LaunchKey.ToString(tmp455);
          }
          if((Version != null) && __isset.version)
          {
            if(0 < tmp456++) { tmp455.Append(", "); }
            tmp455.Append("Version: ");
            Version.ToString(tmp455);
          }
          if((Vendor != null) && __isset.vendor)
          {
            if(0 < tmp456++) { tmp455.Append(", "); }
            tmp455.Append("Vendor: ");
            Vendor.ToString(tmp455);
          }
          if((SupportedLanguages != null) && __isset.supportedLanguages)
          {
            if(0 < tmp456++) { tmp455.Append(", "); }
            tmp455.Append("SupportedLanguages: ");
            SupportedLanguages.ToString(tmp455);
          }
          tmp455.Append(')');
          return tmp455.ToString();
        }
      }


      public partial class registerExtension_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public registerExtension_result()
        {
        }

        public registerExtension_result DeepCopy()
        {
          var tmp457 = new registerExtension_result();
          if(__isset.success)
          {
            tmp457.Success = this.Success;
          }
          tmp457.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp457.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp457.__isset.e = this.__isset.e;
          return tmp457;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp458 = new TStruct("registerExtension_result");
            await oprot.WriteStructBeginAsync(tmp458, cancellationToken);
            var tmp459 = new TField();

            if(this.__isset.success)
            {
              tmp459.Name = "Success";
              tmp459.Type = TType.I64;
              tmp459.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp459, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp459.Name = "E";
                tmp459.Type = TType.Struct;
                tmp459.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp459, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerExtension_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp460 = new StringBuilder("registerExtension_result(");
          int tmp461 = 0;
          if(__isset.success)
          {
            if(0 < tmp461++) { tmp460.Append(", "); }
            tmp460.Append("Success: ");
            Success.ToString(tmp460);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp461++) { tmp460.Append(", "); }
            tmp460.Append("E: ");
            E.ToString(tmp460);
          }
          tmp460.Append(')');
          return tmp460.ToString();
        }
      }


      public partial class unregisterExtension_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public unregisterExtension_args()
        {
        }

        public unregisterExtension_args DeepCopy()
        {
          var tmp462 = new unregisterExtension_args();
          if(__isset.id)
          {
            tmp462.Id = this.Id;
          }
          tmp462.__isset.id = this.__isset.id;
          return tmp462;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp463 = new TStruct("unregisterExtension_args");
            await oprot.WriteStructBeginAsync(tmp463, cancellationToken);
            var tmp464 = new TField();
            if(__isset.id)
            {
              tmp464.Name = "id";
              tmp464.Type = TType.I64;
              tmp464.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp464, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterExtension_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp465 = new StringBuilder("unregisterExtension_args(");
          int tmp466 = 0;
          if(__isset.id)
          {
            if(0 < tmp466++) { tmp465.Append(", "); }
            tmp465.Append("Id: ");
            Id.ToString(tmp465);
          }
          tmp465.Append(')');
          return tmp465.ToString();
        }
      }


      public partial class unregisterExtension_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterExtension_result()
        {
        }

        public unregisterExtension_result DeepCopy()
        {
          var tmp467 = new unregisterExtension_result();
          if((E != null) && __isset.e)
          {
            tmp467.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp467.__isset.e = this.__isset.e;
          return tmp467;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp468 = new TStruct("unregisterExtension_result");
            await oprot.WriteStructBeginAsync(tmp468, cancellationToken);
            var tmp469 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp469.Name = "E";
                tmp469.Type = TType.Struct;
                tmp469.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp469, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterExtension_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp470 = new StringBuilder("unregisterExtension_result(");
          int tmp471 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp471++) { tmp470.Append(", "); }
            tmp470.Append("E: ");
            E.ToString(tmp470);
          }
          tmp470.Append(')');
          return tmp470.ToString();
        }
      }


      public partial class ping_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public ping_args()
        {
        }

        public ping_args DeepCopy()
        {
          var tmp472 = new ping_args();
          if(__isset.id)
          {
            tmp472.Id = this.Id;
          }
          tmp472.__isset.id = this.__isset.id;
          return tmp472;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp473 = new TStruct("ping_args");
            await oprot.WriteStructBeginAsync(tmp473, cancellationToken);
            var tmp474 = new TField();
            if(__isset.id)
            {
              tmp474.Name = "id";
              tmp474.Type = TType.I64;
              tmp474.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp474, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp475 = new StringBuilder("ping_args(");
          int tmp476 = 0;
          if(__isset.id)
          {
            if(0 < tmp476++) { tmp475.Append(", "); }
            tmp475.Append("Id: ");
            Id.ToString(tmp475);
          }
          tmp475.Append(')');
          return tmp475.ToString();
        }
      }


      public partial class ping_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public ping_result()
        {
        }

        public ping_result DeepCopy()
        {
          var tmp477 = new ping_result();
          if((E != null) && __isset.e)
          {
            tmp477.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp477.__isset.e = this.__isset.e;
          return tmp477;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp478 = new TStruct("ping_result");
            await oprot.WriteStructBeginAsync(tmp478, cancellationToken);
            var tmp479 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp479.Name = "E";
                tmp479.Type = TType.Struct;
                tmp479.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp479, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp480 = new StringBuilder("ping_result(");
          int tmp481 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp481++) { tmp480.Append(", "); }
            tmp480.Append("E: ");
            E.ToString(tmp480);
          }
          tmp480.Append(')');
          return tmp480.ToString();
        }
      }


      public partial class controller_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public controller_args()
        {
        }

        public controller_args DeepCopy()
        {
          var tmp482 = new controller_args();
          if(__isset.id)
          {
            tmp482.Id = this.Id;
          }
          tmp482.__isset.id = this.__isset.id;
          return tmp482;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp483 = new TStruct("controller_args");
            await oprot.WriteStructBeginAsync(tmp483, cancellationToken);
            var tmp484 = new TField();
            if(__isset.id)
            {
              tmp484.Name = "id";
              tmp484.Type = TType.I64;
              tmp484.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp484, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controller_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp485 = new StringBuilder("controller_args(");
          int tmp486 = 0;
          if(__isset.id)
          {
            if(0 < tmp486++) { tmp485.Append(", "); }
            tmp485.Append("Id: ");
            Id.ToString(tmp485);
          }
          tmp485.Append(')');
          return tmp485.ToString();
        }
      }


      public partial class controller_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public controller_result()
        {
        }

        public controller_result DeepCopy()
        {
          var tmp487 = new controller_result();
          if(__isset.success)
          {
            tmp487.Success = this.Success;
          }
          tmp487.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp487.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp487.__isset.e = this.__isset.e;
          return tmp487;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp488 = new TStruct("controller_result");
            await oprot.WriteStructBeginAsync(tmp488, cancellationToken);
            var tmp489 = new TField();

            if(this.__isset.success)
            {
              tmp489.Name = "Success";
              tmp489.Type = TType.I64;
              tmp489.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp489, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp489.Name = "E";
                tmp489.Type = TType.Struct;
                tmp489.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp489, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controller_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp490 = new StringBuilder("controller_result(");
          int tmp491 = 0;
          if(__isset.success)
          {
            if(0 < tmp491++) { tmp490.Append(", "); }
            tmp490.Append("Success: ");
            Success.ToString(tmp490);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp491++) { tmp490.Append(", "); }
            tmp490.Append("E: ");
            E.ToString(tmp490);
          }
          tmp490.Append(')');
          return tmp490.ToString();
        }
      }


      public partial class pendant_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public pendant_args()
        {
        }

        public pendant_args DeepCopy()
        {
          var tmp492 = new pendant_args();
          if(__isset.id)
          {
            tmp492.Id = this.Id;
          }
          tmp492.__isset.id = this.__isset.id;
          return tmp492;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp493 = new TStruct("pendant_args");
            await oprot.WriteStructBeginAsync(tmp493, cancellationToken);
            var tmp494 = new TField();
            if(__isset.id)
            {
              tmp494.Name = "id";
              tmp494.Type = TType.I64;
              tmp494.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp494, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendant_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp495 = new StringBuilder("pendant_args(");
          int tmp496 = 0;
          if(__isset.id)
          {
            if(0 < tmp496++) { tmp495.Append(", "); }
            tmp495.Append("Id: ");
            Id.ToString(tmp495);
          }
          tmp495.Append(')');
          return tmp495.ToString();
        }
      }


      public partial class pendant_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public pendant_result()
        {
        }

        public pendant_result DeepCopy()
        {
          var tmp497 = new pendant_result();
          if(__isset.success)
          {
            tmp497.Success = this.Success;
          }
          tmp497.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp497.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp497.__isset.e = this.__isset.e;
          return tmp497;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp498 = new TStruct("pendant_result");
            await oprot.WriteStructBeginAsync(tmp498, cancellationToken);
            var tmp499 = new TField();

            if(this.__isset.success)
            {
              tmp499.Name = "Success";
              tmp499.Type = TType.I64;
              tmp499.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp499, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp499.Name = "E";
                tmp499.Type = TType.Struct;
                tmp499.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp499, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendant_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp500 = new StringBuilder("pendant_result(");
          int tmp501 = 0;
          if(__isset.success)
          {
            if(0 < tmp501++) { tmp500.Append(", "); }
            tmp500.Append("Success: ");
            Success.ToString(tmp500);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp501++) { tmp500.Append(", "); }
            tmp500.Append("E: ");
            E.ToString(tmp500);
          }
          tmp500.Append(')');
          return tmp500.ToString();
        }
      }


      public partial class log_args : TBase
      {
        private long _id;
        private global::Yaskawa.Ext.API.LoggingLevel _level;
        private string _message;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.LoggingLevel"/>
        /// </summary>
        public global::Yaskawa.Ext.API.LoggingLevel Level
        {
          get
          {
            return _level;
          }
          set
          {
            __isset.level = true;
            this._level = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool level;
          public bool message;
        }

        public log_args()
        {
        }

        public log_args DeepCopy()
        {
          var tmp502 = new log_args();
          if(__isset.id)
          {
            tmp502.Id = this.Id;
          }
          tmp502.__isset.id = this.__isset.id;
          if(__isset.level)
          {
            tmp502.Level = this.Level;
          }
          tmp502.__isset.level = this.__isset.level;
          if((Message != null) && __isset.message)
          {
            tmp502.Message = this.Message;
          }
          tmp502.__isset.message = this.__isset.message;
          return tmp502;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Level = (global::Yaskawa.Ext.API.LoggingLevel)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp503 = new TStruct("log_args");
            await oprot.WriteStructBeginAsync(tmp503, cancellationToken);
            var tmp504 = new TField();
            if(__isset.id)
            {
              tmp504.Name = "id";
              tmp504.Type = TType.I64;
              tmp504.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp504, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.level)
            {
              tmp504.Name = "level";
              tmp504.Type = TType.I32;
              tmp504.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp504, cancellationToken);
              await oprot.WriteI32Async((int)Level, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp504.Name = "message";
              tmp504.Type = TType.String;
              tmp504.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp504, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is log_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.level == other.__isset.level) && ((!__isset.level) || (global::System.Object.Equals(Level, other.Level))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if(__isset.level)
            {
              hashcode = (hashcode * 397) + Level.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp505 = new StringBuilder("log_args(");
          int tmp506 = 0;
          if(__isset.id)
          {
            if(0 < tmp506++) { tmp505.Append(", "); }
            tmp505.Append("Id: ");
            Id.ToString(tmp505);
          }
          if(__isset.level)
          {
            if(0 < tmp506++) { tmp505.Append(", "); }
            tmp505.Append("Level: ");
            Level.ToString(tmp505);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp506++) { tmp505.Append(", "); }
            tmp505.Append("Message: ");
            Message.ToString(tmp505);
          }
          tmp505.Append(')');
          return tmp505.ToString();
        }
      }


      public partial class subscribeLoggingEvents_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public subscribeLoggingEvents_args()
        {
        }

        public subscribeLoggingEvents_args DeepCopy()
        {
          var tmp507 = new subscribeLoggingEvents_args();
          if(__isset.id)
          {
            tmp507.Id = this.Id;
          }
          tmp507.__isset.id = this.__isset.id;
          return tmp507;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp508 = new TStruct("subscribeLoggingEvents_args");
            await oprot.WriteStructBeginAsync(tmp508, cancellationToken);
            var tmp509 = new TField();
            if(__isset.id)
            {
              tmp509.Name = "id";
              tmp509.Type = TType.I64;
              tmp509.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp509, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeLoggingEvents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp510 = new StringBuilder("subscribeLoggingEvents_args(");
          int tmp511 = 0;
          if(__isset.id)
          {
            if(0 < tmp511++) { tmp510.Append(", "); }
            tmp510.Append("Id: ");
            Id.ToString(tmp510);
          }
          tmp510.Append(')');
          return tmp510.ToString();
        }
      }


      public partial class subscribeLoggingEvents_result : TBase
      {

        public subscribeLoggingEvents_result()
        {
        }

        public subscribeLoggingEvents_result DeepCopy()
        {
          var tmp512 = new subscribeLoggingEvents_result();
          return tmp512;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp513 = new TStruct("subscribeLoggingEvents_result");
            await oprot.WriteStructBeginAsync(tmp513, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeLoggingEvents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp514 = new StringBuilder("subscribeLoggingEvents_result(");
          tmp514.Append(')');
          return tmp514.ToString();
        }
      }


      public partial class unsubscribeLoggingEvents_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public unsubscribeLoggingEvents_args()
        {
        }

        public unsubscribeLoggingEvents_args DeepCopy()
        {
          var tmp516 = new unsubscribeLoggingEvents_args();
          if(__isset.id)
          {
            tmp516.Id = this.Id;
          }
          tmp516.__isset.id = this.__isset.id;
          return tmp516;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp517 = new TStruct("unsubscribeLoggingEvents_args");
            await oprot.WriteStructBeginAsync(tmp517, cancellationToken);
            var tmp518 = new TField();
            if(__isset.id)
            {
              tmp518.Name = "id";
              tmp518.Type = TType.I64;
              tmp518.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp518, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeLoggingEvents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp519 = new StringBuilder("unsubscribeLoggingEvents_args(");
          int tmp520 = 0;
          if(__isset.id)
          {
            if(0 < tmp520++) { tmp519.Append(", "); }
            tmp519.Append("Id: ");
            Id.ToString(tmp519);
          }
          tmp519.Append(')');
          return tmp519.ToString();
        }
      }


      public partial class unsubscribeLoggingEvents_result : TBase
      {

        public unsubscribeLoggingEvents_result()
        {
        }

        public unsubscribeLoggingEvents_result DeepCopy()
        {
          var tmp521 = new unsubscribeLoggingEvents_result();
          return tmp521;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp522 = new TStruct("unsubscribeLoggingEvents_result");
            await oprot.WriteStructBeginAsync(tmp522, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeLoggingEvents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp523 = new StringBuilder("unsubscribeLoggingEvents_result(");
          tmp523.Append(')');
          return tmp523.ToString();
        }
      }


      public partial class logEvents_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public logEvents_args()
        {
        }

        public logEvents_args DeepCopy()
        {
          var tmp525 = new logEvents_args();
          if(__isset.id)
          {
            tmp525.Id = this.Id;
          }
          tmp525.__isset.id = this.__isset.id;
          return tmp525;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp526 = new TStruct("logEvents_args");
            await oprot.WriteStructBeginAsync(tmp526, cancellationToken);
            var tmp527 = new TField();
            if(__isset.id)
            {
              tmp527.Name = "id";
              tmp527.Type = TType.I64;
              tmp527.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp527, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is logEvents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp528 = new StringBuilder("logEvents_args(");
          int tmp529 = 0;
          if(__isset.id)
          {
            if(0 < tmp529++) { tmp528.Append(", "); }
            tmp528.Append("Id: ");
            Id.ToString(tmp528);
          }
          tmp528.Append(')');
          return tmp528.ToString();
        }
      }


      public partial class logEvents_result : TBase
      {
        private List<global::Yaskawa.Ext.API.LoggingEvent> _success;

        public List<global::Yaskawa.Ext.API.LoggingEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public logEvents_result()
        {
        }

        public logEvents_result DeepCopy()
        {
          var tmp530 = new logEvents_result();
          if((Success != null) && __isset.success)
          {
            tmp530.Success = this.Success.DeepCopy();
          }
          tmp530.__isset.success = this.__isset.success;
          return tmp530;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list531 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.LoggingEvent>(_list531.Count);
                      for(int _i532 = 0; _i532 < _list531.Count; ++_i532)
                      {
                        global::Yaskawa.Ext.API.LoggingEvent _elem533;
                        _elem533 = new global::Yaskawa.Ext.API.LoggingEvent();
                        await _elem533.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem533);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp534 = new TStruct("logEvents_result");
            await oprot.WriteStructBeginAsync(tmp534, cancellationToken);
            var tmp535 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp535.Name = "Success";
                tmp535.Type = TType.List;
                tmp535.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp535, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.LoggingEvent _iter536 in Success)
                {
                  await _iter536.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is logEvents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp537 = new StringBuilder("logEvents_result(");
          int tmp538 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp538++) { tmp537.Append(", "); }
            tmp537.Append("Success: ");
            Success.ToString(tmp537);
          }
          tmp537.Append(')');
          return tmp537.ToString();
        }
      }


      public partial class listAvailableStorage_args : TBase
      {
        private long _eid;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
        }

        public listAvailableStorage_args()
        {
        }

        public listAvailableStorage_args DeepCopy()
        {
          var tmp539 = new listAvailableStorage_args();
          if(__isset.eid)
          {
            tmp539.Eid = this.Eid;
          }
          tmp539.__isset.eid = this.__isset.eid;
          return tmp539;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp540 = new TStruct("listAvailableStorage_args");
            await oprot.WriteStructBeginAsync(tmp540, cancellationToken);
            var tmp541 = new TField();
            if(__isset.eid)
            {
              tmp541.Name = "eid";
              tmp541.Type = TType.I64;
              tmp541.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp541, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listAvailableStorage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp542 = new StringBuilder("listAvailableStorage_args(");
          int tmp543 = 0;
          if(__isset.eid)
          {
            if(0 < tmp543++) { tmp542.Append(", "); }
            tmp542.Append("Eid: ");
            Eid.ToString(tmp542);
          }
          tmp542.Append(')');
          return tmp542.ToString();
        }
      }


      public partial class listAvailableStorage_result : TBase
      {
        private List<global::Yaskawa.Ext.API.storageInfo> _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public List<global::Yaskawa.Ext.API.storageInfo> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public listAvailableStorage_result()
        {
        }

        public listAvailableStorage_result DeepCopy()
        {
          var tmp544 = new listAvailableStorage_result();
          if((Success != null) && __isset.success)
          {
            tmp544.Success = this.Success.DeepCopy();
          }
          tmp544.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp544.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp544.__isset.e = this.__isset.e;
          return tmp544;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list545 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.storageInfo>(_list545.Count);
                      for(int _i546 = 0; _i546 < _list545.Count; ++_i546)
                      {
                        global::Yaskawa.Ext.API.storageInfo _elem547;
                        _elem547 = new global::Yaskawa.Ext.API.storageInfo();
                        await _elem547.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem547);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp548 = new TStruct("listAvailableStorage_result");
            await oprot.WriteStructBeginAsync(tmp548, cancellationToken);
            var tmp549 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp549.Name = "Success";
                tmp549.Type = TType.List;
                tmp549.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp549, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.storageInfo _iter550 in Success)
                {
                  await _iter550.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp549.Name = "E";
                tmp549.Type = TType.Struct;
                tmp549.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp549, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listAvailableStorage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp551 = new StringBuilder("listAvailableStorage_result(");
          int tmp552 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp552++) { tmp551.Append(", "); }
            tmp551.Append("Success: ");
            Success.ToString(tmp551);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp552++) { tmp551.Append(", "); }
            tmp551.Append("E: ");
            E.ToString(tmp551);
          }
          tmp551.Append(')');
          return tmp551.ToString();
        }
      }


      public partial class listFiles_args : TBase
      {
        private long _eid;
        private string _path;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public string Path
        {
          get
          {
            return _path;
          }
          set
          {
            __isset.path = true;
            this._path = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool path;
        }

        public listFiles_args()
        {
        }

        public listFiles_args DeepCopy()
        {
          var tmp553 = new listFiles_args();
          if(__isset.eid)
          {
            tmp553.Eid = this.Eid;
          }
          tmp553.__isset.eid = this.__isset.eid;
          if((Path != null) && __isset.path)
          {
            tmp553.Path = this.Path;
          }
          tmp553.__isset.path = this.__isset.path;
          return tmp553;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Path = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp554 = new TStruct("listFiles_args");
            await oprot.WriteStructBeginAsync(tmp554, cancellationToken);
            var tmp555 = new TField();
            if(__isset.eid)
            {
              tmp555.Name = "eid";
              tmp555.Type = TType.I64;
              tmp555.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp555, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Path != null) && __isset.path)
            {
              tmp555.Name = "path";
              tmp555.Type = TType.String;
              tmp555.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp555, cancellationToken);
              await oprot.WriteStringAsync(Path, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listFiles_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.path == other.__isset.path) && ((!__isset.path) || (global::System.Object.Equals(Path, other.Path))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if((Path != null) && __isset.path)
            {
              hashcode = (hashcode * 397) + Path.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp556 = new StringBuilder("listFiles_args(");
          int tmp557 = 0;
          if(__isset.eid)
          {
            if(0 < tmp557++) { tmp556.Append(", "); }
            tmp556.Append("Eid: ");
            Eid.ToString(tmp556);
          }
          if((Path != null) && __isset.path)
          {
            if(0 < tmp557++) { tmp556.Append(", "); }
            tmp556.Append("Path: ");
            Path.ToString(tmp556);
          }
          tmp556.Append(')');
          return tmp556.ToString();
        }
      }


      public partial class listFiles_result : TBase
      {
        private List<string> _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public listFiles_result()
        {
        }

        public listFiles_result DeepCopy()
        {
          var tmp558 = new listFiles_result();
          if((Success != null) && __isset.success)
          {
            tmp558.Success = this.Success.DeepCopy();
          }
          tmp558.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp558.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp558.__isset.e = this.__isset.e;
          return tmp558;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list559 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list559.Count);
                      for(int _i560 = 0; _i560 < _list559.Count; ++_i560)
                      {
                        string _elem561;
                        _elem561 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem561);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp562 = new TStruct("listFiles_result");
            await oprot.WriteStructBeginAsync(tmp562, cancellationToken);
            var tmp563 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp563.Name = "Success";
                tmp563.Type = TType.List;
                tmp563.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp563, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter564 in Success)
                {
                  await oprot.WriteStringAsync(_iter564, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp563.Name = "E";
                tmp563.Type = TType.Struct;
                tmp563.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp563, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listFiles_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp565 = new StringBuilder("listFiles_result(");
          int tmp566 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp566++) { tmp565.Append(", "); }
            tmp565.Append("Success: ");
            Success.ToString(tmp565);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp566++) { tmp565.Append(", "); }
            tmp565.Append("E: ");
            E.ToString(tmp565);
          }
          tmp565.Append(')');
          return tmp565.ToString();
        }
      }


      public partial class openFile_args : TBase
      {
        private long _eid;
        private string _path;
        private string _flags;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public string Path
        {
          get
          {
            return _path;
          }
          set
          {
            __isset.path = true;
            this._path = value;
          }
        }

        public string Flags
        {
          get
          {
            return _flags;
          }
          set
          {
            __isset.flags = true;
            this._flags = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool path;
          public bool flags;
        }

        public openFile_args()
        {
        }

        public openFile_args DeepCopy()
        {
          var tmp567 = new openFile_args();
          if(__isset.eid)
          {
            tmp567.Eid = this.Eid;
          }
          tmp567.__isset.eid = this.__isset.eid;
          if((Path != null) && __isset.path)
          {
            tmp567.Path = this.Path;
          }
          tmp567.__isset.path = this.__isset.path;
          if((Flags != null) && __isset.flags)
          {
            tmp567.Flags = this.Flags;
          }
          tmp567.__isset.flags = this.__isset.flags;
          return tmp567;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Path = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Flags = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp568 = new TStruct("openFile_args");
            await oprot.WriteStructBeginAsync(tmp568, cancellationToken);
            var tmp569 = new TField();
            if(__isset.eid)
            {
              tmp569.Name = "eid";
              tmp569.Type = TType.I64;
              tmp569.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp569, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Path != null) && __isset.path)
            {
              tmp569.Name = "path";
              tmp569.Type = TType.String;
              tmp569.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp569, cancellationToken);
              await oprot.WriteStringAsync(Path, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Flags != null) && __isset.flags)
            {
              tmp569.Name = "flags";
              tmp569.Type = TType.String;
              tmp569.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp569, cancellationToken);
              await oprot.WriteStringAsync(Flags, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.path == other.__isset.path) && ((!__isset.path) || (global::System.Object.Equals(Path, other.Path))))
            && ((__isset.flags == other.__isset.flags) && ((!__isset.flags) || (global::System.Object.Equals(Flags, other.Flags))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if((Path != null) && __isset.path)
            {
              hashcode = (hashcode * 397) + Path.GetHashCode();
            }
            if((Flags != null) && __isset.flags)
            {
              hashcode = (hashcode * 397) + Flags.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp570 = new StringBuilder("openFile_args(");
          int tmp571 = 0;
          if(__isset.eid)
          {
            if(0 < tmp571++) { tmp570.Append(", "); }
            tmp570.Append("Eid: ");
            Eid.ToString(tmp570);
          }
          if((Path != null) && __isset.path)
          {
            if(0 < tmp571++) { tmp570.Append(", "); }
            tmp570.Append("Path: ");
            Path.ToString(tmp570);
          }
          if((Flags != null) && __isset.flags)
          {
            if(0 < tmp571++) { tmp570.Append(", "); }
            tmp570.Append("Flags: ");
            Flags.ToString(tmp570);
          }
          tmp570.Append(')');
          return tmp570.ToString();
        }
      }


      public partial class openFile_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public openFile_result()
        {
        }

        public openFile_result DeepCopy()
        {
          var tmp572 = new openFile_result();
          if(__isset.success)
          {
            tmp572.Success = this.Success;
          }
          tmp572.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp572.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp572.__isset.e = this.__isset.e;
          return tmp572;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp573 = new TStruct("openFile_result");
            await oprot.WriteStructBeginAsync(tmp573, cancellationToken);
            var tmp574 = new TField();

            if(this.__isset.success)
            {
              tmp574.Name = "Success";
              tmp574.Type = TType.I64;
              tmp574.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp574.Name = "E";
                tmp574.Type = TType.Struct;
                tmp574.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp575 = new StringBuilder("openFile_result(");
          int tmp576 = 0;
          if(__isset.success)
          {
            if(0 < tmp576++) { tmp575.Append(", "); }
            tmp575.Append("Success: ");
            Success.ToString(tmp575);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp576++) { tmp575.Append(", "); }
            tmp575.Append("E: ");
            E.ToString(tmp575);
          }
          tmp575.Append(')');
          return tmp575.ToString();
        }
      }


      public partial class closeFile_args : TBase
      {
        private long _eid;
        private long _id;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
        }

        public closeFile_args()
        {
        }

        public closeFile_args DeepCopy()
        {
          var tmp577 = new closeFile_args();
          if(__isset.eid)
          {
            tmp577.Eid = this.Eid;
          }
          tmp577.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp577.Id = this.Id;
          }
          tmp577.__isset.id = this.__isset.id;
          return tmp577;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp578 = new TStruct("closeFile_args");
            await oprot.WriteStructBeginAsync(tmp578, cancellationToken);
            var tmp579 = new TField();
            if(__isset.eid)
            {
              tmp579.Name = "eid";
              tmp579.Type = TType.I64;
              tmp579.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp579.Name = "id";
              tmp579.Type = TType.I64;
              tmp579.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp580 = new StringBuilder("closeFile_args(");
          int tmp581 = 0;
          if(__isset.eid)
          {
            if(0 < tmp581++) { tmp580.Append(", "); }
            tmp580.Append("Eid: ");
            Eid.ToString(tmp580);
          }
          if(__isset.id)
          {
            if(0 < tmp581++) { tmp580.Append(", "); }
            tmp580.Append("Id: ");
            Id.ToString(tmp580);
          }
          tmp580.Append(')');
          return tmp580.ToString();
        }
      }


      public partial class closeFile_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public closeFile_result()
        {
        }

        public closeFile_result DeepCopy()
        {
          var tmp582 = new closeFile_result();
          if((E != null) && __isset.e)
          {
            tmp582.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp582.__isset.e = this.__isset.e;
          return tmp582;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp583 = new TStruct("closeFile_result");
            await oprot.WriteStructBeginAsync(tmp583, cancellationToken);
            var tmp584 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp584.Name = "E";
                tmp584.Type = TType.Struct;
                tmp584.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp584, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp585 = new StringBuilder("closeFile_result(");
          int tmp586 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp586++) { tmp585.Append(", "); }
            tmp585.Append("E: ");
            E.ToString(tmp585);
          }
          tmp585.Append(')');
          return tmp585.ToString();
        }
      }


      public partial class isOpen_args : TBase
      {
        private long _eid;
        private long _id;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
        }

        public isOpen_args()
        {
        }

        public isOpen_args DeepCopy()
        {
          var tmp587 = new isOpen_args();
          if(__isset.eid)
          {
            tmp587.Eid = this.Eid;
          }
          tmp587.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp587.Id = this.Id;
          }
          tmp587.__isset.id = this.__isset.id;
          return tmp587;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp588 = new TStruct("isOpen_args");
            await oprot.WriteStructBeginAsync(tmp588, cancellationToken);
            var tmp589 = new TField();
            if(__isset.eid)
            {
              tmp589.Name = "eid";
              tmp589.Type = TType.I64;
              tmp589.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp589, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp589.Name = "id";
              tmp589.Type = TType.I64;
              tmp589.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp589, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is isOpen_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp590 = new StringBuilder("isOpen_args(");
          int tmp591 = 0;
          if(__isset.eid)
          {
            if(0 < tmp591++) { tmp590.Append(", "); }
            tmp590.Append("Eid: ");
            Eid.ToString(tmp590);
          }
          if(__isset.id)
          {
            if(0 < tmp591++) { tmp590.Append(", "); }
            tmp590.Append("Id: ");
            Id.ToString(tmp590);
          }
          tmp590.Append(')');
          return tmp590.ToString();
        }
      }


      public partial class isOpen_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public isOpen_result()
        {
        }

        public isOpen_result DeepCopy()
        {
          var tmp592 = new isOpen_result();
          if(__isset.success)
          {
            tmp592.Success = this.Success;
          }
          tmp592.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp592.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp592.__isset.e = this.__isset.e;
          return tmp592;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp593 = new TStruct("isOpen_result");
            await oprot.WriteStructBeginAsync(tmp593, cancellationToken);
            var tmp594 = new TField();

            if(this.__isset.success)
            {
              tmp594.Name = "Success";
              tmp594.Type = TType.Bool;
              tmp594.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp594, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp594.Name = "E";
                tmp594.Type = TType.Struct;
                tmp594.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp594, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is isOpen_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp595 = new StringBuilder("isOpen_result(");
          int tmp596 = 0;
          if(__isset.success)
          {
            if(0 < tmp596++) { tmp595.Append(", "); }
            tmp595.Append("Success: ");
            Success.ToString(tmp595);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp596++) { tmp595.Append(", "); }
            tmp595.Append("E: ");
            E.ToString(tmp595);
          }
          tmp595.Append(')');
          return tmp595.ToString();
        }
      }


      public partial class read_args : TBase
      {
        private long _eid;
        private long _id;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
        }

        public read_args()
        {
        }

        public read_args DeepCopy()
        {
          var tmp597 = new read_args();
          if(__isset.eid)
          {
            tmp597.Eid = this.Eid;
          }
          tmp597.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp597.Id = this.Id;
          }
          tmp597.__isset.id = this.__isset.id;
          return tmp597;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp598 = new TStruct("read_args");
            await oprot.WriteStructBeginAsync(tmp598, cancellationToken);
            var tmp599 = new TField();
            if(__isset.eid)
            {
              tmp599.Name = "eid";
              tmp599.Type = TType.I64;
              tmp599.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp599, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp599.Name = "id";
              tmp599.Type = TType.I64;
              tmp599.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp599, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is read_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp600 = new StringBuilder("read_args(");
          int tmp601 = 0;
          if(__isset.eid)
          {
            if(0 < tmp601++) { tmp600.Append(", "); }
            tmp600.Append("Eid: ");
            Eid.ToString(tmp600);
          }
          if(__isset.id)
          {
            if(0 < tmp601++) { tmp600.Append(", "); }
            tmp600.Append("Id: ");
            Id.ToString(tmp600);
          }
          tmp600.Append(')');
          return tmp600.ToString();
        }
      }


      public partial class read_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public read_result()
        {
        }

        public read_result DeepCopy()
        {
          var tmp602 = new read_result();
          if((Success != null) && __isset.success)
          {
            tmp602.Success = this.Success;
          }
          tmp602.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp602.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp602.__isset.e = this.__isset.e;
          return tmp602;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp603 = new TStruct("read_result");
            await oprot.WriteStructBeginAsync(tmp603, cancellationToken);
            var tmp604 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp604.Name = "Success";
                tmp604.Type = TType.String;
                tmp604.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp604, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp604.Name = "E";
                tmp604.Type = TType.Struct;
                tmp604.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp604, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is read_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp605 = new StringBuilder("read_result(");
          int tmp606 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp606++) { tmp605.Append(", "); }
            tmp605.Append("Success: ");
            Success.ToString(tmp605);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp606++) { tmp605.Append(", "); }
            tmp605.Append("E: ");
            E.ToString(tmp605);
          }
          tmp605.Append(')');
          return tmp605.ToString();
        }
      }


      public partial class readChunk_args : TBase
      {
        private long _eid;
        private long _id;
        private long _offset;
        private long _len;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public long Offset
        {
          get
          {
            return _offset;
          }
          set
          {
            __isset.offset = true;
            this._offset = value;
          }
        }

        public long Len
        {
          get
          {
            return _len;
          }
          set
          {
            __isset.len = true;
            this._len = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
          public bool offset;
          public bool len;
        }

        public readChunk_args()
        {
        }

        public readChunk_args DeepCopy()
        {
          var tmp607 = new readChunk_args();
          if(__isset.eid)
          {
            tmp607.Eid = this.Eid;
          }
          tmp607.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp607.Id = this.Id;
          }
          tmp607.__isset.id = this.__isset.id;
          if(__isset.offset)
          {
            tmp607.Offset = this.Offset;
          }
          tmp607.__isset.offset = this.__isset.offset;
          if(__isset.len)
          {
            tmp607.Len = this.Len;
          }
          tmp607.__isset.len = this.__isset.len;
          return tmp607;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I64)
                  {
                    Offset = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I64)
                  {
                    Len = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp608 = new TStruct("readChunk_args");
            await oprot.WriteStructBeginAsync(tmp608, cancellationToken);
            var tmp609 = new TField();
            if(__isset.eid)
            {
              tmp609.Name = "eid";
              tmp609.Type = TType.I64;
              tmp609.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp609, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp609.Name = "id";
              tmp609.Type = TType.I64;
              tmp609.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp609, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.offset)
            {
              tmp609.Name = "offset";
              tmp609.Type = TType.I64;
              tmp609.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp609, cancellationToken);
              await oprot.WriteI64Async(Offset, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.len)
            {
              tmp609.Name = "len";
              tmp609.Type = TType.I64;
              tmp609.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp609, cancellationToken);
              await oprot.WriteI64Async(Len, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is readChunk_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.offset == other.__isset.offset) && ((!__isset.offset) || (global::System.Object.Equals(Offset, other.Offset))))
            && ((__isset.len == other.__isset.len) && ((!__isset.len) || (global::System.Object.Equals(Len, other.Len))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if(__isset.offset)
            {
              hashcode = (hashcode * 397) + Offset.GetHashCode();
            }
            if(__isset.len)
            {
              hashcode = (hashcode * 397) + Len.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp610 = new StringBuilder("readChunk_args(");
          int tmp611 = 0;
          if(__isset.eid)
          {
            if(0 < tmp611++) { tmp610.Append(", "); }
            tmp610.Append("Eid: ");
            Eid.ToString(tmp610);
          }
          if(__isset.id)
          {
            if(0 < tmp611++) { tmp610.Append(", "); }
            tmp610.Append("Id: ");
            Id.ToString(tmp610);
          }
          if(__isset.offset)
          {
            if(0 < tmp611++) { tmp610.Append(", "); }
            tmp610.Append("Offset: ");
            Offset.ToString(tmp610);
          }
          if(__isset.len)
          {
            if(0 < tmp611++) { tmp610.Append(", "); }
            tmp610.Append("Len: ");
            Len.ToString(tmp610);
          }
          tmp610.Append(')');
          return tmp610.ToString();
        }
      }


      public partial class readChunk_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public readChunk_result()
        {
        }

        public readChunk_result DeepCopy()
        {
          var tmp612 = new readChunk_result();
          if((Success != null) && __isset.success)
          {
            tmp612.Success = this.Success;
          }
          tmp612.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp612.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp612.__isset.e = this.__isset.e;
          return tmp612;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp613 = new TStruct("readChunk_result");
            await oprot.WriteStructBeginAsync(tmp613, cancellationToken);
            var tmp614 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp614.Name = "Success";
                tmp614.Type = TType.String;
                tmp614.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp614, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp614.Name = "E";
                tmp614.Type = TType.Struct;
                tmp614.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp614, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is readChunk_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp615 = new StringBuilder("readChunk_result(");
          int tmp616 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp616++) { tmp615.Append(", "); }
            tmp615.Append("Success: ");
            Success.ToString(tmp615);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp616++) { tmp615.Append(", "); }
            tmp615.Append("E: ");
            E.ToString(tmp615);
          }
          tmp615.Append(')');
          return tmp615.ToString();
        }
      }


      public partial class write_args : TBase
      {
        private long _eid;
        private long _id;
        private string _data;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string Data
        {
          get
          {
            return _data;
          }
          set
          {
            __isset.data = true;
            this._data = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
          public bool data;
        }

        public write_args()
        {
        }

        public write_args DeepCopy()
        {
          var tmp617 = new write_args();
          if(__isset.eid)
          {
            tmp617.Eid = this.Eid;
          }
          tmp617.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp617.Id = this.Id;
          }
          tmp617.__isset.id = this.__isset.id;
          if((Data != null) && __isset.data)
          {
            tmp617.Data = this.Data;
          }
          tmp617.__isset.data = this.__isset.data;
          return tmp617;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Data = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp618 = new TStruct("write_args");
            await oprot.WriteStructBeginAsync(tmp618, cancellationToken);
            var tmp619 = new TField();
            if(__isset.eid)
            {
              tmp619.Name = "eid";
              tmp619.Type = TType.I64;
              tmp619.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp619, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp619.Name = "id";
              tmp619.Type = TType.I64;
              tmp619.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp619, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Data != null) && __isset.data)
            {
              tmp619.Name = "data";
              tmp619.Type = TType.String;
              tmp619.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp619, cancellationToken);
              await oprot.WriteStringAsync(Data, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is write_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.data == other.__isset.data) && ((!__isset.data) || (global::System.Object.Equals(Data, other.Data))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((Data != null) && __isset.data)
            {
              hashcode = (hashcode * 397) + Data.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp620 = new StringBuilder("write_args(");
          int tmp621 = 0;
          if(__isset.eid)
          {
            if(0 < tmp621++) { tmp620.Append(", "); }
            tmp620.Append("Eid: ");
            Eid.ToString(tmp620);
          }
          if(__isset.id)
          {
            if(0 < tmp621++) { tmp620.Append(", "); }
            tmp620.Append("Id: ");
            Id.ToString(tmp620);
          }
          if((Data != null) && __isset.data)
          {
            if(0 < tmp621++) { tmp620.Append(", "); }
            tmp620.Append("Data: ");
            Data.ToString(tmp620);
          }
          tmp620.Append(')');
          return tmp620.ToString();
        }
      }


      public partial class write_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public write_result()
        {
        }

        public write_result DeepCopy()
        {
          var tmp622 = new write_result();
          if((E != null) && __isset.e)
          {
            tmp622.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp622.__isset.e = this.__isset.e;
          return tmp622;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp623 = new TStruct("write_result");
            await oprot.WriteStructBeginAsync(tmp623, cancellationToken);
            var tmp624 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp624.Name = "E";
                tmp624.Type = TType.Struct;
                tmp624.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp624, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is write_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp625 = new StringBuilder("write_result(");
          int tmp626 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp626++) { tmp625.Append(", "); }
            tmp625.Append("E: ");
            E.ToString(tmp625);
          }
          tmp625.Append(')');
          return tmp625.ToString();
        }
      }


      public partial class flush_args : TBase
      {
        private long _eid;
        private long _id;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
        }

        public flush_args()
        {
        }

        public flush_args DeepCopy()
        {
          var tmp627 = new flush_args();
          if(__isset.eid)
          {
            tmp627.Eid = this.Eid;
          }
          tmp627.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp627.Id = this.Id;
          }
          tmp627.__isset.id = this.__isset.id;
          return tmp627;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp628 = new TStruct("flush_args");
            await oprot.WriteStructBeginAsync(tmp628, cancellationToken);
            var tmp629 = new TField();
            if(__isset.eid)
            {
              tmp629.Name = "eid";
              tmp629.Type = TType.I64;
              tmp629.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp629, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp629.Name = "id";
              tmp629.Type = TType.I64;
              tmp629.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp629, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is flush_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp630 = new StringBuilder("flush_args(");
          int tmp631 = 0;
          if(__isset.eid)
          {
            if(0 < tmp631++) { tmp630.Append(", "); }
            tmp630.Append("Eid: ");
            Eid.ToString(tmp630);
          }
          if(__isset.id)
          {
            if(0 < tmp631++) { tmp630.Append(", "); }
            tmp630.Append("Id: ");
            Id.ToString(tmp630);
          }
          tmp630.Append(')');
          return tmp630.ToString();
        }
      }


      public partial class flush_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public flush_result()
        {
        }

        public flush_result DeepCopy()
        {
          var tmp632 = new flush_result();
          if((E != null) && __isset.e)
          {
            tmp632.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp632.__isset.e = this.__isset.e;
          return tmp632;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp633 = new TStruct("flush_result");
            await oprot.WriteStructBeginAsync(tmp633, cancellationToken);
            var tmp634 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp634.Name = "E";
                tmp634.Type = TType.Struct;
                tmp634.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp634, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is flush_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp635 = new StringBuilder("flush_result(");
          int tmp636 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp636++) { tmp635.Append(", "); }
            tmp635.Append("E: ");
            E.ToString(tmp635);
          }
          tmp635.Append(')');
          return tmp635.ToString();
        }
      }


      public partial class publicKey_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public publicKey_args()
        {
        }

        public publicKey_args DeepCopy()
        {
          var tmp637 = new publicKey_args();
          if(__isset.id)
          {
            tmp637.Id = this.Id;
          }
          tmp637.__isset.id = this.__isset.id;
          return tmp637;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp638 = new TStruct("publicKey_args");
            await oprot.WriteStructBeginAsync(tmp638, cancellationToken);
            var tmp639 = new TField();
            if(__isset.id)
            {
              tmp639.Name = "id";
              tmp639.Type = TType.I64;
              tmp639.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp639, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is publicKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp640 = new StringBuilder("publicKey_args(");
          int tmp641 = 0;
          if(__isset.id)
          {
            if(0 < tmp641++) { tmp640.Append(", "); }
            tmp640.Append("Id: ");
            Id.ToString(tmp640);
          }
          tmp640.Append(')');
          return tmp640.ToString();
        }
      }


      public partial class publicKey_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public publicKey_result()
        {
        }

        public publicKey_result DeepCopy()
        {
          var tmp642 = new publicKey_result();
          if((Success != null) && __isset.success)
          {
            tmp642.Success = this.Success;
          }
          tmp642.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp642.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp642.__isset.e = this.__isset.e;
          return tmp642;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp643 = new TStruct("publicKey_result");
            await oprot.WriteStructBeginAsync(tmp643, cancellationToken);
            var tmp644 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp644.Name = "Success";
                tmp644.Type = TType.String;
                tmp644.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp644, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp644.Name = "E";
                tmp644.Type = TType.Struct;
                tmp644.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp644, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is publicKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp645 = new StringBuilder("publicKey_result(");
          int tmp646 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp646++) { tmp645.Append(", "); }
            tmp645.Append("Success: ");
            Success.ToString(tmp645);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp646++) { tmp645.Append(", "); }
            tmp645.Append("E: ");
            E.ToString(tmp645);
          }
          tmp645.Append(')');
          return tmp645.ToString();
        }
      }


      public partial class oneTimeAuthToken_args : TBase
      {
        private long _id;
        private string _oneTimeSalt;
        private byte[] _publicKey;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string OneTimeSalt
        {
          get
          {
            return _oneTimeSalt;
          }
          set
          {
            __isset.oneTimeSalt = true;
            this._oneTimeSalt = value;
          }
        }

        public byte[] PublicKey
        {
          get
          {
            return _publicKey;
          }
          set
          {
            __isset.publicKey = true;
            this._publicKey = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool oneTimeSalt;
          public bool publicKey;
        }

        public oneTimeAuthToken_args()
        {
        }

        public oneTimeAuthToken_args DeepCopy()
        {
          var tmp647 = new oneTimeAuthToken_args();
          if(__isset.id)
          {
            tmp647.Id = this.Id;
          }
          tmp647.__isset.id = this.__isset.id;
          if((OneTimeSalt != null) && __isset.oneTimeSalt)
          {
            tmp647.OneTimeSalt = this.OneTimeSalt;
          }
          tmp647.__isset.oneTimeSalt = this.__isset.oneTimeSalt;
          if((PublicKey != null) && __isset.publicKey)
          {
            tmp647.PublicKey = this.PublicKey.ToArray();
          }
          tmp647.__isset.publicKey = this.__isset.publicKey;
          return tmp647;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    OneTimeSalt = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    PublicKey = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp648 = new TStruct("oneTimeAuthToken_args");
            await oprot.WriteStructBeginAsync(tmp648, cancellationToken);
            var tmp649 = new TField();
            if(__isset.id)
            {
              tmp649.Name = "id";
              tmp649.Type = TType.I64;
              tmp649.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp649, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OneTimeSalt != null) && __isset.oneTimeSalt)
            {
              tmp649.Name = "oneTimeSalt";
              tmp649.Type = TType.String;
              tmp649.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp649, cancellationToken);
              await oprot.WriteStringAsync(OneTimeSalt, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PublicKey != null) && __isset.publicKey)
            {
              tmp649.Name = "publicKey";
              tmp649.Type = TType.String;
              tmp649.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp649, cancellationToken);
              await oprot.WriteBinaryAsync(PublicKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is oneTimeAuthToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.oneTimeSalt == other.__isset.oneTimeSalt) && ((!__isset.oneTimeSalt) || (global::System.Object.Equals(OneTimeSalt, other.OneTimeSalt))))
            && ((__isset.publicKey == other.__isset.publicKey) && ((!__isset.publicKey) || (TCollections.Equals(PublicKey, other.PublicKey))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((OneTimeSalt != null) && __isset.oneTimeSalt)
            {
              hashcode = (hashcode * 397) + OneTimeSalt.GetHashCode();
            }
            if((PublicKey != null) && __isset.publicKey)
            {
              hashcode = (hashcode * 397) + PublicKey.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp650 = new StringBuilder("oneTimeAuthToken_args(");
          int tmp651 = 0;
          if(__isset.id)
          {
            if(0 < tmp651++) { tmp650.Append(", "); }
            tmp650.Append("Id: ");
            Id.ToString(tmp650);
          }
          if((OneTimeSalt != null) && __isset.oneTimeSalt)
          {
            if(0 < tmp651++) { tmp650.Append(", "); }
            tmp650.Append("OneTimeSalt: ");
            OneTimeSalt.ToString(tmp650);
          }
          if((PublicKey != null) && __isset.publicKey)
          {
            if(0 < tmp651++) { tmp650.Append(", "); }
            tmp650.Append("PublicKey: ");
            PublicKey.ToString(tmp650);
          }
          tmp650.Append(')');
          return tmp650.ToString();
        }
      }


      public partial class oneTimeAuthToken_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public oneTimeAuthToken_result()
        {
        }

        public oneTimeAuthToken_result DeepCopy()
        {
          var tmp652 = new oneTimeAuthToken_result();
          if((Success != null) && __isset.success)
          {
            tmp652.Success = this.Success;
          }
          tmp652.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp652.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp652.__isset.e = this.__isset.e;
          return tmp652;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp653 = new TStruct("oneTimeAuthToken_result");
            await oprot.WriteStructBeginAsync(tmp653, cancellationToken);
            var tmp654 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp654.Name = "Success";
                tmp654.Type = TType.String;
                tmp654.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp654, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp654.Name = "E";
                tmp654.Type = TType.Struct;
                tmp654.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp654, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is oneTimeAuthToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp655 = new StringBuilder("oneTimeAuthToken_result(");
          int tmp656 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp656++) { tmp655.Append(", "); }
            tmp655.Append("Success: ");
            Success.ToString(tmp655);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp656++) { tmp655.Append(", "); }
            tmp655.Append("E: ");
            E.ToString(tmp655);
          }
          tmp655.Append(')');
          return tmp655.ToString();
        }
      }


      public partial class installPackage_args : TBase
      {
        private long _id;
        private string _authToken;
        private byte[] _packageData;
        private string _overridePasscodeEnc;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string AuthToken
        {
          get
          {
            return _authToken;
          }
          set
          {
            __isset.authToken = true;
            this._authToken = value;
          }
        }

        public byte[] PackageData
        {
          get
          {
            return _packageData;
          }
          set
          {
            __isset.packageData = true;
            this._packageData = value;
          }
        }

        public string OverridePasscodeEnc
        {
          get
          {
            return _overridePasscodeEnc;
          }
          set
          {
            __isset.overridePasscodeEnc = true;
            this._overridePasscodeEnc = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool authToken;
          public bool packageData;
          public bool overridePasscodeEnc;
        }

        public installPackage_args()
        {
        }

        public installPackage_args DeepCopy()
        {
          var tmp657 = new installPackage_args();
          if(__isset.id)
          {
            tmp657.Id = this.Id;
          }
          tmp657.__isset.id = this.__isset.id;
          if((AuthToken != null) && __isset.authToken)
          {
            tmp657.AuthToken = this.AuthToken;
          }
          tmp657.__isset.authToken = this.__isset.authToken;
          if((PackageData != null) && __isset.packageData)
          {
            tmp657.PackageData = this.PackageData.ToArray();
          }
          tmp657.__isset.packageData = this.__isset.packageData;
          if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
          {
            tmp657.OverridePasscodeEnc = this.OverridePasscodeEnc;
          }
          tmp657.__isset.overridePasscodeEnc = this.__isset.overridePasscodeEnc;
          return tmp657;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    AuthToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    PackageData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    OverridePasscodeEnc = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp658 = new TStruct("installPackage_args");
            await oprot.WriteStructBeginAsync(tmp658, cancellationToken);
            var tmp659 = new TField();
            if(__isset.id)
            {
              tmp659.Name = "id";
              tmp659.Type = TType.I64;
              tmp659.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp659, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((AuthToken != null) && __isset.authToken)
            {
              tmp659.Name = "authToken";
              tmp659.Type = TType.String;
              tmp659.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp659, cancellationToken);
              await oprot.WriteStringAsync(AuthToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PackageData != null) && __isset.packageData)
            {
              tmp659.Name = "packageData";
              tmp659.Type = TType.String;
              tmp659.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp659, cancellationToken);
              await oprot.WriteBinaryAsync(PackageData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
            {
              tmp659.Name = "overridePasscodeEnc";
              tmp659.Type = TType.String;
              tmp659.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp659, cancellationToken);
              await oprot.WriteStringAsync(OverridePasscodeEnc, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is installPackage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.authToken == other.__isset.authToken) && ((!__isset.authToken) || (global::System.Object.Equals(AuthToken, other.AuthToken))))
            && ((__isset.packageData == other.__isset.packageData) && ((!__isset.packageData) || (TCollections.Equals(PackageData, other.PackageData))))
            && ((__isset.overridePasscodeEnc == other.__isset.overridePasscodeEnc) && ((!__isset.overridePasscodeEnc) || (global::System.Object.Equals(OverridePasscodeEnc, other.OverridePasscodeEnc))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((AuthToken != null) && __isset.authToken)
            {
              hashcode = (hashcode * 397) + AuthToken.GetHashCode();
            }
            if((PackageData != null) && __isset.packageData)
            {
              hashcode = (hashcode * 397) + PackageData.GetHashCode();
            }
            if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
            {
              hashcode = (hashcode * 397) + OverridePasscodeEnc.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp660 = new StringBuilder("installPackage_args(");
          int tmp661 = 0;
          if(__isset.id)
          {
            if(0 < tmp661++) { tmp660.Append(", "); }
            tmp660.Append("Id: ");
            Id.ToString(tmp660);
          }
          if((AuthToken != null) && __isset.authToken)
          {
            if(0 < tmp661++) { tmp660.Append(", "); }
            tmp660.Append("AuthToken: ");
            AuthToken.ToString(tmp660);
          }
          if((PackageData != null) && __isset.packageData)
          {
            if(0 < tmp661++) { tmp660.Append(", "); }
            tmp660.Append("PackageData: ");
            PackageData.ToString(tmp660);
          }
          if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
          {
            if(0 < tmp661++) { tmp660.Append(", "); }
            tmp660.Append("OverridePasscodeEnc: ");
            OverridePasscodeEnc.ToString(tmp660);
          }
          tmp660.Append(')');
          return tmp660.ToString();
        }
      }


      public partial class installPackage_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public installPackage_result()
        {
        }

        public installPackage_result DeepCopy()
        {
          var tmp662 = new installPackage_result();
          if((Success != null) && __isset.success)
          {
            tmp662.Success = this.Success.DeepCopy();
          }
          tmp662.__isset.success = this.__isset.success;
          return tmp662;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list663 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list663.Count);
                      for(int _i664 = 0; _i664 < _list663.Count; ++_i664)
                      {
                        string _elem665;
                        _elem665 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem665);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp666 = new TStruct("installPackage_result");
            await oprot.WriteStructBeginAsync(tmp666, cancellationToken);
            var tmp667 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp667.Name = "Success";
                tmp667.Type = TType.List;
                tmp667.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp667, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter668 in Success)
                {
                  await oprot.WriteStringAsync(_iter668, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is installPackage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp669 = new StringBuilder("installPackage_result(");
          int tmp670 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp670++) { tmp669.Append(", "); }
            tmp669.Append("Success: ");
            Success.ToString(tmp669);
          }
          tmp669.Append(')');
          return tmp669.ToString();
        }
      }

    }

  }
}
