/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Controller
  {
    /// <summary>
    /// Interface to Robot Controllers
    /// 
    /// In general, a pendant may operate in connected or disconnected states.  When connected to a Robot Controller
    /// it may be monitoring or not have exclusive control (i.e. not be the single-point-of-control).
    /// 
    /// However, typically, once an extension is running, the pendant is connected to the controller and
    /// is the single-point-of-control.
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Request specified permissions.
      /// "jobcontrol" permission is used to manipulate jobs
      /// "networking" permission is used to connect to external networks
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permissions"></param>
      global::System.Threading.Tasks.Task<bool> requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default);

      /// <summary>
      /// Check permisions obtained.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permission"></param>
      global::System.Threading.Tasks.Task<bool> havePermission(long c, string permission, CancellationToken cancellationToken = default);

      /// <summary>
      /// Relinquish permissions (no effect if not held).
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permissions"></param>
      global::System.Threading.Tasks.Task relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default);

      /// <summary>
      /// Connect to the specified Robot Controller (by IP adress or hostname if DNS available)
      /// Typically, the pendant will already be connected to a controller when extensions are started,
      /// so calling connect() is not required.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="hostName"></param>
      global::System.Threading.Tasks.Task connect(long c, string hostName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Disconnect from the connected controller.  This leaves the pendant in the 'disconnected' state.
      /// When disconnected, many functions are unavailable or will return default values.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task disconnect(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to the specified events, if not already.
      /// Note: If using a Yaskawa supplied client library with event consumer callback support,
      ///       registering an event consumer callback will automatically subscribe to the appropriate event.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from the specified events.
      /// If called directly, this may causes event consumers for the events not to be called.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Poll the API Service for pending events.
      /// Note: If using a Yaskawa supplied client library, this does not need to be called explicitly.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> events(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if the pendant is connected to a robot controller
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> connected(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the hostname or IP address of the robot controller to which the pendant is connected, if any
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> connectedHostName(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// The software version string of the robot controller system software.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> softwareVersion(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if the pendant is only monitoring the robot controller to which it is connected.  This
      /// implies that no functions that modify the controller and/or robot state will succeed.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> monitoring(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if this pendant is the single-point-of-control for the connected Robot Controller.
      /// If not, most functions that modify the controller and/or robot state will fail.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> haveExclusiveControl(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Current operation mode of the controller
      /// Automatic (aka Play) - running jobs
      /// Manual (aka Teach) - for editing jobs, teaching points, jogging, setup etc.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> operationMode(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Are the servo drives engaged?
      /// On - yes, robot(s) are being actively controlled
      /// Off - no.  Typically brakes are engaged (unless brake-release engaged)
      /// Ready - ready to engage servos.  Typically requires operator to use servo enable switch.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> servoState(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Indicates if a job us running or stopped.
      /// Run - jobs are running (robot may be moving)
      /// Held - jobs were running but have been held/paused.
      /// Idle - no jobs are running
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> playbackState(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// The playback cycle affects how the controller runs a job.
      /// Step - a job is run line-for-line.
      /// Once - a job is run from the beginning to the end.
      /// Continuous - a job is run indefinitely from the beginning to the end.
      /// (API Version 3.0 and Later)
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackCycle> playbackCycle(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Sets the playback cycle mode. (API Version 3.0 and Later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="cycle"></param>
      global::System.Threading.Tasks.Task setPlaybackCycle(long c, global::Yaskawa.Ext.API.PlaybackCycle cycle, CancellationToken cancellationToken = default);

      /// <summary>
      /// Run the current robot job from the current line.  Requires Servos engaged & Automatic/Play operation and 'jobcontrol' permission.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task run(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Pause running job (servoes will remain engaged. 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task pause(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Resume running job from paused state. 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task resume(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop runnng job (will stop motion and disengage servos). 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task stop(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Name of the current job (e.g. job being run or edited)
      /// Empty if none.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> currentJob(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the current job. 'jobcontrol' permission required. Pass line=1 for start of job, line=0 for default/no-change.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="line"></param>
      global::System.Threading.Tasks.Task setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default);

      /// <summary>
      /// Current job line
      /// </summary>
      /// <param name="c"></param>
      /// <param name="taskNo"></param>
      global::System.Threading.Tasks.Task<int> currentJobLine(long c, int taskNo, CancellationToken cancellationToken = default);

      /// <summary>
      /// Name of the default (aka master) job.  Empty if no default job designated
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> defaultJob(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// query if job with specified name exists
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<bool> jobExists(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Details for the named job (throws if non-existent job)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> jobDetails(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of robot job names (empty if not connected)
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<string>> jobs(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of robot job names matching the name regular expression AND with the given tag
      /// (empty if not connected or no matches)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="nameRegex"></param>
      /// <param name="tag"></param>
      global::System.Threading.Tasks.Task<List<string>> jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default);

      /// <summary>
      /// Duplicate an existing job with a new name for the copy
      /// </summary>
      /// <param name="c"></param>
      /// <param name="existingName"></param>
      /// <param name="newName"></param>
      global::System.Threading.Tasks.Task duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default);

      /// <summary>
      /// delete the specified job.  The default job cannot be deleted.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task deleteJob(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Read source code for named job (in the programmingLanguage listed in jobDetails() )
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<string> jobSource(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Replace named job with the source code provided, in given programmingLanguage (e.g. "INFORM").
      /// Will thow if syntax errors in source.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="programmingLanguage"></param>
      /// <param name="sourceCode"></param>
      global::System.Threading.Tasks.Task storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default);

      /// <summary>
      /// Store a file on the controller. If a file with the same name already exists, it will be overwritten.
      /// * Management mode or higher required to write files to the controller.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="fileName"></param>
      /// <param name="fileContents"></param>
      global::System.Threading.Tasks.Task<bool> storeSystemFileContents(long c, string fileName, string fileContents, CancellationToken cancellationToken = default);

      /// <summary>
      /// Store a file on the controller. If a file with the same name already exists, it will be overwritten.
      /// * Management mode or higher required to write files to the controller.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="fileName"></param>
      global::System.Threading.Tasks.Task<bool> storeSystemFile(long c, string fileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Retrieve file content from the controller and save it into a string. If the file does not exist, an empty string will be returned.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="fileName"></param>
      global::System.Threading.Tasks.Task<string> retrieveSystemFileContents(long c, string fileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Retrieve a file from the controller and save it to the specified destName within the Extension folder.
      /// *  If the file does not exist, false will be returned.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="fileName"></param>
      global::System.Threading.Tasks.Task retrieveSystemFile(long c, string fileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of tools mapping index -> name.
      /// Unset/defaulted tools are omitted (e.g. those with no name, 0 weight etc.)
      /// Indices (map keys) may not be sequential.  Returned map may be empty.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<Dictionary<int, string>> tools(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on a specific tool, by index
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> tool(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return input number of given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return input group number for group beginning with given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputGroupNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return output nunber of given output name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return output group number for group beginning with given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputGroupNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return name of specified input number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<string> inputName(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return name of specified output number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<string> outputName(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of specified input
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setInputName(long c, int num, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of specified output
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setOutputName(long c, int num, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring specified input
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task monitorInput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring all inputs in given input group
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals (1 group = 8 signals)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring specified output
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task monitorOutput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring all outputs in given output group
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals (1 group = 8 signals)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring specified input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task unmonitorInput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring all inputs in specified group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring specified output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task unmonitorOutput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring all outputs in specified group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return value of given input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<bool> inputValue(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return values of input groups from specified group number (upto 4 contiguous groups/bytes, from least significant byte)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task<int> inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of given output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<bool> outputValue(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return values of output groups from specified group number (upto 4 contiguous groups/bytes)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task<int> outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the specified output number
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the values of the outputs in the specified contigous output groups (upto 4 contiguous groups/bytes)
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the named input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputAddress(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the given input number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<int> inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the named output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputAddress(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the given output number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<int> outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring a logical IO address.  Will generate IOValueChanged events
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task monitorIOAddress(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring a logical IO address. (events for address may still be generated if it corresponds to a monitored input or output)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given general input by logicial IO address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> inputAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given general output by logicial IO address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> outputAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given logicial IO address
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> ioAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given output by logical IO address
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given network input by logical IO address
      /// Note it is asyncronous so no errors/exceptions are thrown (SDK 3.1+)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setNetworkInputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given M-Register (SDK 3.1+)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<int> mRegisterValue(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given M-Register by index
      /// Note it is asynchronous so no errors/exceptions are thrown.(SDK 3.1+)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setMRegisterValue(long c, int index, int @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain input group number (byte) of field bus status input.  e.g. busType 'ethip' yields EtherNet/IP status byte group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="busType"></param>
      global::System.Threading.Tasks.Task<int> fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the list of control groups configured on the controller.
      /// If only one robot is connected to the controller, this will return a single element,
      /// containing the simple control group representing the robot.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> controlGroups(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the index of the currently active control group.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<sbyte> currentControlGroup(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the number of robots connected to the controller
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<sbyte> robotCount(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the index of the currently active robot.
      /// Note: index is 0-based, but in the UI the first robot is Robot 1.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> currentRobot(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Variable value by name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variable(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Variable value by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set variable value by name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set variable by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Lookup variable address by name and space
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="space"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default);

      /// <summary>
      /// Lookup variable address by name (less efficient)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByName(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of variable by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring a variable.  Will generate VariableChanged events.
      /// Note that a maximum of 1 position variable, 4 string variables and 15 variables of each of the remain types can be monitored at the same time.
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task monitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring a variable.
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task unmonitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the maximum number of variables available for the given space
      /// </summary>
      /// <param name="c"></param>
      /// <param name="space"></param>
      global::System.Threading.Tasks.Task<int> variableRange(long c, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on specified zone, by index (not number)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> zone(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Creates a new Zone and returns its index.  It will have default values
      /// which can be change via modifyZone()
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> newZone(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Modify Zone information.  Only fields set in Zone will be updated.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="z"></param>
      global::System.Threading.Tasks.Task modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default);

      /// <summary>
      /// Delete a Zone
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task deleteZone(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of user frames mapping index -> name.
      /// NB: Indices (map keys) may not be sequential. Returned map may be empty.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<Dictionary<int, string>> userFrames(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on specified User Frame, by index (not number)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> userFrame(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Creates a new User Frame with default values and returns its index.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> newUserFrame(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the specified User Frame to the provided values
      /// If a user frame at the selected index does not exist it is created. Otherwise, the user frame at the selected index is replaced.
      /// (API Version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="f"></param>
      global::System.Threading.Tasks.Task setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default);

      /// <summary>
      /// Delete a User Frame
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task deleteUserFrame(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query current controller network interface IP address.
      /// controllerInterface must be one of ['LAN1','LAN'/'LAN2' or 'LAN3']
      /// (NB: On YRC1000micro, 'LAN' is the external Ethernet port, corresponding to 'LAN2' on the YRC1000)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="controllerInterface"></param>
      global::System.Threading.Tasks.Task<string> networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default);

      /// <summary>
      /// Request external network access via specified protocol and port originating
      /// from the given controller interface. The controllerInferface may be left blank, in which case
      /// connections will be routed from the controller according to the destination address and
      /// current subnetwork of the external LAN ports).
      /// Access only persists while power is maintained to the controller.
      /// The protocol must be either 'tcp' or 'udp'. controllerInterface must be one of ['LAN1','LAN'/'LAN2' or 'LAN3'].
      /// Returns a handle that can subsequently used to remove the access, or -1 if the access request
      /// failed (may happen in case of network conflicts with other extensions).
      /// Requires 'networking' permision.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="controllerInterface"></param>
      /// <param name="port"></param>
      /// <param name="protocol"></param>
      global::System.Threading.Tasks.Task<int> requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.GaugeSensorSpec>> getGaugeSensorSpec(long c, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task gaugeSensorCalibration(long c, sbyte channel, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// Interface to Robot Controllers
    /// 
    /// In general, a pendant may operate in connected or disconnected states.  When connected to a Robot Controller
    /// it may be monitoring or not have exclusive control (i.e. not be the single-point-of-control).
    /// 
    /// However, typically, once an extension is running, the pendant is connected to the controller and
    /// is the single-point-of-control.
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<bool> requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await send_requestPermissions(c, permissions, cancellationToken);
        return await recv_requestPermissions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1829 = new InternalStructs.requestPermissions_args() {
          C = c,
          Permissions = permissions,
        };
        
        await tmp1829.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_requestPermissions(CancellationToken cancellationToken = default)
      {
        
        var tmp1830 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1830.Type == TMessageType.Exception)
        {
          var tmp1831 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1831;
        }

        var tmp1832 = new InternalStructs.requestPermissions_result();
        await tmp1832.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1832.__isset.success)
        {
          return tmp1832.Success;
        }
        if (tmp1832.__isset.e)
        {
          throw tmp1832.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestPermissions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> havePermission(long c, string permission, CancellationToken cancellationToken = default)
      {
        await send_havePermission(c, permission, cancellationToken);
        return await recv_havePermission(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_havePermission(long c, string permission, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1833 = new InternalStructs.havePermission_args() {
          C = c,
          Permission = permission,
        };
        
        await tmp1833.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_havePermission(CancellationToken cancellationToken = default)
      {
        
        var tmp1834 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1834.Type == TMessageType.Exception)
        {
          var tmp1835 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1835;
        }

        var tmp1836 = new InternalStructs.havePermission_result();
        await tmp1836.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1836.__isset.success)
        {
          return tmp1836.Success;
        }
        if (tmp1836.__isset.e)
        {
          throw tmp1836.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "havePermission failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await send_relinquishPermissions(c, permissions, cancellationToken);
        await recv_relinquishPermissions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1837 = new InternalStructs.relinquishPermissions_args() {
          C = c,
          Permissions = permissions,
        };
        
        await tmp1837.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_relinquishPermissions(CancellationToken cancellationToken = default)
      {
        
        var tmp1838 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1838.Type == TMessageType.Exception)
        {
          var tmp1839 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1839;
        }

        var tmp1840 = new InternalStructs.relinquishPermissions_result();
        await tmp1840.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connect(long c, string hostName, CancellationToken cancellationToken = default)
      {
        await send_connect(c, hostName, cancellationToken);
        await recv_connect(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connect(long c, string hostName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1841 = new InternalStructs.connect_args() {
          C = c,
          HostName = hostName,
        };
        
        await tmp1841.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_connect(CancellationToken cancellationToken = default)
      {
        
        var tmp1842 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1842.Type == TMessageType.Exception)
        {
          var tmp1843 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1843;
        }

        var tmp1844 = new InternalStructs.connect_result();
        await tmp1844.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task disconnect(long c, CancellationToken cancellationToken = default)
      {
        await send_disconnect(c, cancellationToken);
        await recv_disconnect(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_disconnect(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1845 = new InternalStructs.disconnect_args() {
          C = c,
        };
        
        await tmp1845.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_disconnect(CancellationToken cancellationToken = default)
      {
        
        var tmp1846 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1846.Type == TMessageType.Exception)
        {
          var tmp1847 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1847;
        }

        var tmp1848 = new InternalStructs.disconnect_result();
        await tmp1848.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeEventTypes(c, types, cancellationToken);
        await recv_subscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1849 = new InternalStructs.subscribeEventTypes_args() {
          C = c,
          Types = types,
        };
        
        await tmp1849.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp1850 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1850.Type == TMessageType.Exception)
        {
          var tmp1851 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1851;
        }

        var tmp1852 = new InternalStructs.subscribeEventTypes_result();
        await tmp1852.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeEventTypes(c, types, cancellationToken);
        await recv_unsubscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1853 = new InternalStructs.unsubscribeEventTypes_args() {
          C = c,
          Types = types,
        };
        
        await tmp1853.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp1854 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1854.Type == TMessageType.Exception)
        {
          var tmp1855 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1855;
        }

        var tmp1856 = new InternalStructs.unsubscribeEventTypes_result();
        await tmp1856.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> events(long c, CancellationToken cancellationToken = default)
      {
        await send_events(c, cancellationToken);
        return await recv_events(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_events(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("events", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1857 = new InternalStructs.events_args() {
          C = c,
        };
        
        await tmp1857.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> recv_events(CancellationToken cancellationToken = default)
      {
        
        var tmp1858 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1858.Type == TMessageType.Exception)
        {
          var tmp1859 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1859;
        }

        var tmp1860 = new InternalStructs.events_result();
        await tmp1860.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1860.__isset.success)
        {
          return tmp1860.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "events failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> connected(long c, CancellationToken cancellationToken = default)
      {
        await send_connected(c, cancellationToken);
        return await recv_connected(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connected(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1861 = new InternalStructs.connected_args() {
          C = c,
        };
        
        await tmp1861.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_connected(CancellationToken cancellationToken = default)
      {
        
        var tmp1862 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1862.Type == TMessageType.Exception)
        {
          var tmp1863 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1863;
        }

        var tmp1864 = new InternalStructs.connected_result();
        await tmp1864.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1864.__isset.success)
        {
          return tmp1864.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connected failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> connectedHostName(long c, CancellationToken cancellationToken = default)
      {
        await send_connectedHostName(c, cancellationToken);
        return await recv_connectedHostName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connectedHostName(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1865 = new InternalStructs.connectedHostName_args() {
          C = c,
        };
        
        await tmp1865.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_connectedHostName(CancellationToken cancellationToken = default)
      {
        
        var tmp1866 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1866.Type == TMessageType.Exception)
        {
          var tmp1867 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1867;
        }

        var tmp1868 = new InternalStructs.connectedHostName_result();
        await tmp1868.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1868.__isset.success)
        {
          return tmp1868.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connectedHostName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> softwareVersion(long c, CancellationToken cancellationToken = default)
      {
        await send_softwareVersion(c, cancellationToken);
        return await recv_softwareVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_softwareVersion(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1869 = new InternalStructs.softwareVersion_args() {
          C = c,
        };
        
        await tmp1869.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_softwareVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp1870 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1870.Type == TMessageType.Exception)
        {
          var tmp1871 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1871;
        }

        var tmp1872 = new InternalStructs.softwareVersion_result();
        await tmp1872.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1872.__isset.success)
        {
          return tmp1872.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "softwareVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> monitoring(long c, CancellationToken cancellationToken = default)
      {
        await send_monitoring(c, cancellationToken);
        return await recv_monitoring(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitoring(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1873 = new InternalStructs.monitoring_args() {
          C = c,
        };
        
        await tmp1873.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_monitoring(CancellationToken cancellationToken = default)
      {
        
        var tmp1874 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1874.Type == TMessageType.Exception)
        {
          var tmp1875 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1875;
        }

        var tmp1876 = new InternalStructs.monitoring_result();
        await tmp1876.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1876.__isset.success)
        {
          return tmp1876.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "monitoring failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> haveExclusiveControl(long c, CancellationToken cancellationToken = default)
      {
        await send_haveExclusiveControl(c, cancellationToken);
        return await recv_haveExclusiveControl(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_haveExclusiveControl(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1877 = new InternalStructs.haveExclusiveControl_args() {
          C = c,
        };
        
        await tmp1877.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_haveExclusiveControl(CancellationToken cancellationToken = default)
      {
        
        var tmp1878 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1878.Type == TMessageType.Exception)
        {
          var tmp1879 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1879;
        }

        var tmp1880 = new InternalStructs.haveExclusiveControl_result();
        await tmp1880.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1880.__isset.success)
        {
          return tmp1880.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "haveExclusiveControl failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> operationMode(long c, CancellationToken cancellationToken = default)
      {
        await send_operationMode(c, cancellationToken);
        return await recv_operationMode(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_operationMode(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1881 = new InternalStructs.operationMode_args() {
          C = c,
        };
        
        await tmp1881.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> recv_operationMode(CancellationToken cancellationToken = default)
      {
        
        var tmp1882 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1882.Type == TMessageType.Exception)
        {
          var tmp1883 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1883;
        }

        var tmp1884 = new InternalStructs.operationMode_result();
        await tmp1884.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1884.__isset.success)
        {
          return tmp1884.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "operationMode failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> servoState(long c, CancellationToken cancellationToken = default)
      {
        await send_servoState(c, cancellationToken);
        return await recv_servoState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_servoState(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1885 = new InternalStructs.servoState_args() {
          C = c,
        };
        
        await tmp1885.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> recv_servoState(CancellationToken cancellationToken = default)
      {
        
        var tmp1886 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1886.Type == TMessageType.Exception)
        {
          var tmp1887 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1887;
        }

        var tmp1888 = new InternalStructs.servoState_result();
        await tmp1888.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1888.__isset.success)
        {
          return tmp1888.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "servoState failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> playbackState(long c, CancellationToken cancellationToken = default)
      {
        await send_playbackState(c, cancellationToken);
        return await recv_playbackState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_playbackState(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1889 = new InternalStructs.playbackState_args() {
          C = c,
        };
        
        await tmp1889.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> recv_playbackState(CancellationToken cancellationToken = default)
      {
        
        var tmp1890 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1890.Type == TMessageType.Exception)
        {
          var tmp1891 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1891;
        }

        var tmp1892 = new InternalStructs.playbackState_result();
        await tmp1892.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1892.__isset.success)
        {
          return tmp1892.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "playbackState failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackCycle> playbackCycle(long c, CancellationToken cancellationToken = default)
      {
        await send_playbackCycle(c, cancellationToken);
        return await recv_playbackCycle(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_playbackCycle(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("playbackCycle", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1893 = new InternalStructs.playbackCycle_args() {
          C = c,
        };
        
        await tmp1893.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackCycle> recv_playbackCycle(CancellationToken cancellationToken = default)
      {
        
        var tmp1894 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1894.Type == TMessageType.Exception)
        {
          var tmp1895 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1895;
        }

        var tmp1896 = new InternalStructs.playbackCycle_result();
        await tmp1896.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1896.__isset.success)
        {
          return tmp1896.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "playbackCycle failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setPlaybackCycle(long c, global::Yaskawa.Ext.API.PlaybackCycle cycle, CancellationToken cancellationToken = default)
      {
        await send_setPlaybackCycle(c, cycle, cancellationToken);
        await recv_setPlaybackCycle(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setPlaybackCycle(long c, global::Yaskawa.Ext.API.PlaybackCycle cycle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setPlaybackCycle", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1897 = new InternalStructs.setPlaybackCycle_args() {
          C = c,
          Cycle = cycle,
        };
        
        await tmp1897.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setPlaybackCycle(CancellationToken cancellationToken = default)
      {
        
        var tmp1898 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1898.Type == TMessageType.Exception)
        {
          var tmp1899 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1899;
        }

        var tmp1900 = new InternalStructs.setPlaybackCycle_result();
        await tmp1900.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task run(long c, CancellationToken cancellationToken = default)
      {
        await send_run(c, cancellationToken);
        await recv_run(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_run(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("run", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1901 = new InternalStructs.run_args() {
          C = c,
        };
        
        await tmp1901.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_run(CancellationToken cancellationToken = default)
      {
        
        var tmp1902 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1902.Type == TMessageType.Exception)
        {
          var tmp1903 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1903;
        }

        var tmp1904 = new InternalStructs.run_result();
        await tmp1904.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pause(long c, CancellationToken cancellationToken = default)
      {
        await send_pause(c, cancellationToken);
        await recv_pause(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pause(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1905 = new InternalStructs.pause_args() {
          C = c,
        };
        
        await tmp1905.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_pause(CancellationToken cancellationToken = default)
      {
        
        var tmp1906 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1906.Type == TMessageType.Exception)
        {
          var tmp1907 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1907;
        }

        var tmp1908 = new InternalStructs.pause_result();
        await tmp1908.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resume(long c, CancellationToken cancellationToken = default)
      {
        await send_resume(c, cancellationToken);
        await recv_resume(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_resume(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1909 = new InternalStructs.resume_args() {
          C = c,
        };
        
        await tmp1909.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_resume(CancellationToken cancellationToken = default)
      {
        
        var tmp1910 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1910.Type == TMessageType.Exception)
        {
          var tmp1911 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1911;
        }

        var tmp1912 = new InternalStructs.resume_result();
        await tmp1912.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stop(long c, CancellationToken cancellationToken = default)
      {
        await send_stop(c, cancellationToken);
        await recv_stop(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_stop(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1913 = new InternalStructs.stop_args() {
          C = c,
        };
        
        await tmp1913.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_stop(CancellationToken cancellationToken = default)
      {
        
        var tmp1914 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1914.Type == TMessageType.Exception)
        {
          var tmp1915 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1915;
        }

        var tmp1916 = new InternalStructs.stop_result();
        await tmp1916.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> currentJob(long c, CancellationToken cancellationToken = default)
      {
        await send_currentJob(c, cancellationToken);
        return await recv_currentJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentJob(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1917 = new InternalStructs.currentJob_args() {
          C = c,
        };
        
        await tmp1917.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1918 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1918.Type == TMessageType.Exception)
        {
          var tmp1919 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1919;
        }

        var tmp1920 = new InternalStructs.currentJob_result();
        await tmp1920.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1920.__isset.success)
        {
          return tmp1920.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentJob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default)
      {
        await send_setCurrentJob(c, name, line, cancellationToken);
        await recv_setCurrentJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1921 = new InternalStructs.setCurrentJob_args() {
          C = c,
          Name = name,
          Line = line,
        };
        
        await tmp1921.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setCurrentJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1922 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1922.Type == TMessageType.Exception)
        {
          var tmp1923 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1923;
        }

        var tmp1924 = new InternalStructs.setCurrentJob_result();
        await tmp1924.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1924.__isset.e)
        {
          throw tmp1924.E;
        }
      }

      public async global::System.Threading.Tasks.Task<int> currentJobLine(long c, int taskNo, CancellationToken cancellationToken = default)
      {
        await send_currentJobLine(c, taskNo, cancellationToken);
        return await recv_currentJobLine(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentJobLine(long c, int taskNo, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentJobLine", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1925 = new InternalStructs.currentJobLine_args() {
          C = c,
          TaskNo = taskNo,
        };
        
        await tmp1925.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_currentJobLine(CancellationToken cancellationToken = default)
      {
        
        var tmp1926 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1926.Type == TMessageType.Exception)
        {
          var tmp1927 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1927;
        }

        var tmp1928 = new InternalStructs.currentJobLine_result();
        await tmp1928.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1928.__isset.success)
        {
          return tmp1928.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentJobLine failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> defaultJob(long c, CancellationToken cancellationToken = default)
      {
        await send_defaultJob(c, cancellationToken);
        return await recv_defaultJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_defaultJob(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1929 = new InternalStructs.defaultJob_args() {
          C = c,
        };
        
        await tmp1929.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_defaultJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1930 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1930.Type == TMessageType.Exception)
        {
          var tmp1931 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1931;
        }

        var tmp1932 = new InternalStructs.defaultJob_result();
        await tmp1932.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1932.__isset.success)
        {
          return tmp1932.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "defaultJob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> jobExists(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobExists(c, name, cancellationToken);
        return await recv_jobExists(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobExists(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1933 = new InternalStructs.jobExists_args() {
          C = c,
          Name = name,
        };
        
        await tmp1933.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_jobExists(CancellationToken cancellationToken = default)
      {
        
        var tmp1934 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1934.Type == TMessageType.Exception)
        {
          var tmp1935 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1935;
        }

        var tmp1936 = new InternalStructs.jobExists_result();
        await tmp1936.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1936.__isset.success)
        {
          return tmp1936.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobExists failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> jobDetails(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobDetails(c, name, cancellationToken);
        return await recv_jobDetails(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobDetails(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1937 = new InternalStructs.jobDetails_args() {
          C = c,
          Name = name,
        };
        
        await tmp1937.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> recv_jobDetails(CancellationToken cancellationToken = default)
      {
        
        var tmp1938 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1938.Type == TMessageType.Exception)
        {
          var tmp1939 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1939;
        }

        var tmp1940 = new InternalStructs.jobDetails_result();
        await tmp1940.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1940.__isset.success)
        {
          return tmp1940.Success;
        }
        if (tmp1940.__isset.e)
        {
          throw tmp1940.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobDetails failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jobs(long c, CancellationToken cancellationToken = default)
      {
        await send_jobs(c, cancellationToken);
        return await recv_jobs(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobs(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1941 = new InternalStructs.jobs_args() {
          C = c,
        };
        
        await tmp1941.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jobs(CancellationToken cancellationToken = default)
      {
        
        var tmp1942 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1942.Type == TMessageType.Exception)
        {
          var tmp1943 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1943;
        }

        var tmp1944 = new InternalStructs.jobs_result();
        await tmp1944.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1944.__isset.success)
        {
          return tmp1944.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobs failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default)
      {
        await send_jobsMatching(c, nameRegex, tag, cancellationToken);
        return await recv_jobsMatching(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1945 = new InternalStructs.jobsMatching_args() {
          C = c,
          NameRegex = nameRegex,
          Tag = tag,
        };
        
        await tmp1945.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jobsMatching(CancellationToken cancellationToken = default)
      {
        
        var tmp1946 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1946.Type == TMessageType.Exception)
        {
          var tmp1947 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1947;
        }

        var tmp1948 = new InternalStructs.jobsMatching_result();
        await tmp1948.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1948.__isset.success)
        {
          return tmp1948.Success;
        }
        if (tmp1948.__isset.e)
        {
          throw tmp1948.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobsMatching failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default)
      {
        await send_duplicateJob(c, existingName, newName, cancellationToken);
        await recv_duplicateJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1949 = new InternalStructs.duplicateJob_args() {
          C = c,
          ExistingName = existingName,
          NewName = newName,
        };
        
        await tmp1949.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_duplicateJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1950 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1950.Type == TMessageType.Exception)
        {
          var tmp1951 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1951;
        }

        var tmp1952 = new InternalStructs.duplicateJob_result();
        await tmp1952.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1952.__isset.e)
        {
          throw tmp1952.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteJob(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_deleteJob(c, name, cancellationToken);
        await recv_deleteJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteJob(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1953 = new InternalStructs.deleteJob_args() {
          C = c,
          Name = name,
        };
        
        await tmp1953.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1954 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1954.Type == TMessageType.Exception)
        {
          var tmp1955 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1955;
        }

        var tmp1956 = new InternalStructs.deleteJob_result();
        await tmp1956.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1956.__isset.e)
        {
          throw tmp1956.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> jobSource(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobSource(c, name, cancellationToken);
        return await recv_jobSource(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobSource(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1957 = new InternalStructs.jobSource_args() {
          C = c,
          Name = name,
        };
        
        await tmp1957.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_jobSource(CancellationToken cancellationToken = default)
      {
        
        var tmp1958 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1958.Type == TMessageType.Exception)
        {
          var tmp1959 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1959;
        }

        var tmp1960 = new InternalStructs.jobSource_result();
        await tmp1960.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1960.__isset.success)
        {
          return tmp1960.Success;
        }
        if (tmp1960.__isset.e)
        {
          throw tmp1960.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobSource failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default)
      {
        await send_storeJobSource(c, name, programmingLanguage, sourceCode, cancellationToken);
        await recv_storeJobSource(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1961 = new InternalStructs.storeJobSource_args() {
          C = c,
          Name = name,
          ProgrammingLanguage = programmingLanguage,
          SourceCode = sourceCode,
        };
        
        await tmp1961.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_storeJobSource(CancellationToken cancellationToken = default)
      {
        
        var tmp1962 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1962.Type == TMessageType.Exception)
        {
          var tmp1963 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1963;
        }

        var tmp1964 = new InternalStructs.storeJobSource_result();
        await tmp1964.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1964.__isset.e)
        {
          throw tmp1964.E;
        }
      }

      public async global::System.Threading.Tasks.Task<bool> storeSystemFileContents(long c, string fileName, string fileContents, CancellationToken cancellationToken = default)
      {
        await send_storeSystemFileContents(c, fileName, fileContents, cancellationToken);
        return await recv_storeSystemFileContents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_storeSystemFileContents(long c, string fileName, string fileContents, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("storeSystemFileContents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1965 = new InternalStructs.storeSystemFileContents_args() {
          C = c,
          FileName = fileName,
          FileContents = fileContents,
        };
        
        await tmp1965.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_storeSystemFileContents(CancellationToken cancellationToken = default)
      {
        
        var tmp1966 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1966.Type == TMessageType.Exception)
        {
          var tmp1967 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1967;
        }

        var tmp1968 = new InternalStructs.storeSystemFileContents_result();
        await tmp1968.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1968.__isset.success)
        {
          return tmp1968.Success;
        }
        if (tmp1968.__isset.e)
        {
          throw tmp1968.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "storeSystemFileContents failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> storeSystemFile(long c, string fileName, CancellationToken cancellationToken = default)
      {
        await send_storeSystemFile(c, fileName, cancellationToken);
        return await recv_storeSystemFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_storeSystemFile(long c, string fileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("storeSystemFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1969 = new InternalStructs.storeSystemFile_args() {
          C = c,
          FileName = fileName,
        };
        
        await tmp1969.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_storeSystemFile(CancellationToken cancellationToken = default)
      {
        
        var tmp1970 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1970.Type == TMessageType.Exception)
        {
          var tmp1971 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1971;
        }

        var tmp1972 = new InternalStructs.storeSystemFile_result();
        await tmp1972.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1972.__isset.success)
        {
          return tmp1972.Success;
        }
        if (tmp1972.__isset.e)
        {
          throw tmp1972.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "storeSystemFile failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> retrieveSystemFileContents(long c, string fileName, CancellationToken cancellationToken = default)
      {
        await send_retrieveSystemFileContents(c, fileName, cancellationToken);
        return await recv_retrieveSystemFileContents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_retrieveSystemFileContents(long c, string fileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("retrieveSystemFileContents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1973 = new InternalStructs.retrieveSystemFileContents_args() {
          C = c,
          FileName = fileName,
        };
        
        await tmp1973.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_retrieveSystemFileContents(CancellationToken cancellationToken = default)
      {
        
        var tmp1974 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1974.Type == TMessageType.Exception)
        {
          var tmp1975 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1975;
        }

        var tmp1976 = new InternalStructs.retrieveSystemFileContents_result();
        await tmp1976.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1976.__isset.success)
        {
          return tmp1976.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveSystemFileContents failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task retrieveSystemFile(long c, string fileName, CancellationToken cancellationToken = default)
      {
        await send_retrieveSystemFile(c, fileName, cancellationToken);
        await recv_retrieveSystemFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_retrieveSystemFile(long c, string fileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("retrieveSystemFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1977 = new InternalStructs.retrieveSystemFile_args() {
          C = c,
          FileName = fileName,
        };
        
        await tmp1977.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_retrieveSystemFile(CancellationToken cancellationToken = default)
      {
        
        var tmp1978 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1978.Type == TMessageType.Exception)
        {
          var tmp1979 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1979;
        }

        var tmp1980 = new InternalStructs.retrieveSystemFile_result();
        await tmp1980.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1980.__isset.e)
        {
          throw tmp1980.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> tools(long c, CancellationToken cancellationToken = default)
      {
        await send_tools(c, cancellationToken);
        return await recv_tools(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_tools(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1981 = new InternalStructs.tools_args() {
          C = c,
        };
        
        await tmp1981.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> recv_tools(CancellationToken cancellationToken = default)
      {
        
        var tmp1982 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1982.Type == TMessageType.Exception)
        {
          var tmp1983 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1983;
        }

        var tmp1984 = new InternalStructs.tools_result();
        await tmp1984.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1984.__isset.success)
        {
          return tmp1984.Success;
        }
        if (tmp1984.__isset.e)
        {
          throw tmp1984.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tools failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> tool(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_tool(c, index, cancellationToken);
        return await recv_tool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_tool(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1985 = new InternalStructs.tool_args() {
          C = c,
          Index = index,
        };
        
        await tmp1985.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> recv_tool(CancellationToken cancellationToken = default)
      {
        
        var tmp1986 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1986.Type == TMessageType.Exception)
        {
          var tmp1987 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1987;
        }

        var tmp1988 = new InternalStructs.tool_result();
        await tmp1988.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1988.__isset.success)
        {
          return tmp1988.Success;
        }
        if (tmp1988.__isset.e)
        {
          throw tmp1988.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputNumber(c, name, cancellationToken);
        return await recv_inputNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1989 = new InternalStructs.inputNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1989.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1990 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1990.Type == TMessageType.Exception)
        {
          var tmp1991 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1991;
        }

        var tmp1992 = new InternalStructs.inputNumber_result();
        await tmp1992.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1992.__isset.success)
        {
          return tmp1992.Success;
        }
        if (tmp1992.__isset.e)
        {
          throw tmp1992.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputGroupNumber(c, name, cancellationToken);
        return await recv_inputGroupNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1993 = new InternalStructs.inputGroupNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1993.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputGroupNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1994 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1994.Type == TMessageType.Exception)
        {
          var tmp1995 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1995;
        }

        var tmp1996 = new InternalStructs.inputGroupNumber_result();
        await tmp1996.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1996.__isset.success)
        {
          return tmp1996.Success;
        }
        if (tmp1996.__isset.e)
        {
          throw tmp1996.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputGroupNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputNumber(c, name, cancellationToken);
        return await recv_outputNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1997 = new InternalStructs.outputNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1997.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1998 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1998.Type == TMessageType.Exception)
        {
          var tmp1999 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1999;
        }

        var tmp2000 = new InternalStructs.outputNumber_result();
        await tmp2000.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2000.__isset.success)
        {
          return tmp2000.Success;
        }
        if (tmp2000.__isset.e)
        {
          throw tmp2000.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputGroupNumber(c, name, cancellationToken);
        return await recv_outputGroupNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2001 = new InternalStructs.outputGroupNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp2001.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputGroupNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp2002 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2002.Type == TMessageType.Exception)
        {
          var tmp2003 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2003;
        }

        var tmp2004 = new InternalStructs.outputGroupNumber_result();
        await tmp2004.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2004.__isset.success)
        {
          return tmp2004.Success;
        }
        if (tmp2004.__isset.e)
        {
          throw tmp2004.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputGroupNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> inputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputName(c, num, cancellationToken);
        return await recv_inputName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2005 = new InternalStructs.inputName_args() {
          C = c,
          Num = num,
        };
        
        await tmp2005.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_inputName(CancellationToken cancellationToken = default)
      {
        
        var tmp2006 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2006.Type == TMessageType.Exception)
        {
          var tmp2007 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2007;
        }

        var tmp2008 = new InternalStructs.inputName_result();
        await tmp2008.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2008.__isset.success)
        {
          return tmp2008.Success;
        }
        if (tmp2008.__isset.e)
        {
          throw tmp2008.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> outputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputName(c, num, cancellationToken);
        return await recv_outputName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2009 = new InternalStructs.outputName_args() {
          C = c,
          Num = num,
        };
        
        await tmp2009.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_outputName(CancellationToken cancellationToken = default)
      {
        
        var tmp2010 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2010.Type == TMessageType.Exception)
        {
          var tmp2011 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2011;
        }

        var tmp2012 = new InternalStructs.outputName_result();
        await tmp2012.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2012.__isset.success)
        {
          return tmp2012.Success;
        }
        if (tmp2012.__isset.e)
        {
          throw tmp2012.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setInputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await send_setInputName(c, num, name, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setInputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setInputName", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2013 = new InternalStructs.setInputName_args() {
          C = c,
          Num = num,
          Name = name,
        };
        
        await tmp2013.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await send_setOutputName(c, num, name, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputName", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2014 = new InternalStructs.setOutputName_args() {
          C = c,
          Num = num,
          Name = name,
        };
        
        await tmp2014.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_monitorInput(c, num, cancellationToken);
        await recv_monitorInput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2015 = new InternalStructs.monitorInput_args() {
          C = c,
          Num = num,
        };
        
        await tmp2015.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorInput(CancellationToken cancellationToken = default)
      {
        
        var tmp2016 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2016.Type == TMessageType.Exception)
        {
          var tmp2017 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2017;
        }

        var tmp2018 = new InternalStructs.monitorInput_result();
        await tmp2018.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2018.__isset.e)
        {
          throw tmp2018.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_monitorInputGroups(c, groupNum, count, cancellationToken);
        await recv_monitorInputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2019 = new InternalStructs.monitorInputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp2019.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorInputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp2020 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2020.Type == TMessageType.Exception)
        {
          var tmp2021 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2021;
        }

        var tmp2022 = new InternalStructs.monitorInputGroups_result();
        await tmp2022.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2022.__isset.e)
        {
          throw tmp2022.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_monitorOutput(c, num, cancellationToken);
        await recv_monitorOutput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2023 = new InternalStructs.monitorOutput_args() {
          C = c,
          Num = num,
        };
        
        await tmp2023.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorOutput(CancellationToken cancellationToken = default)
      {
        
        var tmp2024 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2024.Type == TMessageType.Exception)
        {
          var tmp2025 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2025;
        }

        var tmp2026 = new InternalStructs.monitorOutput_result();
        await tmp2026.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2026.__isset.e)
        {
          throw tmp2026.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_monitorOutputGroups(c, groupNum, count, cancellationToken);
        await recv_monitorOutputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2027 = new InternalStructs.monitorOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp2027.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorOutputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp2028 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2028.Type == TMessageType.Exception)
        {
          var tmp2029 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2029;
        }

        var tmp2030 = new InternalStructs.monitorOutputGroups_result();
        await tmp2030.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2030.__isset.e)
        {
          throw tmp2030.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_unmonitorInput(c, num, cancellationToken);
        await recv_unmonitorInput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2031 = new InternalStructs.unmonitorInput_args() {
          C = c,
          Num = num,
        };
        
        await tmp2031.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorInput(CancellationToken cancellationToken = default)
      {
        
        var tmp2032 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2032.Type == TMessageType.Exception)
        {
          var tmp2033 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2033;
        }

        var tmp2034 = new InternalStructs.unmonitorInput_result();
        await tmp2034.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_unmonitorInputGroups(c, groupNum, count, cancellationToken);
        await recv_unmonitorInputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2035 = new InternalStructs.unmonitorInputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp2035.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorInputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp2036 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2036.Type == TMessageType.Exception)
        {
          var tmp2037 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2037;
        }

        var tmp2038 = new InternalStructs.unmonitorInputGroups_result();
        await tmp2038.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_unmonitorOutput(c, num, cancellationToken);
        await recv_unmonitorOutput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2039 = new InternalStructs.unmonitorOutput_args() {
          C = c,
          Num = num,
        };
        
        await tmp2039.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorOutput(CancellationToken cancellationToken = default)
      {
        
        var tmp2040 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2040.Type == TMessageType.Exception)
        {
          var tmp2041 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2041;
        }

        var tmp2042 = new InternalStructs.unmonitorOutput_result();
        await tmp2042.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_unmonitorOutputGroups(c, groupNum, count, cancellationToken);
        await recv_unmonitorOutputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2043 = new InternalStructs.unmonitorOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp2043.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorOutputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp2044 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2044.Type == TMessageType.Exception)
        {
          var tmp2045 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2045;
        }

        var tmp2046 = new InternalStructs.unmonitorOutputGroups_result();
        await tmp2046.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> inputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputValue(c, num, cancellationToken);
        return await recv_inputValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2047 = new InternalStructs.inputValue_args() {
          C = c,
          Num = num,
        };
        
        await tmp2047.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_inputValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2048 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2048.Type == TMessageType.Exception)
        {
          var tmp2049 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2049;
        }

        var tmp2050 = new InternalStructs.inputValue_result();
        await tmp2050.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2050.__isset.success)
        {
          return tmp2050.Success;
        }
        if (tmp2050.__isset.e)
        {
          throw tmp2050.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_inputGroupsValue(c, groupNum, count, cancellationToken);
        return await recv_inputGroupsValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2051 = new InternalStructs.inputGroupsValue_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp2051.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputGroupsValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2052 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2052.Type == TMessageType.Exception)
        {
          var tmp2053 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2053;
        }

        var tmp2054 = new InternalStructs.inputGroupsValue_result();
        await tmp2054.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2054.__isset.success)
        {
          return tmp2054.Success;
        }
        if (tmp2054.__isset.e)
        {
          throw tmp2054.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputGroupsValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> outputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputValue(c, num, cancellationToken);
        return await recv_outputValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2055 = new InternalStructs.outputValue_args() {
          C = c,
          Num = num,
        };
        
        await tmp2055.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_outputValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2056 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2056.Type == TMessageType.Exception)
        {
          var tmp2057 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2057;
        }

        var tmp2058 = new InternalStructs.outputValue_result();
        await tmp2058.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2058.__isset.success)
        {
          return tmp2058.Success;
        }
        if (tmp2058.__isset.e)
        {
          throw tmp2058.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_outputGroupsValue(c, groupNum, count, cancellationToken);
        return await recv_outputGroupsValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2059 = new InternalStructs.outputGroupsValue_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp2059.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputGroupsValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2060 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2060.Type == TMessageType.Exception)
        {
          var tmp2061 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2061;
        }

        var tmp2062 = new InternalStructs.outputGroupsValue_result();
        await tmp2062.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2062.__isset.success)
        {
          return tmp2062.Success;
        }
        if (tmp2062.__isset.e)
        {
          throw tmp2062.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputGroupsValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setOutput(c, num, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutput", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2063 = new InternalStructs.setOutput_args() {
          C = c,
          Num = num,
          Value = @value,
        };
        
        await tmp2063.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default)
      {
        await send_setOutputGroups(c, groupNum, count, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputGroups", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2064 = new InternalStructs.setOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
          Value = @value,
        };
        
        await tmp2064.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> inputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputAddress(c, name, cancellationToken);
        return await recv_inputAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2065 = new InternalStructs.inputAddress_args() {
          C = c,
          Name = name,
        };
        
        await tmp2065.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp2066 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2066.Type == TMessageType.Exception)
        {
          var tmp2067 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2067;
        }

        var tmp2068 = new InternalStructs.inputAddress_result();
        await tmp2068.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2068.__isset.success)
        {
          return tmp2068.Success;
        }
        if (tmp2068.__isset.e)
        {
          throw tmp2068.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputAddressByNumber(c, num, cancellationToken);
        return await recv_inputAddressByNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2069 = new InternalStructs.inputAddressByNumber_args() {
          C = c,
          Num = num,
        };
        
        await tmp2069.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputAddressByNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp2070 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2070.Type == TMessageType.Exception)
        {
          var tmp2071 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2071;
        }

        var tmp2072 = new InternalStructs.inputAddressByNumber_result();
        await tmp2072.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2072.__isset.success)
        {
          return tmp2072.Success;
        }
        if (tmp2072.__isset.e)
        {
          throw tmp2072.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddressByNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputAddress(c, name, cancellationToken);
        return await recv_outputAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2073 = new InternalStructs.outputAddress_args() {
          C = c,
          Name = name,
        };
        
        await tmp2073.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp2074 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2074.Type == TMessageType.Exception)
        {
          var tmp2075 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2075;
        }

        var tmp2076 = new InternalStructs.outputAddress_result();
        await tmp2076.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2076.__isset.success)
        {
          return tmp2076.Success;
        }
        if (tmp2076.__isset.e)
        {
          throw tmp2076.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputAddressByNumber(c, num, cancellationToken);
        return await recv_outputAddressByNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2077 = new InternalStructs.outputAddressByNumber_args() {
          C = c,
          Num = num,
        };
        
        await tmp2077.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputAddressByNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp2078 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2078.Type == TMessageType.Exception)
        {
          var tmp2079 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2079;
        }

        var tmp2080 = new InternalStructs.outputAddressByNumber_result();
        await tmp2080.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2080.__isset.success)
        {
          return tmp2080.Success;
        }
        if (tmp2080.__isset.e)
        {
          throw tmp2080.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddressByNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task monitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_monitorIOAddress(c, address, cancellationToken);
        await recv_monitorIOAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2081 = new InternalStructs.monitorIOAddress_args() {
          C = c,
          Address = address,
        };
        
        await tmp2081.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorIOAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp2082 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2082.Type == TMessageType.Exception)
        {
          var tmp2083 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2083;
        }

        var tmp2084 = new InternalStructs.monitorIOAddress_result();
        await tmp2084.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2084.__isset.e)
        {
          throw tmp2084.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_unmonitorIOAddress(c, address, cancellationToken);
        await recv_unmonitorIOAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2085 = new InternalStructs.unmonitorIOAddress_args() {
          C = c,
          Address = address,
        };
        
        await tmp2085.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorIOAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp2086 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2086.Type == TMessageType.Exception)
        {
          var tmp2087 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2087;
        }

        var tmp2088 = new InternalStructs.unmonitorIOAddress_result();
        await tmp2088.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> inputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_inputAddressValue(c, address, cancellationToken);
        return await recv_inputAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2089 = new InternalStructs.inputAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp2089.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_inputAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2090 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2090.Type == TMessageType.Exception)
        {
          var tmp2091 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2091;
        }

        var tmp2092 = new InternalStructs.inputAddressValue_result();
        await tmp2092.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2092.__isset.success)
        {
          return tmp2092.Success;
        }
        if (tmp2092.__isset.e)
        {
          throw tmp2092.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> outputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_outputAddressValue(c, address, cancellationToken);
        return await recv_outputAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2093 = new InternalStructs.outputAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp2093.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_outputAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2094 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2094.Type == TMessageType.Exception)
        {
          var tmp2095 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2095;
        }

        var tmp2096 = new InternalStructs.outputAddressValue_result();
        await tmp2096.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2096.__isset.success)
        {
          return tmp2096.Success;
        }
        if (tmp2096.__isset.e)
        {
          throw tmp2096.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> ioAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_ioAddressValue(c, address, cancellationToken);
        return await recv_ioAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ioAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ioAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2097 = new InternalStructs.ioAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp2097.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_ioAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2098 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2098.Type == TMessageType.Exception)
        {
          var tmp2099 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2099;
        }

        var tmp2100 = new InternalStructs.ioAddressValue_result();
        await tmp2100.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2100.__isset.success)
        {
          return tmp2100.Success;
        }
        if (tmp2100.__isset.e)
        {
          throw tmp2100.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ioAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setOutputAddress(c, address, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputAddress", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2101 = new InternalStructs.setOutputAddress_args() {
          C = c,
          Address = address,
          Value = @value,
        };
        
        await tmp2101.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setNetworkInputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setNetworkInputAddress(c, address, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setNetworkInputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setNetworkInputAddress", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2102 = new InternalStructs.setNetworkInputAddress_args() {
          C = c,
          Address = address,
          Value = @value,
        };
        
        await tmp2102.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> mRegisterValue(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_mRegisterValue(c, index, cancellationToken);
        return await recv_mRegisterValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_mRegisterValue(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("mRegisterValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2103 = new InternalStructs.mRegisterValue_args() {
          C = c,
          Index = index,
        };
        
        await tmp2103.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_mRegisterValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2104 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2104.Type == TMessageType.Exception)
        {
          var tmp2105 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2105;
        }

        var tmp2106 = new InternalStructs.mRegisterValue_result();
        await tmp2106.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2106.__isset.success)
        {
          return tmp2106.Success;
        }
        if (tmp2106.__isset.e)
        {
          throw tmp2106.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mRegisterValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setMRegisterValue(long c, int index, int @value, CancellationToken cancellationToken = default)
      {
        await send_setMRegisterValue(c, index, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setMRegisterValue(long c, int index, int @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setMRegisterValue", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2107 = new InternalStructs.setMRegisterValue_args() {
          C = c,
          Index = index,
          Value = @value,
        };
        
        await tmp2107.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default)
      {
        await send_fieldBusStatusInputGroup(c, busType, cancellationToken);
        return await recv_fieldBusStatusInputGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2108 = new InternalStructs.fieldBusStatusInputGroup_args() {
          C = c,
          BusType = busType,
        };
        
        await tmp2108.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_fieldBusStatusInputGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp2109 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2109.Type == TMessageType.Exception)
        {
          var tmp2110 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2110;
        }

        var tmp2111 = new InternalStructs.fieldBusStatusInputGroup_result();
        await tmp2111.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2111.__isset.success)
        {
          return tmp2111.Success;
        }
        if (tmp2111.__isset.e)
        {
          throw tmp2111.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fieldBusStatusInputGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> controlGroups(long c, CancellationToken cancellationToken = default)
      {
        await send_controlGroups(c, cancellationToken);
        return await recv_controlGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_controlGroups(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2112 = new InternalStructs.controlGroups_args() {
          C = c,
        };
        
        await tmp2112.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> recv_controlGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp2113 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2113.Type == TMessageType.Exception)
        {
          var tmp2114 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2114;
        }

        var tmp2115 = new InternalStructs.controlGroups_result();
        await tmp2115.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2115.__isset.success)
        {
          return tmp2115.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "controlGroups failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<sbyte> currentControlGroup(long c, CancellationToken cancellationToken = default)
      {
        await send_currentControlGroup(c, cancellationToken);
        return await recv_currentControlGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentControlGroup(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2116 = new InternalStructs.currentControlGroup_args() {
          C = c,
        };
        
        await tmp2116.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<sbyte> recv_currentControlGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp2117 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2117.Type == TMessageType.Exception)
        {
          var tmp2118 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2118;
        }

        var tmp2119 = new InternalStructs.currentControlGroup_result();
        await tmp2119.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2119.__isset.success)
        {
          return tmp2119.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentControlGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<sbyte> robotCount(long c, CancellationToken cancellationToken = default)
      {
        await send_robotCount(c, cancellationToken);
        return await recv_robotCount(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_robotCount(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2120 = new InternalStructs.robotCount_args() {
          C = c,
        };
        
        await tmp2120.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<sbyte> recv_robotCount(CancellationToken cancellationToken = default)
      {
        
        var tmp2121 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2121.Type == TMessageType.Exception)
        {
          var tmp2122 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2122;
        }

        var tmp2123 = new InternalStructs.robotCount_result();
        await tmp2123.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2123.__isset.success)
        {
          return tmp2123.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "robotCount failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> currentRobot(long c, CancellationToken cancellationToken = default)
      {
        await send_currentRobot(c, cancellationToken);
        return await recv_currentRobot(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentRobot(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2124 = new InternalStructs.currentRobot_args() {
          C = c,
        };
        
        await tmp2124.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_currentRobot(CancellationToken cancellationToken = default)
      {
        
        var tmp2125 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2125.Type == TMessageType.Exception)
        {
          var tmp2126 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2126;
        }

        var tmp2127 = new InternalStructs.currentRobot_result();
        await tmp2127.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2127.__isset.success)
        {
          return tmp2127.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentRobot failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variable(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_variable(c, name, cancellationToken);
        return await recv_variable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variable(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2128 = new InternalStructs.variable_args() {
          C = c,
          Name = name,
        };
        
        await tmp2128.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_variable(CancellationToken cancellationToken = default)
      {
        
        var tmp2129 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2129.Type == TMessageType.Exception)
        {
          var tmp2130 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2130;
        }

        var tmp2131 = new InternalStructs.variable_result();
        await tmp2131.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2131.__isset.success)
        {
          return tmp2131.Success;
        }
        if (tmp2131.__isset.e)
        {
          throw tmp2131.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_variableByAddr(c, addr, cancellationToken);
        return await recv_variableByAddr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2132 = new InternalStructs.variableByAddr_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp2132.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_variableByAddr(CancellationToken cancellationToken = default)
      {
        
        var tmp2133 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2133.Type == TMessageType.Exception)
        {
          var tmp2134 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2134;
        }

        var tmp2135 = new InternalStructs.variableByAddr_result();
        await tmp2135.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2135.__isset.success)
        {
          return tmp2135.Success;
        }
        if (tmp2135.__isset.e)
        {
          throw tmp2135.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableByAddr failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setVariable(c, name, @value, cancellationToken);
        await recv_setVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2136 = new InternalStructs.setVariable_args() {
          C = c,
          Name = name,
          Value = @value,
        };
        
        await tmp2136.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp2137 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2137.Type == TMessageType.Exception)
        {
          var tmp2138 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2138;
        }

        var tmp2139 = new InternalStructs.setVariable_result();
        await tmp2139.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2139.__isset.e)
        {
          throw tmp2139.E;
        }
      }

      public async global::System.Threading.Tasks.Task setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setVariableByAddr(c, addr, @value, cancellationToken);
        await recv_setVariableByAddr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2140 = new InternalStructs.setVariableByAddr_args() {
          C = c,
          Addr = addr,
          Value = @value,
        };
        
        await tmp2140.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariableByAddr(CancellationToken cancellationToken = default)
      {
        
        var tmp2141 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2141.Type == TMessageType.Exception)
        {
          var tmp2142 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2142;
        }

        var tmp2143 = new InternalStructs.setVariableByAddr_result();
        await tmp2143.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2143.__isset.e)
        {
          throw tmp2143.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await send_variableAddrByNameAndSpace(c, name, space, cancellationToken);
        return await recv_variableAddrByNameAndSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2144 = new InternalStructs.variableAddrByNameAndSpace_args() {
          C = c,
          Name = name,
          Space = space,
        };
        
        await tmp2144.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> recv_variableAddrByNameAndSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp2145 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2145.Type == TMessageType.Exception)
        {
          var tmp2146 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2146;
        }

        var tmp2147 = new InternalStructs.variableAddrByNameAndSpace_result();
        await tmp2147.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2147.__isset.success)
        {
          return tmp2147.Success;
        }
        if (tmp2147.__isset.e)
        {
          throw tmp2147.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableAddrByNameAndSpace failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByName(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_variableAddrByName(c, name, cancellationToken);
        return await recv_variableAddrByName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableAddrByName(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2148 = new InternalStructs.variableAddrByName_args() {
          C = c,
          Name = name,
        };
        
        await tmp2148.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> recv_variableAddrByName(CancellationToken cancellationToken = default)
      {
        
        var tmp2149 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2149.Type == TMessageType.Exception)
        {
          var tmp2150 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2150;
        }

        var tmp2151 = new InternalStructs.variableAddrByName_result();
        await tmp2151.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2151.__isset.success)
        {
          return tmp2151.Success;
        }
        if (tmp2151.__isset.e)
        {
          throw tmp2151.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableAddrByName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default)
      {
        await send_setVariableName(c, addr, name, cancellationToken);
        await recv_setVariableName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2152 = new InternalStructs.setVariableName_args() {
          C = c,
          Addr = addr,
          Name = name,
        };
        
        await tmp2152.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariableName(CancellationToken cancellationToken = default)
      {
        
        var tmp2153 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2153.Type == TMessageType.Exception)
        {
          var tmp2154 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2154;
        }

        var tmp2155 = new InternalStructs.setVariableName_result();
        await tmp2155.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2155.__isset.e)
        {
          throw tmp2155.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_monitorVariable(c, addr, cancellationToken);
        await recv_monitorVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2156 = new InternalStructs.monitorVariable_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp2156.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp2157 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2157.Type == TMessageType.Exception)
        {
          var tmp2158 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2158;
        }

        var tmp2159 = new InternalStructs.monitorVariable_result();
        await tmp2159.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2159.__isset.e)
        {
          throw tmp2159.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_unmonitorVariable(c, addr, cancellationToken);
        await recv_unmonitorVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2160 = new InternalStructs.unmonitorVariable_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp2160.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp2161 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2161.Type == TMessageType.Exception)
        {
          var tmp2162 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2162;
        }

        var tmp2163 = new InternalStructs.unmonitorVariable_result();
        await tmp2163.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2163.__isset.e)
        {
          throw tmp2163.E;
        }
      }

      public async global::System.Threading.Tasks.Task<int> variableRange(long c, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await send_variableRange(c, space, cancellationToken);
        return await recv_variableRange(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableRange(long c, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableRange", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2164 = new InternalStructs.variableRange_args() {
          C = c,
          Space = space,
        };
        
        await tmp2164.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_variableRange(CancellationToken cancellationToken = default)
      {
        
        var tmp2165 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2165.Type == TMessageType.Exception)
        {
          var tmp2166 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2166;
        }

        var tmp2167 = new InternalStructs.variableRange_result();
        await tmp2167.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2167.__isset.success)
        {
          return tmp2167.Success;
        }
        if (tmp2167.__isset.e)
        {
          throw tmp2167.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableRange failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> zone(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_zone(c, index, cancellationToken);
        return await recv_zone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_zone(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2168 = new InternalStructs.zone_args() {
          C = c,
          Index = index,
        };
        
        await tmp2168.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> recv_zone(CancellationToken cancellationToken = default)
      {
        
        var tmp2169 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2169.Type == TMessageType.Exception)
        {
          var tmp2170 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2170;
        }

        var tmp2171 = new InternalStructs.zone_result();
        await tmp2171.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2171.__isset.success)
        {
          return tmp2171.Success;
        }
        if (tmp2171.__isset.e)
        {
          throw tmp2171.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "zone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> newZone(long c, CancellationToken cancellationToken = default)
      {
        await send_newZone(c, cancellationToken);
        return await recv_newZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_newZone(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2172 = new InternalStructs.newZone_args() {
          C = c,
        };
        
        await tmp2172.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_newZone(CancellationToken cancellationToken = default)
      {
        
        var tmp2173 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2173.Type == TMessageType.Exception)
        {
          var tmp2174 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2174;
        }

        var tmp2175 = new InternalStructs.newZone_result();
        await tmp2175.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2175.__isset.success)
        {
          return tmp2175.Success;
        }
        if (tmp2175.__isset.e)
        {
          throw tmp2175.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "newZone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default)
      {
        await send_modifyZone(c, index, z, cancellationToken);
        await recv_modifyZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2176 = new InternalStructs.modifyZone_args() {
          C = c,
          Index = index,
          Z = z,
        };
        
        await tmp2176.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_modifyZone(CancellationToken cancellationToken = default)
      {
        
        var tmp2177 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2177.Type == TMessageType.Exception)
        {
          var tmp2178 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2178;
        }

        var tmp2179 = new InternalStructs.modifyZone_result();
        await tmp2179.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2179.__isset.e)
        {
          throw tmp2179.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteZone(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_deleteZone(c, index, cancellationToken);
        await recv_deleteZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteZone(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2180 = new InternalStructs.deleteZone_args() {
          C = c,
          Index = index,
        };
        
        await tmp2180.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteZone(CancellationToken cancellationToken = default)
      {
        
        var tmp2181 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2181.Type == TMessageType.Exception)
        {
          var tmp2182 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2182;
        }

        var tmp2183 = new InternalStructs.deleteZone_result();
        await tmp2183.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2183.__isset.e)
        {
          throw tmp2183.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> userFrames(long c, CancellationToken cancellationToken = default)
      {
        await send_userFrames(c, cancellationToken);
        return await recv_userFrames(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_userFrames(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2184 = new InternalStructs.userFrames_args() {
          C = c,
        };
        
        await tmp2184.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> recv_userFrames(CancellationToken cancellationToken = default)
      {
        
        var tmp2185 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2185.Type == TMessageType.Exception)
        {
          var tmp2186 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2186;
        }

        var tmp2187 = new InternalStructs.userFrames_result();
        await tmp2187.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2187.__isset.success)
        {
          return tmp2187.Success;
        }
        if (tmp2187.__isset.e)
        {
          throw tmp2187.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "userFrames failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> userFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_userFrame(c, index, cancellationToken);
        return await recv_userFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_userFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2188 = new InternalStructs.userFrame_args() {
          C = c,
          Index = index,
        };
        
        await tmp2188.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> recv_userFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp2189 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2189.Type == TMessageType.Exception)
        {
          var tmp2190 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2190;
        }

        var tmp2191 = new InternalStructs.userFrame_result();
        await tmp2191.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2191.__isset.success)
        {
          return tmp2191.Success;
        }
        if (tmp2191.__isset.e)
        {
          throw tmp2191.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "userFrame failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> newUserFrame(long c, CancellationToken cancellationToken = default)
      {
        await send_newUserFrame(c, cancellationToken);
        return await recv_newUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_newUserFrame(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2192 = new InternalStructs.newUserFrame_args() {
          C = c,
        };
        
        await tmp2192.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_newUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp2193 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2193.Type == TMessageType.Exception)
        {
          var tmp2194 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2194;
        }

        var tmp2195 = new InternalStructs.newUserFrame_result();
        await tmp2195.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2195.__isset.success)
        {
          return tmp2195.Success;
        }
        if (tmp2195.__isset.e)
        {
          throw tmp2195.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "newUserFrame failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default)
      {
        await send_setUserFrame(c, index, f, cancellationToken);
        await recv_setUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2196 = new InternalStructs.setUserFrame_args() {
          C = c,
          Index = index,
          F = f,
        };
        
        await tmp2196.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp2197 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2197.Type == TMessageType.Exception)
        {
          var tmp2198 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2198;
        }

        var tmp2199 = new InternalStructs.setUserFrame_result();
        await tmp2199.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2199.__isset.e)
        {
          throw tmp2199.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteUserFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_deleteUserFrame(c, index, cancellationToken);
        await recv_deleteUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteUserFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2200 = new InternalStructs.deleteUserFrame_args() {
          C = c,
          Index = index,
        };
        
        await tmp2200.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp2201 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2201.Type == TMessageType.Exception)
        {
          var tmp2202 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2202;
        }

        var tmp2203 = new InternalStructs.deleteUserFrame_result();
        await tmp2203.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2203.__isset.e)
        {
          throw tmp2203.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default)
      {
        await send_networkInterfaceAddress(c, controllerInterface, cancellationToken);
        return await recv_networkInterfaceAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2204 = new InternalStructs.networkInterfaceAddress_args() {
          C = c,
          ControllerInterface = controllerInterface,
        };
        
        await tmp2204.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_networkInterfaceAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp2205 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2205.Type == TMessageType.Exception)
        {
          var tmp2206 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2206;
        }

        var tmp2207 = new InternalStructs.networkInterfaceAddress_result();
        await tmp2207.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2207.__isset.success)
        {
          return tmp2207.Success;
        }
        if (tmp2207.__isset.e)
        {
          throw tmp2207.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "networkInterfaceAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await send_requestNetworkAccess(c, controllerInterface, port, protocol, cancellationToken);
        return await recv_requestNetworkAccess(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2208 = new InternalStructs.requestNetworkAccess_args() {
          C = c,
          ControllerInterface = controllerInterface,
          Port = port,
          Protocol = protocol,
        };
        
        await tmp2208.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_requestNetworkAccess(CancellationToken cancellationToken = default)
      {
        
        var tmp2209 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2209.Type == TMessageType.Exception)
        {
          var tmp2210 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2210;
        }

        var tmp2211 = new InternalStructs.requestNetworkAccess_result();
        await tmp2211.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2211.__isset.success)
        {
          return tmp2211.Success;
        }
        if (tmp2211.__isset.e)
        {
          throw tmp2211.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestNetworkAccess failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await send_removeNetworkAccess(c, accessHandle, cancellationToken);
        await recv_removeNetworkAccess(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2212 = new InternalStructs.removeNetworkAccess_args() {
          C = c,
          AccessHandle = accessHandle,
        };
        
        await tmp2212.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeNetworkAccess(CancellationToken cancellationToken = default)
      {
        
        var tmp2213 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2213.Type == TMessageType.Exception)
        {
          var tmp2214 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2214;
        }

        var tmp2215 = new InternalStructs.removeNetworkAccess_result();
        await tmp2215.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2215.__isset.e)
        {
          throw tmp2215.E;
        }
      }

      public async global::System.Threading.Tasks.Task<int> requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await send_requestNetworkService(c, controllerInterface, port, protocol, cancellationToken);
        return await recv_requestNetworkService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2216 = new InternalStructs.requestNetworkService_args() {
          C = c,
          ControllerInterface = controllerInterface,
          Port = port,
          Protocol = protocol,
        };
        
        await tmp2216.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_requestNetworkService(CancellationToken cancellationToken = default)
      {
        
        var tmp2217 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2217.Type == TMessageType.Exception)
        {
          var tmp2218 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2218;
        }

        var tmp2219 = new InternalStructs.requestNetworkService_result();
        await tmp2219.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2219.__isset.success)
        {
          return tmp2219.Success;
        }
        if (tmp2219.__isset.e)
        {
          throw tmp2219.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestNetworkService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await send_removeNetworkService(c, accessHandle, cancellationToken);
        await recv_removeNetworkService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2220 = new InternalStructs.removeNetworkService_args() {
          C = c,
          AccessHandle = accessHandle,
        };
        
        await tmp2220.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeNetworkService(CancellationToken cancellationToken = default)
      {
        
        var tmp2221 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2221.Type == TMessageType.Exception)
        {
          var tmp2222 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2222;
        }

        var tmp2223 = new InternalStructs.removeNetworkService_result();
        await tmp2223.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2223.__isset.e)
        {
          throw tmp2223.E;
        }
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.GaugeSensorSpec>> getGaugeSensorSpec(long c, CancellationToken cancellationToken = default)
      {
        await send_getGaugeSensorSpec(c, cancellationToken);
        return await recv_getGaugeSensorSpec(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getGaugeSensorSpec(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getGaugeSensorSpec", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2224 = new InternalStructs.getGaugeSensorSpec_args() {
          C = c,
        };
        
        await tmp2224.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.GaugeSensorSpec>> recv_getGaugeSensorSpec(CancellationToken cancellationToken = default)
      {
        
        var tmp2225 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2225.Type == TMessageType.Exception)
        {
          var tmp2226 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2226;
        }

        var tmp2227 = new InternalStructs.getGaugeSensorSpec_result();
        await tmp2227.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2227.__isset.success)
        {
          return tmp2227.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGaugeSensorSpec failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task gaugeSensorCalibration(long c, sbyte channel, CancellationToken cancellationToken = default)
      {
        await send_gaugeSensorCalibration(c, channel, cancellationToken);
        await recv_gaugeSensorCalibration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_gaugeSensorCalibration(long c, sbyte channel, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("gaugeSensorCalibration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2228 = new InternalStructs.gaugeSensorCalibration_args() {
          C = c,
          Channel = channel,
        };
        
        await tmp2228.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_gaugeSensorCalibration(CancellationToken cancellationToken = default)
      {
        
        var tmp2229 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2229.Type == TMessageType.Exception)
        {
          var tmp2230 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2230;
        }

        var tmp2231 = new InternalStructs.gaugeSensorCalibration_result();
        await tmp2231.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["requestPermissions"] = requestPermissions_ProcessAsync;
        processMap_["havePermission"] = havePermission_ProcessAsync;
        processMap_["relinquishPermissions"] = relinquishPermissions_ProcessAsync;
        processMap_["connect"] = connect_ProcessAsync;
        processMap_["disconnect"] = disconnect_ProcessAsync;
        processMap_["subscribeEventTypes"] = subscribeEventTypes_ProcessAsync;
        processMap_["unsubscribeEventTypes"] = unsubscribeEventTypes_ProcessAsync;
        processMap_["events"] = events_ProcessAsync;
        processMap_["connected"] = connected_ProcessAsync;
        processMap_["connectedHostName"] = connectedHostName_ProcessAsync;
        processMap_["softwareVersion"] = softwareVersion_ProcessAsync;
        processMap_["monitoring"] = monitoring_ProcessAsync;
        processMap_["haveExclusiveControl"] = haveExclusiveControl_ProcessAsync;
        processMap_["operationMode"] = operationMode_ProcessAsync;
        processMap_["servoState"] = servoState_ProcessAsync;
        processMap_["playbackState"] = playbackState_ProcessAsync;
        processMap_["playbackCycle"] = playbackCycle_ProcessAsync;
        processMap_["setPlaybackCycle"] = setPlaybackCycle_ProcessAsync;
        processMap_["run"] = run_ProcessAsync;
        processMap_["pause"] = pause_ProcessAsync;
        processMap_["resume"] = resume_ProcessAsync;
        processMap_["stop"] = stop_ProcessAsync;
        processMap_["currentJob"] = currentJob_ProcessAsync;
        processMap_["setCurrentJob"] = setCurrentJob_ProcessAsync;
        processMap_["currentJobLine"] = currentJobLine_ProcessAsync;
        processMap_["defaultJob"] = defaultJob_ProcessAsync;
        processMap_["jobExists"] = jobExists_ProcessAsync;
        processMap_["jobDetails"] = jobDetails_ProcessAsync;
        processMap_["jobs"] = jobs_ProcessAsync;
        processMap_["jobsMatching"] = jobsMatching_ProcessAsync;
        processMap_["duplicateJob"] = duplicateJob_ProcessAsync;
        processMap_["deleteJob"] = deleteJob_ProcessAsync;
        processMap_["jobSource"] = jobSource_ProcessAsync;
        processMap_["storeJobSource"] = storeJobSource_ProcessAsync;
        processMap_["storeSystemFileContents"] = storeSystemFileContents_ProcessAsync;
        processMap_["storeSystemFile"] = storeSystemFile_ProcessAsync;
        processMap_["retrieveSystemFileContents"] = retrieveSystemFileContents_ProcessAsync;
        processMap_["retrieveSystemFile"] = retrieveSystemFile_ProcessAsync;
        processMap_["tools"] = tools_ProcessAsync;
        processMap_["tool"] = tool_ProcessAsync;
        processMap_["inputNumber"] = inputNumber_ProcessAsync;
        processMap_["inputGroupNumber"] = inputGroupNumber_ProcessAsync;
        processMap_["outputNumber"] = outputNumber_ProcessAsync;
        processMap_["outputGroupNumber"] = outputGroupNumber_ProcessAsync;
        processMap_["inputName"] = inputName_ProcessAsync;
        processMap_["outputName"] = outputName_ProcessAsync;
        processMap_["setInputName"] = setInputName_ProcessAsync;
        processMap_["setOutputName"] = setOutputName_ProcessAsync;
        processMap_["monitorInput"] = monitorInput_ProcessAsync;
        processMap_["monitorInputGroups"] = monitorInputGroups_ProcessAsync;
        processMap_["monitorOutput"] = monitorOutput_ProcessAsync;
        processMap_["monitorOutputGroups"] = monitorOutputGroups_ProcessAsync;
        processMap_["unmonitorInput"] = unmonitorInput_ProcessAsync;
        processMap_["unmonitorInputGroups"] = unmonitorInputGroups_ProcessAsync;
        processMap_["unmonitorOutput"] = unmonitorOutput_ProcessAsync;
        processMap_["unmonitorOutputGroups"] = unmonitorOutputGroups_ProcessAsync;
        processMap_["inputValue"] = inputValue_ProcessAsync;
        processMap_["inputGroupsValue"] = inputGroupsValue_ProcessAsync;
        processMap_["outputValue"] = outputValue_ProcessAsync;
        processMap_["outputGroupsValue"] = outputGroupsValue_ProcessAsync;
        processMap_["setOutput"] = setOutput_ProcessAsync;
        processMap_["setOutputGroups"] = setOutputGroups_ProcessAsync;
        processMap_["inputAddress"] = inputAddress_ProcessAsync;
        processMap_["inputAddressByNumber"] = inputAddressByNumber_ProcessAsync;
        processMap_["outputAddress"] = outputAddress_ProcessAsync;
        processMap_["outputAddressByNumber"] = outputAddressByNumber_ProcessAsync;
        processMap_["monitorIOAddress"] = monitorIOAddress_ProcessAsync;
        processMap_["unmonitorIOAddress"] = unmonitorIOAddress_ProcessAsync;
        processMap_["inputAddressValue"] = inputAddressValue_ProcessAsync;
        processMap_["outputAddressValue"] = outputAddressValue_ProcessAsync;
        processMap_["ioAddressValue"] = ioAddressValue_ProcessAsync;
        processMap_["setOutputAddress"] = setOutputAddress_ProcessAsync;
        processMap_["setNetworkInputAddress"] = setNetworkInputAddress_ProcessAsync;
        processMap_["mRegisterValue"] = mRegisterValue_ProcessAsync;
        processMap_["setMRegisterValue"] = setMRegisterValue_ProcessAsync;
        processMap_["fieldBusStatusInputGroup"] = fieldBusStatusInputGroup_ProcessAsync;
        processMap_["controlGroups"] = controlGroups_ProcessAsync;
        processMap_["currentControlGroup"] = currentControlGroup_ProcessAsync;
        processMap_["robotCount"] = robotCount_ProcessAsync;
        processMap_["currentRobot"] = currentRobot_ProcessAsync;
        processMap_["variable"] = variable_ProcessAsync;
        processMap_["variableByAddr"] = variableByAddr_ProcessAsync;
        processMap_["setVariable"] = setVariable_ProcessAsync;
        processMap_["setVariableByAddr"] = setVariableByAddr_ProcessAsync;
        processMap_["variableAddrByNameAndSpace"] = variableAddrByNameAndSpace_ProcessAsync;
        processMap_["variableAddrByName"] = variableAddrByName_ProcessAsync;
        processMap_["setVariableName"] = setVariableName_ProcessAsync;
        processMap_["monitorVariable"] = monitorVariable_ProcessAsync;
        processMap_["unmonitorVariable"] = unmonitorVariable_ProcessAsync;
        processMap_["variableRange"] = variableRange_ProcessAsync;
        processMap_["zone"] = zone_ProcessAsync;
        processMap_["newZone"] = newZone_ProcessAsync;
        processMap_["modifyZone"] = modifyZone_ProcessAsync;
        processMap_["deleteZone"] = deleteZone_ProcessAsync;
        processMap_["userFrames"] = userFrames_ProcessAsync;
        processMap_["userFrame"] = userFrame_ProcessAsync;
        processMap_["newUserFrame"] = newUserFrame_ProcessAsync;
        processMap_["setUserFrame"] = setUserFrame_ProcessAsync;
        processMap_["deleteUserFrame"] = deleteUserFrame_ProcessAsync;
        processMap_["networkInterfaceAddress"] = networkInterfaceAddress_ProcessAsync;
        processMap_["requestNetworkAccess"] = requestNetworkAccess_ProcessAsync;
        processMap_["removeNetworkAccess"] = removeNetworkAccess_ProcessAsync;
        processMap_["requestNetworkService"] = requestNetworkService_ProcessAsync;
        processMap_["removeNetworkService"] = removeNetworkService_ProcessAsync;
        processMap_["getGaugeSensorSpec"] = getGaugeSensorSpec_ProcessAsync;
        processMap_["gaugeSensorCalibration"] = gaugeSensorCalibration_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task requestPermissions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2232 = new InternalStructs.requestPermissions_args();
        await tmp2232.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2233 = new InternalStructs.requestPermissions_result();
        try
        {
          try
          {
            tmp2233.Success = await _iAsync.requestPermissions(tmp2232.C, tmp2232.Permissions, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2234)
          {
            tmp2233.E = tmp2234;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2233.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2235)
        {
          var tmp2236 = $"Error occurred in {GetType().FullName}: {tmp2235.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2235, tmp2236);
          else
            Console.Error.WriteLine(tmp2236);
          var tmp2237 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Exception, seqid), cancellationToken);
          await tmp2237.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task havePermission_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2238 = new InternalStructs.havePermission_args();
        await tmp2238.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2239 = new InternalStructs.havePermission_result();
        try
        {
          try
          {
            tmp2239.Success = await _iAsync.havePermission(tmp2238.C, tmp2238.Permission, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2240)
          {
            tmp2239.E = tmp2240;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2239.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2241)
        {
          var tmp2242 = $"Error occurred in {GetType().FullName}: {tmp2241.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2241, tmp2242);
          else
            Console.Error.WriteLine(tmp2242);
          var tmp2243 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Exception, seqid), cancellationToken);
          await tmp2243.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task relinquishPermissions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2244 = new InternalStructs.relinquishPermissions_args();
        await tmp2244.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2245 = new InternalStructs.relinquishPermissions_result();
        try
        {
          await _iAsync.relinquishPermissions(tmp2244.C, tmp2244.Permissions, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2245.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2246)
        {
          var tmp2247 = $"Error occurred in {GetType().FullName}: {tmp2246.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2246, tmp2247);
          else
            Console.Error.WriteLine(tmp2247);
          var tmp2248 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Exception, seqid), cancellationToken);
          await tmp2248.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connect_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2249 = new InternalStructs.connect_args();
        await tmp2249.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2250 = new InternalStructs.connect_result();
        try
        {
          await _iAsync.connect(tmp2249.C, tmp2249.HostName, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2250.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2251)
        {
          var tmp2252 = $"Error occurred in {GetType().FullName}: {tmp2251.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2251, tmp2252);
          else
            Console.Error.WriteLine(tmp2252);
          var tmp2253 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Exception, seqid), cancellationToken);
          await tmp2253.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task disconnect_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2254 = new InternalStructs.disconnect_args();
        await tmp2254.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2255 = new InternalStructs.disconnect_result();
        try
        {
          await _iAsync.disconnect(tmp2254.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2255.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2256)
        {
          var tmp2257 = $"Error occurred in {GetType().FullName}: {tmp2256.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2256, tmp2257);
          else
            Console.Error.WriteLine(tmp2257);
          var tmp2258 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Exception, seqid), cancellationToken);
          await tmp2258.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2259 = new InternalStructs.subscribeEventTypes_args();
        await tmp2259.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2260 = new InternalStructs.subscribeEventTypes_result();
        try
        {
          await _iAsync.subscribeEventTypes(tmp2259.C, tmp2259.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2260.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2261)
        {
          var tmp2262 = $"Error occurred in {GetType().FullName}: {tmp2261.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2261, tmp2262);
          else
            Console.Error.WriteLine(tmp2262);
          var tmp2263 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp2263.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2264 = new InternalStructs.unsubscribeEventTypes_args();
        await tmp2264.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2265 = new InternalStructs.unsubscribeEventTypes_result();
        try
        {
          await _iAsync.unsubscribeEventTypes(tmp2264.C, tmp2264.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2265.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2266)
        {
          var tmp2267 = $"Error occurred in {GetType().FullName}: {tmp2266.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2266, tmp2267);
          else
            Console.Error.WriteLine(tmp2267);
          var tmp2268 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp2268.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task events_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2269 = new InternalStructs.events_args();
        await tmp2269.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2270 = new InternalStructs.events_result();
        try
        {
          tmp2270.Success = await _iAsync.events(tmp2269.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2270.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2271)
        {
          var tmp2272 = $"Error occurred in {GetType().FullName}: {tmp2271.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2271, tmp2272);
          else
            Console.Error.WriteLine(tmp2272);
          var tmp2273 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Exception, seqid), cancellationToken);
          await tmp2273.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connected_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2274 = new InternalStructs.connected_args();
        await tmp2274.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2275 = new InternalStructs.connected_result();
        try
        {
          tmp2275.Success = await _iAsync.connected(tmp2274.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2275.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2276)
        {
          var tmp2277 = $"Error occurred in {GetType().FullName}: {tmp2276.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2276, tmp2277);
          else
            Console.Error.WriteLine(tmp2277);
          var tmp2278 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Exception, seqid), cancellationToken);
          await tmp2278.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connectedHostName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2279 = new InternalStructs.connectedHostName_args();
        await tmp2279.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2280 = new InternalStructs.connectedHostName_result();
        try
        {
          tmp2280.Success = await _iAsync.connectedHostName(tmp2279.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2280.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2281)
        {
          var tmp2282 = $"Error occurred in {GetType().FullName}: {tmp2281.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2281, tmp2282);
          else
            Console.Error.WriteLine(tmp2282);
          var tmp2283 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2283.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task softwareVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2284 = new InternalStructs.softwareVersion_args();
        await tmp2284.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2285 = new InternalStructs.softwareVersion_result();
        try
        {
          tmp2285.Success = await _iAsync.softwareVersion(tmp2284.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2285.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2286)
        {
          var tmp2287 = $"Error occurred in {GetType().FullName}: {tmp2286.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2286, tmp2287);
          else
            Console.Error.WriteLine(tmp2287);
          var tmp2288 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp2288.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitoring_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2289 = new InternalStructs.monitoring_args();
        await tmp2289.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2290 = new InternalStructs.monitoring_result();
        try
        {
          tmp2290.Success = await _iAsync.monitoring(tmp2289.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2290.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2291)
        {
          var tmp2292 = $"Error occurred in {GetType().FullName}: {tmp2291.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2291, tmp2292);
          else
            Console.Error.WriteLine(tmp2292);
          var tmp2293 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Exception, seqid), cancellationToken);
          await tmp2293.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task haveExclusiveControl_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2294 = new InternalStructs.haveExclusiveControl_args();
        await tmp2294.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2295 = new InternalStructs.haveExclusiveControl_result();
        try
        {
          tmp2295.Success = await _iAsync.haveExclusiveControl(tmp2294.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2295.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2296)
        {
          var tmp2297 = $"Error occurred in {GetType().FullName}: {tmp2296.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2296, tmp2297);
          else
            Console.Error.WriteLine(tmp2297);
          var tmp2298 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Exception, seqid), cancellationToken);
          await tmp2298.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task operationMode_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2299 = new InternalStructs.operationMode_args();
        await tmp2299.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2300 = new InternalStructs.operationMode_result();
        try
        {
          tmp2300.Success = await _iAsync.operationMode(tmp2299.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2300.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2301)
        {
          var tmp2302 = $"Error occurred in {GetType().FullName}: {tmp2301.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2301, tmp2302);
          else
            Console.Error.WriteLine(tmp2302);
          var tmp2303 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Exception, seqid), cancellationToken);
          await tmp2303.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task servoState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2304 = new InternalStructs.servoState_args();
        await tmp2304.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2305 = new InternalStructs.servoState_result();
        try
        {
          tmp2305.Success = await _iAsync.servoState(tmp2304.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2305.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2306)
        {
          var tmp2307 = $"Error occurred in {GetType().FullName}: {tmp2306.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2306, tmp2307);
          else
            Console.Error.WriteLine(tmp2307);
          var tmp2308 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Exception, seqid), cancellationToken);
          await tmp2308.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task playbackState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2309 = new InternalStructs.playbackState_args();
        await tmp2309.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2310 = new InternalStructs.playbackState_result();
        try
        {
          tmp2310.Success = await _iAsync.playbackState(tmp2309.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2310.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2311)
        {
          var tmp2312 = $"Error occurred in {GetType().FullName}: {tmp2311.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2311, tmp2312);
          else
            Console.Error.WriteLine(tmp2312);
          var tmp2313 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Exception, seqid), cancellationToken);
          await tmp2313.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task playbackCycle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2314 = new InternalStructs.playbackCycle_args();
        await tmp2314.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2315 = new InternalStructs.playbackCycle_result();
        try
        {
          tmp2315.Success = await _iAsync.playbackCycle(tmp2314.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("playbackCycle", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2315.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2316)
        {
          var tmp2317 = $"Error occurred in {GetType().FullName}: {tmp2316.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2316, tmp2317);
          else
            Console.Error.WriteLine(tmp2317);
          var tmp2318 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("playbackCycle", TMessageType.Exception, seqid), cancellationToken);
          await tmp2318.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setPlaybackCycle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2319 = new InternalStructs.setPlaybackCycle_args();
        await tmp2319.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2320 = new InternalStructs.setPlaybackCycle_result();
        try
        {
          await _iAsync.setPlaybackCycle(tmp2319.C, tmp2319.Cycle, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setPlaybackCycle", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2320.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2321)
        {
          var tmp2322 = $"Error occurred in {GetType().FullName}: {tmp2321.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2321, tmp2322);
          else
            Console.Error.WriteLine(tmp2322);
          var tmp2323 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setPlaybackCycle", TMessageType.Exception, seqid), cancellationToken);
          await tmp2323.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task run_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2324 = new InternalStructs.run_args();
        await tmp2324.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2325 = new InternalStructs.run_result();
        try
        {
          await _iAsync.run(tmp2324.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("run", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2325.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2326)
        {
          var tmp2327 = $"Error occurred in {GetType().FullName}: {tmp2326.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2326, tmp2327);
          else
            Console.Error.WriteLine(tmp2327);
          var tmp2328 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("run", TMessageType.Exception, seqid), cancellationToken);
          await tmp2328.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pause_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2329 = new InternalStructs.pause_args();
        await tmp2329.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2330 = new InternalStructs.pause_result();
        try
        {
          await _iAsync.pause(tmp2329.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2330.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2331)
        {
          var tmp2332 = $"Error occurred in {GetType().FullName}: {tmp2331.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2331, tmp2332);
          else
            Console.Error.WriteLine(tmp2332);
          var tmp2333 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Exception, seqid), cancellationToken);
          await tmp2333.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resume_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2334 = new InternalStructs.resume_args();
        await tmp2334.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2335 = new InternalStructs.resume_result();
        try
        {
          await _iAsync.resume(tmp2334.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2335.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2336)
        {
          var tmp2337 = $"Error occurred in {GetType().FullName}: {tmp2336.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2336, tmp2337);
          else
            Console.Error.WriteLine(tmp2337);
          var tmp2338 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Exception, seqid), cancellationToken);
          await tmp2338.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stop_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2339 = new InternalStructs.stop_args();
        await tmp2339.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2340 = new InternalStructs.stop_result();
        try
        {
          await _iAsync.stop(tmp2339.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2340.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2341)
        {
          var tmp2342 = $"Error occurred in {GetType().FullName}: {tmp2341.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2341, tmp2342);
          else
            Console.Error.WriteLine(tmp2342);
          var tmp2343 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Exception, seqid), cancellationToken);
          await tmp2343.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2344 = new InternalStructs.currentJob_args();
        await tmp2344.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2345 = new InternalStructs.currentJob_result();
        try
        {
          tmp2345.Success = await _iAsync.currentJob(tmp2344.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2345.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2346)
        {
          var tmp2347 = $"Error occurred in {GetType().FullName}: {tmp2346.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2346, tmp2347);
          else
            Console.Error.WriteLine(tmp2347);
          var tmp2348 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2348.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setCurrentJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2349 = new InternalStructs.setCurrentJob_args();
        await tmp2349.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2350 = new InternalStructs.setCurrentJob_result();
        try
        {
          try
          {
            await _iAsync.setCurrentJob(tmp2349.C, tmp2349.Name, tmp2349.Line, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2351)
          {
            tmp2350.E = tmp2351;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2350.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2352)
        {
          var tmp2353 = $"Error occurred in {GetType().FullName}: {tmp2352.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2352, tmp2353);
          else
            Console.Error.WriteLine(tmp2353);
          var tmp2354 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2354.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentJobLine_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2355 = new InternalStructs.currentJobLine_args();
        await tmp2355.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2356 = new InternalStructs.currentJobLine_result();
        try
        {
          tmp2356.Success = await _iAsync.currentJobLine(tmp2355.C, tmp2355.TaskNo, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentJobLine", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2356.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2357)
        {
          var tmp2358 = $"Error occurred in {GetType().FullName}: {tmp2357.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2357, tmp2358);
          else
            Console.Error.WriteLine(tmp2358);
          var tmp2359 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentJobLine", TMessageType.Exception, seqid), cancellationToken);
          await tmp2359.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task defaultJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2360 = new InternalStructs.defaultJob_args();
        await tmp2360.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2361 = new InternalStructs.defaultJob_result();
        try
        {
          tmp2361.Success = await _iAsync.defaultJob(tmp2360.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2361.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2362)
        {
          var tmp2363 = $"Error occurred in {GetType().FullName}: {tmp2362.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2362, tmp2363);
          else
            Console.Error.WriteLine(tmp2363);
          var tmp2364 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2364.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobExists_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2365 = new InternalStructs.jobExists_args();
        await tmp2365.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2366 = new InternalStructs.jobExists_result();
        try
        {
          tmp2366.Success = await _iAsync.jobExists(tmp2365.C, tmp2365.Name, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2366.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2367)
        {
          var tmp2368 = $"Error occurred in {GetType().FullName}: {tmp2367.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2367, tmp2368);
          else
            Console.Error.WriteLine(tmp2368);
          var tmp2369 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Exception, seqid), cancellationToken);
          await tmp2369.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobDetails_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2370 = new InternalStructs.jobDetails_args();
        await tmp2370.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2371 = new InternalStructs.jobDetails_result();
        try
        {
          try
          {
            tmp2371.Success = await _iAsync.jobDetails(tmp2370.C, tmp2370.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2372)
          {
            tmp2371.E = tmp2372;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2371.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2373)
        {
          var tmp2374 = $"Error occurred in {GetType().FullName}: {tmp2373.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2373, tmp2374);
          else
            Console.Error.WriteLine(tmp2374);
          var tmp2375 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Exception, seqid), cancellationToken);
          await tmp2375.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2376 = new InternalStructs.jobs_args();
        await tmp2376.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2377 = new InternalStructs.jobs_result();
        try
        {
          tmp2377.Success = await _iAsync.jobs(tmp2376.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2377.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2378)
        {
          var tmp2379 = $"Error occurred in {GetType().FullName}: {tmp2378.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2378, tmp2379);
          else
            Console.Error.WriteLine(tmp2379);
          var tmp2380 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Exception, seqid), cancellationToken);
          await tmp2380.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobsMatching_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2381 = new InternalStructs.jobsMatching_args();
        await tmp2381.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2382 = new InternalStructs.jobsMatching_result();
        try
        {
          try
          {
            tmp2382.Success = await _iAsync.jobsMatching(tmp2381.C, tmp2381.NameRegex, tmp2381.Tag, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2383)
          {
            tmp2382.E = tmp2383;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2382.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2384)
        {
          var tmp2385 = $"Error occurred in {GetType().FullName}: {tmp2384.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2384, tmp2385);
          else
            Console.Error.WriteLine(tmp2385);
          var tmp2386 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Exception, seqid), cancellationToken);
          await tmp2386.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task duplicateJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2387 = new InternalStructs.duplicateJob_args();
        await tmp2387.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2388 = new InternalStructs.duplicateJob_result();
        try
        {
          try
          {
            await _iAsync.duplicateJob(tmp2387.C, tmp2387.ExistingName, tmp2387.NewName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2389)
          {
            tmp2388.E = tmp2389;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2388.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2390)
        {
          var tmp2391 = $"Error occurred in {GetType().FullName}: {tmp2390.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2390, tmp2391);
          else
            Console.Error.WriteLine(tmp2391);
          var tmp2392 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2392.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2393 = new InternalStructs.deleteJob_args();
        await tmp2393.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2394 = new InternalStructs.deleteJob_result();
        try
        {
          try
          {
            await _iAsync.deleteJob(tmp2393.C, tmp2393.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2395)
          {
            tmp2394.E = tmp2395;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2394.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2396)
        {
          var tmp2397 = $"Error occurred in {GetType().FullName}: {tmp2396.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2396, tmp2397);
          else
            Console.Error.WriteLine(tmp2397);
          var tmp2398 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2398.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobSource_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2399 = new InternalStructs.jobSource_args();
        await tmp2399.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2400 = new InternalStructs.jobSource_result();
        try
        {
          try
          {
            tmp2400.Success = await _iAsync.jobSource(tmp2399.C, tmp2399.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2401)
          {
            tmp2400.E = tmp2401;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2400.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2402)
        {
          var tmp2403 = $"Error occurred in {GetType().FullName}: {tmp2402.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2402, tmp2403);
          else
            Console.Error.WriteLine(tmp2403);
          var tmp2404 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Exception, seqid), cancellationToken);
          await tmp2404.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task storeJobSource_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2405 = new InternalStructs.storeJobSource_args();
        await tmp2405.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2406 = new InternalStructs.storeJobSource_result();
        try
        {
          try
          {
            await _iAsync.storeJobSource(tmp2405.C, tmp2405.Name, tmp2405.ProgrammingLanguage, tmp2405.SourceCode, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2407)
          {
            tmp2406.E = tmp2407;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2406.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2408)
        {
          var tmp2409 = $"Error occurred in {GetType().FullName}: {tmp2408.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2408, tmp2409);
          else
            Console.Error.WriteLine(tmp2409);
          var tmp2410 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Exception, seqid), cancellationToken);
          await tmp2410.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task storeSystemFileContents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2411 = new InternalStructs.storeSystemFileContents_args();
        await tmp2411.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2412 = new InternalStructs.storeSystemFileContents_result();
        try
        {
          try
          {
            tmp2412.Success = await _iAsync.storeSystemFileContents(tmp2411.C, tmp2411.FileName, tmp2411.FileContents, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2413)
          {
            tmp2412.E = tmp2413;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("storeSystemFileContents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2412.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2414)
        {
          var tmp2415 = $"Error occurred in {GetType().FullName}: {tmp2414.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2414, tmp2415);
          else
            Console.Error.WriteLine(tmp2415);
          var tmp2416 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("storeSystemFileContents", TMessageType.Exception, seqid), cancellationToken);
          await tmp2416.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task storeSystemFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2417 = new InternalStructs.storeSystemFile_args();
        await tmp2417.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2418 = new InternalStructs.storeSystemFile_result();
        try
        {
          try
          {
            tmp2418.Success = await _iAsync.storeSystemFile(tmp2417.C, tmp2417.FileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2419)
          {
            tmp2418.E = tmp2419;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("storeSystemFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2418.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2420)
        {
          var tmp2421 = $"Error occurred in {GetType().FullName}: {tmp2420.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2420, tmp2421);
          else
            Console.Error.WriteLine(tmp2421);
          var tmp2422 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("storeSystemFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp2422.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task retrieveSystemFileContents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2423 = new InternalStructs.retrieveSystemFileContents_args();
        await tmp2423.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2424 = new InternalStructs.retrieveSystemFileContents_result();
        try
        {
          tmp2424.Success = await _iAsync.retrieveSystemFileContents(tmp2423.C, tmp2423.FileName, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("retrieveSystemFileContents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2424.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2425)
        {
          var tmp2426 = $"Error occurred in {GetType().FullName}: {tmp2425.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2425, tmp2426);
          else
            Console.Error.WriteLine(tmp2426);
          var tmp2427 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("retrieveSystemFileContents", TMessageType.Exception, seqid), cancellationToken);
          await tmp2427.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task retrieveSystemFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2428 = new InternalStructs.retrieveSystemFile_args();
        await tmp2428.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2429 = new InternalStructs.retrieveSystemFile_result();
        try
        {
          try
          {
            await _iAsync.retrieveSystemFile(tmp2428.C, tmp2428.FileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2430)
          {
            tmp2429.E = tmp2430;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("retrieveSystemFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2429.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2431)
        {
          var tmp2432 = $"Error occurred in {GetType().FullName}: {tmp2431.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2431, tmp2432);
          else
            Console.Error.WriteLine(tmp2432);
          var tmp2433 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("retrieveSystemFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp2433.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task tools_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2434 = new InternalStructs.tools_args();
        await tmp2434.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2435 = new InternalStructs.tools_result();
        try
        {
          try
          {
            tmp2435.Success = await _iAsync.tools(tmp2434.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2436)
          {
            tmp2435.E = tmp2436;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2435.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2437)
        {
          var tmp2438 = $"Error occurred in {GetType().FullName}: {tmp2437.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2437, tmp2438);
          else
            Console.Error.WriteLine(tmp2438);
          var tmp2439 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Exception, seqid), cancellationToken);
          await tmp2439.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task tool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2440 = new InternalStructs.tool_args();
        await tmp2440.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2441 = new InternalStructs.tool_result();
        try
        {
          try
          {
            tmp2441.Success = await _iAsync.tool(tmp2440.C, tmp2440.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2442)
          {
            tmp2441.E = tmp2442;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2441.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2443)
        {
          var tmp2444 = $"Error occurred in {GetType().FullName}: {tmp2443.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2443, tmp2444);
          else
            Console.Error.WriteLine(tmp2444);
          var tmp2445 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Exception, seqid), cancellationToken);
          await tmp2445.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2446 = new InternalStructs.inputNumber_args();
        await tmp2446.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2447 = new InternalStructs.inputNumber_result();
        try
        {
          try
          {
            tmp2447.Success = await _iAsync.inputNumber(tmp2446.C, tmp2446.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2448)
          {
            tmp2447.E = tmp2448;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2447.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2449)
        {
          var tmp2450 = $"Error occurred in {GetType().FullName}: {tmp2449.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2449, tmp2450);
          else
            Console.Error.WriteLine(tmp2450);
          var tmp2451 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2451.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputGroupNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2452 = new InternalStructs.inputGroupNumber_args();
        await tmp2452.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2453 = new InternalStructs.inputGroupNumber_result();
        try
        {
          try
          {
            tmp2453.Success = await _iAsync.inputGroupNumber(tmp2452.C, tmp2452.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2454)
          {
            tmp2453.E = tmp2454;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2453.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2455)
        {
          var tmp2456 = $"Error occurred in {GetType().FullName}: {tmp2455.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2455, tmp2456);
          else
            Console.Error.WriteLine(tmp2456);
          var tmp2457 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2457.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2458 = new InternalStructs.outputNumber_args();
        await tmp2458.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2459 = new InternalStructs.outputNumber_result();
        try
        {
          try
          {
            tmp2459.Success = await _iAsync.outputNumber(tmp2458.C, tmp2458.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2460)
          {
            tmp2459.E = tmp2460;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2459.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2461)
        {
          var tmp2462 = $"Error occurred in {GetType().FullName}: {tmp2461.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2461, tmp2462);
          else
            Console.Error.WriteLine(tmp2462);
          var tmp2463 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2463.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputGroupNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2464 = new InternalStructs.outputGroupNumber_args();
        await tmp2464.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2465 = new InternalStructs.outputGroupNumber_result();
        try
        {
          try
          {
            tmp2465.Success = await _iAsync.outputGroupNumber(tmp2464.C, tmp2464.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2466)
          {
            tmp2465.E = tmp2466;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2465.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2467)
        {
          var tmp2468 = $"Error occurred in {GetType().FullName}: {tmp2467.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2467, tmp2468);
          else
            Console.Error.WriteLine(tmp2468);
          var tmp2469 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2469.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2470 = new InternalStructs.inputName_args();
        await tmp2470.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2471 = new InternalStructs.inputName_result();
        try
        {
          try
          {
            tmp2471.Success = await _iAsync.inputName(tmp2470.C, tmp2470.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2472)
          {
            tmp2471.E = tmp2472;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2471.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2473)
        {
          var tmp2474 = $"Error occurred in {GetType().FullName}: {tmp2473.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2473, tmp2474);
          else
            Console.Error.WriteLine(tmp2474);
          var tmp2475 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2475.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2476 = new InternalStructs.outputName_args();
        await tmp2476.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2477 = new InternalStructs.outputName_result();
        try
        {
          try
          {
            tmp2477.Success = await _iAsync.outputName(tmp2476.C, tmp2476.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2478)
          {
            tmp2477.E = tmp2478;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2477.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2479)
        {
          var tmp2480 = $"Error occurred in {GetType().FullName}: {tmp2479.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2479, tmp2480);
          else
            Console.Error.WriteLine(tmp2480);
          var tmp2481 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2481.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setInputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2482 = new InternalStructs.setInputName_args();
        await tmp2482.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setInputName(tmp2482.C, tmp2482.Num, tmp2482.Name, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2484)
        {
          var tmp2485 = $"Error occurred in {GetType().FullName}: {tmp2484.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2484, tmp2485);
          else
            Console.Error.WriteLine(tmp2485);
        }
      }

      public async global::System.Threading.Tasks.Task setOutputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2486 = new InternalStructs.setOutputName_args();
        await tmp2486.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputName(tmp2486.C, tmp2486.Num, tmp2486.Name, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2488)
        {
          var tmp2489 = $"Error occurred in {GetType().FullName}: {tmp2488.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2488, tmp2489);
          else
            Console.Error.WriteLine(tmp2489);
        }
      }

      public async global::System.Threading.Tasks.Task monitorInput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2490 = new InternalStructs.monitorInput_args();
        await tmp2490.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2491 = new InternalStructs.monitorInput_result();
        try
        {
          try
          {
            await _iAsync.monitorInput(tmp2490.C, tmp2490.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2492)
          {
            tmp2491.E = tmp2492;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2491.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2493)
        {
          var tmp2494 = $"Error occurred in {GetType().FullName}: {tmp2493.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2493, tmp2494);
          else
            Console.Error.WriteLine(tmp2494);
          var tmp2495 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2495.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorInputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2496 = new InternalStructs.monitorInputGroups_args();
        await tmp2496.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2497 = new InternalStructs.monitorInputGroups_result();
        try
        {
          try
          {
            await _iAsync.monitorInputGroups(tmp2496.C, tmp2496.GroupNum, tmp2496.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2498)
          {
            tmp2497.E = tmp2498;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2497.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2499)
        {
          var tmp2500 = $"Error occurred in {GetType().FullName}: {tmp2499.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2499, tmp2500);
          else
            Console.Error.WriteLine(tmp2500);
          var tmp2501 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2501.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2502 = new InternalStructs.monitorOutput_args();
        await tmp2502.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2503 = new InternalStructs.monitorOutput_result();
        try
        {
          try
          {
            await _iAsync.monitorOutput(tmp2502.C, tmp2502.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2504)
          {
            tmp2503.E = tmp2504;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2503.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2505)
        {
          var tmp2506 = $"Error occurred in {GetType().FullName}: {tmp2505.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2505, tmp2506);
          else
            Console.Error.WriteLine(tmp2506);
          var tmp2507 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2507.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2508 = new InternalStructs.monitorOutputGroups_args();
        await tmp2508.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2509 = new InternalStructs.monitorOutputGroups_result();
        try
        {
          try
          {
            await _iAsync.monitorOutputGroups(tmp2508.C, tmp2508.GroupNum, tmp2508.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2510)
          {
            tmp2509.E = tmp2510;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2509.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2511)
        {
          var tmp2512 = $"Error occurred in {GetType().FullName}: {tmp2511.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2511, tmp2512);
          else
            Console.Error.WriteLine(tmp2512);
          var tmp2513 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2513.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2514 = new InternalStructs.unmonitorInput_args();
        await tmp2514.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2515 = new InternalStructs.unmonitorInput_result();
        try
        {
          await _iAsync.unmonitorInput(tmp2514.C, tmp2514.Num, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2515.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2516)
        {
          var tmp2517 = $"Error occurred in {GetType().FullName}: {tmp2516.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2516, tmp2517);
          else
            Console.Error.WriteLine(tmp2517);
          var tmp2518 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2518.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2519 = new InternalStructs.unmonitorInputGroups_args();
        await tmp2519.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2520 = new InternalStructs.unmonitorInputGroups_result();
        try
        {
          await _iAsync.unmonitorInputGroups(tmp2519.C, tmp2519.GroupNum, tmp2519.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2520.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2521)
        {
          var tmp2522 = $"Error occurred in {GetType().FullName}: {tmp2521.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2521, tmp2522);
          else
            Console.Error.WriteLine(tmp2522);
          var tmp2523 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2523.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2524 = new InternalStructs.unmonitorOutput_args();
        await tmp2524.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2525 = new InternalStructs.unmonitorOutput_result();
        try
        {
          await _iAsync.unmonitorOutput(tmp2524.C, tmp2524.Num, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2525.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2526)
        {
          var tmp2527 = $"Error occurred in {GetType().FullName}: {tmp2526.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2526, tmp2527);
          else
            Console.Error.WriteLine(tmp2527);
          var tmp2528 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2528.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2529 = new InternalStructs.unmonitorOutputGroups_args();
        await tmp2529.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2530 = new InternalStructs.unmonitorOutputGroups_result();
        try
        {
          await _iAsync.unmonitorOutputGroups(tmp2529.C, tmp2529.GroupNum, tmp2529.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2530.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2531)
        {
          var tmp2532 = $"Error occurred in {GetType().FullName}: {tmp2531.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2531, tmp2532);
          else
            Console.Error.WriteLine(tmp2532);
          var tmp2533 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2533.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2534 = new InternalStructs.inputValue_args();
        await tmp2534.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2535 = new InternalStructs.inputValue_result();
        try
        {
          try
          {
            tmp2535.Success = await _iAsync.inputValue(tmp2534.C, tmp2534.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2536)
          {
            tmp2535.E = tmp2536;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2535.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2537)
        {
          var tmp2538 = $"Error occurred in {GetType().FullName}: {tmp2537.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2537, tmp2538);
          else
            Console.Error.WriteLine(tmp2538);
          var tmp2539 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2539.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputGroupsValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2540 = new InternalStructs.inputGroupsValue_args();
        await tmp2540.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2541 = new InternalStructs.inputGroupsValue_result();
        try
        {
          try
          {
            tmp2541.Success = await _iAsync.inputGroupsValue(tmp2540.C, tmp2540.GroupNum, tmp2540.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2542)
          {
            tmp2541.E = tmp2542;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2541.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2543)
        {
          var tmp2544 = $"Error occurred in {GetType().FullName}: {tmp2543.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2543, tmp2544);
          else
            Console.Error.WriteLine(tmp2544);
          var tmp2545 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2545.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2546 = new InternalStructs.outputValue_args();
        await tmp2546.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2547 = new InternalStructs.outputValue_result();
        try
        {
          try
          {
            tmp2547.Success = await _iAsync.outputValue(tmp2546.C, tmp2546.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2548)
          {
            tmp2547.E = tmp2548;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2547.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2549)
        {
          var tmp2550 = $"Error occurred in {GetType().FullName}: {tmp2549.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2549, tmp2550);
          else
            Console.Error.WriteLine(tmp2550);
          var tmp2551 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2551.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputGroupsValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2552 = new InternalStructs.outputGroupsValue_args();
        await tmp2552.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2553 = new InternalStructs.outputGroupsValue_result();
        try
        {
          try
          {
            tmp2553.Success = await _iAsync.outputGroupsValue(tmp2552.C, tmp2552.GroupNum, tmp2552.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2554)
          {
            tmp2553.E = tmp2554;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2553.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2555)
        {
          var tmp2556 = $"Error occurred in {GetType().FullName}: {tmp2555.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2555, tmp2556);
          else
            Console.Error.WriteLine(tmp2556);
          var tmp2557 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2557.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2558 = new InternalStructs.setOutput_args();
        await tmp2558.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutput(tmp2558.C, tmp2558.Num, tmp2558.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2560)
        {
          var tmp2561 = $"Error occurred in {GetType().FullName}: {tmp2560.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2560, tmp2561);
          else
            Console.Error.WriteLine(tmp2561);
        }
      }

      public async global::System.Threading.Tasks.Task setOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2562 = new InternalStructs.setOutputGroups_args();
        await tmp2562.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputGroups(tmp2562.C, tmp2562.GroupNum, tmp2562.Count, tmp2562.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2564)
        {
          var tmp2565 = $"Error occurred in {GetType().FullName}: {tmp2564.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2564, tmp2565);
          else
            Console.Error.WriteLine(tmp2565);
        }
      }

      public async global::System.Threading.Tasks.Task inputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2566 = new InternalStructs.inputAddress_args();
        await tmp2566.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2567 = new InternalStructs.inputAddress_result();
        try
        {
          try
          {
            tmp2567.Success = await _iAsync.inputAddress(tmp2566.C, tmp2566.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2568)
          {
            tmp2567.E = tmp2568;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2567.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2569)
        {
          var tmp2570 = $"Error occurred in {GetType().FullName}: {tmp2569.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2569, tmp2570);
          else
            Console.Error.WriteLine(tmp2570);
          var tmp2571 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2571.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputAddressByNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2572 = new InternalStructs.inputAddressByNumber_args();
        await tmp2572.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2573 = new InternalStructs.inputAddressByNumber_result();
        try
        {
          try
          {
            tmp2573.Success = await _iAsync.inputAddressByNumber(tmp2572.C, tmp2572.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2574)
          {
            tmp2573.E = tmp2574;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2573.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2575)
        {
          var tmp2576 = $"Error occurred in {GetType().FullName}: {tmp2575.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2575, tmp2576);
          else
            Console.Error.WriteLine(tmp2576);
          var tmp2577 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2577.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2578 = new InternalStructs.outputAddress_args();
        await tmp2578.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2579 = new InternalStructs.outputAddress_result();
        try
        {
          try
          {
            tmp2579.Success = await _iAsync.outputAddress(tmp2578.C, tmp2578.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2580)
          {
            tmp2579.E = tmp2580;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2579.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2581)
        {
          var tmp2582 = $"Error occurred in {GetType().FullName}: {tmp2581.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2581, tmp2582);
          else
            Console.Error.WriteLine(tmp2582);
          var tmp2583 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2583.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddressByNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2584 = new InternalStructs.outputAddressByNumber_args();
        await tmp2584.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2585 = new InternalStructs.outputAddressByNumber_result();
        try
        {
          try
          {
            tmp2585.Success = await _iAsync.outputAddressByNumber(tmp2584.C, tmp2584.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2586)
          {
            tmp2585.E = tmp2586;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2585.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2587)
        {
          var tmp2588 = $"Error occurred in {GetType().FullName}: {tmp2587.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2587, tmp2588);
          else
            Console.Error.WriteLine(tmp2588);
          var tmp2589 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2589.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorIOAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2590 = new InternalStructs.monitorIOAddress_args();
        await tmp2590.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2591 = new InternalStructs.monitorIOAddress_result();
        try
        {
          try
          {
            await _iAsync.monitorIOAddress(tmp2590.C, tmp2590.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2592)
          {
            tmp2591.E = tmp2592;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2591.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2593)
        {
          var tmp2594 = $"Error occurred in {GetType().FullName}: {tmp2593.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2593, tmp2594);
          else
            Console.Error.WriteLine(tmp2594);
          var tmp2595 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2595.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorIOAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2596 = new InternalStructs.unmonitorIOAddress_args();
        await tmp2596.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2597 = new InternalStructs.unmonitorIOAddress_result();
        try
        {
          await _iAsync.unmonitorIOAddress(tmp2596.C, tmp2596.Address, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2597.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2598)
        {
          var tmp2599 = $"Error occurred in {GetType().FullName}: {tmp2598.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2598, tmp2599);
          else
            Console.Error.WriteLine(tmp2599);
          var tmp2600 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2600.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2601 = new InternalStructs.inputAddressValue_args();
        await tmp2601.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2602 = new InternalStructs.inputAddressValue_result();
        try
        {
          try
          {
            tmp2602.Success = await _iAsync.inputAddressValue(tmp2601.C, tmp2601.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2603)
          {
            tmp2602.E = tmp2603;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2602.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2604)
        {
          var tmp2605 = $"Error occurred in {GetType().FullName}: {tmp2604.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2604, tmp2605);
          else
            Console.Error.WriteLine(tmp2605);
          var tmp2606 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2606.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2607 = new InternalStructs.outputAddressValue_args();
        await tmp2607.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2608 = new InternalStructs.outputAddressValue_result();
        try
        {
          try
          {
            tmp2608.Success = await _iAsync.outputAddressValue(tmp2607.C, tmp2607.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2609)
          {
            tmp2608.E = tmp2609;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2608.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2610)
        {
          var tmp2611 = $"Error occurred in {GetType().FullName}: {tmp2610.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2610, tmp2611);
          else
            Console.Error.WriteLine(tmp2611);
          var tmp2612 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2612.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ioAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2613 = new InternalStructs.ioAddressValue_args();
        await tmp2613.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2614 = new InternalStructs.ioAddressValue_result();
        try
        {
          try
          {
            tmp2614.Success = await _iAsync.ioAddressValue(tmp2613.C, tmp2613.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2615)
          {
            tmp2614.E = tmp2615;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("ioAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2614.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2616)
        {
          var tmp2617 = $"Error occurred in {GetType().FullName}: {tmp2616.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2616, tmp2617);
          else
            Console.Error.WriteLine(tmp2617);
          var tmp2618 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ioAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2618.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2619 = new InternalStructs.setOutputAddress_args();
        await tmp2619.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputAddress(tmp2619.C, tmp2619.Address, tmp2619.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2621)
        {
          var tmp2622 = $"Error occurred in {GetType().FullName}: {tmp2621.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2621, tmp2622);
          else
            Console.Error.WriteLine(tmp2622);
        }
      }

      public async global::System.Threading.Tasks.Task setNetworkInputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2623 = new InternalStructs.setNetworkInputAddress_args();
        await tmp2623.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setNetworkInputAddress(tmp2623.C, tmp2623.Address, tmp2623.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2625)
        {
          var tmp2626 = $"Error occurred in {GetType().FullName}: {tmp2625.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2625, tmp2626);
          else
            Console.Error.WriteLine(tmp2626);
        }
      }

      public async global::System.Threading.Tasks.Task mRegisterValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2627 = new InternalStructs.mRegisterValue_args();
        await tmp2627.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2628 = new InternalStructs.mRegisterValue_result();
        try
        {
          try
          {
            tmp2628.Success = await _iAsync.mRegisterValue(tmp2627.C, tmp2627.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2629)
          {
            tmp2628.E = tmp2629;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("mRegisterValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2628.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2630)
        {
          var tmp2631 = $"Error occurred in {GetType().FullName}: {tmp2630.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2630, tmp2631);
          else
            Console.Error.WriteLine(tmp2631);
          var tmp2632 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("mRegisterValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2632.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setMRegisterValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2633 = new InternalStructs.setMRegisterValue_args();
        await tmp2633.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setMRegisterValue(tmp2633.C, tmp2633.Index, tmp2633.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2635)
        {
          var tmp2636 = $"Error occurred in {GetType().FullName}: {tmp2635.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2635, tmp2636);
          else
            Console.Error.WriteLine(tmp2636);
        }
      }

      public async global::System.Threading.Tasks.Task fieldBusStatusInputGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2637 = new InternalStructs.fieldBusStatusInputGroup_args();
        await tmp2637.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2638 = new InternalStructs.fieldBusStatusInputGroup_result();
        try
        {
          try
          {
            tmp2638.Success = await _iAsync.fieldBusStatusInputGroup(tmp2637.C, tmp2637.BusType, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2639)
          {
            tmp2638.E = tmp2639;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2638.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2640)
        {
          var tmp2641 = $"Error occurred in {GetType().FullName}: {tmp2640.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2640, tmp2641);
          else
            Console.Error.WriteLine(tmp2641);
          var tmp2642 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp2642.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task controlGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2643 = new InternalStructs.controlGroups_args();
        await tmp2643.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2644 = new InternalStructs.controlGroups_result();
        try
        {
          tmp2644.Success = await _iAsync.controlGroups(tmp2643.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2644.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2645)
        {
          var tmp2646 = $"Error occurred in {GetType().FullName}: {tmp2645.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2645, tmp2646);
          else
            Console.Error.WriteLine(tmp2646);
          var tmp2647 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2647.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentControlGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2648 = new InternalStructs.currentControlGroup_args();
        await tmp2648.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2649 = new InternalStructs.currentControlGroup_result();
        try
        {
          tmp2649.Success = await _iAsync.currentControlGroup(tmp2648.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2649.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2650)
        {
          var tmp2651 = $"Error occurred in {GetType().FullName}: {tmp2650.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2650, tmp2651);
          else
            Console.Error.WriteLine(tmp2651);
          var tmp2652 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp2652.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task robotCount_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2653 = new InternalStructs.robotCount_args();
        await tmp2653.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2654 = new InternalStructs.robotCount_result();
        try
        {
          tmp2654.Success = await _iAsync.robotCount(tmp2653.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2654.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2655)
        {
          var tmp2656 = $"Error occurred in {GetType().FullName}: {tmp2655.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2655, tmp2656);
          else
            Console.Error.WriteLine(tmp2656);
          var tmp2657 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Exception, seqid), cancellationToken);
          await tmp2657.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentRobot_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2658 = new InternalStructs.currentRobot_args();
        await tmp2658.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2659 = new InternalStructs.currentRobot_result();
        try
        {
          tmp2659.Success = await _iAsync.currentRobot(tmp2658.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2659.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2660)
        {
          var tmp2661 = $"Error occurred in {GetType().FullName}: {tmp2660.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2660, tmp2661);
          else
            Console.Error.WriteLine(tmp2661);
          var tmp2662 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Exception, seqid), cancellationToken);
          await tmp2662.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2663 = new InternalStructs.variable_args();
        await tmp2663.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2664 = new InternalStructs.variable_result();
        try
        {
          try
          {
            tmp2664.Success = await _iAsync.variable(tmp2663.C, tmp2663.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2665)
          {
            tmp2664.E = tmp2665;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2664.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2666)
        {
          var tmp2667 = $"Error occurred in {GetType().FullName}: {tmp2666.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2666, tmp2667);
          else
            Console.Error.WriteLine(tmp2667);
          var tmp2668 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2668.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableByAddr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2669 = new InternalStructs.variableByAddr_args();
        await tmp2669.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2670 = new InternalStructs.variableByAddr_result();
        try
        {
          try
          {
            tmp2670.Success = await _iAsync.variableByAddr(tmp2669.C, tmp2669.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2671)
          {
            tmp2670.E = tmp2671;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2670.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2672)
        {
          var tmp2673 = $"Error occurred in {GetType().FullName}: {tmp2672.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2672, tmp2673);
          else
            Console.Error.WriteLine(tmp2673);
          var tmp2674 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Exception, seqid), cancellationToken);
          await tmp2674.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2675 = new InternalStructs.setVariable_args();
        await tmp2675.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2676 = new InternalStructs.setVariable_result();
        try
        {
          try
          {
            await _iAsync.setVariable(tmp2675.C, tmp2675.Name, tmp2675.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2677)
          {
            tmp2676.E = tmp2677;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2676.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2678)
        {
          var tmp2679 = $"Error occurred in {GetType().FullName}: {tmp2678.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2678, tmp2679);
          else
            Console.Error.WriteLine(tmp2679);
          var tmp2680 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2680.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariableByAddr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2681 = new InternalStructs.setVariableByAddr_args();
        await tmp2681.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2682 = new InternalStructs.setVariableByAddr_result();
        try
        {
          try
          {
            await _iAsync.setVariableByAddr(tmp2681.C, tmp2681.Addr, tmp2681.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2683)
          {
            tmp2682.E = tmp2683;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2682.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2684)
        {
          var tmp2685 = $"Error occurred in {GetType().FullName}: {tmp2684.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2684, tmp2685);
          else
            Console.Error.WriteLine(tmp2685);
          var tmp2686 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Exception, seqid), cancellationToken);
          await tmp2686.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableAddrByNameAndSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2687 = new InternalStructs.variableAddrByNameAndSpace_args();
        await tmp2687.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2688 = new InternalStructs.variableAddrByNameAndSpace_result();
        try
        {
          try
          {
            tmp2688.Success = await _iAsync.variableAddrByNameAndSpace(tmp2687.C, tmp2687.Name, tmp2687.Space, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2689)
          {
            tmp2688.E = tmp2689;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2688.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2690)
        {
          var tmp2691 = $"Error occurred in {GetType().FullName}: {tmp2690.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2690, tmp2691);
          else
            Console.Error.WriteLine(tmp2691);
          var tmp2692 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp2692.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableAddrByName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2693 = new InternalStructs.variableAddrByName_args();
        await tmp2693.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2694 = new InternalStructs.variableAddrByName_result();
        try
        {
          try
          {
            tmp2694.Success = await _iAsync.variableAddrByName(tmp2693.C, tmp2693.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2695)
          {
            tmp2694.E = tmp2695;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2694.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2696)
        {
          var tmp2697 = $"Error occurred in {GetType().FullName}: {tmp2696.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2696, tmp2697);
          else
            Console.Error.WriteLine(tmp2697);
          var tmp2698 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2698.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariableName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2699 = new InternalStructs.setVariableName_args();
        await tmp2699.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2700 = new InternalStructs.setVariableName_result();
        try
        {
          try
          {
            await _iAsync.setVariableName(tmp2699.C, tmp2699.Addr, tmp2699.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2701)
          {
            tmp2700.E = tmp2701;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2700.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2702)
        {
          var tmp2703 = $"Error occurred in {GetType().FullName}: {tmp2702.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2702, tmp2703);
          else
            Console.Error.WriteLine(tmp2703);
          var tmp2704 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2704.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2705 = new InternalStructs.monitorVariable_args();
        await tmp2705.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2706 = new InternalStructs.monitorVariable_result();
        try
        {
          try
          {
            await _iAsync.monitorVariable(tmp2705.C, tmp2705.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2707)
          {
            tmp2706.E = tmp2707;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2706.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2708)
        {
          var tmp2709 = $"Error occurred in {GetType().FullName}: {tmp2708.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2708, tmp2709);
          else
            Console.Error.WriteLine(tmp2709);
          var tmp2710 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2710.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2711 = new InternalStructs.unmonitorVariable_args();
        await tmp2711.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2712 = new InternalStructs.unmonitorVariable_result();
        try
        {
          try
          {
            await _iAsync.unmonitorVariable(tmp2711.C, tmp2711.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2713)
          {
            tmp2712.E = tmp2713;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2712.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2714)
        {
          var tmp2715 = $"Error occurred in {GetType().FullName}: {tmp2714.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2714, tmp2715);
          else
            Console.Error.WriteLine(tmp2715);
          var tmp2716 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2716.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableRange_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2717 = new InternalStructs.variableRange_args();
        await tmp2717.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2718 = new InternalStructs.variableRange_result();
        try
        {
          try
          {
            tmp2718.Success = await _iAsync.variableRange(tmp2717.C, tmp2717.Space, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2719)
          {
            tmp2718.E = tmp2719;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableRange", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2718.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2720)
        {
          var tmp2721 = $"Error occurred in {GetType().FullName}: {tmp2720.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2720, tmp2721);
          else
            Console.Error.WriteLine(tmp2721);
          var tmp2722 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableRange", TMessageType.Exception, seqid), cancellationToken);
          await tmp2722.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task zone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2723 = new InternalStructs.zone_args();
        await tmp2723.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2724 = new InternalStructs.zone_result();
        try
        {
          try
          {
            tmp2724.Success = await _iAsync.zone(tmp2723.C, tmp2723.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2725)
          {
            tmp2724.E = tmp2725;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2724.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2726)
        {
          var tmp2727 = $"Error occurred in {GetType().FullName}: {tmp2726.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2726, tmp2727);
          else
            Console.Error.WriteLine(tmp2727);
          var tmp2728 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2728.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task newZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2729 = new InternalStructs.newZone_args();
        await tmp2729.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2730 = new InternalStructs.newZone_result();
        try
        {
          try
          {
            tmp2730.Success = await _iAsync.newZone(tmp2729.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2731)
          {
            tmp2730.E = tmp2731;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2730.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2732)
        {
          var tmp2733 = $"Error occurred in {GetType().FullName}: {tmp2732.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2732, tmp2733);
          else
            Console.Error.WriteLine(tmp2733);
          var tmp2734 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2734.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task modifyZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2735 = new InternalStructs.modifyZone_args();
        await tmp2735.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2736 = new InternalStructs.modifyZone_result();
        try
        {
          try
          {
            await _iAsync.modifyZone(tmp2735.C, tmp2735.Index, tmp2735.Z, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2737)
          {
            tmp2736.E = tmp2737;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2736.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2738)
        {
          var tmp2739 = $"Error occurred in {GetType().FullName}: {tmp2738.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2738, tmp2739);
          else
            Console.Error.WriteLine(tmp2739);
          var tmp2740 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2740.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2741 = new InternalStructs.deleteZone_args();
        await tmp2741.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2742 = new InternalStructs.deleteZone_result();
        try
        {
          try
          {
            await _iAsync.deleteZone(tmp2741.C, tmp2741.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2743)
          {
            tmp2742.E = tmp2743;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2742.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2744)
        {
          var tmp2745 = $"Error occurred in {GetType().FullName}: {tmp2744.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2744, tmp2745);
          else
            Console.Error.WriteLine(tmp2745);
          var tmp2746 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2746.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task userFrames_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2747 = new InternalStructs.userFrames_args();
        await tmp2747.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2748 = new InternalStructs.userFrames_result();
        try
        {
          try
          {
            tmp2748.Success = await _iAsync.userFrames(tmp2747.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2749)
          {
            tmp2748.E = tmp2749;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2748.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2750)
        {
          var tmp2751 = $"Error occurred in {GetType().FullName}: {tmp2750.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2750, tmp2751);
          else
            Console.Error.WriteLine(tmp2751);
          var tmp2752 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Exception, seqid), cancellationToken);
          await tmp2752.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task userFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2753 = new InternalStructs.userFrame_args();
        await tmp2753.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2754 = new InternalStructs.userFrame_result();
        try
        {
          try
          {
            tmp2754.Success = await _iAsync.userFrame(tmp2753.C, tmp2753.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2755)
          {
            tmp2754.E = tmp2755;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2754.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2756)
        {
          var tmp2757 = $"Error occurred in {GetType().FullName}: {tmp2756.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2756, tmp2757);
          else
            Console.Error.WriteLine(tmp2757);
          var tmp2758 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2758.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task newUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2759 = new InternalStructs.newUserFrame_args();
        await tmp2759.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2760 = new InternalStructs.newUserFrame_result();
        try
        {
          try
          {
            tmp2760.Success = await _iAsync.newUserFrame(tmp2759.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2761)
          {
            tmp2760.E = tmp2761;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2760.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2762)
        {
          var tmp2763 = $"Error occurred in {GetType().FullName}: {tmp2762.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2762, tmp2763);
          else
            Console.Error.WriteLine(tmp2763);
          var tmp2764 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2764.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2765 = new InternalStructs.setUserFrame_args();
        await tmp2765.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2766 = new InternalStructs.setUserFrame_result();
        try
        {
          try
          {
            await _iAsync.setUserFrame(tmp2765.C, tmp2765.Index, tmp2765.F, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2767)
          {
            tmp2766.E = tmp2767;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2766.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2768)
        {
          var tmp2769 = $"Error occurred in {GetType().FullName}: {tmp2768.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2768, tmp2769);
          else
            Console.Error.WriteLine(tmp2769);
          var tmp2770 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2770.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2771 = new InternalStructs.deleteUserFrame_args();
        await tmp2771.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2772 = new InternalStructs.deleteUserFrame_result();
        try
        {
          try
          {
            await _iAsync.deleteUserFrame(tmp2771.C, tmp2771.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2773)
          {
            tmp2772.E = tmp2773;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2772.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2774)
        {
          var tmp2775 = $"Error occurred in {GetType().FullName}: {tmp2774.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2774, tmp2775);
          else
            Console.Error.WriteLine(tmp2775);
          var tmp2776 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2776.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task networkInterfaceAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2777 = new InternalStructs.networkInterfaceAddress_args();
        await tmp2777.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2778 = new InternalStructs.networkInterfaceAddress_result();
        try
        {
          try
          {
            tmp2778.Success = await _iAsync.networkInterfaceAddress(tmp2777.C, tmp2777.ControllerInterface, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2779)
          {
            tmp2778.E = tmp2779;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2778.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2780)
        {
          var tmp2781 = $"Error occurred in {GetType().FullName}: {tmp2780.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2780, tmp2781);
          else
            Console.Error.WriteLine(tmp2781);
          var tmp2782 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2782.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task requestNetworkAccess_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2783 = new InternalStructs.requestNetworkAccess_args();
        await tmp2783.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2784 = new InternalStructs.requestNetworkAccess_result();
        try
        {
          try
          {
            tmp2784.Success = await _iAsync.requestNetworkAccess(tmp2783.C, tmp2783.ControllerInterface, tmp2783.Port, tmp2783.Protocol, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2785)
          {
            tmp2784.E = tmp2785;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2784.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2786)
        {
          var tmp2787 = $"Error occurred in {GetType().FullName}: {tmp2786.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2786, tmp2787);
          else
            Console.Error.WriteLine(tmp2787);
          var tmp2788 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Exception, seqid), cancellationToken);
          await tmp2788.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeNetworkAccess_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2789 = new InternalStructs.removeNetworkAccess_args();
        await tmp2789.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2790 = new InternalStructs.removeNetworkAccess_result();
        try
        {
          try
          {
            await _iAsync.removeNetworkAccess(tmp2789.C, tmp2789.AccessHandle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2791)
          {
            tmp2790.E = tmp2791;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2790.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2792)
        {
          var tmp2793 = $"Error occurred in {GetType().FullName}: {tmp2792.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2792, tmp2793);
          else
            Console.Error.WriteLine(tmp2793);
          var tmp2794 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Exception, seqid), cancellationToken);
          await tmp2794.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task requestNetworkService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2795 = new InternalStructs.requestNetworkService_args();
        await tmp2795.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2796 = new InternalStructs.requestNetworkService_result();
        try
        {
          try
          {
            tmp2796.Success = await _iAsync.requestNetworkService(tmp2795.C, tmp2795.ControllerInterface, tmp2795.Port, tmp2795.Protocol, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2797)
          {
            tmp2796.E = tmp2797;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2796.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2798)
        {
          var tmp2799 = $"Error occurred in {GetType().FullName}: {tmp2798.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2798, tmp2799);
          else
            Console.Error.WriteLine(tmp2799);
          var tmp2800 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Exception, seqid), cancellationToken);
          await tmp2800.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeNetworkService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2801 = new InternalStructs.removeNetworkService_args();
        await tmp2801.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2802 = new InternalStructs.removeNetworkService_result();
        try
        {
          try
          {
            await _iAsync.removeNetworkService(tmp2801.C, tmp2801.AccessHandle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2803)
          {
            tmp2802.E = tmp2803;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2802.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2804)
        {
          var tmp2805 = $"Error occurred in {GetType().FullName}: {tmp2804.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2804, tmp2805);
          else
            Console.Error.WriteLine(tmp2805);
          var tmp2806 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Exception, seqid), cancellationToken);
          await tmp2806.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getGaugeSensorSpec_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2807 = new InternalStructs.getGaugeSensorSpec_args();
        await tmp2807.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2808 = new InternalStructs.getGaugeSensorSpec_result();
        try
        {
          tmp2808.Success = await _iAsync.getGaugeSensorSpec(tmp2807.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getGaugeSensorSpec", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2808.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2809)
        {
          var tmp2810 = $"Error occurred in {GetType().FullName}: {tmp2809.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2809, tmp2810);
          else
            Console.Error.WriteLine(tmp2810);
          var tmp2811 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getGaugeSensorSpec", TMessageType.Exception, seqid), cancellationToken);
          await tmp2811.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task gaugeSensorCalibration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2812 = new InternalStructs.gaugeSensorCalibration_args();
        await tmp2812.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2813 = new InternalStructs.gaugeSensorCalibration_result();
        try
        {
          await _iAsync.gaugeSensorCalibration(tmp2812.C, tmp2812.Channel, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("gaugeSensorCalibration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2813.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2814)
        {
          var tmp2815 = $"Error occurred in {GetType().FullName}: {tmp2814.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2814, tmp2815);
          else
            Console.Error.WriteLine(tmp2815);
          var tmp2816 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("gaugeSensorCalibration", TMessageType.Exception, seqid), cancellationToken);
          await tmp2816.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class requestPermissions_args : TBase
      {
        private long _c;
        private HashSet<string> _permissions;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<string> Permissions
        {
          get
          {
            return _permissions;
          }
          set
          {
            __isset.permissions = true;
            this._permissions = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permissions;
        }

        public requestPermissions_args()
        {
        }

        public requestPermissions_args DeepCopy()
        {
          var tmp2817 = new requestPermissions_args();
          if(__isset.c)
          {
            tmp2817.C = this.C;
          }
          tmp2817.__isset.c = this.__isset.c;
          if((Permissions != null) && __isset.permissions)
          {
            tmp2817.Permissions = this.Permissions.DeepCopy();
          }
          tmp2817.__isset.permissions = this.__isset.permissions;
          return tmp2817;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2818 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Permissions = new HashSet<string>(_set2818.Count);
                      for(int _i2819 = 0; _i2819 < _set2818.Count; ++_i2819)
                      {
                        string _elem2820;
                        _elem2820 = await iprot.ReadStringAsync(cancellationToken);
                        Permissions.Add(_elem2820);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2821 = new TStruct("requestPermissions_args");
            await oprot.WriteStructBeginAsync(tmp2821, cancellationToken);
            var tmp2822 = new TField();
            if(__isset.c)
            {
              tmp2822.Name = "c";
              tmp2822.Type = TType.I64;
              tmp2822.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2822, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permissions != null) && __isset.permissions)
            {
              tmp2822.Name = "permissions";
              tmp2822.Type = TType.Set;
              tmp2822.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2822, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, Permissions.Count), cancellationToken);
              foreach (string _iter2823 in Permissions)
              {
                await oprot.WriteStringAsync(_iter2823, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestPermissions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permissions == other.__isset.permissions) && ((!__isset.permissions) || (TCollections.Equals(Permissions, other.Permissions))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permissions != null) && __isset.permissions)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Permissions);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2824 = new StringBuilder("requestPermissions_args(");
          int tmp2825 = 0;
          if(__isset.c)
          {
            if(0 < tmp2825++) { tmp2824.Append(", "); }
            tmp2824.Append("C: ");
            C.ToString(tmp2824);
          }
          if((Permissions != null) && __isset.permissions)
          {
            if(0 < tmp2825++) { tmp2824.Append(", "); }
            tmp2824.Append("Permissions: ");
            Permissions.ToString(tmp2824);
          }
          tmp2824.Append(')');
          return tmp2824.ToString();
        }
      }


      public partial class requestPermissions_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestPermissions_result()
        {
        }

        public requestPermissions_result DeepCopy()
        {
          var tmp2826 = new requestPermissions_result();
          if(__isset.success)
          {
            tmp2826.Success = this.Success;
          }
          tmp2826.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2826.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2826.__isset.e = this.__isset.e;
          return tmp2826;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2827 = new TStruct("requestPermissions_result");
            await oprot.WriteStructBeginAsync(tmp2827, cancellationToken);
            var tmp2828 = new TField();

            if(this.__isset.success)
            {
              tmp2828.Name = "Success";
              tmp2828.Type = TType.Bool;
              tmp2828.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2828, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2828.Name = "E";
                tmp2828.Type = TType.Struct;
                tmp2828.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2828, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestPermissions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2829 = new StringBuilder("requestPermissions_result(");
          int tmp2830 = 0;
          if(__isset.success)
          {
            if(0 < tmp2830++) { tmp2829.Append(", "); }
            tmp2829.Append("Success: ");
            Success.ToString(tmp2829);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2830++) { tmp2829.Append(", "); }
            tmp2829.Append("E: ");
            E.ToString(tmp2829);
          }
          tmp2829.Append(')');
          return tmp2829.ToString();
        }
      }


      public partial class havePermission_args : TBase
      {
        private long _c;
        private string _permission;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Permission
        {
          get
          {
            return _permission;
          }
          set
          {
            __isset.permission = true;
            this._permission = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permission;
        }

        public havePermission_args()
        {
        }

        public havePermission_args DeepCopy()
        {
          var tmp2831 = new havePermission_args();
          if(__isset.c)
          {
            tmp2831.C = this.C;
          }
          tmp2831.__isset.c = this.__isset.c;
          if((Permission != null) && __isset.permission)
          {
            tmp2831.Permission = this.Permission;
          }
          tmp2831.__isset.permission = this.__isset.permission;
          return tmp2831;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Permission = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2832 = new TStruct("havePermission_args");
            await oprot.WriteStructBeginAsync(tmp2832, cancellationToken);
            var tmp2833 = new TField();
            if(__isset.c)
            {
              tmp2833.Name = "c";
              tmp2833.Type = TType.I64;
              tmp2833.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2833, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permission != null) && __isset.permission)
            {
              tmp2833.Name = "permission";
              tmp2833.Type = TType.String;
              tmp2833.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2833, cancellationToken);
              await oprot.WriteStringAsync(Permission, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is havePermission_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permission == other.__isset.permission) && ((!__isset.permission) || (global::System.Object.Equals(Permission, other.Permission))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permission != null) && __isset.permission)
            {
              hashcode = (hashcode * 397) + Permission.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2834 = new StringBuilder("havePermission_args(");
          int tmp2835 = 0;
          if(__isset.c)
          {
            if(0 < tmp2835++) { tmp2834.Append(", "); }
            tmp2834.Append("C: ");
            C.ToString(tmp2834);
          }
          if((Permission != null) && __isset.permission)
          {
            if(0 < tmp2835++) { tmp2834.Append(", "); }
            tmp2834.Append("Permission: ");
            Permission.ToString(tmp2834);
          }
          tmp2834.Append(')');
          return tmp2834.ToString();
        }
      }


      public partial class havePermission_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public havePermission_result()
        {
        }

        public havePermission_result DeepCopy()
        {
          var tmp2836 = new havePermission_result();
          if(__isset.success)
          {
            tmp2836.Success = this.Success;
          }
          tmp2836.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2836.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2836.__isset.e = this.__isset.e;
          return tmp2836;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2837 = new TStruct("havePermission_result");
            await oprot.WriteStructBeginAsync(tmp2837, cancellationToken);
            var tmp2838 = new TField();

            if(this.__isset.success)
            {
              tmp2838.Name = "Success";
              tmp2838.Type = TType.Bool;
              tmp2838.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2838, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2838.Name = "E";
                tmp2838.Type = TType.Struct;
                tmp2838.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2838, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is havePermission_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2839 = new StringBuilder("havePermission_result(");
          int tmp2840 = 0;
          if(__isset.success)
          {
            if(0 < tmp2840++) { tmp2839.Append(", "); }
            tmp2839.Append("Success: ");
            Success.ToString(tmp2839);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2840++) { tmp2839.Append(", "); }
            tmp2839.Append("E: ");
            E.ToString(tmp2839);
          }
          tmp2839.Append(')');
          return tmp2839.ToString();
        }
      }


      public partial class relinquishPermissions_args : TBase
      {
        private long _c;
        private HashSet<string> _permissions;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<string> Permissions
        {
          get
          {
            return _permissions;
          }
          set
          {
            __isset.permissions = true;
            this._permissions = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permissions;
        }

        public relinquishPermissions_args()
        {
        }

        public relinquishPermissions_args DeepCopy()
        {
          var tmp2841 = new relinquishPermissions_args();
          if(__isset.c)
          {
            tmp2841.C = this.C;
          }
          tmp2841.__isset.c = this.__isset.c;
          if((Permissions != null) && __isset.permissions)
          {
            tmp2841.Permissions = this.Permissions.DeepCopy();
          }
          tmp2841.__isset.permissions = this.__isset.permissions;
          return tmp2841;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2842 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Permissions = new HashSet<string>(_set2842.Count);
                      for(int _i2843 = 0; _i2843 < _set2842.Count; ++_i2843)
                      {
                        string _elem2844;
                        _elem2844 = await iprot.ReadStringAsync(cancellationToken);
                        Permissions.Add(_elem2844);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2845 = new TStruct("relinquishPermissions_args");
            await oprot.WriteStructBeginAsync(tmp2845, cancellationToken);
            var tmp2846 = new TField();
            if(__isset.c)
            {
              tmp2846.Name = "c";
              tmp2846.Type = TType.I64;
              tmp2846.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2846, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permissions != null) && __isset.permissions)
            {
              tmp2846.Name = "permissions";
              tmp2846.Type = TType.Set;
              tmp2846.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2846, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, Permissions.Count), cancellationToken);
              foreach (string _iter2847 in Permissions)
              {
                await oprot.WriteStringAsync(_iter2847, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is relinquishPermissions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permissions == other.__isset.permissions) && ((!__isset.permissions) || (TCollections.Equals(Permissions, other.Permissions))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permissions != null) && __isset.permissions)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Permissions);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2848 = new StringBuilder("relinquishPermissions_args(");
          int tmp2849 = 0;
          if(__isset.c)
          {
            if(0 < tmp2849++) { tmp2848.Append(", "); }
            tmp2848.Append("C: ");
            C.ToString(tmp2848);
          }
          if((Permissions != null) && __isset.permissions)
          {
            if(0 < tmp2849++) { tmp2848.Append(", "); }
            tmp2848.Append("Permissions: ");
            Permissions.ToString(tmp2848);
          }
          tmp2848.Append(')');
          return tmp2848.ToString();
        }
      }


      public partial class relinquishPermissions_result : TBase
      {

        public relinquishPermissions_result()
        {
        }

        public relinquishPermissions_result DeepCopy()
        {
          var tmp2850 = new relinquishPermissions_result();
          return tmp2850;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2851 = new TStruct("relinquishPermissions_result");
            await oprot.WriteStructBeginAsync(tmp2851, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is relinquishPermissions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2852 = new StringBuilder("relinquishPermissions_result(");
          tmp2852.Append(')');
          return tmp2852.ToString();
        }
      }


      public partial class connect_args : TBase
      {
        private long _c;
        private string _hostName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string HostName
        {
          get
          {
            return _hostName;
          }
          set
          {
            __isset.hostName = true;
            this._hostName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool hostName;
        }

        public connect_args()
        {
        }

        public connect_args DeepCopy()
        {
          var tmp2854 = new connect_args();
          if(__isset.c)
          {
            tmp2854.C = this.C;
          }
          tmp2854.__isset.c = this.__isset.c;
          if((HostName != null) && __isset.hostName)
          {
            tmp2854.HostName = this.HostName;
          }
          tmp2854.__isset.hostName = this.__isset.hostName;
          return tmp2854;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HostName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2855 = new TStruct("connect_args");
            await oprot.WriteStructBeginAsync(tmp2855, cancellationToken);
            var tmp2856 = new TField();
            if(__isset.c)
            {
              tmp2856.Name = "c";
              tmp2856.Type = TType.I64;
              tmp2856.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2856, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HostName != null) && __isset.hostName)
            {
              tmp2856.Name = "hostName";
              tmp2856.Type = TType.String;
              tmp2856.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2856, cancellationToken);
              await oprot.WriteStringAsync(HostName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connect_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.hostName == other.__isset.hostName) && ((!__isset.hostName) || (global::System.Object.Equals(HostName, other.HostName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((HostName != null) && __isset.hostName)
            {
              hashcode = (hashcode * 397) + HostName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2857 = new StringBuilder("connect_args(");
          int tmp2858 = 0;
          if(__isset.c)
          {
            if(0 < tmp2858++) { tmp2857.Append(", "); }
            tmp2857.Append("C: ");
            C.ToString(tmp2857);
          }
          if((HostName != null) && __isset.hostName)
          {
            if(0 < tmp2858++) { tmp2857.Append(", "); }
            tmp2857.Append("HostName: ");
            HostName.ToString(tmp2857);
          }
          tmp2857.Append(')');
          return tmp2857.ToString();
        }
      }


      public partial class connect_result : TBase
      {

        public connect_result()
        {
        }

        public connect_result DeepCopy()
        {
          var tmp2859 = new connect_result();
          return tmp2859;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2860 = new TStruct("connect_result");
            await oprot.WriteStructBeginAsync(tmp2860, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connect_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2861 = new StringBuilder("connect_result(");
          tmp2861.Append(')');
          return tmp2861.ToString();
        }
      }


      public partial class disconnect_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public disconnect_args()
        {
        }

        public disconnect_args DeepCopy()
        {
          var tmp2863 = new disconnect_args();
          if(__isset.c)
          {
            tmp2863.C = this.C;
          }
          tmp2863.__isset.c = this.__isset.c;
          return tmp2863;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2864 = new TStruct("disconnect_args");
            await oprot.WriteStructBeginAsync(tmp2864, cancellationToken);
            var tmp2865 = new TField();
            if(__isset.c)
            {
              tmp2865.Name = "c";
              tmp2865.Type = TType.I64;
              tmp2865.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2865, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is disconnect_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2866 = new StringBuilder("disconnect_args(");
          int tmp2867 = 0;
          if(__isset.c)
          {
            if(0 < tmp2867++) { tmp2866.Append(", "); }
            tmp2866.Append("C: ");
            C.ToString(tmp2866);
          }
          tmp2866.Append(')');
          return tmp2866.ToString();
        }
      }


      public partial class disconnect_result : TBase
      {

        public disconnect_result()
        {
        }

        public disconnect_result DeepCopy()
        {
          var tmp2868 = new disconnect_result();
          return tmp2868;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2869 = new TStruct("disconnect_result");
            await oprot.WriteStructBeginAsync(tmp2869, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is disconnect_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2870 = new StringBuilder("disconnect_result(");
          tmp2870.Append(')');
          return tmp2870.ToString();
        }
      }


      public partial class subscribeEventTypes_args : TBase
      {
        private long _c;
        private HashSet<global::Yaskawa.Ext.API.ControllerEventType> _types;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.ControllerEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool types;
        }

        public subscribeEventTypes_args()
        {
        }

        public subscribeEventTypes_args DeepCopy()
        {
          var tmp2872 = new subscribeEventTypes_args();
          if(__isset.c)
          {
            tmp2872.C = this.C;
          }
          tmp2872.__isset.c = this.__isset.c;
          if((Types != null) && __isset.types)
          {
            tmp2872.Types = this.Types.DeepCopy();
          }
          tmp2872.__isset.types = this.__isset.types;
          return tmp2872;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2873 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.ControllerEventType>(_set2873.Count);
                      for(int _i2874 = 0; _i2874 < _set2873.Count; ++_i2874)
                      {
                        global::Yaskawa.Ext.API.ControllerEventType _elem2875;
                        _elem2875 = (global::Yaskawa.Ext.API.ControllerEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem2875);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2876 = new TStruct("subscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp2876, cancellationToken);
            var tmp2877 = new TField();
            if(__isset.c)
            {
              tmp2877.Name = "c";
              tmp2877.Type = TType.I64;
              tmp2877.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2877, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp2877.Name = "types";
              tmp2877.Type = TType.Set;
              tmp2877.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2877, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.ControllerEventType _iter2878 in Types)
              {
                await oprot.WriteI32Async((int)_iter2878, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2879 = new StringBuilder("subscribeEventTypes_args(");
          int tmp2880 = 0;
          if(__isset.c)
          {
            if(0 < tmp2880++) { tmp2879.Append(", "); }
            tmp2879.Append("C: ");
            C.ToString(tmp2879);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp2880++) { tmp2879.Append(", "); }
            tmp2879.Append("Types: ");
            Types.ToString(tmp2879);
          }
          tmp2879.Append(')');
          return tmp2879.ToString();
        }
      }


      public partial class subscribeEventTypes_result : TBase
      {

        public subscribeEventTypes_result()
        {
        }

        public subscribeEventTypes_result DeepCopy()
        {
          var tmp2881 = new subscribeEventTypes_result();
          return tmp2881;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2882 = new TStruct("subscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp2882, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2883 = new StringBuilder("subscribeEventTypes_result(");
          tmp2883.Append(')');
          return tmp2883.ToString();
        }
      }


      public partial class unsubscribeEventTypes_args : TBase
      {
        private long _c;
        private HashSet<global::Yaskawa.Ext.API.ControllerEventType> _types;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.ControllerEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool types;
        }

        public unsubscribeEventTypes_args()
        {
        }

        public unsubscribeEventTypes_args DeepCopy()
        {
          var tmp2885 = new unsubscribeEventTypes_args();
          if(__isset.c)
          {
            tmp2885.C = this.C;
          }
          tmp2885.__isset.c = this.__isset.c;
          if((Types != null) && __isset.types)
          {
            tmp2885.Types = this.Types.DeepCopy();
          }
          tmp2885.__isset.types = this.__isset.types;
          return tmp2885;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2886 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.ControllerEventType>(_set2886.Count);
                      for(int _i2887 = 0; _i2887 < _set2886.Count; ++_i2887)
                      {
                        global::Yaskawa.Ext.API.ControllerEventType _elem2888;
                        _elem2888 = (global::Yaskawa.Ext.API.ControllerEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem2888);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2889 = new TStruct("unsubscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp2889, cancellationToken);
            var tmp2890 = new TField();
            if(__isset.c)
            {
              tmp2890.Name = "c";
              tmp2890.Type = TType.I64;
              tmp2890.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2890, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp2890.Name = "types";
              tmp2890.Type = TType.Set;
              tmp2890.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2890, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.ControllerEventType _iter2891 in Types)
              {
                await oprot.WriteI32Async((int)_iter2891, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2892 = new StringBuilder("unsubscribeEventTypes_args(");
          int tmp2893 = 0;
          if(__isset.c)
          {
            if(0 < tmp2893++) { tmp2892.Append(", "); }
            tmp2892.Append("C: ");
            C.ToString(tmp2892);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp2893++) { tmp2892.Append(", "); }
            tmp2892.Append("Types: ");
            Types.ToString(tmp2892);
          }
          tmp2892.Append(')');
          return tmp2892.ToString();
        }
      }


      public partial class unsubscribeEventTypes_result : TBase
      {

        public unsubscribeEventTypes_result()
        {
        }

        public unsubscribeEventTypes_result DeepCopy()
        {
          var tmp2894 = new unsubscribeEventTypes_result();
          return tmp2894;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2895 = new TStruct("unsubscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp2895, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2896 = new StringBuilder("unsubscribeEventTypes_result(");
          tmp2896.Append(')');
          return tmp2896.ToString();
        }
      }


      public partial class events_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public events_args()
        {
        }

        public events_args DeepCopy()
        {
          var tmp2898 = new events_args();
          if(__isset.c)
          {
            tmp2898.C = this.C;
          }
          tmp2898.__isset.c = this.__isset.c;
          return tmp2898;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2899 = new TStruct("events_args");
            await oprot.WriteStructBeginAsync(tmp2899, cancellationToken);
            var tmp2900 = new TField();
            if(__isset.c)
            {
              tmp2900.Name = "c";
              tmp2900.Type = TType.I64;
              tmp2900.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2900, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2901 = new StringBuilder("events_args(");
          int tmp2902 = 0;
          if(__isset.c)
          {
            if(0 < tmp2902++) { tmp2901.Append(", "); }
            tmp2901.Append("C: ");
            C.ToString(tmp2901);
          }
          tmp2901.Append(')');
          return tmp2901.ToString();
        }
      }


      public partial class events_result : TBase
      {
        private List<global::Yaskawa.Ext.API.ControllerEvent> _success;

        public List<global::Yaskawa.Ext.API.ControllerEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public events_result()
        {
        }

        public events_result DeepCopy()
        {
          var tmp2903 = new events_result();
          if((Success != null) && __isset.success)
          {
            tmp2903.Success = this.Success.DeepCopy();
          }
          tmp2903.__isset.success = this.__isset.success;
          return tmp2903;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list2904 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.ControllerEvent>(_list2904.Count);
                      for(int _i2905 = 0; _i2905 < _list2904.Count; ++_i2905)
                      {
                        global::Yaskawa.Ext.API.ControllerEvent _elem2906;
                        _elem2906 = new global::Yaskawa.Ext.API.ControllerEvent();
                        await _elem2906.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem2906);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2907 = new TStruct("events_result");
            await oprot.WriteStructBeginAsync(tmp2907, cancellationToken);
            var tmp2908 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2908.Name = "Success";
                tmp2908.Type = TType.List;
                tmp2908.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2908, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.ControllerEvent _iter2909 in Success)
                {
                  await _iter2909.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2910 = new StringBuilder("events_result(");
          int tmp2911 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2911++) { tmp2910.Append(", "); }
            tmp2910.Append("Success: ");
            Success.ToString(tmp2910);
          }
          tmp2910.Append(')');
          return tmp2910.ToString();
        }
      }


      public partial class connected_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public connected_args()
        {
        }

        public connected_args DeepCopy()
        {
          var tmp2912 = new connected_args();
          if(__isset.c)
          {
            tmp2912.C = this.C;
          }
          tmp2912.__isset.c = this.__isset.c;
          return tmp2912;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2913 = new TStruct("connected_args");
            await oprot.WriteStructBeginAsync(tmp2913, cancellationToken);
            var tmp2914 = new TField();
            if(__isset.c)
            {
              tmp2914.Name = "c";
              tmp2914.Type = TType.I64;
              tmp2914.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2914, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connected_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2915 = new StringBuilder("connected_args(");
          int tmp2916 = 0;
          if(__isset.c)
          {
            if(0 < tmp2916++) { tmp2915.Append(", "); }
            tmp2915.Append("C: ");
            C.ToString(tmp2915);
          }
          tmp2915.Append(')');
          return tmp2915.ToString();
        }
      }


      public partial class connected_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public connected_result()
        {
        }

        public connected_result DeepCopy()
        {
          var tmp2917 = new connected_result();
          if(__isset.success)
          {
            tmp2917.Success = this.Success;
          }
          tmp2917.__isset.success = this.__isset.success;
          return tmp2917;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2918 = new TStruct("connected_result");
            await oprot.WriteStructBeginAsync(tmp2918, cancellationToken);
            var tmp2919 = new TField();

            if(this.__isset.success)
            {
              tmp2919.Name = "Success";
              tmp2919.Type = TType.Bool;
              tmp2919.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2919, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connected_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2920 = new StringBuilder("connected_result(");
          int tmp2921 = 0;
          if(__isset.success)
          {
            if(0 < tmp2921++) { tmp2920.Append(", "); }
            tmp2920.Append("Success: ");
            Success.ToString(tmp2920);
          }
          tmp2920.Append(')');
          return tmp2920.ToString();
        }
      }


      public partial class connectedHostName_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public connectedHostName_args()
        {
        }

        public connectedHostName_args DeepCopy()
        {
          var tmp2922 = new connectedHostName_args();
          if(__isset.c)
          {
            tmp2922.C = this.C;
          }
          tmp2922.__isset.c = this.__isset.c;
          return tmp2922;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2923 = new TStruct("connectedHostName_args");
            await oprot.WriteStructBeginAsync(tmp2923, cancellationToken);
            var tmp2924 = new TField();
            if(__isset.c)
            {
              tmp2924.Name = "c";
              tmp2924.Type = TType.I64;
              tmp2924.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2924, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connectedHostName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2925 = new StringBuilder("connectedHostName_args(");
          int tmp2926 = 0;
          if(__isset.c)
          {
            if(0 < tmp2926++) { tmp2925.Append(", "); }
            tmp2925.Append("C: ");
            C.ToString(tmp2925);
          }
          tmp2925.Append(')');
          return tmp2925.ToString();
        }
      }


      public partial class connectedHostName_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public connectedHostName_result()
        {
        }

        public connectedHostName_result DeepCopy()
        {
          var tmp2927 = new connectedHostName_result();
          if((Success != null) && __isset.success)
          {
            tmp2927.Success = this.Success;
          }
          tmp2927.__isset.success = this.__isset.success;
          return tmp2927;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2928 = new TStruct("connectedHostName_result");
            await oprot.WriteStructBeginAsync(tmp2928, cancellationToken);
            var tmp2929 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2929.Name = "Success";
                tmp2929.Type = TType.String;
                tmp2929.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2929, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connectedHostName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2930 = new StringBuilder("connectedHostName_result(");
          int tmp2931 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2931++) { tmp2930.Append(", "); }
            tmp2930.Append("Success: ");
            Success.ToString(tmp2930);
          }
          tmp2930.Append(')');
          return tmp2930.ToString();
        }
      }


      public partial class softwareVersion_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public softwareVersion_args()
        {
        }

        public softwareVersion_args DeepCopy()
        {
          var tmp2932 = new softwareVersion_args();
          if(__isset.c)
          {
            tmp2932.C = this.C;
          }
          tmp2932.__isset.c = this.__isset.c;
          return tmp2932;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2933 = new TStruct("softwareVersion_args");
            await oprot.WriteStructBeginAsync(tmp2933, cancellationToken);
            var tmp2934 = new TField();
            if(__isset.c)
            {
              tmp2934.Name = "c";
              tmp2934.Type = TType.I64;
              tmp2934.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2934, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is softwareVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2935 = new StringBuilder("softwareVersion_args(");
          int tmp2936 = 0;
          if(__isset.c)
          {
            if(0 < tmp2936++) { tmp2935.Append(", "); }
            tmp2935.Append("C: ");
            C.ToString(tmp2935);
          }
          tmp2935.Append(')');
          return tmp2935.ToString();
        }
      }


      public partial class softwareVersion_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public softwareVersion_result()
        {
        }

        public softwareVersion_result DeepCopy()
        {
          var tmp2937 = new softwareVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp2937.Success = this.Success;
          }
          tmp2937.__isset.success = this.__isset.success;
          return tmp2937;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2938 = new TStruct("softwareVersion_result");
            await oprot.WriteStructBeginAsync(tmp2938, cancellationToken);
            var tmp2939 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2939.Name = "Success";
                tmp2939.Type = TType.String;
                tmp2939.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2939, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is softwareVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2940 = new StringBuilder("softwareVersion_result(");
          int tmp2941 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2941++) { tmp2940.Append(", "); }
            tmp2940.Append("Success: ");
            Success.ToString(tmp2940);
          }
          tmp2940.Append(')');
          return tmp2940.ToString();
        }
      }


      public partial class monitoring_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public monitoring_args()
        {
        }

        public monitoring_args DeepCopy()
        {
          var tmp2942 = new monitoring_args();
          if(__isset.c)
          {
            tmp2942.C = this.C;
          }
          tmp2942.__isset.c = this.__isset.c;
          return tmp2942;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2943 = new TStruct("monitoring_args");
            await oprot.WriteStructBeginAsync(tmp2943, cancellationToken);
            var tmp2944 = new TField();
            if(__isset.c)
            {
              tmp2944.Name = "c";
              tmp2944.Type = TType.I64;
              tmp2944.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2944, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitoring_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2945 = new StringBuilder("monitoring_args(");
          int tmp2946 = 0;
          if(__isset.c)
          {
            if(0 < tmp2946++) { tmp2945.Append(", "); }
            tmp2945.Append("C: ");
            C.ToString(tmp2945);
          }
          tmp2945.Append(')');
          return tmp2945.ToString();
        }
      }


      public partial class monitoring_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public monitoring_result()
        {
        }

        public monitoring_result DeepCopy()
        {
          var tmp2947 = new monitoring_result();
          if(__isset.success)
          {
            tmp2947.Success = this.Success;
          }
          tmp2947.__isset.success = this.__isset.success;
          return tmp2947;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2948 = new TStruct("monitoring_result");
            await oprot.WriteStructBeginAsync(tmp2948, cancellationToken);
            var tmp2949 = new TField();

            if(this.__isset.success)
            {
              tmp2949.Name = "Success";
              tmp2949.Type = TType.Bool;
              tmp2949.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2949, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitoring_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2950 = new StringBuilder("monitoring_result(");
          int tmp2951 = 0;
          if(__isset.success)
          {
            if(0 < tmp2951++) { tmp2950.Append(", "); }
            tmp2950.Append("Success: ");
            Success.ToString(tmp2950);
          }
          tmp2950.Append(')');
          return tmp2950.ToString();
        }
      }


      public partial class haveExclusiveControl_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public haveExclusiveControl_args()
        {
        }

        public haveExclusiveControl_args DeepCopy()
        {
          var tmp2952 = new haveExclusiveControl_args();
          if(__isset.c)
          {
            tmp2952.C = this.C;
          }
          tmp2952.__isset.c = this.__isset.c;
          return tmp2952;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2953 = new TStruct("haveExclusiveControl_args");
            await oprot.WriteStructBeginAsync(tmp2953, cancellationToken);
            var tmp2954 = new TField();
            if(__isset.c)
            {
              tmp2954.Name = "c";
              tmp2954.Type = TType.I64;
              tmp2954.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2954, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is haveExclusiveControl_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2955 = new StringBuilder("haveExclusiveControl_args(");
          int tmp2956 = 0;
          if(__isset.c)
          {
            if(0 < tmp2956++) { tmp2955.Append(", "); }
            tmp2955.Append("C: ");
            C.ToString(tmp2955);
          }
          tmp2955.Append(')');
          return tmp2955.ToString();
        }
      }


      public partial class haveExclusiveControl_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public haveExclusiveControl_result()
        {
        }

        public haveExclusiveControl_result DeepCopy()
        {
          var tmp2957 = new haveExclusiveControl_result();
          if(__isset.success)
          {
            tmp2957.Success = this.Success;
          }
          tmp2957.__isset.success = this.__isset.success;
          return tmp2957;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2958 = new TStruct("haveExclusiveControl_result");
            await oprot.WriteStructBeginAsync(tmp2958, cancellationToken);
            var tmp2959 = new TField();

            if(this.__isset.success)
            {
              tmp2959.Name = "Success";
              tmp2959.Type = TType.Bool;
              tmp2959.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2959, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is haveExclusiveControl_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2960 = new StringBuilder("haveExclusiveControl_result(");
          int tmp2961 = 0;
          if(__isset.success)
          {
            if(0 < tmp2961++) { tmp2960.Append(", "); }
            tmp2960.Append("Success: ");
            Success.ToString(tmp2960);
          }
          tmp2960.Append(')');
          return tmp2960.ToString();
        }
      }


      public partial class operationMode_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public operationMode_args()
        {
        }

        public operationMode_args DeepCopy()
        {
          var tmp2962 = new operationMode_args();
          if(__isset.c)
          {
            tmp2962.C = this.C;
          }
          tmp2962.__isset.c = this.__isset.c;
          return tmp2962;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2963 = new TStruct("operationMode_args");
            await oprot.WriteStructBeginAsync(tmp2963, cancellationToken);
            var tmp2964 = new TField();
            if(__isset.c)
            {
              tmp2964.Name = "c";
              tmp2964.Type = TType.I64;
              tmp2964.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2964, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is operationMode_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2965 = new StringBuilder("operationMode_args(");
          int tmp2966 = 0;
          if(__isset.c)
          {
            if(0 < tmp2966++) { tmp2965.Append(", "); }
            tmp2965.Append("C: ");
            C.ToString(tmp2965);
          }
          tmp2965.Append(')');
          return tmp2965.ToString();
        }
      }


      public partial class operationMode_result : TBase
      {
        private global::Yaskawa.Ext.API.OperationMode _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.OperationMode"/>
        /// </summary>
        public global::Yaskawa.Ext.API.OperationMode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public operationMode_result()
        {
        }

        public operationMode_result DeepCopy()
        {
          var tmp2967 = new operationMode_result();
          if(__isset.success)
          {
            tmp2967.Success = this.Success;
          }
          tmp2967.__isset.success = this.__isset.success;
          return tmp2967;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.OperationMode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2968 = new TStruct("operationMode_result");
            await oprot.WriteStructBeginAsync(tmp2968, cancellationToken);
            var tmp2969 = new TField();

            if(this.__isset.success)
            {
              tmp2969.Name = "Success";
              tmp2969.Type = TType.I32;
              tmp2969.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2969, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is operationMode_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2970 = new StringBuilder("operationMode_result(");
          int tmp2971 = 0;
          if(__isset.success)
          {
            if(0 < tmp2971++) { tmp2970.Append(", "); }
            tmp2970.Append("Success: ");
            Success.ToString(tmp2970);
          }
          tmp2970.Append(')');
          return tmp2970.ToString();
        }
      }


      public partial class servoState_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public servoState_args()
        {
        }

        public servoState_args DeepCopy()
        {
          var tmp2972 = new servoState_args();
          if(__isset.c)
          {
            tmp2972.C = this.C;
          }
          tmp2972.__isset.c = this.__isset.c;
          return tmp2972;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2973 = new TStruct("servoState_args");
            await oprot.WriteStructBeginAsync(tmp2973, cancellationToken);
            var tmp2974 = new TField();
            if(__isset.c)
            {
              tmp2974.Name = "c";
              tmp2974.Type = TType.I64;
              tmp2974.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2974, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is servoState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2975 = new StringBuilder("servoState_args(");
          int tmp2976 = 0;
          if(__isset.c)
          {
            if(0 < tmp2976++) { tmp2975.Append(", "); }
            tmp2975.Append("C: ");
            C.ToString(tmp2975);
          }
          tmp2975.Append(')');
          return tmp2975.ToString();
        }
      }


      public partial class servoState_result : TBase
      {
        private global::Yaskawa.Ext.API.ServoState _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.ServoState"/>
        /// </summary>
        public global::Yaskawa.Ext.API.ServoState Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public servoState_result()
        {
        }

        public servoState_result DeepCopy()
        {
          var tmp2977 = new servoState_result();
          if(__isset.success)
          {
            tmp2977.Success = this.Success;
          }
          tmp2977.__isset.success = this.__isset.success;
          return tmp2977;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.ServoState)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2978 = new TStruct("servoState_result");
            await oprot.WriteStructBeginAsync(tmp2978, cancellationToken);
            var tmp2979 = new TField();

            if(this.__isset.success)
            {
              tmp2979.Name = "Success";
              tmp2979.Type = TType.I32;
              tmp2979.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2979, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is servoState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2980 = new StringBuilder("servoState_result(");
          int tmp2981 = 0;
          if(__isset.success)
          {
            if(0 < tmp2981++) { tmp2980.Append(", "); }
            tmp2980.Append("Success: ");
            Success.ToString(tmp2980);
          }
          tmp2980.Append(')');
          return tmp2980.ToString();
        }
      }


      public partial class playbackState_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public playbackState_args()
        {
        }

        public playbackState_args DeepCopy()
        {
          var tmp2982 = new playbackState_args();
          if(__isset.c)
          {
            tmp2982.C = this.C;
          }
          tmp2982.__isset.c = this.__isset.c;
          return tmp2982;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2983 = new TStruct("playbackState_args");
            await oprot.WriteStructBeginAsync(tmp2983, cancellationToken);
            var tmp2984 = new TField();
            if(__isset.c)
            {
              tmp2984.Name = "c";
              tmp2984.Type = TType.I64;
              tmp2984.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2984, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2985 = new StringBuilder("playbackState_args(");
          int tmp2986 = 0;
          if(__isset.c)
          {
            if(0 < tmp2986++) { tmp2985.Append(", "); }
            tmp2985.Append("C: ");
            C.ToString(tmp2985);
          }
          tmp2985.Append(')');
          return tmp2985.ToString();
        }
      }


      public partial class playbackState_result : TBase
      {
        private global::Yaskawa.Ext.API.PlaybackState _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackState"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackState Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public playbackState_result()
        {
        }

        public playbackState_result DeepCopy()
        {
          var tmp2987 = new playbackState_result();
          if(__isset.success)
          {
            tmp2987.Success = this.Success;
          }
          tmp2987.__isset.success = this.__isset.success;
          return tmp2987;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.PlaybackState)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2988 = new TStruct("playbackState_result");
            await oprot.WriteStructBeginAsync(tmp2988, cancellationToken);
            var tmp2989 = new TField();

            if(this.__isset.success)
            {
              tmp2989.Name = "Success";
              tmp2989.Type = TType.I32;
              tmp2989.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2989, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2990 = new StringBuilder("playbackState_result(");
          int tmp2991 = 0;
          if(__isset.success)
          {
            if(0 < tmp2991++) { tmp2990.Append(", "); }
            tmp2990.Append("Success: ");
            Success.ToString(tmp2990);
          }
          tmp2990.Append(')');
          return tmp2990.ToString();
        }
      }


      public partial class playbackCycle_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public playbackCycle_args()
        {
        }

        public playbackCycle_args DeepCopy()
        {
          var tmp2992 = new playbackCycle_args();
          if(__isset.c)
          {
            tmp2992.C = this.C;
          }
          tmp2992.__isset.c = this.__isset.c;
          return tmp2992;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2993 = new TStruct("playbackCycle_args");
            await oprot.WriteStructBeginAsync(tmp2993, cancellationToken);
            var tmp2994 = new TField();
            if(__isset.c)
            {
              tmp2994.Name = "c";
              tmp2994.Type = TType.I64;
              tmp2994.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2994, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackCycle_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2995 = new StringBuilder("playbackCycle_args(");
          int tmp2996 = 0;
          if(__isset.c)
          {
            if(0 < tmp2996++) { tmp2995.Append(", "); }
            tmp2995.Append("C: ");
            C.ToString(tmp2995);
          }
          tmp2995.Append(')');
          return tmp2995.ToString();
        }
      }


      public partial class playbackCycle_result : TBase
      {
        private global::Yaskawa.Ext.API.PlaybackCycle _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackCycle"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackCycle Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public playbackCycle_result()
        {
        }

        public playbackCycle_result DeepCopy()
        {
          var tmp2997 = new playbackCycle_result();
          if(__isset.success)
          {
            tmp2997.Success = this.Success;
          }
          tmp2997.__isset.success = this.__isset.success;
          return tmp2997;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.PlaybackCycle)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2998 = new TStruct("playbackCycle_result");
            await oprot.WriteStructBeginAsync(tmp2998, cancellationToken);
            var tmp2999 = new TField();

            if(this.__isset.success)
            {
              tmp2999.Name = "Success";
              tmp2999.Type = TType.I32;
              tmp2999.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2999, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackCycle_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3000 = new StringBuilder("playbackCycle_result(");
          int tmp3001 = 0;
          if(__isset.success)
          {
            if(0 < tmp3001++) { tmp3000.Append(", "); }
            tmp3000.Append("Success: ");
            Success.ToString(tmp3000);
          }
          tmp3000.Append(')');
          return tmp3000.ToString();
        }
      }


      public partial class setPlaybackCycle_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.PlaybackCycle _cycle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackCycle"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackCycle Cycle
        {
          get
          {
            return _cycle;
          }
          set
          {
            __isset.cycle = true;
            this._cycle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool cycle;
        }

        public setPlaybackCycle_args()
        {
        }

        public setPlaybackCycle_args DeepCopy()
        {
          var tmp3002 = new setPlaybackCycle_args();
          if(__isset.c)
          {
            tmp3002.C = this.C;
          }
          tmp3002.__isset.c = this.__isset.c;
          if(__isset.cycle)
          {
            tmp3002.Cycle = this.Cycle;
          }
          tmp3002.__isset.cycle = this.__isset.cycle;
          return tmp3002;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Cycle = (global::Yaskawa.Ext.API.PlaybackCycle)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3003 = new TStruct("setPlaybackCycle_args");
            await oprot.WriteStructBeginAsync(tmp3003, cancellationToken);
            var tmp3004 = new TField();
            if(__isset.c)
            {
              tmp3004.Name = "c";
              tmp3004.Type = TType.I64;
              tmp3004.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3004, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.cycle)
            {
              tmp3004.Name = "cycle";
              tmp3004.Type = TType.I32;
              tmp3004.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3004, cancellationToken);
              await oprot.WriteI32Async((int)Cycle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setPlaybackCycle_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.cycle == other.__isset.cycle) && ((!__isset.cycle) || (global::System.Object.Equals(Cycle, other.Cycle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.cycle)
            {
              hashcode = (hashcode * 397) + Cycle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3005 = new StringBuilder("setPlaybackCycle_args(");
          int tmp3006 = 0;
          if(__isset.c)
          {
            if(0 < tmp3006++) { tmp3005.Append(", "); }
            tmp3005.Append("C: ");
            C.ToString(tmp3005);
          }
          if(__isset.cycle)
          {
            if(0 < tmp3006++) { tmp3005.Append(", "); }
            tmp3005.Append("Cycle: ");
            Cycle.ToString(tmp3005);
          }
          tmp3005.Append(')');
          return tmp3005.ToString();
        }
      }


      public partial class setPlaybackCycle_result : TBase
      {

        public setPlaybackCycle_result()
        {
        }

        public setPlaybackCycle_result DeepCopy()
        {
          var tmp3007 = new setPlaybackCycle_result();
          return tmp3007;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3008 = new TStruct("setPlaybackCycle_result");
            await oprot.WriteStructBeginAsync(tmp3008, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setPlaybackCycle_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3009 = new StringBuilder("setPlaybackCycle_result(");
          tmp3009.Append(')');
          return tmp3009.ToString();
        }
      }


      public partial class run_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public run_args()
        {
        }

        public run_args DeepCopy()
        {
          var tmp3011 = new run_args();
          if(__isset.c)
          {
            tmp3011.C = this.C;
          }
          tmp3011.__isset.c = this.__isset.c;
          return tmp3011;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3012 = new TStruct("run_args");
            await oprot.WriteStructBeginAsync(tmp3012, cancellationToken);
            var tmp3013 = new TField();
            if(__isset.c)
            {
              tmp3013.Name = "c";
              tmp3013.Type = TType.I64;
              tmp3013.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3013, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is run_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3014 = new StringBuilder("run_args(");
          int tmp3015 = 0;
          if(__isset.c)
          {
            if(0 < tmp3015++) { tmp3014.Append(", "); }
            tmp3014.Append("C: ");
            C.ToString(tmp3014);
          }
          tmp3014.Append(')');
          return tmp3014.ToString();
        }
      }


      public partial class run_result : TBase
      {

        public run_result()
        {
        }

        public run_result DeepCopy()
        {
          var tmp3016 = new run_result();
          return tmp3016;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3017 = new TStruct("run_result");
            await oprot.WriteStructBeginAsync(tmp3017, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is run_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3018 = new StringBuilder("run_result(");
          tmp3018.Append(')');
          return tmp3018.ToString();
        }
      }


      public partial class pause_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public pause_args()
        {
        }

        public pause_args DeepCopy()
        {
          var tmp3020 = new pause_args();
          if(__isset.c)
          {
            tmp3020.C = this.C;
          }
          tmp3020.__isset.c = this.__isset.c;
          return tmp3020;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3021 = new TStruct("pause_args");
            await oprot.WriteStructBeginAsync(tmp3021, cancellationToken);
            var tmp3022 = new TField();
            if(__isset.c)
            {
              tmp3022.Name = "c";
              tmp3022.Type = TType.I64;
              tmp3022.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3022, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pause_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3023 = new StringBuilder("pause_args(");
          int tmp3024 = 0;
          if(__isset.c)
          {
            if(0 < tmp3024++) { tmp3023.Append(", "); }
            tmp3023.Append("C: ");
            C.ToString(tmp3023);
          }
          tmp3023.Append(')');
          return tmp3023.ToString();
        }
      }


      public partial class pause_result : TBase
      {

        public pause_result()
        {
        }

        public pause_result DeepCopy()
        {
          var tmp3025 = new pause_result();
          return tmp3025;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3026 = new TStruct("pause_result");
            await oprot.WriteStructBeginAsync(tmp3026, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pause_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3027 = new StringBuilder("pause_result(");
          tmp3027.Append(')');
          return tmp3027.ToString();
        }
      }


      public partial class resume_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public resume_args()
        {
        }

        public resume_args DeepCopy()
        {
          var tmp3029 = new resume_args();
          if(__isset.c)
          {
            tmp3029.C = this.C;
          }
          tmp3029.__isset.c = this.__isset.c;
          return tmp3029;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3030 = new TStruct("resume_args");
            await oprot.WriteStructBeginAsync(tmp3030, cancellationToken);
            var tmp3031 = new TField();
            if(__isset.c)
            {
              tmp3031.Name = "c";
              tmp3031.Type = TType.I64;
              tmp3031.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3031, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resume_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3032 = new StringBuilder("resume_args(");
          int tmp3033 = 0;
          if(__isset.c)
          {
            if(0 < tmp3033++) { tmp3032.Append(", "); }
            tmp3032.Append("C: ");
            C.ToString(tmp3032);
          }
          tmp3032.Append(')');
          return tmp3032.ToString();
        }
      }


      public partial class resume_result : TBase
      {

        public resume_result()
        {
        }

        public resume_result DeepCopy()
        {
          var tmp3034 = new resume_result();
          return tmp3034;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3035 = new TStruct("resume_result");
            await oprot.WriteStructBeginAsync(tmp3035, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resume_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3036 = new StringBuilder("resume_result(");
          tmp3036.Append(')');
          return tmp3036.ToString();
        }
      }


      public partial class stop_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public stop_args()
        {
        }

        public stop_args DeepCopy()
        {
          var tmp3038 = new stop_args();
          if(__isset.c)
          {
            tmp3038.C = this.C;
          }
          tmp3038.__isset.c = this.__isset.c;
          return tmp3038;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3039 = new TStruct("stop_args");
            await oprot.WriteStructBeginAsync(tmp3039, cancellationToken);
            var tmp3040 = new TField();
            if(__isset.c)
            {
              tmp3040.Name = "c";
              tmp3040.Type = TType.I64;
              tmp3040.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3040, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stop_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3041 = new StringBuilder("stop_args(");
          int tmp3042 = 0;
          if(__isset.c)
          {
            if(0 < tmp3042++) { tmp3041.Append(", "); }
            tmp3041.Append("C: ");
            C.ToString(tmp3041);
          }
          tmp3041.Append(')');
          return tmp3041.ToString();
        }
      }


      public partial class stop_result : TBase
      {

        public stop_result()
        {
        }

        public stop_result DeepCopy()
        {
          var tmp3043 = new stop_result();
          return tmp3043;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3044 = new TStruct("stop_result");
            await oprot.WriteStructBeginAsync(tmp3044, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stop_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3045 = new StringBuilder("stop_result(");
          tmp3045.Append(')');
          return tmp3045.ToString();
        }
      }


      public partial class currentJob_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentJob_args()
        {
        }

        public currentJob_args DeepCopy()
        {
          var tmp3047 = new currentJob_args();
          if(__isset.c)
          {
            tmp3047.C = this.C;
          }
          tmp3047.__isset.c = this.__isset.c;
          return tmp3047;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3048 = new TStruct("currentJob_args");
            await oprot.WriteStructBeginAsync(tmp3048, cancellationToken);
            var tmp3049 = new TField();
            if(__isset.c)
            {
              tmp3049.Name = "c";
              tmp3049.Type = TType.I64;
              tmp3049.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3049, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3050 = new StringBuilder("currentJob_args(");
          int tmp3051 = 0;
          if(__isset.c)
          {
            if(0 < tmp3051++) { tmp3050.Append(", "); }
            tmp3050.Append("C: ");
            C.ToString(tmp3050);
          }
          tmp3050.Append(')');
          return tmp3050.ToString();
        }
      }


      public partial class currentJob_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentJob_result()
        {
        }

        public currentJob_result DeepCopy()
        {
          var tmp3052 = new currentJob_result();
          if((Success != null) && __isset.success)
          {
            tmp3052.Success = this.Success;
          }
          tmp3052.__isset.success = this.__isset.success;
          return tmp3052;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3053 = new TStruct("currentJob_result");
            await oprot.WriteStructBeginAsync(tmp3053, cancellationToken);
            var tmp3054 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3054.Name = "Success";
                tmp3054.Type = TType.String;
                tmp3054.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3054, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3055 = new StringBuilder("currentJob_result(");
          int tmp3056 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3056++) { tmp3055.Append(", "); }
            tmp3055.Append("Success: ");
            Success.ToString(tmp3055);
          }
          tmp3055.Append(')');
          return tmp3055.ToString();
        }
      }


      public partial class setCurrentJob_args : TBase
      {
        private long _c;
        private string _name;
        private int _line;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public int Line
        {
          get
          {
            return _line;
          }
          set
          {
            __isset.line = true;
            this._line = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool line;
        }

        public setCurrentJob_args()
        {
        }

        public setCurrentJob_args DeepCopy()
        {
          var tmp3057 = new setCurrentJob_args();
          if(__isset.c)
          {
            tmp3057.C = this.C;
          }
          tmp3057.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3057.Name = this.Name;
          }
          tmp3057.__isset.name = this.__isset.name;
          if(__isset.line)
          {
            tmp3057.Line = this.Line;
          }
          tmp3057.__isset.line = this.__isset.line;
          return tmp3057;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Line = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3058 = new TStruct("setCurrentJob_args");
            await oprot.WriteStructBeginAsync(tmp3058, cancellationToken);
            var tmp3059 = new TField();
            if(__isset.c)
            {
              tmp3059.Name = "c";
              tmp3059.Type = TType.I64;
              tmp3059.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3059, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3059.Name = "name";
              tmp3059.Type = TType.String;
              tmp3059.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3059, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.line)
            {
              tmp3059.Name = "line";
              tmp3059.Type = TType.I32;
              tmp3059.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3059, cancellationToken);
              await oprot.WriteI32Async(Line, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setCurrentJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.line == other.__isset.line) && ((!__isset.line) || (global::System.Object.Equals(Line, other.Line))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if(__isset.line)
            {
              hashcode = (hashcode * 397) + Line.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3060 = new StringBuilder("setCurrentJob_args(");
          int tmp3061 = 0;
          if(__isset.c)
          {
            if(0 < tmp3061++) { tmp3060.Append(", "); }
            tmp3060.Append("C: ");
            C.ToString(tmp3060);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3061++) { tmp3060.Append(", "); }
            tmp3060.Append("Name: ");
            Name.ToString(tmp3060);
          }
          if(__isset.line)
          {
            if(0 < tmp3061++) { tmp3060.Append(", "); }
            tmp3060.Append("Line: ");
            Line.ToString(tmp3060);
          }
          tmp3060.Append(')');
          return tmp3060.ToString();
        }
      }


      public partial class setCurrentJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setCurrentJob_result()
        {
        }

        public setCurrentJob_result DeepCopy()
        {
          var tmp3062 = new setCurrentJob_result();
          if((E != null) && __isset.e)
          {
            tmp3062.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3062.__isset.e = this.__isset.e;
          return tmp3062;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3063 = new TStruct("setCurrentJob_result");
            await oprot.WriteStructBeginAsync(tmp3063, cancellationToken);
            var tmp3064 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3064.Name = "E";
                tmp3064.Type = TType.Struct;
                tmp3064.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3064, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setCurrentJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3065 = new StringBuilder("setCurrentJob_result(");
          int tmp3066 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3066++) { tmp3065.Append(", "); }
            tmp3065.Append("E: ");
            E.ToString(tmp3065);
          }
          tmp3065.Append(')');
          return tmp3065.ToString();
        }
      }


      public partial class currentJobLine_args : TBase
      {
        private long _c;
        private int _taskNo;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int TaskNo
        {
          get
          {
            return _taskNo;
          }
          set
          {
            __isset.taskNo = true;
            this._taskNo = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool taskNo;
        }

        public currentJobLine_args()
        {
        }

        public currentJobLine_args DeepCopy()
        {
          var tmp3067 = new currentJobLine_args();
          if(__isset.c)
          {
            tmp3067.C = this.C;
          }
          tmp3067.__isset.c = this.__isset.c;
          if(__isset.taskNo)
          {
            tmp3067.TaskNo = this.TaskNo;
          }
          tmp3067.__isset.taskNo = this.__isset.taskNo;
          return tmp3067;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    TaskNo = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3068 = new TStruct("currentJobLine_args");
            await oprot.WriteStructBeginAsync(tmp3068, cancellationToken);
            var tmp3069 = new TField();
            if(__isset.c)
            {
              tmp3069.Name = "c";
              tmp3069.Type = TType.I64;
              tmp3069.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3069, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.taskNo)
            {
              tmp3069.Name = "taskNo";
              tmp3069.Type = TType.I32;
              tmp3069.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3069, cancellationToken);
              await oprot.WriteI32Async(TaskNo, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJobLine_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.taskNo == other.__isset.taskNo) && ((!__isset.taskNo) || (global::System.Object.Equals(TaskNo, other.TaskNo))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.taskNo)
            {
              hashcode = (hashcode * 397) + TaskNo.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3070 = new StringBuilder("currentJobLine_args(");
          int tmp3071 = 0;
          if(__isset.c)
          {
            if(0 < tmp3071++) { tmp3070.Append(", "); }
            tmp3070.Append("C: ");
            C.ToString(tmp3070);
          }
          if(__isset.taskNo)
          {
            if(0 < tmp3071++) { tmp3070.Append(", "); }
            tmp3070.Append("TaskNo: ");
            TaskNo.ToString(tmp3070);
          }
          tmp3070.Append(')');
          return tmp3070.ToString();
        }
      }


      public partial class currentJobLine_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentJobLine_result()
        {
        }

        public currentJobLine_result DeepCopy()
        {
          var tmp3072 = new currentJobLine_result();
          if(__isset.success)
          {
            tmp3072.Success = this.Success;
          }
          tmp3072.__isset.success = this.__isset.success;
          return tmp3072;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3073 = new TStruct("currentJobLine_result");
            await oprot.WriteStructBeginAsync(tmp3073, cancellationToken);
            var tmp3074 = new TField();

            if(this.__isset.success)
            {
              tmp3074.Name = "Success";
              tmp3074.Type = TType.I32;
              tmp3074.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3074, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJobLine_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3075 = new StringBuilder("currentJobLine_result(");
          int tmp3076 = 0;
          if(__isset.success)
          {
            if(0 < tmp3076++) { tmp3075.Append(", "); }
            tmp3075.Append("Success: ");
            Success.ToString(tmp3075);
          }
          tmp3075.Append(')');
          return tmp3075.ToString();
        }
      }


      public partial class defaultJob_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public defaultJob_args()
        {
        }

        public defaultJob_args DeepCopy()
        {
          var tmp3077 = new defaultJob_args();
          if(__isset.c)
          {
            tmp3077.C = this.C;
          }
          tmp3077.__isset.c = this.__isset.c;
          return tmp3077;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3078 = new TStruct("defaultJob_args");
            await oprot.WriteStructBeginAsync(tmp3078, cancellationToken);
            var tmp3079 = new TField();
            if(__isset.c)
            {
              tmp3079.Name = "c";
              tmp3079.Type = TType.I64;
              tmp3079.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3079, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is defaultJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3080 = new StringBuilder("defaultJob_args(");
          int tmp3081 = 0;
          if(__isset.c)
          {
            if(0 < tmp3081++) { tmp3080.Append(", "); }
            tmp3080.Append("C: ");
            C.ToString(tmp3080);
          }
          tmp3080.Append(')');
          return tmp3080.ToString();
        }
      }


      public partial class defaultJob_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public defaultJob_result()
        {
        }

        public defaultJob_result DeepCopy()
        {
          var tmp3082 = new defaultJob_result();
          if((Success != null) && __isset.success)
          {
            tmp3082.Success = this.Success;
          }
          tmp3082.__isset.success = this.__isset.success;
          return tmp3082;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3083 = new TStruct("defaultJob_result");
            await oprot.WriteStructBeginAsync(tmp3083, cancellationToken);
            var tmp3084 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3084.Name = "Success";
                tmp3084.Type = TType.String;
                tmp3084.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3084, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is defaultJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3085 = new StringBuilder("defaultJob_result(");
          int tmp3086 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3086++) { tmp3085.Append(", "); }
            tmp3085.Append("Success: ");
            Success.ToString(tmp3085);
          }
          tmp3085.Append(')');
          return tmp3085.ToString();
        }
      }


      public partial class jobExists_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobExists_args()
        {
        }

        public jobExists_args DeepCopy()
        {
          var tmp3087 = new jobExists_args();
          if(__isset.c)
          {
            tmp3087.C = this.C;
          }
          tmp3087.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3087.Name = this.Name;
          }
          tmp3087.__isset.name = this.__isset.name;
          return tmp3087;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3088 = new TStruct("jobExists_args");
            await oprot.WriteStructBeginAsync(tmp3088, cancellationToken);
            var tmp3089 = new TField();
            if(__isset.c)
            {
              tmp3089.Name = "c";
              tmp3089.Type = TType.I64;
              tmp3089.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3089, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3089.Name = "name";
              tmp3089.Type = TType.String;
              tmp3089.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3089, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobExists_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3090 = new StringBuilder("jobExists_args(");
          int tmp3091 = 0;
          if(__isset.c)
          {
            if(0 < tmp3091++) { tmp3090.Append(", "); }
            tmp3090.Append("C: ");
            C.ToString(tmp3090);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3091++) { tmp3090.Append(", "); }
            tmp3090.Append("Name: ");
            Name.ToString(tmp3090);
          }
          tmp3090.Append(')');
          return tmp3090.ToString();
        }
      }


      public partial class jobExists_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jobExists_result()
        {
        }

        public jobExists_result DeepCopy()
        {
          var tmp3092 = new jobExists_result();
          if(__isset.success)
          {
            tmp3092.Success = this.Success;
          }
          tmp3092.__isset.success = this.__isset.success;
          return tmp3092;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3093 = new TStruct("jobExists_result");
            await oprot.WriteStructBeginAsync(tmp3093, cancellationToken);
            var tmp3094 = new TField();

            if(this.__isset.success)
            {
              tmp3094.Name = "Success";
              tmp3094.Type = TType.Bool;
              tmp3094.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3094, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobExists_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3095 = new StringBuilder("jobExists_result(");
          int tmp3096 = 0;
          if(__isset.success)
          {
            if(0 < tmp3096++) { tmp3095.Append(", "); }
            tmp3095.Append("Success: ");
            Success.ToString(tmp3095);
          }
          tmp3095.Append(')');
          return tmp3095.ToString();
        }
      }


      public partial class jobDetails_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobDetails_args()
        {
        }

        public jobDetails_args DeepCopy()
        {
          var tmp3097 = new jobDetails_args();
          if(__isset.c)
          {
            tmp3097.C = this.C;
          }
          tmp3097.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3097.Name = this.Name;
          }
          tmp3097.__isset.name = this.__isset.name;
          return tmp3097;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3098 = new TStruct("jobDetails_args");
            await oprot.WriteStructBeginAsync(tmp3098, cancellationToken);
            var tmp3099 = new TField();
            if(__isset.c)
            {
              tmp3099.Name = "c";
              tmp3099.Type = TType.I64;
              tmp3099.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3099, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3099.Name = "name";
              tmp3099.Type = TType.String;
              tmp3099.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3099, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobDetails_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3100 = new StringBuilder("jobDetails_args(");
          int tmp3101 = 0;
          if(__isset.c)
          {
            if(0 < tmp3101++) { tmp3100.Append(", "); }
            tmp3100.Append("C: ");
            C.ToString(tmp3100);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3101++) { tmp3100.Append(", "); }
            tmp3100.Append("Name: ");
            Name.ToString(tmp3100);
          }
          tmp3100.Append(')');
          return tmp3100.ToString();
        }
      }


      public partial class jobDetails_result : TBase
      {
        private global::Yaskawa.Ext.API.RobotJobInfo _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.RobotJobInfo Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobDetails_result()
        {
        }

        public jobDetails_result DeepCopy()
        {
          var tmp3102 = new jobDetails_result();
          if((Success != null) && __isset.success)
          {
            tmp3102.Success = (global::Yaskawa.Ext.API.RobotJobInfo)this.Success.DeepCopy();
          }
          tmp3102.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3102.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3102.__isset.e = this.__isset.e;
          return tmp3102;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.RobotJobInfo();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3103 = new TStruct("jobDetails_result");
            await oprot.WriteStructBeginAsync(tmp3103, cancellationToken);
            var tmp3104 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3104.Name = "Success";
                tmp3104.Type = TType.Struct;
                tmp3104.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3104, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3104.Name = "E";
                tmp3104.Type = TType.Struct;
                tmp3104.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3104, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobDetails_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3105 = new StringBuilder("jobDetails_result(");
          int tmp3106 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3106++) { tmp3105.Append(", "); }
            tmp3105.Append("Success: ");
            Success.ToString(tmp3105);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3106++) { tmp3105.Append(", "); }
            tmp3105.Append("E: ");
            E.ToString(tmp3105);
          }
          tmp3105.Append(')');
          return tmp3105.ToString();
        }
      }


      public partial class jobs_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public jobs_args()
        {
        }

        public jobs_args DeepCopy()
        {
          var tmp3107 = new jobs_args();
          if(__isset.c)
          {
            tmp3107.C = this.C;
          }
          tmp3107.__isset.c = this.__isset.c;
          return tmp3107;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3108 = new TStruct("jobs_args");
            await oprot.WriteStructBeginAsync(tmp3108, cancellationToken);
            var tmp3109 = new TField();
            if(__isset.c)
            {
              tmp3109.Name = "c";
              tmp3109.Type = TType.I64;
              tmp3109.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3109, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobs_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3110 = new StringBuilder("jobs_args(");
          int tmp3111 = 0;
          if(__isset.c)
          {
            if(0 < tmp3111++) { tmp3110.Append(", "); }
            tmp3110.Append("C: ");
            C.ToString(tmp3110);
          }
          tmp3110.Append(')');
          return tmp3110.ToString();
        }
      }


      public partial class jobs_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jobs_result()
        {
        }

        public jobs_result DeepCopy()
        {
          var tmp3112 = new jobs_result();
          if((Success != null) && __isset.success)
          {
            tmp3112.Success = this.Success.DeepCopy();
          }
          tmp3112.__isset.success = this.__isset.success;
          return tmp3112;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3113 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list3113.Count);
                      for(int _i3114 = 0; _i3114 < _list3113.Count; ++_i3114)
                      {
                        string _elem3115;
                        _elem3115 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem3115);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3116 = new TStruct("jobs_result");
            await oprot.WriteStructBeginAsync(tmp3116, cancellationToken);
            var tmp3117 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3117.Name = "Success";
                tmp3117.Type = TType.List;
                tmp3117.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3117, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter3118 in Success)
                {
                  await oprot.WriteStringAsync(_iter3118, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobs_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3119 = new StringBuilder("jobs_result(");
          int tmp3120 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3120++) { tmp3119.Append(", "); }
            tmp3119.Append("Success: ");
            Success.ToString(tmp3119);
          }
          tmp3119.Append(')');
          return tmp3119.ToString();
        }
      }


      public partial class jobsMatching_args : TBase
      {
        private long _c;
        private string _nameRegex;
        private string _tag;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string NameRegex
        {
          get
          {
            return _nameRegex;
          }
          set
          {
            __isset.nameRegex = true;
            this._nameRegex = value;
          }
        }

        public string Tag
        {
          get
          {
            return _tag;
          }
          set
          {
            __isset.tag = true;
            this._tag = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool nameRegex;
          public bool tag;
        }

        public jobsMatching_args()
        {
        }

        public jobsMatching_args DeepCopy()
        {
          var tmp3121 = new jobsMatching_args();
          if(__isset.c)
          {
            tmp3121.C = this.C;
          }
          tmp3121.__isset.c = this.__isset.c;
          if((NameRegex != null) && __isset.nameRegex)
          {
            tmp3121.NameRegex = this.NameRegex;
          }
          tmp3121.__isset.nameRegex = this.__isset.nameRegex;
          if((Tag != null) && __isset.tag)
          {
            tmp3121.Tag = this.Tag;
          }
          tmp3121.__isset.tag = this.__isset.tag;
          return tmp3121;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NameRegex = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Tag = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3122 = new TStruct("jobsMatching_args");
            await oprot.WriteStructBeginAsync(tmp3122, cancellationToken);
            var tmp3123 = new TField();
            if(__isset.c)
            {
              tmp3123.Name = "c";
              tmp3123.Type = TType.I64;
              tmp3123.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3123, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NameRegex != null) && __isset.nameRegex)
            {
              tmp3123.Name = "nameRegex";
              tmp3123.Type = TType.String;
              tmp3123.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3123, cancellationToken);
              await oprot.WriteStringAsync(NameRegex, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Tag != null) && __isset.tag)
            {
              tmp3123.Name = "tag";
              tmp3123.Type = TType.String;
              tmp3123.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3123, cancellationToken);
              await oprot.WriteStringAsync(Tag, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobsMatching_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.nameRegex == other.__isset.nameRegex) && ((!__isset.nameRegex) || (global::System.Object.Equals(NameRegex, other.NameRegex))))
            && ((__isset.tag == other.__isset.tag) && ((!__isset.tag) || (global::System.Object.Equals(Tag, other.Tag))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((NameRegex != null) && __isset.nameRegex)
            {
              hashcode = (hashcode * 397) + NameRegex.GetHashCode();
            }
            if((Tag != null) && __isset.tag)
            {
              hashcode = (hashcode * 397) + Tag.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3124 = new StringBuilder("jobsMatching_args(");
          int tmp3125 = 0;
          if(__isset.c)
          {
            if(0 < tmp3125++) { tmp3124.Append(", "); }
            tmp3124.Append("C: ");
            C.ToString(tmp3124);
          }
          if((NameRegex != null) && __isset.nameRegex)
          {
            if(0 < tmp3125++) { tmp3124.Append(", "); }
            tmp3124.Append("NameRegex: ");
            NameRegex.ToString(tmp3124);
          }
          if((Tag != null) && __isset.tag)
          {
            if(0 < tmp3125++) { tmp3124.Append(", "); }
            tmp3124.Append("Tag: ");
            Tag.ToString(tmp3124);
          }
          tmp3124.Append(')');
          return tmp3124.ToString();
        }
      }


      public partial class jobsMatching_result : TBase
      {
        private List<string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobsMatching_result()
        {
        }

        public jobsMatching_result DeepCopy()
        {
          var tmp3126 = new jobsMatching_result();
          if((Success != null) && __isset.success)
          {
            tmp3126.Success = this.Success.DeepCopy();
          }
          tmp3126.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3126.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3126.__isset.e = this.__isset.e;
          return tmp3126;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3127 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list3127.Count);
                      for(int _i3128 = 0; _i3128 < _list3127.Count; ++_i3128)
                      {
                        string _elem3129;
                        _elem3129 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem3129);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3130 = new TStruct("jobsMatching_result");
            await oprot.WriteStructBeginAsync(tmp3130, cancellationToken);
            var tmp3131 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3131.Name = "Success";
                tmp3131.Type = TType.List;
                tmp3131.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3131, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter3132 in Success)
                {
                  await oprot.WriteStringAsync(_iter3132, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3131.Name = "E";
                tmp3131.Type = TType.Struct;
                tmp3131.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3131, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobsMatching_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3133 = new StringBuilder("jobsMatching_result(");
          int tmp3134 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3134++) { tmp3133.Append(", "); }
            tmp3133.Append("Success: ");
            Success.ToString(tmp3133);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3134++) { tmp3133.Append(", "); }
            tmp3133.Append("E: ");
            E.ToString(tmp3133);
          }
          tmp3133.Append(')');
          return tmp3133.ToString();
        }
      }


      public partial class duplicateJob_args : TBase
      {
        private long _c;
        private string _existingName;
        private string _newName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ExistingName
        {
          get
          {
            return _existingName;
          }
          set
          {
            __isset.existingName = true;
            this._existingName = value;
          }
        }

        public string NewName
        {
          get
          {
            return _newName;
          }
          set
          {
            __isset.newName = true;
            this._newName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool existingName;
          public bool newName;
        }

        public duplicateJob_args()
        {
        }

        public duplicateJob_args DeepCopy()
        {
          var tmp3135 = new duplicateJob_args();
          if(__isset.c)
          {
            tmp3135.C = this.C;
          }
          tmp3135.__isset.c = this.__isset.c;
          if((ExistingName != null) && __isset.existingName)
          {
            tmp3135.ExistingName = this.ExistingName;
          }
          tmp3135.__isset.existingName = this.__isset.existingName;
          if((NewName != null) && __isset.newName)
          {
            tmp3135.NewName = this.NewName;
          }
          tmp3135.__isset.newName = this.__isset.newName;
          return tmp3135;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ExistingName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    NewName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3136 = new TStruct("duplicateJob_args");
            await oprot.WriteStructBeginAsync(tmp3136, cancellationToken);
            var tmp3137 = new TField();
            if(__isset.c)
            {
              tmp3137.Name = "c";
              tmp3137.Type = TType.I64;
              tmp3137.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3137, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ExistingName != null) && __isset.existingName)
            {
              tmp3137.Name = "existingName";
              tmp3137.Type = TType.String;
              tmp3137.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3137, cancellationToken);
              await oprot.WriteStringAsync(ExistingName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NewName != null) && __isset.newName)
            {
              tmp3137.Name = "newName";
              tmp3137.Type = TType.String;
              tmp3137.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3137, cancellationToken);
              await oprot.WriteStringAsync(NewName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is duplicateJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.existingName == other.__isset.existingName) && ((!__isset.existingName) || (global::System.Object.Equals(ExistingName, other.ExistingName))))
            && ((__isset.newName == other.__isset.newName) && ((!__isset.newName) || (global::System.Object.Equals(NewName, other.NewName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ExistingName != null) && __isset.existingName)
            {
              hashcode = (hashcode * 397) + ExistingName.GetHashCode();
            }
            if((NewName != null) && __isset.newName)
            {
              hashcode = (hashcode * 397) + NewName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3138 = new StringBuilder("duplicateJob_args(");
          int tmp3139 = 0;
          if(__isset.c)
          {
            if(0 < tmp3139++) { tmp3138.Append(", "); }
            tmp3138.Append("C: ");
            C.ToString(tmp3138);
          }
          if((ExistingName != null) && __isset.existingName)
          {
            if(0 < tmp3139++) { tmp3138.Append(", "); }
            tmp3138.Append("ExistingName: ");
            ExistingName.ToString(tmp3138);
          }
          if((NewName != null) && __isset.newName)
          {
            if(0 < tmp3139++) { tmp3138.Append(", "); }
            tmp3138.Append("NewName: ");
            NewName.ToString(tmp3138);
          }
          tmp3138.Append(')');
          return tmp3138.ToString();
        }
      }


      public partial class duplicateJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public duplicateJob_result()
        {
        }

        public duplicateJob_result DeepCopy()
        {
          var tmp3140 = new duplicateJob_result();
          if((E != null) && __isset.e)
          {
            tmp3140.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3140.__isset.e = this.__isset.e;
          return tmp3140;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3141 = new TStruct("duplicateJob_result");
            await oprot.WriteStructBeginAsync(tmp3141, cancellationToken);
            var tmp3142 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3142.Name = "E";
                tmp3142.Type = TType.Struct;
                tmp3142.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3142, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is duplicateJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3143 = new StringBuilder("duplicateJob_result(");
          int tmp3144 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3144++) { tmp3143.Append(", "); }
            tmp3143.Append("E: ");
            E.ToString(tmp3143);
          }
          tmp3143.Append(')');
          return tmp3143.ToString();
        }
      }


      public partial class deleteJob_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public deleteJob_args()
        {
        }

        public deleteJob_args DeepCopy()
        {
          var tmp3145 = new deleteJob_args();
          if(__isset.c)
          {
            tmp3145.C = this.C;
          }
          tmp3145.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3145.Name = this.Name;
          }
          tmp3145.__isset.name = this.__isset.name;
          return tmp3145;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3146 = new TStruct("deleteJob_args");
            await oprot.WriteStructBeginAsync(tmp3146, cancellationToken);
            var tmp3147 = new TField();
            if(__isset.c)
            {
              tmp3147.Name = "c";
              tmp3147.Type = TType.I64;
              tmp3147.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3147, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3147.Name = "name";
              tmp3147.Type = TType.String;
              tmp3147.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3147, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3148 = new StringBuilder("deleteJob_args(");
          int tmp3149 = 0;
          if(__isset.c)
          {
            if(0 < tmp3149++) { tmp3148.Append(", "); }
            tmp3148.Append("C: ");
            C.ToString(tmp3148);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3149++) { tmp3148.Append(", "); }
            tmp3148.Append("Name: ");
            Name.ToString(tmp3148);
          }
          tmp3148.Append(')');
          return tmp3148.ToString();
        }
      }


      public partial class deleteJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteJob_result()
        {
        }

        public deleteJob_result DeepCopy()
        {
          var tmp3150 = new deleteJob_result();
          if((E != null) && __isset.e)
          {
            tmp3150.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3150.__isset.e = this.__isset.e;
          return tmp3150;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3151 = new TStruct("deleteJob_result");
            await oprot.WriteStructBeginAsync(tmp3151, cancellationToken);
            var tmp3152 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3152.Name = "E";
                tmp3152.Type = TType.Struct;
                tmp3152.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3152, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3153 = new StringBuilder("deleteJob_result(");
          int tmp3154 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3154++) { tmp3153.Append(", "); }
            tmp3153.Append("E: ");
            E.ToString(tmp3153);
          }
          tmp3153.Append(')');
          return tmp3153.ToString();
        }
      }


      public partial class jobSource_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobSource_args()
        {
        }

        public jobSource_args DeepCopy()
        {
          var tmp3155 = new jobSource_args();
          if(__isset.c)
          {
            tmp3155.C = this.C;
          }
          tmp3155.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3155.Name = this.Name;
          }
          tmp3155.__isset.name = this.__isset.name;
          return tmp3155;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3156 = new TStruct("jobSource_args");
            await oprot.WriteStructBeginAsync(tmp3156, cancellationToken);
            var tmp3157 = new TField();
            if(__isset.c)
            {
              tmp3157.Name = "c";
              tmp3157.Type = TType.I64;
              tmp3157.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3157, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3157.Name = "name";
              tmp3157.Type = TType.String;
              tmp3157.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3157, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobSource_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3158 = new StringBuilder("jobSource_args(");
          int tmp3159 = 0;
          if(__isset.c)
          {
            if(0 < tmp3159++) { tmp3158.Append(", "); }
            tmp3158.Append("C: ");
            C.ToString(tmp3158);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3159++) { tmp3158.Append(", "); }
            tmp3158.Append("Name: ");
            Name.ToString(tmp3158);
          }
          tmp3158.Append(')');
          return tmp3158.ToString();
        }
      }


      public partial class jobSource_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobSource_result()
        {
        }

        public jobSource_result DeepCopy()
        {
          var tmp3160 = new jobSource_result();
          if((Success != null) && __isset.success)
          {
            tmp3160.Success = this.Success;
          }
          tmp3160.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3160.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3160.__isset.e = this.__isset.e;
          return tmp3160;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3161 = new TStruct("jobSource_result");
            await oprot.WriteStructBeginAsync(tmp3161, cancellationToken);
            var tmp3162 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3162.Name = "Success";
                tmp3162.Type = TType.String;
                tmp3162.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3162, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3162.Name = "E";
                tmp3162.Type = TType.Struct;
                tmp3162.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3162, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobSource_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3163 = new StringBuilder("jobSource_result(");
          int tmp3164 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3164++) { tmp3163.Append(", "); }
            tmp3163.Append("Success: ");
            Success.ToString(tmp3163);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3164++) { tmp3163.Append(", "); }
            tmp3163.Append("E: ");
            E.ToString(tmp3163);
          }
          tmp3163.Append(')');
          return tmp3163.ToString();
        }
      }


      public partial class storeJobSource_args : TBase
      {
        private long _c;
        private string _name;
        private string _programmingLanguage;
        private string _sourceCode;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public string ProgrammingLanguage
        {
          get
          {
            return _programmingLanguage;
          }
          set
          {
            __isset.programmingLanguage = true;
            this._programmingLanguage = value;
          }
        }

        public string SourceCode
        {
          get
          {
            return _sourceCode;
          }
          set
          {
            __isset.sourceCode = true;
            this._sourceCode = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool programmingLanguage;
          public bool sourceCode;
        }

        public storeJobSource_args()
        {
        }

        public storeJobSource_args DeepCopy()
        {
          var tmp3165 = new storeJobSource_args();
          if(__isset.c)
          {
            tmp3165.C = this.C;
          }
          tmp3165.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3165.Name = this.Name;
          }
          tmp3165.__isset.name = this.__isset.name;
          if((ProgrammingLanguage != null) && __isset.programmingLanguage)
          {
            tmp3165.ProgrammingLanguage = this.ProgrammingLanguage;
          }
          tmp3165.__isset.programmingLanguage = this.__isset.programmingLanguage;
          if((SourceCode != null) && __isset.sourceCode)
          {
            tmp3165.SourceCode = this.SourceCode;
          }
          tmp3165.__isset.sourceCode = this.__isset.sourceCode;
          return tmp3165;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ProgrammingLanguage = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    SourceCode = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3166 = new TStruct("storeJobSource_args");
            await oprot.WriteStructBeginAsync(tmp3166, cancellationToken);
            var tmp3167 = new TField();
            if(__isset.c)
            {
              tmp3167.Name = "c";
              tmp3167.Type = TType.I64;
              tmp3167.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3167, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3167.Name = "name";
              tmp3167.Type = TType.String;
              tmp3167.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3167, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ProgrammingLanguage != null) && __isset.programmingLanguage)
            {
              tmp3167.Name = "programmingLanguage";
              tmp3167.Type = TType.String;
              tmp3167.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3167, cancellationToken);
              await oprot.WriteStringAsync(ProgrammingLanguage, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SourceCode != null) && __isset.sourceCode)
            {
              tmp3167.Name = "sourceCode";
              tmp3167.Type = TType.String;
              tmp3167.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3167, cancellationToken);
              await oprot.WriteStringAsync(SourceCode, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeJobSource_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.programmingLanguage == other.__isset.programmingLanguage) && ((!__isset.programmingLanguage) || (global::System.Object.Equals(ProgrammingLanguage, other.ProgrammingLanguage))))
            && ((__isset.sourceCode == other.__isset.sourceCode) && ((!__isset.sourceCode) || (global::System.Object.Equals(SourceCode, other.SourceCode))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((ProgrammingLanguage != null) && __isset.programmingLanguage)
            {
              hashcode = (hashcode * 397) + ProgrammingLanguage.GetHashCode();
            }
            if((SourceCode != null) && __isset.sourceCode)
            {
              hashcode = (hashcode * 397) + SourceCode.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3168 = new StringBuilder("storeJobSource_args(");
          int tmp3169 = 0;
          if(__isset.c)
          {
            if(0 < tmp3169++) { tmp3168.Append(", "); }
            tmp3168.Append("C: ");
            C.ToString(tmp3168);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3169++) { tmp3168.Append(", "); }
            tmp3168.Append("Name: ");
            Name.ToString(tmp3168);
          }
          if((ProgrammingLanguage != null) && __isset.programmingLanguage)
          {
            if(0 < tmp3169++) { tmp3168.Append(", "); }
            tmp3168.Append("ProgrammingLanguage: ");
            ProgrammingLanguage.ToString(tmp3168);
          }
          if((SourceCode != null) && __isset.sourceCode)
          {
            if(0 < tmp3169++) { tmp3168.Append(", "); }
            tmp3168.Append("SourceCode: ");
            SourceCode.ToString(tmp3168);
          }
          tmp3168.Append(')');
          return tmp3168.ToString();
        }
      }


      public partial class storeJobSource_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public storeJobSource_result()
        {
        }

        public storeJobSource_result DeepCopy()
        {
          var tmp3170 = new storeJobSource_result();
          if((E != null) && __isset.e)
          {
            tmp3170.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3170.__isset.e = this.__isset.e;
          return tmp3170;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3171 = new TStruct("storeJobSource_result");
            await oprot.WriteStructBeginAsync(tmp3171, cancellationToken);
            var tmp3172 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3172.Name = "E";
                tmp3172.Type = TType.Struct;
                tmp3172.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3172, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeJobSource_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3173 = new StringBuilder("storeJobSource_result(");
          int tmp3174 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3174++) { tmp3173.Append(", "); }
            tmp3173.Append("E: ");
            E.ToString(tmp3173);
          }
          tmp3173.Append(')');
          return tmp3173.ToString();
        }
      }


      public partial class storeSystemFileContents_args : TBase
      {
        private long _c;
        private string _fileName;
        private string _fileContents;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string FileName
        {
          get
          {
            return _fileName;
          }
          set
          {
            __isset.fileName = true;
            this._fileName = value;
          }
        }

        public string FileContents
        {
          get
          {
            return _fileContents;
          }
          set
          {
            __isset.fileContents = true;
            this._fileContents = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool fileName;
          public bool fileContents;
        }

        public storeSystemFileContents_args()
        {
        }

        public storeSystemFileContents_args DeepCopy()
        {
          var tmp3175 = new storeSystemFileContents_args();
          if(__isset.c)
          {
            tmp3175.C = this.C;
          }
          tmp3175.__isset.c = this.__isset.c;
          if((FileName != null) && __isset.fileName)
          {
            tmp3175.FileName = this.FileName;
          }
          tmp3175.__isset.fileName = this.__isset.fileName;
          if((FileContents != null) && __isset.fileContents)
          {
            tmp3175.FileContents = this.FileContents;
          }
          tmp3175.__isset.fileContents = this.__isset.fileContents;
          return tmp3175;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    FileContents = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3176 = new TStruct("storeSystemFileContents_args");
            await oprot.WriteStructBeginAsync(tmp3176, cancellationToken);
            var tmp3177 = new TField();
            if(__isset.c)
            {
              tmp3177.Name = "c";
              tmp3177.Type = TType.I64;
              tmp3177.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3177, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((FileName != null) && __isset.fileName)
            {
              tmp3177.Name = "fileName";
              tmp3177.Type = TType.String;
              tmp3177.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3177, cancellationToken);
              await oprot.WriteStringAsync(FileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((FileContents != null) && __isset.fileContents)
            {
              tmp3177.Name = "fileContents";
              tmp3177.Type = TType.String;
              tmp3177.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3177, cancellationToken);
              await oprot.WriteStringAsync(FileContents, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeSystemFileContents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (global::System.Object.Equals(FileName, other.FileName))))
            && ((__isset.fileContents == other.__isset.fileContents) && ((!__isset.fileContents) || (global::System.Object.Equals(FileContents, other.FileContents))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((FileName != null) && __isset.fileName)
            {
              hashcode = (hashcode * 397) + FileName.GetHashCode();
            }
            if((FileContents != null) && __isset.fileContents)
            {
              hashcode = (hashcode * 397) + FileContents.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3178 = new StringBuilder("storeSystemFileContents_args(");
          int tmp3179 = 0;
          if(__isset.c)
          {
            if(0 < tmp3179++) { tmp3178.Append(", "); }
            tmp3178.Append("C: ");
            C.ToString(tmp3178);
          }
          if((FileName != null) && __isset.fileName)
          {
            if(0 < tmp3179++) { tmp3178.Append(", "); }
            tmp3178.Append("FileName: ");
            FileName.ToString(tmp3178);
          }
          if((FileContents != null) && __isset.fileContents)
          {
            if(0 < tmp3179++) { tmp3178.Append(", "); }
            tmp3178.Append("FileContents: ");
            FileContents.ToString(tmp3178);
          }
          tmp3178.Append(')');
          return tmp3178.ToString();
        }
      }


      public partial class storeSystemFileContents_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public storeSystemFileContents_result()
        {
        }

        public storeSystemFileContents_result DeepCopy()
        {
          var tmp3180 = new storeSystemFileContents_result();
          if(__isset.success)
          {
            tmp3180.Success = this.Success;
          }
          tmp3180.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3180.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3180.__isset.e = this.__isset.e;
          return tmp3180;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3181 = new TStruct("storeSystemFileContents_result");
            await oprot.WriteStructBeginAsync(tmp3181, cancellationToken);
            var tmp3182 = new TField();

            if(this.__isset.success)
            {
              tmp3182.Name = "Success";
              tmp3182.Type = TType.Bool;
              tmp3182.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3182, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3182.Name = "E";
                tmp3182.Type = TType.Struct;
                tmp3182.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3182, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeSystemFileContents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3183 = new StringBuilder("storeSystemFileContents_result(");
          int tmp3184 = 0;
          if(__isset.success)
          {
            if(0 < tmp3184++) { tmp3183.Append(", "); }
            tmp3183.Append("Success: ");
            Success.ToString(tmp3183);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3184++) { tmp3183.Append(", "); }
            tmp3183.Append("E: ");
            E.ToString(tmp3183);
          }
          tmp3183.Append(')');
          return tmp3183.ToString();
        }
      }


      public partial class storeSystemFile_args : TBase
      {
        private long _c;
        private string _fileName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string FileName
        {
          get
          {
            return _fileName;
          }
          set
          {
            __isset.fileName = true;
            this._fileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool fileName;
        }

        public storeSystemFile_args()
        {
        }

        public storeSystemFile_args DeepCopy()
        {
          var tmp3185 = new storeSystemFile_args();
          if(__isset.c)
          {
            tmp3185.C = this.C;
          }
          tmp3185.__isset.c = this.__isset.c;
          if((FileName != null) && __isset.fileName)
          {
            tmp3185.FileName = this.FileName;
          }
          tmp3185.__isset.fileName = this.__isset.fileName;
          return tmp3185;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3186 = new TStruct("storeSystemFile_args");
            await oprot.WriteStructBeginAsync(tmp3186, cancellationToken);
            var tmp3187 = new TField();
            if(__isset.c)
            {
              tmp3187.Name = "c";
              tmp3187.Type = TType.I64;
              tmp3187.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3187, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((FileName != null) && __isset.fileName)
            {
              tmp3187.Name = "fileName";
              tmp3187.Type = TType.String;
              tmp3187.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3187, cancellationToken);
              await oprot.WriteStringAsync(FileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeSystemFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (global::System.Object.Equals(FileName, other.FileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((FileName != null) && __isset.fileName)
            {
              hashcode = (hashcode * 397) + FileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3188 = new StringBuilder("storeSystemFile_args(");
          int tmp3189 = 0;
          if(__isset.c)
          {
            if(0 < tmp3189++) { tmp3188.Append(", "); }
            tmp3188.Append("C: ");
            C.ToString(tmp3188);
          }
          if((FileName != null) && __isset.fileName)
          {
            if(0 < tmp3189++) { tmp3188.Append(", "); }
            tmp3188.Append("FileName: ");
            FileName.ToString(tmp3188);
          }
          tmp3188.Append(')');
          return tmp3188.ToString();
        }
      }


      public partial class storeSystemFile_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public storeSystemFile_result()
        {
        }

        public storeSystemFile_result DeepCopy()
        {
          var tmp3190 = new storeSystemFile_result();
          if(__isset.success)
          {
            tmp3190.Success = this.Success;
          }
          tmp3190.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3190.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3190.__isset.e = this.__isset.e;
          return tmp3190;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3191 = new TStruct("storeSystemFile_result");
            await oprot.WriteStructBeginAsync(tmp3191, cancellationToken);
            var tmp3192 = new TField();

            if(this.__isset.success)
            {
              tmp3192.Name = "Success";
              tmp3192.Type = TType.Bool;
              tmp3192.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3192, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3192.Name = "E";
                tmp3192.Type = TType.Struct;
                tmp3192.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3192, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeSystemFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3193 = new StringBuilder("storeSystemFile_result(");
          int tmp3194 = 0;
          if(__isset.success)
          {
            if(0 < tmp3194++) { tmp3193.Append(", "); }
            tmp3193.Append("Success: ");
            Success.ToString(tmp3193);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3194++) { tmp3193.Append(", "); }
            tmp3193.Append("E: ");
            E.ToString(tmp3193);
          }
          tmp3193.Append(')');
          return tmp3193.ToString();
        }
      }


      public partial class retrieveSystemFileContents_args : TBase
      {
        private long _c;
        private string _fileName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string FileName
        {
          get
          {
            return _fileName;
          }
          set
          {
            __isset.fileName = true;
            this._fileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool fileName;
        }

        public retrieveSystemFileContents_args()
        {
        }

        public retrieveSystemFileContents_args DeepCopy()
        {
          var tmp3195 = new retrieveSystemFileContents_args();
          if(__isset.c)
          {
            tmp3195.C = this.C;
          }
          tmp3195.__isset.c = this.__isset.c;
          if((FileName != null) && __isset.fileName)
          {
            tmp3195.FileName = this.FileName;
          }
          tmp3195.__isset.fileName = this.__isset.fileName;
          return tmp3195;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3196 = new TStruct("retrieveSystemFileContents_args");
            await oprot.WriteStructBeginAsync(tmp3196, cancellationToken);
            var tmp3197 = new TField();
            if(__isset.c)
            {
              tmp3197.Name = "c";
              tmp3197.Type = TType.I64;
              tmp3197.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3197, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((FileName != null) && __isset.fileName)
            {
              tmp3197.Name = "fileName";
              tmp3197.Type = TType.String;
              tmp3197.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3197, cancellationToken);
              await oprot.WriteStringAsync(FileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is retrieveSystemFileContents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (global::System.Object.Equals(FileName, other.FileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((FileName != null) && __isset.fileName)
            {
              hashcode = (hashcode * 397) + FileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3198 = new StringBuilder("retrieveSystemFileContents_args(");
          int tmp3199 = 0;
          if(__isset.c)
          {
            if(0 < tmp3199++) { tmp3198.Append(", "); }
            tmp3198.Append("C: ");
            C.ToString(tmp3198);
          }
          if((FileName != null) && __isset.fileName)
          {
            if(0 < tmp3199++) { tmp3198.Append(", "); }
            tmp3198.Append("FileName: ");
            FileName.ToString(tmp3198);
          }
          tmp3198.Append(')');
          return tmp3198.ToString();
        }
      }


      public partial class retrieveSystemFileContents_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public retrieveSystemFileContents_result()
        {
        }

        public retrieveSystemFileContents_result DeepCopy()
        {
          var tmp3200 = new retrieveSystemFileContents_result();
          if((Success != null) && __isset.success)
          {
            tmp3200.Success = this.Success;
          }
          tmp3200.__isset.success = this.__isset.success;
          return tmp3200;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3201 = new TStruct("retrieveSystemFileContents_result");
            await oprot.WriteStructBeginAsync(tmp3201, cancellationToken);
            var tmp3202 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3202.Name = "Success";
                tmp3202.Type = TType.String;
                tmp3202.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3202, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is retrieveSystemFileContents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3203 = new StringBuilder("retrieveSystemFileContents_result(");
          int tmp3204 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3204++) { tmp3203.Append(", "); }
            tmp3203.Append("Success: ");
            Success.ToString(tmp3203);
          }
          tmp3203.Append(')');
          return tmp3203.ToString();
        }
      }


      public partial class retrieveSystemFile_args : TBase
      {
        private long _c;
        private string _fileName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string FileName
        {
          get
          {
            return _fileName;
          }
          set
          {
            __isset.fileName = true;
            this._fileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool fileName;
        }

        public retrieveSystemFile_args()
        {
        }

        public retrieveSystemFile_args DeepCopy()
        {
          var tmp3205 = new retrieveSystemFile_args();
          if(__isset.c)
          {
            tmp3205.C = this.C;
          }
          tmp3205.__isset.c = this.__isset.c;
          if((FileName != null) && __isset.fileName)
          {
            tmp3205.FileName = this.FileName;
          }
          tmp3205.__isset.fileName = this.__isset.fileName;
          return tmp3205;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3206 = new TStruct("retrieveSystemFile_args");
            await oprot.WriteStructBeginAsync(tmp3206, cancellationToken);
            var tmp3207 = new TField();
            if(__isset.c)
            {
              tmp3207.Name = "c";
              tmp3207.Type = TType.I64;
              tmp3207.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3207, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((FileName != null) && __isset.fileName)
            {
              tmp3207.Name = "fileName";
              tmp3207.Type = TType.String;
              tmp3207.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3207, cancellationToken);
              await oprot.WriteStringAsync(FileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is retrieveSystemFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (global::System.Object.Equals(FileName, other.FileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((FileName != null) && __isset.fileName)
            {
              hashcode = (hashcode * 397) + FileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3208 = new StringBuilder("retrieveSystemFile_args(");
          int tmp3209 = 0;
          if(__isset.c)
          {
            if(0 < tmp3209++) { tmp3208.Append(", "); }
            tmp3208.Append("C: ");
            C.ToString(tmp3208);
          }
          if((FileName != null) && __isset.fileName)
          {
            if(0 < tmp3209++) { tmp3208.Append(", "); }
            tmp3208.Append("FileName: ");
            FileName.ToString(tmp3208);
          }
          tmp3208.Append(')');
          return tmp3208.ToString();
        }
      }


      public partial class retrieveSystemFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public retrieveSystemFile_result()
        {
        }

        public retrieveSystemFile_result DeepCopy()
        {
          var tmp3210 = new retrieveSystemFile_result();
          if((E != null) && __isset.e)
          {
            tmp3210.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3210.__isset.e = this.__isset.e;
          return tmp3210;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3211 = new TStruct("retrieveSystemFile_result");
            await oprot.WriteStructBeginAsync(tmp3211, cancellationToken);
            var tmp3212 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3212.Name = "E";
                tmp3212.Type = TType.Struct;
                tmp3212.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3212, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is retrieveSystemFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3213 = new StringBuilder("retrieveSystemFile_result(");
          int tmp3214 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3214++) { tmp3213.Append(", "); }
            tmp3213.Append("E: ");
            E.ToString(tmp3213);
          }
          tmp3213.Append(')');
          return tmp3213.ToString();
        }
      }


      public partial class tools_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public tools_args()
        {
        }

        public tools_args DeepCopy()
        {
          var tmp3215 = new tools_args();
          if(__isset.c)
          {
            tmp3215.C = this.C;
          }
          tmp3215.__isset.c = this.__isset.c;
          return tmp3215;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3216 = new TStruct("tools_args");
            await oprot.WriteStructBeginAsync(tmp3216, cancellationToken);
            var tmp3217 = new TField();
            if(__isset.c)
            {
              tmp3217.Name = "c";
              tmp3217.Type = TType.I64;
              tmp3217.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3217, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tools_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3218 = new StringBuilder("tools_args(");
          int tmp3219 = 0;
          if(__isset.c)
          {
            if(0 < tmp3219++) { tmp3218.Append(", "); }
            tmp3218.Append("C: ");
            C.ToString(tmp3218);
          }
          tmp3218.Append(')');
          return tmp3218.ToString();
        }
      }


      public partial class tools_result : TBase
      {
        private Dictionary<int, string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<int, string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public tools_result()
        {
        }

        public tools_result DeepCopy()
        {
          var tmp3220 = new tools_result();
          if((Success != null) && __isset.success)
          {
            tmp3220.Success = this.Success.DeepCopy();
          }
          tmp3220.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3220.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3220.__isset.e = this.__isset.e;
          return tmp3220;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map3221 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<int, string>(_map3221.Count);
                      for(int _i3222 = 0; _i3222 < _map3221.Count; ++_i3222)
                      {
                        int _key3223;
                        string _val3224;
                        _key3223 = await iprot.ReadI32Async(cancellationToken);
                        _val3224 = await iprot.ReadStringAsync(cancellationToken);
                        Success[_key3223] = _val3224;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3225 = new TStruct("tools_result");
            await oprot.WriteStructBeginAsync(tmp3225, cancellationToken);
            var tmp3226 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3226.Name = "Success";
                tmp3226.Type = TType.Map;
                tmp3226.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3226, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, Success.Count), cancellationToken);
                foreach (int _iter3227 in Success.Keys)
                {
                  await oprot.WriteI32Async(_iter3227, cancellationToken);
                  await oprot.WriteStringAsync(Success[_iter3227], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3226.Name = "E";
                tmp3226.Type = TType.Struct;
                tmp3226.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3226, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tools_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3228 = new StringBuilder("tools_result(");
          int tmp3229 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3229++) { tmp3228.Append(", "); }
            tmp3228.Append("Success: ");
            Success.ToString(tmp3228);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3229++) { tmp3228.Append(", "); }
            tmp3228.Append("E: ");
            E.ToString(tmp3228);
          }
          tmp3228.Append(')');
          return tmp3228.ToString();
        }
      }


      public partial class tool_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public tool_args()
        {
        }

        public tool_args DeepCopy()
        {
          var tmp3230 = new tool_args();
          if(__isset.c)
          {
            tmp3230.C = this.C;
          }
          tmp3230.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3230.Index = this.Index;
          }
          tmp3230.__isset.index = this.__isset.index;
          return tmp3230;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3231 = new TStruct("tool_args");
            await oprot.WriteStructBeginAsync(tmp3231, cancellationToken);
            var tmp3232 = new TField();
            if(__isset.c)
            {
              tmp3232.Name = "c";
              tmp3232.Type = TType.I64;
              tmp3232.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3232, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3232.Name = "index";
              tmp3232.Type = TType.I32;
              tmp3232.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3232, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3233 = new StringBuilder("tool_args(");
          int tmp3234 = 0;
          if(__isset.c)
          {
            if(0 < tmp3234++) { tmp3233.Append(", "); }
            tmp3233.Append("C: ");
            C.ToString(tmp3233);
          }
          if(__isset.index)
          {
            if(0 < tmp3234++) { tmp3233.Append(", "); }
            tmp3233.Append("Index: ");
            Index.ToString(tmp3233);
          }
          tmp3233.Append(')');
          return tmp3233.ToString();
        }
      }


      public partial class tool_result : TBase
      {
        private global::Yaskawa.Ext.API.Tool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Tool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public tool_result()
        {
        }

        public tool_result DeepCopy()
        {
          var tmp3235 = new tool_result();
          if((Success != null) && __isset.success)
          {
            tmp3235.Success = (global::Yaskawa.Ext.API.Tool)this.Success.DeepCopy();
          }
          tmp3235.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3235.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3235.__isset.e = this.__isset.e;
          return tmp3235;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Tool();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3236 = new TStruct("tool_result");
            await oprot.WriteStructBeginAsync(tmp3236, cancellationToken);
            var tmp3237 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3237.Name = "Success";
                tmp3237.Type = TType.Struct;
                tmp3237.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3237, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3237.Name = "E";
                tmp3237.Type = TType.Struct;
                tmp3237.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3237, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3238 = new StringBuilder("tool_result(");
          int tmp3239 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3239++) { tmp3238.Append(", "); }
            tmp3238.Append("Success: ");
            Success.ToString(tmp3238);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3239++) { tmp3238.Append(", "); }
            tmp3238.Append("E: ");
            E.ToString(tmp3238);
          }
          tmp3238.Append(')');
          return tmp3238.ToString();
        }
      }


      public partial class inputNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputNumber_args()
        {
        }

        public inputNumber_args DeepCopy()
        {
          var tmp3240 = new inputNumber_args();
          if(__isset.c)
          {
            tmp3240.C = this.C;
          }
          tmp3240.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3240.Name = this.Name;
          }
          tmp3240.__isset.name = this.__isset.name;
          return tmp3240;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3241 = new TStruct("inputNumber_args");
            await oprot.WriteStructBeginAsync(tmp3241, cancellationToken);
            var tmp3242 = new TField();
            if(__isset.c)
            {
              tmp3242.Name = "c";
              tmp3242.Type = TType.I64;
              tmp3242.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3242, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3242.Name = "name";
              tmp3242.Type = TType.String;
              tmp3242.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3242, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3243 = new StringBuilder("inputNumber_args(");
          int tmp3244 = 0;
          if(__isset.c)
          {
            if(0 < tmp3244++) { tmp3243.Append(", "); }
            tmp3243.Append("C: ");
            C.ToString(tmp3243);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3244++) { tmp3243.Append(", "); }
            tmp3243.Append("Name: ");
            Name.ToString(tmp3243);
          }
          tmp3243.Append(')');
          return tmp3243.ToString();
        }
      }


      public partial class inputNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputNumber_result()
        {
        }

        public inputNumber_result DeepCopy()
        {
          var tmp3245 = new inputNumber_result();
          if(__isset.success)
          {
            tmp3245.Success = this.Success;
          }
          tmp3245.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3245.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3245.__isset.e = this.__isset.e;
          return tmp3245;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3246 = new TStruct("inputNumber_result");
            await oprot.WriteStructBeginAsync(tmp3246, cancellationToken);
            var tmp3247 = new TField();

            if(this.__isset.success)
            {
              tmp3247.Name = "Success";
              tmp3247.Type = TType.I32;
              tmp3247.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3247, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3247.Name = "E";
                tmp3247.Type = TType.Struct;
                tmp3247.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3247, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3248 = new StringBuilder("inputNumber_result(");
          int tmp3249 = 0;
          if(__isset.success)
          {
            if(0 < tmp3249++) { tmp3248.Append(", "); }
            tmp3248.Append("Success: ");
            Success.ToString(tmp3248);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3249++) { tmp3248.Append(", "); }
            tmp3248.Append("E: ");
            E.ToString(tmp3248);
          }
          tmp3248.Append(')');
          return tmp3248.ToString();
        }
      }


      public partial class inputGroupNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputGroupNumber_args()
        {
        }

        public inputGroupNumber_args DeepCopy()
        {
          var tmp3250 = new inputGroupNumber_args();
          if(__isset.c)
          {
            tmp3250.C = this.C;
          }
          tmp3250.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3250.Name = this.Name;
          }
          tmp3250.__isset.name = this.__isset.name;
          return tmp3250;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3251 = new TStruct("inputGroupNumber_args");
            await oprot.WriteStructBeginAsync(tmp3251, cancellationToken);
            var tmp3252 = new TField();
            if(__isset.c)
            {
              tmp3252.Name = "c";
              tmp3252.Type = TType.I64;
              tmp3252.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3252, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3252.Name = "name";
              tmp3252.Type = TType.String;
              tmp3252.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3252, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3253 = new StringBuilder("inputGroupNumber_args(");
          int tmp3254 = 0;
          if(__isset.c)
          {
            if(0 < tmp3254++) { tmp3253.Append(", "); }
            tmp3253.Append("C: ");
            C.ToString(tmp3253);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3254++) { tmp3253.Append(", "); }
            tmp3253.Append("Name: ");
            Name.ToString(tmp3253);
          }
          tmp3253.Append(')');
          return tmp3253.ToString();
        }
      }


      public partial class inputGroupNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputGroupNumber_result()
        {
        }

        public inputGroupNumber_result DeepCopy()
        {
          var tmp3255 = new inputGroupNumber_result();
          if(__isset.success)
          {
            tmp3255.Success = this.Success;
          }
          tmp3255.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3255.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3255.__isset.e = this.__isset.e;
          return tmp3255;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3256 = new TStruct("inputGroupNumber_result");
            await oprot.WriteStructBeginAsync(tmp3256, cancellationToken);
            var tmp3257 = new TField();

            if(this.__isset.success)
            {
              tmp3257.Name = "Success";
              tmp3257.Type = TType.I32;
              tmp3257.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3257, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3257.Name = "E";
                tmp3257.Type = TType.Struct;
                tmp3257.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3257, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3258 = new StringBuilder("inputGroupNumber_result(");
          int tmp3259 = 0;
          if(__isset.success)
          {
            if(0 < tmp3259++) { tmp3258.Append(", "); }
            tmp3258.Append("Success: ");
            Success.ToString(tmp3258);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3259++) { tmp3258.Append(", "); }
            tmp3258.Append("E: ");
            E.ToString(tmp3258);
          }
          tmp3258.Append(')');
          return tmp3258.ToString();
        }
      }


      public partial class outputNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputNumber_args()
        {
        }

        public outputNumber_args DeepCopy()
        {
          var tmp3260 = new outputNumber_args();
          if(__isset.c)
          {
            tmp3260.C = this.C;
          }
          tmp3260.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3260.Name = this.Name;
          }
          tmp3260.__isset.name = this.__isset.name;
          return tmp3260;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3261 = new TStruct("outputNumber_args");
            await oprot.WriteStructBeginAsync(tmp3261, cancellationToken);
            var tmp3262 = new TField();
            if(__isset.c)
            {
              tmp3262.Name = "c";
              tmp3262.Type = TType.I64;
              tmp3262.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3262, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3262.Name = "name";
              tmp3262.Type = TType.String;
              tmp3262.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3262, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3263 = new StringBuilder("outputNumber_args(");
          int tmp3264 = 0;
          if(__isset.c)
          {
            if(0 < tmp3264++) { tmp3263.Append(", "); }
            tmp3263.Append("C: ");
            C.ToString(tmp3263);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3264++) { tmp3263.Append(", "); }
            tmp3263.Append("Name: ");
            Name.ToString(tmp3263);
          }
          tmp3263.Append(')');
          return tmp3263.ToString();
        }
      }


      public partial class outputNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputNumber_result()
        {
        }

        public outputNumber_result DeepCopy()
        {
          var tmp3265 = new outputNumber_result();
          if(__isset.success)
          {
            tmp3265.Success = this.Success;
          }
          tmp3265.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3265.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3265.__isset.e = this.__isset.e;
          return tmp3265;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3266 = new TStruct("outputNumber_result");
            await oprot.WriteStructBeginAsync(tmp3266, cancellationToken);
            var tmp3267 = new TField();

            if(this.__isset.success)
            {
              tmp3267.Name = "Success";
              tmp3267.Type = TType.I32;
              tmp3267.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3267, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3267.Name = "E";
                tmp3267.Type = TType.Struct;
                tmp3267.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3267, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3268 = new StringBuilder("outputNumber_result(");
          int tmp3269 = 0;
          if(__isset.success)
          {
            if(0 < tmp3269++) { tmp3268.Append(", "); }
            tmp3268.Append("Success: ");
            Success.ToString(tmp3268);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3269++) { tmp3268.Append(", "); }
            tmp3268.Append("E: ");
            E.ToString(tmp3268);
          }
          tmp3268.Append(')');
          return tmp3268.ToString();
        }
      }


      public partial class outputGroupNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputGroupNumber_args()
        {
        }

        public outputGroupNumber_args DeepCopy()
        {
          var tmp3270 = new outputGroupNumber_args();
          if(__isset.c)
          {
            tmp3270.C = this.C;
          }
          tmp3270.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3270.Name = this.Name;
          }
          tmp3270.__isset.name = this.__isset.name;
          return tmp3270;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3271 = new TStruct("outputGroupNumber_args");
            await oprot.WriteStructBeginAsync(tmp3271, cancellationToken);
            var tmp3272 = new TField();
            if(__isset.c)
            {
              tmp3272.Name = "c";
              tmp3272.Type = TType.I64;
              tmp3272.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3272, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3272.Name = "name";
              tmp3272.Type = TType.String;
              tmp3272.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3272, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3273 = new StringBuilder("outputGroupNumber_args(");
          int tmp3274 = 0;
          if(__isset.c)
          {
            if(0 < tmp3274++) { tmp3273.Append(", "); }
            tmp3273.Append("C: ");
            C.ToString(tmp3273);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3274++) { tmp3273.Append(", "); }
            tmp3273.Append("Name: ");
            Name.ToString(tmp3273);
          }
          tmp3273.Append(')');
          return tmp3273.ToString();
        }
      }


      public partial class outputGroupNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputGroupNumber_result()
        {
        }

        public outputGroupNumber_result DeepCopy()
        {
          var tmp3275 = new outputGroupNumber_result();
          if(__isset.success)
          {
            tmp3275.Success = this.Success;
          }
          tmp3275.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3275.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3275.__isset.e = this.__isset.e;
          return tmp3275;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3276 = new TStruct("outputGroupNumber_result");
            await oprot.WriteStructBeginAsync(tmp3276, cancellationToken);
            var tmp3277 = new TField();

            if(this.__isset.success)
            {
              tmp3277.Name = "Success";
              tmp3277.Type = TType.I32;
              tmp3277.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3277, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3277.Name = "E";
                tmp3277.Type = TType.Struct;
                tmp3277.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3277, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3278 = new StringBuilder("outputGroupNumber_result(");
          int tmp3279 = 0;
          if(__isset.success)
          {
            if(0 < tmp3279++) { tmp3278.Append(", "); }
            tmp3278.Append("Success: ");
            Success.ToString(tmp3278);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3279++) { tmp3278.Append(", "); }
            tmp3278.Append("E: ");
            E.ToString(tmp3278);
          }
          tmp3278.Append(')');
          return tmp3278.ToString();
        }
      }


      public partial class inputName_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputName_args()
        {
        }

        public inputName_args DeepCopy()
        {
          var tmp3280 = new inputName_args();
          if(__isset.c)
          {
            tmp3280.C = this.C;
          }
          tmp3280.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3280.Num = this.Num;
          }
          tmp3280.__isset.num = this.__isset.num;
          return tmp3280;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3281 = new TStruct("inputName_args");
            await oprot.WriteStructBeginAsync(tmp3281, cancellationToken);
            var tmp3282 = new TField();
            if(__isset.c)
            {
              tmp3282.Name = "c";
              tmp3282.Type = TType.I64;
              tmp3282.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3282, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3282.Name = "num";
              tmp3282.Type = TType.I32;
              tmp3282.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3282, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3283 = new StringBuilder("inputName_args(");
          int tmp3284 = 0;
          if(__isset.c)
          {
            if(0 < tmp3284++) { tmp3283.Append(", "); }
            tmp3283.Append("C: ");
            C.ToString(tmp3283);
          }
          if(__isset.num)
          {
            if(0 < tmp3284++) { tmp3283.Append(", "); }
            tmp3283.Append("Num: ");
            Num.ToString(tmp3283);
          }
          tmp3283.Append(')');
          return tmp3283.ToString();
        }
      }


      public partial class inputName_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputName_result()
        {
        }

        public inputName_result DeepCopy()
        {
          var tmp3285 = new inputName_result();
          if((Success != null) && __isset.success)
          {
            tmp3285.Success = this.Success;
          }
          tmp3285.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3285.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3285.__isset.e = this.__isset.e;
          return tmp3285;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3286 = new TStruct("inputName_result");
            await oprot.WriteStructBeginAsync(tmp3286, cancellationToken);
            var tmp3287 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3287.Name = "Success";
                tmp3287.Type = TType.String;
                tmp3287.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3287, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3287.Name = "E";
                tmp3287.Type = TType.Struct;
                tmp3287.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3287, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3288 = new StringBuilder("inputName_result(");
          int tmp3289 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3289++) { tmp3288.Append(", "); }
            tmp3288.Append("Success: ");
            Success.ToString(tmp3288);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3289++) { tmp3288.Append(", "); }
            tmp3288.Append("E: ");
            E.ToString(tmp3288);
          }
          tmp3288.Append(')');
          return tmp3288.ToString();
        }
      }


      public partial class outputName_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputName_args()
        {
        }

        public outputName_args DeepCopy()
        {
          var tmp3290 = new outputName_args();
          if(__isset.c)
          {
            tmp3290.C = this.C;
          }
          tmp3290.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3290.Num = this.Num;
          }
          tmp3290.__isset.num = this.__isset.num;
          return tmp3290;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3291 = new TStruct("outputName_args");
            await oprot.WriteStructBeginAsync(tmp3291, cancellationToken);
            var tmp3292 = new TField();
            if(__isset.c)
            {
              tmp3292.Name = "c";
              tmp3292.Type = TType.I64;
              tmp3292.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3292, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3292.Name = "num";
              tmp3292.Type = TType.I32;
              tmp3292.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3292, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3293 = new StringBuilder("outputName_args(");
          int tmp3294 = 0;
          if(__isset.c)
          {
            if(0 < tmp3294++) { tmp3293.Append(", "); }
            tmp3293.Append("C: ");
            C.ToString(tmp3293);
          }
          if(__isset.num)
          {
            if(0 < tmp3294++) { tmp3293.Append(", "); }
            tmp3293.Append("Num: ");
            Num.ToString(tmp3293);
          }
          tmp3293.Append(')');
          return tmp3293.ToString();
        }
      }


      public partial class outputName_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputName_result()
        {
        }

        public outputName_result DeepCopy()
        {
          var tmp3295 = new outputName_result();
          if((Success != null) && __isset.success)
          {
            tmp3295.Success = this.Success;
          }
          tmp3295.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3295.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3295.__isset.e = this.__isset.e;
          return tmp3295;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3296 = new TStruct("outputName_result");
            await oprot.WriteStructBeginAsync(tmp3296, cancellationToken);
            var tmp3297 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3297.Name = "Success";
                tmp3297.Type = TType.String;
                tmp3297.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3297, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3297.Name = "E";
                tmp3297.Type = TType.Struct;
                tmp3297.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3297, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3298 = new StringBuilder("outputName_result(");
          int tmp3299 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3299++) { tmp3298.Append(", "); }
            tmp3298.Append("Success: ");
            Success.ToString(tmp3298);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3299++) { tmp3298.Append(", "); }
            tmp3298.Append("E: ");
            E.ToString(tmp3298);
          }
          tmp3298.Append(')');
          return tmp3298.ToString();
        }
      }


      public partial class setInputName_args : TBase
      {
        private long _c;
        private int _num;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool name;
        }

        public setInputName_args()
        {
        }

        public setInputName_args DeepCopy()
        {
          var tmp3300 = new setInputName_args();
          if(__isset.c)
          {
            tmp3300.C = this.C;
          }
          tmp3300.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3300.Num = this.Num;
          }
          tmp3300.__isset.num = this.__isset.num;
          if((Name != null) && __isset.name)
          {
            tmp3300.Name = this.Name;
          }
          tmp3300.__isset.name = this.__isset.name;
          return tmp3300;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3301 = new TStruct("setInputName_args");
            await oprot.WriteStructBeginAsync(tmp3301, cancellationToken);
            var tmp3302 = new TField();
            if(__isset.c)
            {
              tmp3302.Name = "c";
              tmp3302.Type = TType.I64;
              tmp3302.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3302, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3302.Name = "num";
              tmp3302.Type = TType.I32;
              tmp3302.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3302, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3302.Name = "name";
              tmp3302.Type = TType.String;
              tmp3302.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3302, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setInputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3303 = new StringBuilder("setInputName_args(");
          int tmp3304 = 0;
          if(__isset.c)
          {
            if(0 < tmp3304++) { tmp3303.Append(", "); }
            tmp3303.Append("C: ");
            C.ToString(tmp3303);
          }
          if(__isset.num)
          {
            if(0 < tmp3304++) { tmp3303.Append(", "); }
            tmp3303.Append("Num: ");
            Num.ToString(tmp3303);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3304++) { tmp3303.Append(", "); }
            tmp3303.Append("Name: ");
            Name.ToString(tmp3303);
          }
          tmp3303.Append(')');
          return tmp3303.ToString();
        }
      }


      public partial class setOutputName_args : TBase
      {
        private long _c;
        private int _num;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool name;
        }

        public setOutputName_args()
        {
        }

        public setOutputName_args DeepCopy()
        {
          var tmp3305 = new setOutputName_args();
          if(__isset.c)
          {
            tmp3305.C = this.C;
          }
          tmp3305.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3305.Num = this.Num;
          }
          tmp3305.__isset.num = this.__isset.num;
          if((Name != null) && __isset.name)
          {
            tmp3305.Name = this.Name;
          }
          tmp3305.__isset.name = this.__isset.name;
          return tmp3305;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3306 = new TStruct("setOutputName_args");
            await oprot.WriteStructBeginAsync(tmp3306, cancellationToken);
            var tmp3307 = new TField();
            if(__isset.c)
            {
              tmp3307.Name = "c";
              tmp3307.Type = TType.I64;
              tmp3307.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3307, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3307.Name = "num";
              tmp3307.Type = TType.I32;
              tmp3307.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3307, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3307.Name = "name";
              tmp3307.Type = TType.String;
              tmp3307.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3307, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3308 = new StringBuilder("setOutputName_args(");
          int tmp3309 = 0;
          if(__isset.c)
          {
            if(0 < tmp3309++) { tmp3308.Append(", "); }
            tmp3308.Append("C: ");
            C.ToString(tmp3308);
          }
          if(__isset.num)
          {
            if(0 < tmp3309++) { tmp3308.Append(", "); }
            tmp3308.Append("Num: ");
            Num.ToString(tmp3308);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3309++) { tmp3308.Append(", "); }
            tmp3308.Append("Name: ");
            Name.ToString(tmp3308);
          }
          tmp3308.Append(')');
          return tmp3308.ToString();
        }
      }


      public partial class monitorInput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public monitorInput_args()
        {
        }

        public monitorInput_args DeepCopy()
        {
          var tmp3310 = new monitorInput_args();
          if(__isset.c)
          {
            tmp3310.C = this.C;
          }
          tmp3310.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3310.Num = this.Num;
          }
          tmp3310.__isset.num = this.__isset.num;
          return tmp3310;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3311 = new TStruct("monitorInput_args");
            await oprot.WriteStructBeginAsync(tmp3311, cancellationToken);
            var tmp3312 = new TField();
            if(__isset.c)
            {
              tmp3312.Name = "c";
              tmp3312.Type = TType.I64;
              tmp3312.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3312, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3312.Name = "num";
              tmp3312.Type = TType.I32;
              tmp3312.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3312, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3313 = new StringBuilder("monitorInput_args(");
          int tmp3314 = 0;
          if(__isset.c)
          {
            if(0 < tmp3314++) { tmp3313.Append(", "); }
            tmp3313.Append("C: ");
            C.ToString(tmp3313);
          }
          if(__isset.num)
          {
            if(0 < tmp3314++) { tmp3313.Append(", "); }
            tmp3313.Append("Num: ");
            Num.ToString(tmp3313);
          }
          tmp3313.Append(')');
          return tmp3313.ToString();
        }
      }


      public partial class monitorInput_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorInput_result()
        {
        }

        public monitorInput_result DeepCopy()
        {
          var tmp3315 = new monitorInput_result();
          if((E != null) && __isset.e)
          {
            tmp3315.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3315.__isset.e = this.__isset.e;
          return tmp3315;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3316 = new TStruct("monitorInput_result");
            await oprot.WriteStructBeginAsync(tmp3316, cancellationToken);
            var tmp3317 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3317.Name = "E";
                tmp3317.Type = TType.Struct;
                tmp3317.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3317, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3318 = new StringBuilder("monitorInput_result(");
          int tmp3319 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3319++) { tmp3318.Append(", "); }
            tmp3318.Append("E: ");
            E.ToString(tmp3318);
          }
          tmp3318.Append(')');
          return tmp3318.ToString();
        }
      }


      public partial class monitorInputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public monitorInputGroups_args()
        {
        }

        public monitorInputGroups_args DeepCopy()
        {
          var tmp3320 = new monitorInputGroups_args();
          if(__isset.c)
          {
            tmp3320.C = this.C;
          }
          tmp3320.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3320.GroupNum = this.GroupNum;
          }
          tmp3320.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3320.Count = this.Count;
          }
          tmp3320.__isset.count = this.__isset.count;
          return tmp3320;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3321 = new TStruct("monitorInputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3321, cancellationToken);
            var tmp3322 = new TField();
            if(__isset.c)
            {
              tmp3322.Name = "c";
              tmp3322.Type = TType.I64;
              tmp3322.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3322, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3322.Name = "groupNum";
              tmp3322.Type = TType.I32;
              tmp3322.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3322, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3322.Name = "count";
              tmp3322.Type = TType.I32;
              tmp3322.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3322, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3323 = new StringBuilder("monitorInputGroups_args(");
          int tmp3324 = 0;
          if(__isset.c)
          {
            if(0 < tmp3324++) { tmp3323.Append(", "); }
            tmp3323.Append("C: ");
            C.ToString(tmp3323);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3324++) { tmp3323.Append(", "); }
            tmp3323.Append("GroupNum: ");
            GroupNum.ToString(tmp3323);
          }
          if(__isset.count)
          {
            if(0 < tmp3324++) { tmp3323.Append(", "); }
            tmp3323.Append("Count: ");
            Count.ToString(tmp3323);
          }
          tmp3323.Append(')');
          return tmp3323.ToString();
        }
      }


      public partial class monitorInputGroups_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorInputGroups_result()
        {
        }

        public monitorInputGroups_result DeepCopy()
        {
          var tmp3325 = new monitorInputGroups_result();
          if((E != null) && __isset.e)
          {
            tmp3325.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3325.__isset.e = this.__isset.e;
          return tmp3325;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3326 = new TStruct("monitorInputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3326, cancellationToken);
            var tmp3327 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3327.Name = "E";
                tmp3327.Type = TType.Struct;
                tmp3327.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3327, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3328 = new StringBuilder("monitorInputGroups_result(");
          int tmp3329 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3329++) { tmp3328.Append(", "); }
            tmp3328.Append("E: ");
            E.ToString(tmp3328);
          }
          tmp3328.Append(')');
          return tmp3328.ToString();
        }
      }


      public partial class monitorOutput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public monitorOutput_args()
        {
        }

        public monitorOutput_args DeepCopy()
        {
          var tmp3330 = new monitorOutput_args();
          if(__isset.c)
          {
            tmp3330.C = this.C;
          }
          tmp3330.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3330.Num = this.Num;
          }
          tmp3330.__isset.num = this.__isset.num;
          return tmp3330;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3331 = new TStruct("monitorOutput_args");
            await oprot.WriteStructBeginAsync(tmp3331, cancellationToken);
            var tmp3332 = new TField();
            if(__isset.c)
            {
              tmp3332.Name = "c";
              tmp3332.Type = TType.I64;
              tmp3332.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3332, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3332.Name = "num";
              tmp3332.Type = TType.I32;
              tmp3332.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3332, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3333 = new StringBuilder("monitorOutput_args(");
          int tmp3334 = 0;
          if(__isset.c)
          {
            if(0 < tmp3334++) { tmp3333.Append(", "); }
            tmp3333.Append("C: ");
            C.ToString(tmp3333);
          }
          if(__isset.num)
          {
            if(0 < tmp3334++) { tmp3333.Append(", "); }
            tmp3333.Append("Num: ");
            Num.ToString(tmp3333);
          }
          tmp3333.Append(')');
          return tmp3333.ToString();
        }
      }


      public partial class monitorOutput_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorOutput_result()
        {
        }

        public monitorOutput_result DeepCopy()
        {
          var tmp3335 = new monitorOutput_result();
          if((E != null) && __isset.e)
          {
            tmp3335.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3335.__isset.e = this.__isset.e;
          return tmp3335;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3336 = new TStruct("monitorOutput_result");
            await oprot.WriteStructBeginAsync(tmp3336, cancellationToken);
            var tmp3337 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3337.Name = "E";
                tmp3337.Type = TType.Struct;
                tmp3337.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3337, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3338 = new StringBuilder("monitorOutput_result(");
          int tmp3339 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3339++) { tmp3338.Append(", "); }
            tmp3338.Append("E: ");
            E.ToString(tmp3338);
          }
          tmp3338.Append(')');
          return tmp3338.ToString();
        }
      }


      public partial class monitorOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public monitorOutputGroups_args()
        {
        }

        public monitorOutputGroups_args DeepCopy()
        {
          var tmp3340 = new monitorOutputGroups_args();
          if(__isset.c)
          {
            tmp3340.C = this.C;
          }
          tmp3340.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3340.GroupNum = this.GroupNum;
          }
          tmp3340.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3340.Count = this.Count;
          }
          tmp3340.__isset.count = this.__isset.count;
          return tmp3340;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3341 = new TStruct("monitorOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3341, cancellationToken);
            var tmp3342 = new TField();
            if(__isset.c)
            {
              tmp3342.Name = "c";
              tmp3342.Type = TType.I64;
              tmp3342.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3342, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3342.Name = "groupNum";
              tmp3342.Type = TType.I32;
              tmp3342.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3342, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3342.Name = "count";
              tmp3342.Type = TType.I32;
              tmp3342.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3342, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3343 = new StringBuilder("monitorOutputGroups_args(");
          int tmp3344 = 0;
          if(__isset.c)
          {
            if(0 < tmp3344++) { tmp3343.Append(", "); }
            tmp3343.Append("C: ");
            C.ToString(tmp3343);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3344++) { tmp3343.Append(", "); }
            tmp3343.Append("GroupNum: ");
            GroupNum.ToString(tmp3343);
          }
          if(__isset.count)
          {
            if(0 < tmp3344++) { tmp3343.Append(", "); }
            tmp3343.Append("Count: ");
            Count.ToString(tmp3343);
          }
          tmp3343.Append(')');
          return tmp3343.ToString();
        }
      }


      public partial class monitorOutputGroups_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorOutputGroups_result()
        {
        }

        public monitorOutputGroups_result DeepCopy()
        {
          var tmp3345 = new monitorOutputGroups_result();
          if((E != null) && __isset.e)
          {
            tmp3345.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3345.__isset.e = this.__isset.e;
          return tmp3345;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3346 = new TStruct("monitorOutputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3346, cancellationToken);
            var tmp3347 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3347.Name = "E";
                tmp3347.Type = TType.Struct;
                tmp3347.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3347, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3348 = new StringBuilder("monitorOutputGroups_result(");
          int tmp3349 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3349++) { tmp3348.Append(", "); }
            tmp3348.Append("E: ");
            E.ToString(tmp3348);
          }
          tmp3348.Append(')');
          return tmp3348.ToString();
        }
      }


      public partial class unmonitorInput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public unmonitorInput_args()
        {
        }

        public unmonitorInput_args DeepCopy()
        {
          var tmp3350 = new unmonitorInput_args();
          if(__isset.c)
          {
            tmp3350.C = this.C;
          }
          tmp3350.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3350.Num = this.Num;
          }
          tmp3350.__isset.num = this.__isset.num;
          return tmp3350;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3351 = new TStruct("unmonitorInput_args");
            await oprot.WriteStructBeginAsync(tmp3351, cancellationToken);
            var tmp3352 = new TField();
            if(__isset.c)
            {
              tmp3352.Name = "c";
              tmp3352.Type = TType.I64;
              tmp3352.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3352, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3352.Name = "num";
              tmp3352.Type = TType.I32;
              tmp3352.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3352, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3353 = new StringBuilder("unmonitorInput_args(");
          int tmp3354 = 0;
          if(__isset.c)
          {
            if(0 < tmp3354++) { tmp3353.Append(", "); }
            tmp3353.Append("C: ");
            C.ToString(tmp3353);
          }
          if(__isset.num)
          {
            if(0 < tmp3354++) { tmp3353.Append(", "); }
            tmp3353.Append("Num: ");
            Num.ToString(tmp3353);
          }
          tmp3353.Append(')');
          return tmp3353.ToString();
        }
      }


      public partial class unmonitorInput_result : TBase
      {

        public unmonitorInput_result()
        {
        }

        public unmonitorInput_result DeepCopy()
        {
          var tmp3355 = new unmonitorInput_result();
          return tmp3355;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3356 = new TStruct("unmonitorInput_result");
            await oprot.WriteStructBeginAsync(tmp3356, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3357 = new StringBuilder("unmonitorInput_result(");
          tmp3357.Append(')');
          return tmp3357.ToString();
        }
      }


      public partial class unmonitorInputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public unmonitorInputGroups_args()
        {
        }

        public unmonitorInputGroups_args DeepCopy()
        {
          var tmp3359 = new unmonitorInputGroups_args();
          if(__isset.c)
          {
            tmp3359.C = this.C;
          }
          tmp3359.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3359.GroupNum = this.GroupNum;
          }
          tmp3359.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3359.Count = this.Count;
          }
          tmp3359.__isset.count = this.__isset.count;
          return tmp3359;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3360 = new TStruct("unmonitorInputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3360, cancellationToken);
            var tmp3361 = new TField();
            if(__isset.c)
            {
              tmp3361.Name = "c";
              tmp3361.Type = TType.I64;
              tmp3361.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3361, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3361.Name = "groupNum";
              tmp3361.Type = TType.I32;
              tmp3361.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3361, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3361.Name = "count";
              tmp3361.Type = TType.I32;
              tmp3361.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3361, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3362 = new StringBuilder("unmonitorInputGroups_args(");
          int tmp3363 = 0;
          if(__isset.c)
          {
            if(0 < tmp3363++) { tmp3362.Append(", "); }
            tmp3362.Append("C: ");
            C.ToString(tmp3362);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3363++) { tmp3362.Append(", "); }
            tmp3362.Append("GroupNum: ");
            GroupNum.ToString(tmp3362);
          }
          if(__isset.count)
          {
            if(0 < tmp3363++) { tmp3362.Append(", "); }
            tmp3362.Append("Count: ");
            Count.ToString(tmp3362);
          }
          tmp3362.Append(')');
          return tmp3362.ToString();
        }
      }


      public partial class unmonitorInputGroups_result : TBase
      {

        public unmonitorInputGroups_result()
        {
        }

        public unmonitorInputGroups_result DeepCopy()
        {
          var tmp3364 = new unmonitorInputGroups_result();
          return tmp3364;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3365 = new TStruct("unmonitorInputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3365, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3366 = new StringBuilder("unmonitorInputGroups_result(");
          tmp3366.Append(')');
          return tmp3366.ToString();
        }
      }


      public partial class unmonitorOutput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public unmonitorOutput_args()
        {
        }

        public unmonitorOutput_args DeepCopy()
        {
          var tmp3368 = new unmonitorOutput_args();
          if(__isset.c)
          {
            tmp3368.C = this.C;
          }
          tmp3368.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3368.Num = this.Num;
          }
          tmp3368.__isset.num = this.__isset.num;
          return tmp3368;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3369 = new TStruct("unmonitorOutput_args");
            await oprot.WriteStructBeginAsync(tmp3369, cancellationToken);
            var tmp3370 = new TField();
            if(__isset.c)
            {
              tmp3370.Name = "c";
              tmp3370.Type = TType.I64;
              tmp3370.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3370, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3370.Name = "num";
              tmp3370.Type = TType.I32;
              tmp3370.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3370, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3371 = new StringBuilder("unmonitorOutput_args(");
          int tmp3372 = 0;
          if(__isset.c)
          {
            if(0 < tmp3372++) { tmp3371.Append(", "); }
            tmp3371.Append("C: ");
            C.ToString(tmp3371);
          }
          if(__isset.num)
          {
            if(0 < tmp3372++) { tmp3371.Append(", "); }
            tmp3371.Append("Num: ");
            Num.ToString(tmp3371);
          }
          tmp3371.Append(')');
          return tmp3371.ToString();
        }
      }


      public partial class unmonitorOutput_result : TBase
      {

        public unmonitorOutput_result()
        {
        }

        public unmonitorOutput_result DeepCopy()
        {
          var tmp3373 = new unmonitorOutput_result();
          return tmp3373;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3374 = new TStruct("unmonitorOutput_result");
            await oprot.WriteStructBeginAsync(tmp3374, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3375 = new StringBuilder("unmonitorOutput_result(");
          tmp3375.Append(')');
          return tmp3375.ToString();
        }
      }


      public partial class unmonitorOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public unmonitorOutputGroups_args()
        {
        }

        public unmonitorOutputGroups_args DeepCopy()
        {
          var tmp3377 = new unmonitorOutputGroups_args();
          if(__isset.c)
          {
            tmp3377.C = this.C;
          }
          tmp3377.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3377.GroupNum = this.GroupNum;
          }
          tmp3377.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3377.Count = this.Count;
          }
          tmp3377.__isset.count = this.__isset.count;
          return tmp3377;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3378 = new TStruct("unmonitorOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3378, cancellationToken);
            var tmp3379 = new TField();
            if(__isset.c)
            {
              tmp3379.Name = "c";
              tmp3379.Type = TType.I64;
              tmp3379.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3379, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3379.Name = "groupNum";
              tmp3379.Type = TType.I32;
              tmp3379.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3379, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3379.Name = "count";
              tmp3379.Type = TType.I32;
              tmp3379.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3379, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3380 = new StringBuilder("unmonitorOutputGroups_args(");
          int tmp3381 = 0;
          if(__isset.c)
          {
            if(0 < tmp3381++) { tmp3380.Append(", "); }
            tmp3380.Append("C: ");
            C.ToString(tmp3380);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3381++) { tmp3380.Append(", "); }
            tmp3380.Append("GroupNum: ");
            GroupNum.ToString(tmp3380);
          }
          if(__isset.count)
          {
            if(0 < tmp3381++) { tmp3380.Append(", "); }
            tmp3380.Append("Count: ");
            Count.ToString(tmp3380);
          }
          tmp3380.Append(')');
          return tmp3380.ToString();
        }
      }


      public partial class unmonitorOutputGroups_result : TBase
      {

        public unmonitorOutputGroups_result()
        {
        }

        public unmonitorOutputGroups_result DeepCopy()
        {
          var tmp3382 = new unmonitorOutputGroups_result();
          return tmp3382;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3383 = new TStruct("unmonitorOutputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3383, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3384 = new StringBuilder("unmonitorOutputGroups_result(");
          tmp3384.Append(')');
          return tmp3384.ToString();
        }
      }


      public partial class inputValue_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputValue_args()
        {
        }

        public inputValue_args DeepCopy()
        {
          var tmp3386 = new inputValue_args();
          if(__isset.c)
          {
            tmp3386.C = this.C;
          }
          tmp3386.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3386.Num = this.Num;
          }
          tmp3386.__isset.num = this.__isset.num;
          return tmp3386;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3387 = new TStruct("inputValue_args");
            await oprot.WriteStructBeginAsync(tmp3387, cancellationToken);
            var tmp3388 = new TField();
            if(__isset.c)
            {
              tmp3388.Name = "c";
              tmp3388.Type = TType.I64;
              tmp3388.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3388, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3388.Name = "num";
              tmp3388.Type = TType.I32;
              tmp3388.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3388, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3389 = new StringBuilder("inputValue_args(");
          int tmp3390 = 0;
          if(__isset.c)
          {
            if(0 < tmp3390++) { tmp3389.Append(", "); }
            tmp3389.Append("C: ");
            C.ToString(tmp3389);
          }
          if(__isset.num)
          {
            if(0 < tmp3390++) { tmp3389.Append(", "); }
            tmp3389.Append("Num: ");
            Num.ToString(tmp3389);
          }
          tmp3389.Append(')');
          return tmp3389.ToString();
        }
      }


      public partial class inputValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputValue_result()
        {
        }

        public inputValue_result DeepCopy()
        {
          var tmp3391 = new inputValue_result();
          if(__isset.success)
          {
            tmp3391.Success = this.Success;
          }
          tmp3391.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3391.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3391.__isset.e = this.__isset.e;
          return tmp3391;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3392 = new TStruct("inputValue_result");
            await oprot.WriteStructBeginAsync(tmp3392, cancellationToken);
            var tmp3393 = new TField();

            if(this.__isset.success)
            {
              tmp3393.Name = "Success";
              tmp3393.Type = TType.Bool;
              tmp3393.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3393, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3393.Name = "E";
                tmp3393.Type = TType.Struct;
                tmp3393.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3393, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3394 = new StringBuilder("inputValue_result(");
          int tmp3395 = 0;
          if(__isset.success)
          {
            if(0 < tmp3395++) { tmp3394.Append(", "); }
            tmp3394.Append("Success: ");
            Success.ToString(tmp3394);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3395++) { tmp3394.Append(", "); }
            tmp3394.Append("E: ");
            E.ToString(tmp3394);
          }
          tmp3394.Append(')');
          return tmp3394.ToString();
        }
      }


      public partial class inputGroupsValue_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public inputGroupsValue_args()
        {
        }

        public inputGroupsValue_args DeepCopy()
        {
          var tmp3396 = new inputGroupsValue_args();
          if(__isset.c)
          {
            tmp3396.C = this.C;
          }
          tmp3396.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3396.GroupNum = this.GroupNum;
          }
          tmp3396.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3396.Count = this.Count;
          }
          tmp3396.__isset.count = this.__isset.count;
          return tmp3396;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3397 = new TStruct("inputGroupsValue_args");
            await oprot.WriteStructBeginAsync(tmp3397, cancellationToken);
            var tmp3398 = new TField();
            if(__isset.c)
            {
              tmp3398.Name = "c";
              tmp3398.Type = TType.I64;
              tmp3398.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3398, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3398.Name = "groupNum";
              tmp3398.Type = TType.I32;
              tmp3398.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3398, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3398.Name = "count";
              tmp3398.Type = TType.I32;
              tmp3398.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3398, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupsValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3399 = new StringBuilder("inputGroupsValue_args(");
          int tmp3400 = 0;
          if(__isset.c)
          {
            if(0 < tmp3400++) { tmp3399.Append(", "); }
            tmp3399.Append("C: ");
            C.ToString(tmp3399);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3400++) { tmp3399.Append(", "); }
            tmp3399.Append("GroupNum: ");
            GroupNum.ToString(tmp3399);
          }
          if(__isset.count)
          {
            if(0 < tmp3400++) { tmp3399.Append(", "); }
            tmp3399.Append("Count: ");
            Count.ToString(tmp3399);
          }
          tmp3399.Append(')');
          return tmp3399.ToString();
        }
      }


      public partial class inputGroupsValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputGroupsValue_result()
        {
        }

        public inputGroupsValue_result DeepCopy()
        {
          var tmp3401 = new inputGroupsValue_result();
          if(__isset.success)
          {
            tmp3401.Success = this.Success;
          }
          tmp3401.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3401.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3401.__isset.e = this.__isset.e;
          return tmp3401;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3402 = new TStruct("inputGroupsValue_result");
            await oprot.WriteStructBeginAsync(tmp3402, cancellationToken);
            var tmp3403 = new TField();

            if(this.__isset.success)
            {
              tmp3403.Name = "Success";
              tmp3403.Type = TType.I32;
              tmp3403.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3403, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3403.Name = "E";
                tmp3403.Type = TType.Struct;
                tmp3403.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3403, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupsValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3404 = new StringBuilder("inputGroupsValue_result(");
          int tmp3405 = 0;
          if(__isset.success)
          {
            if(0 < tmp3405++) { tmp3404.Append(", "); }
            tmp3404.Append("Success: ");
            Success.ToString(tmp3404);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3405++) { tmp3404.Append(", "); }
            tmp3404.Append("E: ");
            E.ToString(tmp3404);
          }
          tmp3404.Append(')');
          return tmp3404.ToString();
        }
      }


      public partial class outputValue_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputValue_args()
        {
        }

        public outputValue_args DeepCopy()
        {
          var tmp3406 = new outputValue_args();
          if(__isset.c)
          {
            tmp3406.C = this.C;
          }
          tmp3406.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3406.Num = this.Num;
          }
          tmp3406.__isset.num = this.__isset.num;
          return tmp3406;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3407 = new TStruct("outputValue_args");
            await oprot.WriteStructBeginAsync(tmp3407, cancellationToken);
            var tmp3408 = new TField();
            if(__isset.c)
            {
              tmp3408.Name = "c";
              tmp3408.Type = TType.I64;
              tmp3408.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3408, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3408.Name = "num";
              tmp3408.Type = TType.I32;
              tmp3408.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3408, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3409 = new StringBuilder("outputValue_args(");
          int tmp3410 = 0;
          if(__isset.c)
          {
            if(0 < tmp3410++) { tmp3409.Append(", "); }
            tmp3409.Append("C: ");
            C.ToString(tmp3409);
          }
          if(__isset.num)
          {
            if(0 < tmp3410++) { tmp3409.Append(", "); }
            tmp3409.Append("Num: ");
            Num.ToString(tmp3409);
          }
          tmp3409.Append(')');
          return tmp3409.ToString();
        }
      }


      public partial class outputValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputValue_result()
        {
        }

        public outputValue_result DeepCopy()
        {
          var tmp3411 = new outputValue_result();
          if(__isset.success)
          {
            tmp3411.Success = this.Success;
          }
          tmp3411.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3411.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3411.__isset.e = this.__isset.e;
          return tmp3411;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3412 = new TStruct("outputValue_result");
            await oprot.WriteStructBeginAsync(tmp3412, cancellationToken);
            var tmp3413 = new TField();

            if(this.__isset.success)
            {
              tmp3413.Name = "Success";
              tmp3413.Type = TType.Bool;
              tmp3413.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3413, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3413.Name = "E";
                tmp3413.Type = TType.Struct;
                tmp3413.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3413, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3414 = new StringBuilder("outputValue_result(");
          int tmp3415 = 0;
          if(__isset.success)
          {
            if(0 < tmp3415++) { tmp3414.Append(", "); }
            tmp3414.Append("Success: ");
            Success.ToString(tmp3414);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3415++) { tmp3414.Append(", "); }
            tmp3414.Append("E: ");
            E.ToString(tmp3414);
          }
          tmp3414.Append(')');
          return tmp3414.ToString();
        }
      }


      public partial class outputGroupsValue_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public outputGroupsValue_args()
        {
        }

        public outputGroupsValue_args DeepCopy()
        {
          var tmp3416 = new outputGroupsValue_args();
          if(__isset.c)
          {
            tmp3416.C = this.C;
          }
          tmp3416.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3416.GroupNum = this.GroupNum;
          }
          tmp3416.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3416.Count = this.Count;
          }
          tmp3416.__isset.count = this.__isset.count;
          return tmp3416;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3417 = new TStruct("outputGroupsValue_args");
            await oprot.WriteStructBeginAsync(tmp3417, cancellationToken);
            var tmp3418 = new TField();
            if(__isset.c)
            {
              tmp3418.Name = "c";
              tmp3418.Type = TType.I64;
              tmp3418.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3418, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3418.Name = "groupNum";
              tmp3418.Type = TType.I32;
              tmp3418.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3418, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3418.Name = "count";
              tmp3418.Type = TType.I32;
              tmp3418.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3418, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupsValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3419 = new StringBuilder("outputGroupsValue_args(");
          int tmp3420 = 0;
          if(__isset.c)
          {
            if(0 < tmp3420++) { tmp3419.Append(", "); }
            tmp3419.Append("C: ");
            C.ToString(tmp3419);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3420++) { tmp3419.Append(", "); }
            tmp3419.Append("GroupNum: ");
            GroupNum.ToString(tmp3419);
          }
          if(__isset.count)
          {
            if(0 < tmp3420++) { tmp3419.Append(", "); }
            tmp3419.Append("Count: ");
            Count.ToString(tmp3419);
          }
          tmp3419.Append(')');
          return tmp3419.ToString();
        }
      }


      public partial class outputGroupsValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputGroupsValue_result()
        {
        }

        public outputGroupsValue_result DeepCopy()
        {
          var tmp3421 = new outputGroupsValue_result();
          if(__isset.success)
          {
            tmp3421.Success = this.Success;
          }
          tmp3421.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3421.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3421.__isset.e = this.__isset.e;
          return tmp3421;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3422 = new TStruct("outputGroupsValue_result");
            await oprot.WriteStructBeginAsync(tmp3422, cancellationToken);
            var tmp3423 = new TField();

            if(this.__isset.success)
            {
              tmp3423.Name = "Success";
              tmp3423.Type = TType.I32;
              tmp3423.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3423, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3423.Name = "E";
                tmp3423.Type = TType.Struct;
                tmp3423.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3423, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupsValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3424 = new StringBuilder("outputGroupsValue_result(");
          int tmp3425 = 0;
          if(__isset.success)
          {
            if(0 < tmp3425++) { tmp3424.Append(", "); }
            tmp3424.Append("Success: ");
            Success.ToString(tmp3424);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3425++) { tmp3424.Append(", "); }
            tmp3424.Append("E: ");
            E.ToString(tmp3424);
          }
          tmp3424.Append(')');
          return tmp3424.ToString();
        }
      }


      public partial class setOutput_args : TBase
      {
        private long _c;
        private int _num;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool @value;
        }

        public setOutput_args()
        {
        }

        public setOutput_args DeepCopy()
        {
          var tmp3426 = new setOutput_args();
          if(__isset.c)
          {
            tmp3426.C = this.C;
          }
          tmp3426.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3426.Num = this.Num;
          }
          tmp3426.__isset.num = this.__isset.num;
          if(__isset.@value)
          {
            tmp3426.Value = this.Value;
          }
          tmp3426.__isset.@value = this.__isset.@value;
          return tmp3426;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3427 = new TStruct("setOutput_args");
            await oprot.WriteStructBeginAsync(tmp3427, cancellationToken);
            var tmp3428 = new TField();
            if(__isset.c)
            {
              tmp3428.Name = "c";
              tmp3428.Type = TType.I64;
              tmp3428.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3428, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3428.Name = "num";
              tmp3428.Type = TType.I32;
              tmp3428.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3428, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3428.Name = "value";
              tmp3428.Type = TType.Bool;
              tmp3428.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3428, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3429 = new StringBuilder("setOutput_args(");
          int tmp3430 = 0;
          if(__isset.c)
          {
            if(0 < tmp3430++) { tmp3429.Append(", "); }
            tmp3429.Append("C: ");
            C.ToString(tmp3429);
          }
          if(__isset.num)
          {
            if(0 < tmp3430++) { tmp3429.Append(", "); }
            tmp3429.Append("Num: ");
            Num.ToString(tmp3429);
          }
          if(__isset.@value)
          {
            if(0 < tmp3430++) { tmp3429.Append(", "); }
            tmp3429.Append("Value: ");
            Value.ToString(tmp3429);
          }
          tmp3429.Append(')');
          return tmp3429.ToString();
        }
      }


      public partial class setOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;
        private int _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }

        public int Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
          public bool @value;
        }

        public setOutputGroups_args()
        {
        }

        public setOutputGroups_args DeepCopy()
        {
          var tmp3431 = new setOutputGroups_args();
          if(__isset.c)
          {
            tmp3431.C = this.C;
          }
          tmp3431.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3431.GroupNum = this.GroupNum;
          }
          tmp3431.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3431.Count = this.Count;
          }
          tmp3431.__isset.count = this.__isset.count;
          if(__isset.@value)
          {
            tmp3431.Value = this.Value;
          }
          tmp3431.__isset.@value = this.__isset.@value;
          return tmp3431;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    Value = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3432 = new TStruct("setOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3432, cancellationToken);
            var tmp3433 = new TField();
            if(__isset.c)
            {
              tmp3433.Name = "c";
              tmp3433.Type = TType.I64;
              tmp3433.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3433, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3433.Name = "groupNum";
              tmp3433.Type = TType.I32;
              tmp3433.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3433, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3433.Name = "count";
              tmp3433.Type = TType.I32;
              tmp3433.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3433, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3433.Name = "value";
              tmp3433.Type = TType.I32;
              tmp3433.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3433, cancellationToken);
              await oprot.WriteI32Async(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3434 = new StringBuilder("setOutputGroups_args(");
          int tmp3435 = 0;
          if(__isset.c)
          {
            if(0 < tmp3435++) { tmp3434.Append(", "); }
            tmp3434.Append("C: ");
            C.ToString(tmp3434);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3435++) { tmp3434.Append(", "); }
            tmp3434.Append("GroupNum: ");
            GroupNum.ToString(tmp3434);
          }
          if(__isset.count)
          {
            if(0 < tmp3435++) { tmp3434.Append(", "); }
            tmp3434.Append("Count: ");
            Count.ToString(tmp3434);
          }
          if(__isset.@value)
          {
            if(0 < tmp3435++) { tmp3434.Append(", "); }
            tmp3434.Append("Value: ");
            Value.ToString(tmp3434);
          }
          tmp3434.Append(')');
          return tmp3434.ToString();
        }
      }


      public partial class inputAddress_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputAddress_args()
        {
        }

        public inputAddress_args DeepCopy()
        {
          var tmp3436 = new inputAddress_args();
          if(__isset.c)
          {
            tmp3436.C = this.C;
          }
          tmp3436.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3436.Name = this.Name;
          }
          tmp3436.__isset.name = this.__isset.name;
          return tmp3436;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3437 = new TStruct("inputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3437, cancellationToken);
            var tmp3438 = new TField();
            if(__isset.c)
            {
              tmp3438.Name = "c";
              tmp3438.Type = TType.I64;
              tmp3438.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3438, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3438.Name = "name";
              tmp3438.Type = TType.String;
              tmp3438.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3438, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3439 = new StringBuilder("inputAddress_args(");
          int tmp3440 = 0;
          if(__isset.c)
          {
            if(0 < tmp3440++) { tmp3439.Append(", "); }
            tmp3439.Append("C: ");
            C.ToString(tmp3439);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3440++) { tmp3439.Append(", "); }
            tmp3439.Append("Name: ");
            Name.ToString(tmp3439);
          }
          tmp3439.Append(')');
          return tmp3439.ToString();
        }
      }


      public partial class inputAddress_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddress_result()
        {
        }

        public inputAddress_result DeepCopy()
        {
          var tmp3441 = new inputAddress_result();
          if(__isset.success)
          {
            tmp3441.Success = this.Success;
          }
          tmp3441.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3441.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3441.__isset.e = this.__isset.e;
          return tmp3441;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3442 = new TStruct("inputAddress_result");
            await oprot.WriteStructBeginAsync(tmp3442, cancellationToken);
            var tmp3443 = new TField();

            if(this.__isset.success)
            {
              tmp3443.Name = "Success";
              tmp3443.Type = TType.I32;
              tmp3443.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3443, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3443.Name = "E";
                tmp3443.Type = TType.Struct;
                tmp3443.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3443, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3444 = new StringBuilder("inputAddress_result(");
          int tmp3445 = 0;
          if(__isset.success)
          {
            if(0 < tmp3445++) { tmp3444.Append(", "); }
            tmp3444.Append("Success: ");
            Success.ToString(tmp3444);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3445++) { tmp3444.Append(", "); }
            tmp3444.Append("E: ");
            E.ToString(tmp3444);
          }
          tmp3444.Append(')');
          return tmp3444.ToString();
        }
      }


      public partial class inputAddressByNumber_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputAddressByNumber_args()
        {
        }

        public inputAddressByNumber_args DeepCopy()
        {
          var tmp3446 = new inputAddressByNumber_args();
          if(__isset.c)
          {
            tmp3446.C = this.C;
          }
          tmp3446.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3446.Num = this.Num;
          }
          tmp3446.__isset.num = this.__isset.num;
          return tmp3446;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3447 = new TStruct("inputAddressByNumber_args");
            await oprot.WriteStructBeginAsync(tmp3447, cancellationToken);
            var tmp3448 = new TField();
            if(__isset.c)
            {
              tmp3448.Name = "c";
              tmp3448.Type = TType.I64;
              tmp3448.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3448, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3448.Name = "num";
              tmp3448.Type = TType.I32;
              tmp3448.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3448, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressByNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3449 = new StringBuilder("inputAddressByNumber_args(");
          int tmp3450 = 0;
          if(__isset.c)
          {
            if(0 < tmp3450++) { tmp3449.Append(", "); }
            tmp3449.Append("C: ");
            C.ToString(tmp3449);
          }
          if(__isset.num)
          {
            if(0 < tmp3450++) { tmp3449.Append(", "); }
            tmp3449.Append("Num: ");
            Num.ToString(tmp3449);
          }
          tmp3449.Append(')');
          return tmp3449.ToString();
        }
      }


      public partial class inputAddressByNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddressByNumber_result()
        {
        }

        public inputAddressByNumber_result DeepCopy()
        {
          var tmp3451 = new inputAddressByNumber_result();
          if(__isset.success)
          {
            tmp3451.Success = this.Success;
          }
          tmp3451.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3451.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3451.__isset.e = this.__isset.e;
          return tmp3451;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3452 = new TStruct("inputAddressByNumber_result");
            await oprot.WriteStructBeginAsync(tmp3452, cancellationToken);
            var tmp3453 = new TField();

            if(this.__isset.success)
            {
              tmp3453.Name = "Success";
              tmp3453.Type = TType.I32;
              tmp3453.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3453, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3453.Name = "E";
                tmp3453.Type = TType.Struct;
                tmp3453.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3453, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressByNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3454 = new StringBuilder("inputAddressByNumber_result(");
          int tmp3455 = 0;
          if(__isset.success)
          {
            if(0 < tmp3455++) { tmp3454.Append(", "); }
            tmp3454.Append("Success: ");
            Success.ToString(tmp3454);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3455++) { tmp3454.Append(", "); }
            tmp3454.Append("E: ");
            E.ToString(tmp3454);
          }
          tmp3454.Append(')');
          return tmp3454.ToString();
        }
      }


      public partial class outputAddress_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputAddress_args()
        {
        }

        public outputAddress_args DeepCopy()
        {
          var tmp3456 = new outputAddress_args();
          if(__isset.c)
          {
            tmp3456.C = this.C;
          }
          tmp3456.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3456.Name = this.Name;
          }
          tmp3456.__isset.name = this.__isset.name;
          return tmp3456;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3457 = new TStruct("outputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3457, cancellationToken);
            var tmp3458 = new TField();
            if(__isset.c)
            {
              tmp3458.Name = "c";
              tmp3458.Type = TType.I64;
              tmp3458.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3458, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3458.Name = "name";
              tmp3458.Type = TType.String;
              tmp3458.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3458, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3459 = new StringBuilder("outputAddress_args(");
          int tmp3460 = 0;
          if(__isset.c)
          {
            if(0 < tmp3460++) { tmp3459.Append(", "); }
            tmp3459.Append("C: ");
            C.ToString(tmp3459);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3460++) { tmp3459.Append(", "); }
            tmp3459.Append("Name: ");
            Name.ToString(tmp3459);
          }
          tmp3459.Append(')');
          return tmp3459.ToString();
        }
      }


      public partial class outputAddress_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddress_result()
        {
        }

        public outputAddress_result DeepCopy()
        {
          var tmp3461 = new outputAddress_result();
          if(__isset.success)
          {
            tmp3461.Success = this.Success;
          }
          tmp3461.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3461.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3461.__isset.e = this.__isset.e;
          return tmp3461;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3462 = new TStruct("outputAddress_result");
            await oprot.WriteStructBeginAsync(tmp3462, cancellationToken);
            var tmp3463 = new TField();

            if(this.__isset.success)
            {
              tmp3463.Name = "Success";
              tmp3463.Type = TType.I32;
              tmp3463.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3463, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3463.Name = "E";
                tmp3463.Type = TType.Struct;
                tmp3463.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3463, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3464 = new StringBuilder("outputAddress_result(");
          int tmp3465 = 0;
          if(__isset.success)
          {
            if(0 < tmp3465++) { tmp3464.Append(", "); }
            tmp3464.Append("Success: ");
            Success.ToString(tmp3464);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3465++) { tmp3464.Append(", "); }
            tmp3464.Append("E: ");
            E.ToString(tmp3464);
          }
          tmp3464.Append(')');
          return tmp3464.ToString();
        }
      }


      public partial class outputAddressByNumber_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputAddressByNumber_args()
        {
        }

        public outputAddressByNumber_args DeepCopy()
        {
          var tmp3466 = new outputAddressByNumber_args();
          if(__isset.c)
          {
            tmp3466.C = this.C;
          }
          tmp3466.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3466.Num = this.Num;
          }
          tmp3466.__isset.num = this.__isset.num;
          return tmp3466;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3467 = new TStruct("outputAddressByNumber_args");
            await oprot.WriteStructBeginAsync(tmp3467, cancellationToken);
            var tmp3468 = new TField();
            if(__isset.c)
            {
              tmp3468.Name = "c";
              tmp3468.Type = TType.I64;
              tmp3468.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3468, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3468.Name = "num";
              tmp3468.Type = TType.I32;
              tmp3468.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3468, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressByNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3469 = new StringBuilder("outputAddressByNumber_args(");
          int tmp3470 = 0;
          if(__isset.c)
          {
            if(0 < tmp3470++) { tmp3469.Append(", "); }
            tmp3469.Append("C: ");
            C.ToString(tmp3469);
          }
          if(__isset.num)
          {
            if(0 < tmp3470++) { tmp3469.Append(", "); }
            tmp3469.Append("Num: ");
            Num.ToString(tmp3469);
          }
          tmp3469.Append(')');
          return tmp3469.ToString();
        }
      }


      public partial class outputAddressByNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddressByNumber_result()
        {
        }

        public outputAddressByNumber_result DeepCopy()
        {
          var tmp3471 = new outputAddressByNumber_result();
          if(__isset.success)
          {
            tmp3471.Success = this.Success;
          }
          tmp3471.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3471.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3471.__isset.e = this.__isset.e;
          return tmp3471;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3472 = new TStruct("outputAddressByNumber_result");
            await oprot.WriteStructBeginAsync(tmp3472, cancellationToken);
            var tmp3473 = new TField();

            if(this.__isset.success)
            {
              tmp3473.Name = "Success";
              tmp3473.Type = TType.I32;
              tmp3473.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3473, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3473.Name = "E";
                tmp3473.Type = TType.Struct;
                tmp3473.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3473, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressByNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3474 = new StringBuilder("outputAddressByNumber_result(");
          int tmp3475 = 0;
          if(__isset.success)
          {
            if(0 < tmp3475++) { tmp3474.Append(", "); }
            tmp3474.Append("Success: ");
            Success.ToString(tmp3474);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3475++) { tmp3474.Append(", "); }
            tmp3474.Append("E: ");
            E.ToString(tmp3474);
          }
          tmp3474.Append(')');
          return tmp3474.ToString();
        }
      }


      public partial class monitorIOAddress_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public monitorIOAddress_args()
        {
        }

        public monitorIOAddress_args DeepCopy()
        {
          var tmp3476 = new monitorIOAddress_args();
          if(__isset.c)
          {
            tmp3476.C = this.C;
          }
          tmp3476.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3476.Address = this.Address;
          }
          tmp3476.__isset.address = this.__isset.address;
          return tmp3476;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3477 = new TStruct("monitorIOAddress_args");
            await oprot.WriteStructBeginAsync(tmp3477, cancellationToken);
            var tmp3478 = new TField();
            if(__isset.c)
            {
              tmp3478.Name = "c";
              tmp3478.Type = TType.I64;
              tmp3478.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3478, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3478.Name = "address";
              tmp3478.Type = TType.I32;
              tmp3478.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3478, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorIOAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3479 = new StringBuilder("monitorIOAddress_args(");
          int tmp3480 = 0;
          if(__isset.c)
          {
            if(0 < tmp3480++) { tmp3479.Append(", "); }
            tmp3479.Append("C: ");
            C.ToString(tmp3479);
          }
          if(__isset.address)
          {
            if(0 < tmp3480++) { tmp3479.Append(", "); }
            tmp3479.Append("Address: ");
            Address.ToString(tmp3479);
          }
          tmp3479.Append(')');
          return tmp3479.ToString();
        }
      }


      public partial class monitorIOAddress_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorIOAddress_result()
        {
        }

        public monitorIOAddress_result DeepCopy()
        {
          var tmp3481 = new monitorIOAddress_result();
          if((E != null) && __isset.e)
          {
            tmp3481.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3481.__isset.e = this.__isset.e;
          return tmp3481;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3482 = new TStruct("monitorIOAddress_result");
            await oprot.WriteStructBeginAsync(tmp3482, cancellationToken);
            var tmp3483 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3483.Name = "E";
                tmp3483.Type = TType.Struct;
                tmp3483.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3483, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorIOAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3484 = new StringBuilder("monitorIOAddress_result(");
          int tmp3485 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3485++) { tmp3484.Append(", "); }
            tmp3484.Append("E: ");
            E.ToString(tmp3484);
          }
          tmp3484.Append(')');
          return tmp3484.ToString();
        }
      }


      public partial class unmonitorIOAddress_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public unmonitorIOAddress_args()
        {
        }

        public unmonitorIOAddress_args DeepCopy()
        {
          var tmp3486 = new unmonitorIOAddress_args();
          if(__isset.c)
          {
            tmp3486.C = this.C;
          }
          tmp3486.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3486.Address = this.Address;
          }
          tmp3486.__isset.address = this.__isset.address;
          return tmp3486;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3487 = new TStruct("unmonitorIOAddress_args");
            await oprot.WriteStructBeginAsync(tmp3487, cancellationToken);
            var tmp3488 = new TField();
            if(__isset.c)
            {
              tmp3488.Name = "c";
              tmp3488.Type = TType.I64;
              tmp3488.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3488, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3488.Name = "address";
              tmp3488.Type = TType.I32;
              tmp3488.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3488, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorIOAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3489 = new StringBuilder("unmonitorIOAddress_args(");
          int tmp3490 = 0;
          if(__isset.c)
          {
            if(0 < tmp3490++) { tmp3489.Append(", "); }
            tmp3489.Append("C: ");
            C.ToString(tmp3489);
          }
          if(__isset.address)
          {
            if(0 < tmp3490++) { tmp3489.Append(", "); }
            tmp3489.Append("Address: ");
            Address.ToString(tmp3489);
          }
          tmp3489.Append(')');
          return tmp3489.ToString();
        }
      }


      public partial class unmonitorIOAddress_result : TBase
      {

        public unmonitorIOAddress_result()
        {
        }

        public unmonitorIOAddress_result DeepCopy()
        {
          var tmp3491 = new unmonitorIOAddress_result();
          return tmp3491;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3492 = new TStruct("unmonitorIOAddress_result");
            await oprot.WriteStructBeginAsync(tmp3492, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorIOAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3493 = new StringBuilder("unmonitorIOAddress_result(");
          tmp3493.Append(')');
          return tmp3493.ToString();
        }
      }


      public partial class inputAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public inputAddressValue_args()
        {
        }

        public inputAddressValue_args DeepCopy()
        {
          var tmp3495 = new inputAddressValue_args();
          if(__isset.c)
          {
            tmp3495.C = this.C;
          }
          tmp3495.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3495.Address = this.Address;
          }
          tmp3495.__isset.address = this.__isset.address;
          return tmp3495;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3496 = new TStruct("inputAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp3496, cancellationToken);
            var tmp3497 = new TField();
            if(__isset.c)
            {
              tmp3497.Name = "c";
              tmp3497.Type = TType.I64;
              tmp3497.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3497, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3497.Name = "address";
              tmp3497.Type = TType.I32;
              tmp3497.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3497, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3498 = new StringBuilder("inputAddressValue_args(");
          int tmp3499 = 0;
          if(__isset.c)
          {
            if(0 < tmp3499++) { tmp3498.Append(", "); }
            tmp3498.Append("C: ");
            C.ToString(tmp3498);
          }
          if(__isset.address)
          {
            if(0 < tmp3499++) { tmp3498.Append(", "); }
            tmp3498.Append("Address: ");
            Address.ToString(tmp3498);
          }
          tmp3498.Append(')');
          return tmp3498.ToString();
        }
      }


      public partial class inputAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddressValue_result()
        {
        }

        public inputAddressValue_result DeepCopy()
        {
          var tmp3500 = new inputAddressValue_result();
          if(__isset.success)
          {
            tmp3500.Success = this.Success;
          }
          tmp3500.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3500.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3500.__isset.e = this.__isset.e;
          return tmp3500;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3501 = new TStruct("inputAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp3501, cancellationToken);
            var tmp3502 = new TField();

            if(this.__isset.success)
            {
              tmp3502.Name = "Success";
              tmp3502.Type = TType.Bool;
              tmp3502.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3502, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3502.Name = "E";
                tmp3502.Type = TType.Struct;
                tmp3502.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3502, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3503 = new StringBuilder("inputAddressValue_result(");
          int tmp3504 = 0;
          if(__isset.success)
          {
            if(0 < tmp3504++) { tmp3503.Append(", "); }
            tmp3503.Append("Success: ");
            Success.ToString(tmp3503);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3504++) { tmp3503.Append(", "); }
            tmp3503.Append("E: ");
            E.ToString(tmp3503);
          }
          tmp3503.Append(')');
          return tmp3503.ToString();
        }
      }


      public partial class outputAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public outputAddressValue_args()
        {
        }

        public outputAddressValue_args DeepCopy()
        {
          var tmp3505 = new outputAddressValue_args();
          if(__isset.c)
          {
            tmp3505.C = this.C;
          }
          tmp3505.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3505.Address = this.Address;
          }
          tmp3505.__isset.address = this.__isset.address;
          return tmp3505;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3506 = new TStruct("outputAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp3506, cancellationToken);
            var tmp3507 = new TField();
            if(__isset.c)
            {
              tmp3507.Name = "c";
              tmp3507.Type = TType.I64;
              tmp3507.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3507, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3507.Name = "address";
              tmp3507.Type = TType.I32;
              tmp3507.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3507, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3508 = new StringBuilder("outputAddressValue_args(");
          int tmp3509 = 0;
          if(__isset.c)
          {
            if(0 < tmp3509++) { tmp3508.Append(", "); }
            tmp3508.Append("C: ");
            C.ToString(tmp3508);
          }
          if(__isset.address)
          {
            if(0 < tmp3509++) { tmp3508.Append(", "); }
            tmp3508.Append("Address: ");
            Address.ToString(tmp3508);
          }
          tmp3508.Append(')');
          return tmp3508.ToString();
        }
      }


      public partial class outputAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddressValue_result()
        {
        }

        public outputAddressValue_result DeepCopy()
        {
          var tmp3510 = new outputAddressValue_result();
          if(__isset.success)
          {
            tmp3510.Success = this.Success;
          }
          tmp3510.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3510.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3510.__isset.e = this.__isset.e;
          return tmp3510;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3511 = new TStruct("outputAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp3511, cancellationToken);
            var tmp3512 = new TField();

            if(this.__isset.success)
            {
              tmp3512.Name = "Success";
              tmp3512.Type = TType.Bool;
              tmp3512.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3512, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3512.Name = "E";
                tmp3512.Type = TType.Struct;
                tmp3512.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3512, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3513 = new StringBuilder("outputAddressValue_result(");
          int tmp3514 = 0;
          if(__isset.success)
          {
            if(0 < tmp3514++) { tmp3513.Append(", "); }
            tmp3513.Append("Success: ");
            Success.ToString(tmp3513);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3514++) { tmp3513.Append(", "); }
            tmp3513.Append("E: ");
            E.ToString(tmp3513);
          }
          tmp3513.Append(')');
          return tmp3513.ToString();
        }
      }


      public partial class ioAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public ioAddressValue_args()
        {
        }

        public ioAddressValue_args DeepCopy()
        {
          var tmp3515 = new ioAddressValue_args();
          if(__isset.c)
          {
            tmp3515.C = this.C;
          }
          tmp3515.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3515.Address = this.Address;
          }
          tmp3515.__isset.address = this.__isset.address;
          return tmp3515;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3516 = new TStruct("ioAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp3516, cancellationToken);
            var tmp3517 = new TField();
            if(__isset.c)
            {
              tmp3517.Name = "c";
              tmp3517.Type = TType.I64;
              tmp3517.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3517, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3517.Name = "address";
              tmp3517.Type = TType.I32;
              tmp3517.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3517, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ioAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3518 = new StringBuilder("ioAddressValue_args(");
          int tmp3519 = 0;
          if(__isset.c)
          {
            if(0 < tmp3519++) { tmp3518.Append(", "); }
            tmp3518.Append("C: ");
            C.ToString(tmp3518);
          }
          if(__isset.address)
          {
            if(0 < tmp3519++) { tmp3518.Append(", "); }
            tmp3518.Append("Address: ");
            Address.ToString(tmp3518);
          }
          tmp3518.Append(')');
          return tmp3518.ToString();
        }
      }


      public partial class ioAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public ioAddressValue_result()
        {
        }

        public ioAddressValue_result DeepCopy()
        {
          var tmp3520 = new ioAddressValue_result();
          if(__isset.success)
          {
            tmp3520.Success = this.Success;
          }
          tmp3520.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3520.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3520.__isset.e = this.__isset.e;
          return tmp3520;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3521 = new TStruct("ioAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp3521, cancellationToken);
            var tmp3522 = new TField();

            if(this.__isset.success)
            {
              tmp3522.Name = "Success";
              tmp3522.Type = TType.Bool;
              tmp3522.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3522, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3522.Name = "E";
                tmp3522.Type = TType.Struct;
                tmp3522.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3522, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ioAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3523 = new StringBuilder("ioAddressValue_result(");
          int tmp3524 = 0;
          if(__isset.success)
          {
            if(0 < tmp3524++) { tmp3523.Append(", "); }
            tmp3523.Append("Success: ");
            Success.ToString(tmp3523);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3524++) { tmp3523.Append(", "); }
            tmp3523.Append("E: ");
            E.ToString(tmp3523);
          }
          tmp3523.Append(')');
          return tmp3523.ToString();
        }
      }


      public partial class setOutputAddress_args : TBase
      {
        private long _c;
        private int _address;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
          public bool @value;
        }

        public setOutputAddress_args()
        {
        }

        public setOutputAddress_args DeepCopy()
        {
          var tmp3525 = new setOutputAddress_args();
          if(__isset.c)
          {
            tmp3525.C = this.C;
          }
          tmp3525.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3525.Address = this.Address;
          }
          tmp3525.__isset.address = this.__isset.address;
          if(__isset.@value)
          {
            tmp3525.Value = this.Value;
          }
          tmp3525.__isset.@value = this.__isset.@value;
          return tmp3525;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3526 = new TStruct("setOutputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3526, cancellationToken);
            var tmp3527 = new TField();
            if(__isset.c)
            {
              tmp3527.Name = "c";
              tmp3527.Type = TType.I64;
              tmp3527.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3527, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3527.Name = "address";
              tmp3527.Type = TType.I32;
              tmp3527.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3527, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3527.Name = "value";
              tmp3527.Type = TType.Bool;
              tmp3527.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3527, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3528 = new StringBuilder("setOutputAddress_args(");
          int tmp3529 = 0;
          if(__isset.c)
          {
            if(0 < tmp3529++) { tmp3528.Append(", "); }
            tmp3528.Append("C: ");
            C.ToString(tmp3528);
          }
          if(__isset.address)
          {
            if(0 < tmp3529++) { tmp3528.Append(", "); }
            tmp3528.Append("Address: ");
            Address.ToString(tmp3528);
          }
          if(__isset.@value)
          {
            if(0 < tmp3529++) { tmp3528.Append(", "); }
            tmp3528.Append("Value: ");
            Value.ToString(tmp3528);
          }
          tmp3528.Append(')');
          return tmp3528.ToString();
        }
      }


      public partial class setNetworkInputAddress_args : TBase
      {
        private long _c;
        private int _address;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
          public bool @value;
        }

        public setNetworkInputAddress_args()
        {
        }

        public setNetworkInputAddress_args DeepCopy()
        {
          var tmp3530 = new setNetworkInputAddress_args();
          if(__isset.c)
          {
            tmp3530.C = this.C;
          }
          tmp3530.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3530.Address = this.Address;
          }
          tmp3530.__isset.address = this.__isset.address;
          if(__isset.@value)
          {
            tmp3530.Value = this.Value;
          }
          tmp3530.__isset.@value = this.__isset.@value;
          return tmp3530;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3531 = new TStruct("setNetworkInputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3531, cancellationToken);
            var tmp3532 = new TField();
            if(__isset.c)
            {
              tmp3532.Name = "c";
              tmp3532.Type = TType.I64;
              tmp3532.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3532, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3532.Name = "address";
              tmp3532.Type = TType.I32;
              tmp3532.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3532, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3532.Name = "value";
              tmp3532.Type = TType.Bool;
              tmp3532.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3532, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setNetworkInputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3533 = new StringBuilder("setNetworkInputAddress_args(");
          int tmp3534 = 0;
          if(__isset.c)
          {
            if(0 < tmp3534++) { tmp3533.Append(", "); }
            tmp3533.Append("C: ");
            C.ToString(tmp3533);
          }
          if(__isset.address)
          {
            if(0 < tmp3534++) { tmp3533.Append(", "); }
            tmp3533.Append("Address: ");
            Address.ToString(tmp3533);
          }
          if(__isset.@value)
          {
            if(0 < tmp3534++) { tmp3533.Append(", "); }
            tmp3533.Append("Value: ");
            Value.ToString(tmp3533);
          }
          tmp3533.Append(')');
          return tmp3533.ToString();
        }
      }


      public partial class mRegisterValue_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public mRegisterValue_args()
        {
        }

        public mRegisterValue_args DeepCopy()
        {
          var tmp3535 = new mRegisterValue_args();
          if(__isset.c)
          {
            tmp3535.C = this.C;
          }
          tmp3535.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3535.Index = this.Index;
          }
          tmp3535.__isset.index = this.__isset.index;
          return tmp3535;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3536 = new TStruct("mRegisterValue_args");
            await oprot.WriteStructBeginAsync(tmp3536, cancellationToken);
            var tmp3537 = new TField();
            if(__isset.c)
            {
              tmp3537.Name = "c";
              tmp3537.Type = TType.I64;
              tmp3537.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3537, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3537.Name = "index";
              tmp3537.Type = TType.I32;
              tmp3537.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3537, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mRegisterValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3538 = new StringBuilder("mRegisterValue_args(");
          int tmp3539 = 0;
          if(__isset.c)
          {
            if(0 < tmp3539++) { tmp3538.Append(", "); }
            tmp3538.Append("C: ");
            C.ToString(tmp3538);
          }
          if(__isset.index)
          {
            if(0 < tmp3539++) { tmp3538.Append(", "); }
            tmp3538.Append("Index: ");
            Index.ToString(tmp3538);
          }
          tmp3538.Append(')');
          return tmp3538.ToString();
        }
      }


      public partial class mRegisterValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public mRegisterValue_result()
        {
        }

        public mRegisterValue_result DeepCopy()
        {
          var tmp3540 = new mRegisterValue_result();
          if(__isset.success)
          {
            tmp3540.Success = this.Success;
          }
          tmp3540.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3540.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3540.__isset.e = this.__isset.e;
          return tmp3540;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3541 = new TStruct("mRegisterValue_result");
            await oprot.WriteStructBeginAsync(tmp3541, cancellationToken);
            var tmp3542 = new TField();

            if(this.__isset.success)
            {
              tmp3542.Name = "Success";
              tmp3542.Type = TType.I32;
              tmp3542.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3542, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3542.Name = "E";
                tmp3542.Type = TType.Struct;
                tmp3542.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3542, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mRegisterValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3543 = new StringBuilder("mRegisterValue_result(");
          int tmp3544 = 0;
          if(__isset.success)
          {
            if(0 < tmp3544++) { tmp3543.Append(", "); }
            tmp3543.Append("Success: ");
            Success.ToString(tmp3543);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3544++) { tmp3543.Append(", "); }
            tmp3543.Append("E: ");
            E.ToString(tmp3543);
          }
          tmp3543.Append(')');
          return tmp3543.ToString();
        }
      }


      public partial class setMRegisterValue_args : TBase
      {
        private long _c;
        private int _index;
        private int _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public int Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool @value;
        }

        public setMRegisterValue_args()
        {
        }

        public setMRegisterValue_args DeepCopy()
        {
          var tmp3545 = new setMRegisterValue_args();
          if(__isset.c)
          {
            tmp3545.C = this.C;
          }
          tmp3545.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3545.Index = this.Index;
          }
          tmp3545.__isset.index = this.__isset.index;
          if(__isset.@value)
          {
            tmp3545.Value = this.Value;
          }
          tmp3545.__isset.@value = this.__isset.@value;
          return tmp3545;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Value = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3546 = new TStruct("setMRegisterValue_args");
            await oprot.WriteStructBeginAsync(tmp3546, cancellationToken);
            var tmp3547 = new TField();
            if(__isset.c)
            {
              tmp3547.Name = "c";
              tmp3547.Type = TType.I64;
              tmp3547.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3547, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3547.Name = "index";
              tmp3547.Type = TType.I32;
              tmp3547.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3547, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3547.Name = "value";
              tmp3547.Type = TType.I32;
              tmp3547.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3547, cancellationToken);
              await oprot.WriteI32Async(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setMRegisterValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3548 = new StringBuilder("setMRegisterValue_args(");
          int tmp3549 = 0;
          if(__isset.c)
          {
            if(0 < tmp3549++) { tmp3548.Append(", "); }
            tmp3548.Append("C: ");
            C.ToString(tmp3548);
          }
          if(__isset.index)
          {
            if(0 < tmp3549++) { tmp3548.Append(", "); }
            tmp3548.Append("Index: ");
            Index.ToString(tmp3548);
          }
          if(__isset.@value)
          {
            if(0 < tmp3549++) { tmp3548.Append(", "); }
            tmp3548.Append("Value: ");
            Value.ToString(tmp3548);
          }
          tmp3548.Append(')');
          return tmp3548.ToString();
        }
      }


      public partial class fieldBusStatusInputGroup_args : TBase
      {
        private long _c;
        private string _busType;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string BusType
        {
          get
          {
            return _busType;
          }
          set
          {
            __isset.busType = true;
            this._busType = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool busType;
        }

        public fieldBusStatusInputGroup_args()
        {
        }

        public fieldBusStatusInputGroup_args DeepCopy()
        {
          var tmp3550 = new fieldBusStatusInputGroup_args();
          if(__isset.c)
          {
            tmp3550.C = this.C;
          }
          tmp3550.__isset.c = this.__isset.c;
          if((BusType != null) && __isset.busType)
          {
            tmp3550.BusType = this.BusType;
          }
          tmp3550.__isset.busType = this.__isset.busType;
          return tmp3550;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    BusType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3551 = new TStruct("fieldBusStatusInputGroup_args");
            await oprot.WriteStructBeginAsync(tmp3551, cancellationToken);
            var tmp3552 = new TField();
            if(__isset.c)
            {
              tmp3552.Name = "c";
              tmp3552.Type = TType.I64;
              tmp3552.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3552, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((BusType != null) && __isset.busType)
            {
              tmp3552.Name = "busType";
              tmp3552.Type = TType.String;
              tmp3552.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3552, cancellationToken);
              await oprot.WriteStringAsync(BusType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is fieldBusStatusInputGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.busType == other.__isset.busType) && ((!__isset.busType) || (global::System.Object.Equals(BusType, other.BusType))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((BusType != null) && __isset.busType)
            {
              hashcode = (hashcode * 397) + BusType.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3553 = new StringBuilder("fieldBusStatusInputGroup_args(");
          int tmp3554 = 0;
          if(__isset.c)
          {
            if(0 < tmp3554++) { tmp3553.Append(", "); }
            tmp3553.Append("C: ");
            C.ToString(tmp3553);
          }
          if((BusType != null) && __isset.busType)
          {
            if(0 < tmp3554++) { tmp3553.Append(", "); }
            tmp3553.Append("BusType: ");
            BusType.ToString(tmp3553);
          }
          tmp3553.Append(')');
          return tmp3553.ToString();
        }
      }


      public partial class fieldBusStatusInputGroup_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public fieldBusStatusInputGroup_result()
        {
        }

        public fieldBusStatusInputGroup_result DeepCopy()
        {
          var tmp3555 = new fieldBusStatusInputGroup_result();
          if(__isset.success)
          {
            tmp3555.Success = this.Success;
          }
          tmp3555.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3555.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3555.__isset.e = this.__isset.e;
          return tmp3555;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3556 = new TStruct("fieldBusStatusInputGroup_result");
            await oprot.WriteStructBeginAsync(tmp3556, cancellationToken);
            var tmp3557 = new TField();

            if(this.__isset.success)
            {
              tmp3557.Name = "Success";
              tmp3557.Type = TType.I32;
              tmp3557.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3557, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3557.Name = "E";
                tmp3557.Type = TType.Struct;
                tmp3557.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3557, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is fieldBusStatusInputGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3558 = new StringBuilder("fieldBusStatusInputGroup_result(");
          int tmp3559 = 0;
          if(__isset.success)
          {
            if(0 < tmp3559++) { tmp3558.Append(", "); }
            tmp3558.Append("Success: ");
            Success.ToString(tmp3558);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3559++) { tmp3558.Append(", "); }
            tmp3558.Append("E: ");
            E.ToString(tmp3558);
          }
          tmp3558.Append(')');
          return tmp3558.ToString();
        }
      }


      public partial class controlGroups_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public controlGroups_args()
        {
        }

        public controlGroups_args DeepCopy()
        {
          var tmp3560 = new controlGroups_args();
          if(__isset.c)
          {
            tmp3560.C = this.C;
          }
          tmp3560.__isset.c = this.__isset.c;
          return tmp3560;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3561 = new TStruct("controlGroups_args");
            await oprot.WriteStructBeginAsync(tmp3561, cancellationToken);
            var tmp3562 = new TField();
            if(__isset.c)
            {
              tmp3562.Name = "c";
              tmp3562.Type = TType.I64;
              tmp3562.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3562, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controlGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3563 = new StringBuilder("controlGroups_args(");
          int tmp3564 = 0;
          if(__isset.c)
          {
            if(0 < tmp3564++) { tmp3563.Append(", "); }
            tmp3563.Append("C: ");
            C.ToString(tmp3563);
          }
          tmp3563.Append(')');
          return tmp3563.ToString();
        }
      }


      public partial class controlGroups_result : TBase
      {
        private List<global::Yaskawa.Ext.API.ControlGroup> _success;

        public List<global::Yaskawa.Ext.API.ControlGroup> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public controlGroups_result()
        {
        }

        public controlGroups_result DeepCopy()
        {
          var tmp3565 = new controlGroups_result();
          if((Success != null) && __isset.success)
          {
            tmp3565.Success = this.Success.DeepCopy();
          }
          tmp3565.__isset.success = this.__isset.success;
          return tmp3565;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3566 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.ControlGroup>(_list3566.Count);
                      for(int _i3567 = 0; _i3567 < _list3566.Count; ++_i3567)
                      {
                        global::Yaskawa.Ext.API.ControlGroup _elem3568;
                        _elem3568 = new global::Yaskawa.Ext.API.ControlGroup();
                        await _elem3568.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem3568);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3569 = new TStruct("controlGroups_result");
            await oprot.WriteStructBeginAsync(tmp3569, cancellationToken);
            var tmp3570 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3570.Name = "Success";
                tmp3570.Type = TType.List;
                tmp3570.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3570, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.ControlGroup _iter3571 in Success)
                {
                  await _iter3571.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controlGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3572 = new StringBuilder("controlGroups_result(");
          int tmp3573 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3573++) { tmp3572.Append(", "); }
            tmp3572.Append("Success: ");
            Success.ToString(tmp3572);
          }
          tmp3572.Append(')');
          return tmp3572.ToString();
        }
      }


      public partial class currentControlGroup_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentControlGroup_args()
        {
        }

        public currentControlGroup_args DeepCopy()
        {
          var tmp3574 = new currentControlGroup_args();
          if(__isset.c)
          {
            tmp3574.C = this.C;
          }
          tmp3574.__isset.c = this.__isset.c;
          return tmp3574;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3575 = new TStruct("currentControlGroup_args");
            await oprot.WriteStructBeginAsync(tmp3575, cancellationToken);
            var tmp3576 = new TField();
            if(__isset.c)
            {
              tmp3576.Name = "c";
              tmp3576.Type = TType.I64;
              tmp3576.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3576, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentControlGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3577 = new StringBuilder("currentControlGroup_args(");
          int tmp3578 = 0;
          if(__isset.c)
          {
            if(0 < tmp3578++) { tmp3577.Append(", "); }
            tmp3577.Append("C: ");
            C.ToString(tmp3577);
          }
          tmp3577.Append(')');
          return tmp3577.ToString();
        }
      }


      public partial class currentControlGroup_result : TBase
      {
        private sbyte _success;

        public sbyte Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentControlGroup_result()
        {
        }

        public currentControlGroup_result DeepCopy()
        {
          var tmp3579 = new currentControlGroup_result();
          if(__isset.success)
          {
            tmp3579.Success = this.Success;
          }
          tmp3579.__isset.success = this.__isset.success;
          return tmp3579;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Byte)
                  {
                    Success = await iprot.ReadByteAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3580 = new TStruct("currentControlGroup_result");
            await oprot.WriteStructBeginAsync(tmp3580, cancellationToken);
            var tmp3581 = new TField();

            if(this.__isset.success)
            {
              tmp3581.Name = "Success";
              tmp3581.Type = TType.Byte;
              tmp3581.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3581, cancellationToken);
              await oprot.WriteByteAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentControlGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3582 = new StringBuilder("currentControlGroup_result(");
          int tmp3583 = 0;
          if(__isset.success)
          {
            if(0 < tmp3583++) { tmp3582.Append(", "); }
            tmp3582.Append("Success: ");
            Success.ToString(tmp3582);
          }
          tmp3582.Append(')');
          return tmp3582.ToString();
        }
      }


      public partial class robotCount_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public robotCount_args()
        {
        }

        public robotCount_args DeepCopy()
        {
          var tmp3584 = new robotCount_args();
          if(__isset.c)
          {
            tmp3584.C = this.C;
          }
          tmp3584.__isset.c = this.__isset.c;
          return tmp3584;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3585 = new TStruct("robotCount_args");
            await oprot.WriteStructBeginAsync(tmp3585, cancellationToken);
            var tmp3586 = new TField();
            if(__isset.c)
            {
              tmp3586.Name = "c";
              tmp3586.Type = TType.I64;
              tmp3586.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3586, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is robotCount_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3587 = new StringBuilder("robotCount_args(");
          int tmp3588 = 0;
          if(__isset.c)
          {
            if(0 < tmp3588++) { tmp3587.Append(", "); }
            tmp3587.Append("C: ");
            C.ToString(tmp3587);
          }
          tmp3587.Append(')');
          return tmp3587.ToString();
        }
      }


      public partial class robotCount_result : TBase
      {
        private sbyte _success;

        public sbyte Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public robotCount_result()
        {
        }

        public robotCount_result DeepCopy()
        {
          var tmp3589 = new robotCount_result();
          if(__isset.success)
          {
            tmp3589.Success = this.Success;
          }
          tmp3589.__isset.success = this.__isset.success;
          return tmp3589;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Byte)
                  {
                    Success = await iprot.ReadByteAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3590 = new TStruct("robotCount_result");
            await oprot.WriteStructBeginAsync(tmp3590, cancellationToken);
            var tmp3591 = new TField();

            if(this.__isset.success)
            {
              tmp3591.Name = "Success";
              tmp3591.Type = TType.Byte;
              tmp3591.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3591, cancellationToken);
              await oprot.WriteByteAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is robotCount_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3592 = new StringBuilder("robotCount_result(");
          int tmp3593 = 0;
          if(__isset.success)
          {
            if(0 < tmp3593++) { tmp3592.Append(", "); }
            tmp3592.Append("Success: ");
            Success.ToString(tmp3592);
          }
          tmp3592.Append(')');
          return tmp3592.ToString();
        }
      }


      public partial class currentRobot_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentRobot_args()
        {
        }

        public currentRobot_args DeepCopy()
        {
          var tmp3594 = new currentRobot_args();
          if(__isset.c)
          {
            tmp3594.C = this.C;
          }
          tmp3594.__isset.c = this.__isset.c;
          return tmp3594;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3595 = new TStruct("currentRobot_args");
            await oprot.WriteStructBeginAsync(tmp3595, cancellationToken);
            var tmp3596 = new TField();
            if(__isset.c)
            {
              tmp3596.Name = "c";
              tmp3596.Type = TType.I64;
              tmp3596.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3596, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentRobot_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3597 = new StringBuilder("currentRobot_args(");
          int tmp3598 = 0;
          if(__isset.c)
          {
            if(0 < tmp3598++) { tmp3597.Append(", "); }
            tmp3597.Append("C: ");
            C.ToString(tmp3597);
          }
          tmp3597.Append(')');
          return tmp3597.ToString();
        }
      }


      public partial class currentRobot_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentRobot_result()
        {
        }

        public currentRobot_result DeepCopy()
        {
          var tmp3599 = new currentRobot_result();
          if(__isset.success)
          {
            tmp3599.Success = this.Success;
          }
          tmp3599.__isset.success = this.__isset.success;
          return tmp3599;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3600 = new TStruct("currentRobot_result");
            await oprot.WriteStructBeginAsync(tmp3600, cancellationToken);
            var tmp3601 = new TField();

            if(this.__isset.success)
            {
              tmp3601.Name = "Success";
              tmp3601.Type = TType.I32;
              tmp3601.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3601, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentRobot_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3602 = new StringBuilder("currentRobot_result(");
          int tmp3603 = 0;
          if(__isset.success)
          {
            if(0 < tmp3603++) { tmp3602.Append(", "); }
            tmp3602.Append("Success: ");
            Success.ToString(tmp3602);
          }
          tmp3602.Append(')');
          return tmp3602.ToString();
        }
      }


      public partial class variable_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public variable_args()
        {
        }

        public variable_args DeepCopy()
        {
          var tmp3604 = new variable_args();
          if(__isset.c)
          {
            tmp3604.C = this.C;
          }
          tmp3604.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3604.Name = this.Name;
          }
          tmp3604.__isset.name = this.__isset.name;
          return tmp3604;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3605 = new TStruct("variable_args");
            await oprot.WriteStructBeginAsync(tmp3605, cancellationToken);
            var tmp3606 = new TField();
            if(__isset.c)
            {
              tmp3606.Name = "c";
              tmp3606.Type = TType.I64;
              tmp3606.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3606, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3606.Name = "name";
              tmp3606.Type = TType.String;
              tmp3606.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3606, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3607 = new StringBuilder("variable_args(");
          int tmp3608 = 0;
          if(__isset.c)
          {
            if(0 < tmp3608++) { tmp3607.Append(", "); }
            tmp3607.Append("C: ");
            C.ToString(tmp3607);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3608++) { tmp3607.Append(", "); }
            tmp3607.Append("Name: ");
            Name.ToString(tmp3607);
          }
          tmp3607.Append(')');
          return tmp3607.ToString();
        }
      }


      public partial class variable_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variable_result()
        {
        }

        public variable_result DeepCopy()
        {
          var tmp3609 = new variable_result();
          if((Success != null) && __isset.success)
          {
            tmp3609.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp3609.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3609.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3609.__isset.e = this.__isset.e;
          return tmp3609;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3610 = new TStruct("variable_result");
            await oprot.WriteStructBeginAsync(tmp3610, cancellationToken);
            var tmp3611 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3611.Name = "Success";
                tmp3611.Type = TType.Struct;
                tmp3611.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3611, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3611.Name = "E";
                tmp3611.Type = TType.Struct;
                tmp3611.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3611, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3612 = new StringBuilder("variable_result(");
          int tmp3613 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3613++) { tmp3612.Append(", "); }
            tmp3612.Append("Success: ");
            Success.ToString(tmp3612);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3613++) { tmp3612.Append(", "); }
            tmp3612.Append("E: ");
            E.ToString(tmp3612);
          }
          tmp3612.Append(')');
          return tmp3612.ToString();
        }
      }


      public partial class variableByAddr_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public variableByAddr_args()
        {
        }

        public variableByAddr_args DeepCopy()
        {
          var tmp3614 = new variableByAddr_args();
          if(__isset.c)
          {
            tmp3614.C = this.C;
          }
          tmp3614.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3614.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3614.__isset.addr = this.__isset.addr;
          return tmp3614;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3615 = new TStruct("variableByAddr_args");
            await oprot.WriteStructBeginAsync(tmp3615, cancellationToken);
            var tmp3616 = new TField();
            if(__isset.c)
            {
              tmp3616.Name = "c";
              tmp3616.Type = TType.I64;
              tmp3616.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3616, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3616.Name = "addr";
              tmp3616.Type = TType.Struct;
              tmp3616.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3616, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableByAddr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3617 = new StringBuilder("variableByAddr_args(");
          int tmp3618 = 0;
          if(__isset.c)
          {
            if(0 < tmp3618++) { tmp3617.Append(", "); }
            tmp3617.Append("C: ");
            C.ToString(tmp3617);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3618++) { tmp3617.Append(", "); }
            tmp3617.Append("Addr: ");
            Addr.ToString(tmp3617);
          }
          tmp3617.Append(')');
          return tmp3617.ToString();
        }
      }


      public partial class variableByAddr_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableByAddr_result()
        {
        }

        public variableByAddr_result DeepCopy()
        {
          var tmp3619 = new variableByAddr_result();
          if((Success != null) && __isset.success)
          {
            tmp3619.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp3619.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3619.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3619.__isset.e = this.__isset.e;
          return tmp3619;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3620 = new TStruct("variableByAddr_result");
            await oprot.WriteStructBeginAsync(tmp3620, cancellationToken);
            var tmp3621 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3621.Name = "Success";
                tmp3621.Type = TType.Struct;
                tmp3621.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3621, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3621.Name = "E";
                tmp3621.Type = TType.Struct;
                tmp3621.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3621, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableByAddr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3622 = new StringBuilder("variableByAddr_result(");
          int tmp3623 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3623++) { tmp3622.Append(", "); }
            tmp3622.Append("Success: ");
            Success.ToString(tmp3622);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3623++) { tmp3622.Append(", "); }
            tmp3622.Append("E: ");
            E.ToString(tmp3622);
          }
          tmp3622.Append(')');
          return tmp3622.ToString();
        }
      }


      public partial class setVariable_args : TBase
      {
        private long _c;
        private string _name;
        private global::Yaskawa.Ext.API.Any _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool @value;
        }

        public setVariable_args()
        {
        }

        public setVariable_args DeepCopy()
        {
          var tmp3624 = new setVariable_args();
          if(__isset.c)
          {
            tmp3624.C = this.C;
          }
          tmp3624.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3624.Name = this.Name;
          }
          tmp3624.__isset.name = this.__isset.name;
          if((Value != null) && __isset.@value)
          {
            tmp3624.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp3624.__isset.@value = this.__isset.@value;
          return tmp3624;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3625 = new TStruct("setVariable_args");
            await oprot.WriteStructBeginAsync(tmp3625, cancellationToken);
            var tmp3626 = new TField();
            if(__isset.c)
            {
              tmp3626.Name = "c";
              tmp3626.Type = TType.I64;
              tmp3626.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3626, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3626.Name = "name";
              tmp3626.Type = TType.String;
              tmp3626.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3626, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp3626.Name = "value";
              tmp3626.Type = TType.Struct;
              tmp3626.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3626, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3627 = new StringBuilder("setVariable_args(");
          int tmp3628 = 0;
          if(__isset.c)
          {
            if(0 < tmp3628++) { tmp3627.Append(", "); }
            tmp3627.Append("C: ");
            C.ToString(tmp3627);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3628++) { tmp3627.Append(", "); }
            tmp3627.Append("Name: ");
            Name.ToString(tmp3627);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp3628++) { tmp3627.Append(", "); }
            tmp3627.Append("Value: ");
            Value.ToString(tmp3627);
          }
          tmp3627.Append(')');
          return tmp3627.ToString();
        }
      }


      public partial class setVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariable_result()
        {
        }

        public setVariable_result DeepCopy()
        {
          var tmp3629 = new setVariable_result();
          if((E != null) && __isset.e)
          {
            tmp3629.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3629.__isset.e = this.__isset.e;
          return tmp3629;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3630 = new TStruct("setVariable_result");
            await oprot.WriteStructBeginAsync(tmp3630, cancellationToken);
            var tmp3631 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3631.Name = "E";
                tmp3631.Type = TType.Struct;
                tmp3631.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3631, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3632 = new StringBuilder("setVariable_result(");
          int tmp3633 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3633++) { tmp3632.Append(", "); }
            tmp3632.Append("E: ");
            E.ToString(tmp3632);
          }
          tmp3632.Append(')');
          return tmp3632.ToString();
        }
      }


      public partial class setVariableByAddr_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;
        private global::Yaskawa.Ext.API.Any _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
          public bool @value;
        }

        public setVariableByAddr_args()
        {
        }

        public setVariableByAddr_args DeepCopy()
        {
          var tmp3634 = new setVariableByAddr_args();
          if(__isset.c)
          {
            tmp3634.C = this.C;
          }
          tmp3634.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3634.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3634.__isset.addr = this.__isset.addr;
          if((Value != null) && __isset.@value)
          {
            tmp3634.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp3634.__isset.@value = this.__isset.@value;
          return tmp3634;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3635 = new TStruct("setVariableByAddr_args");
            await oprot.WriteStructBeginAsync(tmp3635, cancellationToken);
            var tmp3636 = new TField();
            if(__isset.c)
            {
              tmp3636.Name = "c";
              tmp3636.Type = TType.I64;
              tmp3636.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3636, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3636.Name = "addr";
              tmp3636.Type = TType.Struct;
              tmp3636.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3636, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp3636.Name = "value";
              tmp3636.Type = TType.Struct;
              tmp3636.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3636, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableByAddr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3637 = new StringBuilder("setVariableByAddr_args(");
          int tmp3638 = 0;
          if(__isset.c)
          {
            if(0 < tmp3638++) { tmp3637.Append(", "); }
            tmp3637.Append("C: ");
            C.ToString(tmp3637);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3638++) { tmp3637.Append(", "); }
            tmp3637.Append("Addr: ");
            Addr.ToString(tmp3637);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp3638++) { tmp3637.Append(", "); }
            tmp3637.Append("Value: ");
            Value.ToString(tmp3637);
          }
          tmp3637.Append(')');
          return tmp3637.ToString();
        }
      }


      public partial class setVariableByAddr_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariableByAddr_result()
        {
        }

        public setVariableByAddr_result DeepCopy()
        {
          var tmp3639 = new setVariableByAddr_result();
          if((E != null) && __isset.e)
          {
            tmp3639.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3639.__isset.e = this.__isset.e;
          return tmp3639;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3640 = new TStruct("setVariableByAddr_result");
            await oprot.WriteStructBeginAsync(tmp3640, cancellationToken);
            var tmp3641 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3641.Name = "E";
                tmp3641.Type = TType.Struct;
                tmp3641.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3641, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableByAddr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3642 = new StringBuilder("setVariableByAddr_result(");
          int tmp3643 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3643++) { tmp3642.Append(", "); }
            tmp3642.Append("E: ");
            E.ToString(tmp3642);
          }
          tmp3642.Append(')');
          return tmp3642.ToString();
        }
      }


      public partial class variableAddrByNameAndSpace_args : TBase
      {
        private long _c;
        private string _name;
        private global::Yaskawa.Ext.API.AddressSpace _space;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.AddressSpace"/>
        /// </summary>
        public global::Yaskawa.Ext.API.AddressSpace Space
        {
          get
          {
            return _space;
          }
          set
          {
            __isset.space = true;
            this._space = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool space;
        }

        public variableAddrByNameAndSpace_args()
        {
        }

        public variableAddrByNameAndSpace_args DeepCopy()
        {
          var tmp3644 = new variableAddrByNameAndSpace_args();
          if(__isset.c)
          {
            tmp3644.C = this.C;
          }
          tmp3644.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3644.Name = this.Name;
          }
          tmp3644.__isset.name = this.__isset.name;
          if(__isset.space)
          {
            tmp3644.Space = this.Space;
          }
          tmp3644.__isset.space = this.__isset.space;
          return tmp3644;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Space = (global::Yaskawa.Ext.API.AddressSpace)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3645 = new TStruct("variableAddrByNameAndSpace_args");
            await oprot.WriteStructBeginAsync(tmp3645, cancellationToken);
            var tmp3646 = new TField();
            if(__isset.c)
            {
              tmp3646.Name = "c";
              tmp3646.Type = TType.I64;
              tmp3646.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3646, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3646.Name = "name";
              tmp3646.Type = TType.String;
              tmp3646.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3646, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.space)
            {
              tmp3646.Name = "space";
              tmp3646.Type = TType.I32;
              tmp3646.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3646, cancellationToken);
              await oprot.WriteI32Async((int)Space, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByNameAndSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.space == other.__isset.space) && ((!__isset.space) || (global::System.Object.Equals(Space, other.Space))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if(__isset.space)
            {
              hashcode = (hashcode * 397) + Space.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3647 = new StringBuilder("variableAddrByNameAndSpace_args(");
          int tmp3648 = 0;
          if(__isset.c)
          {
            if(0 < tmp3648++) { tmp3647.Append(", "); }
            tmp3647.Append("C: ");
            C.ToString(tmp3647);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3648++) { tmp3647.Append(", "); }
            tmp3647.Append("Name: ");
            Name.ToString(tmp3647);
          }
          if(__isset.space)
          {
            if(0 < tmp3648++) { tmp3647.Append(", "); }
            tmp3647.Append("Space: ");
            Space.ToString(tmp3647);
          }
          tmp3647.Append(')');
          return tmp3647.ToString();
        }
      }


      public partial class variableAddrByNameAndSpace_result : TBase
      {
        private global::Yaskawa.Ext.API.VariableAddress _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.VariableAddress Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableAddrByNameAndSpace_result()
        {
        }

        public variableAddrByNameAndSpace_result DeepCopy()
        {
          var tmp3649 = new variableAddrByNameAndSpace_result();
          if((Success != null) && __isset.success)
          {
            tmp3649.Success = (global::Yaskawa.Ext.API.VariableAddress)this.Success.DeepCopy();
          }
          tmp3649.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3649.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3649.__isset.e = this.__isset.e;
          return tmp3649;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.VariableAddress();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3650 = new TStruct("variableAddrByNameAndSpace_result");
            await oprot.WriteStructBeginAsync(tmp3650, cancellationToken);
            var tmp3651 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3651.Name = "Success";
                tmp3651.Type = TType.Struct;
                tmp3651.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3651, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3651.Name = "E";
                tmp3651.Type = TType.Struct;
                tmp3651.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3651, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByNameAndSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3652 = new StringBuilder("variableAddrByNameAndSpace_result(");
          int tmp3653 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3653++) { tmp3652.Append(", "); }
            tmp3652.Append("Success: ");
            Success.ToString(tmp3652);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3653++) { tmp3652.Append(", "); }
            tmp3652.Append("E: ");
            E.ToString(tmp3652);
          }
          tmp3652.Append(')');
          return tmp3652.ToString();
        }
      }


      public partial class variableAddrByName_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public variableAddrByName_args()
        {
        }

        public variableAddrByName_args DeepCopy()
        {
          var tmp3654 = new variableAddrByName_args();
          if(__isset.c)
          {
            tmp3654.C = this.C;
          }
          tmp3654.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3654.Name = this.Name;
          }
          tmp3654.__isset.name = this.__isset.name;
          return tmp3654;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3655 = new TStruct("variableAddrByName_args");
            await oprot.WriteStructBeginAsync(tmp3655, cancellationToken);
            var tmp3656 = new TField();
            if(__isset.c)
            {
              tmp3656.Name = "c";
              tmp3656.Type = TType.I64;
              tmp3656.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3656, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3656.Name = "name";
              tmp3656.Type = TType.String;
              tmp3656.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3656, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3657 = new StringBuilder("variableAddrByName_args(");
          int tmp3658 = 0;
          if(__isset.c)
          {
            if(0 < tmp3658++) { tmp3657.Append(", "); }
            tmp3657.Append("C: ");
            C.ToString(tmp3657);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3658++) { tmp3657.Append(", "); }
            tmp3657.Append("Name: ");
            Name.ToString(tmp3657);
          }
          tmp3657.Append(')');
          return tmp3657.ToString();
        }
      }


      public partial class variableAddrByName_result : TBase
      {
        private global::Yaskawa.Ext.API.VariableAddress _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.VariableAddress Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableAddrByName_result()
        {
        }

        public variableAddrByName_result DeepCopy()
        {
          var tmp3659 = new variableAddrByName_result();
          if((Success != null) && __isset.success)
          {
            tmp3659.Success = (global::Yaskawa.Ext.API.VariableAddress)this.Success.DeepCopy();
          }
          tmp3659.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3659.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3659.__isset.e = this.__isset.e;
          return tmp3659;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.VariableAddress();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3660 = new TStruct("variableAddrByName_result");
            await oprot.WriteStructBeginAsync(tmp3660, cancellationToken);
            var tmp3661 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3661.Name = "Success";
                tmp3661.Type = TType.Struct;
                tmp3661.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3661, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3661.Name = "E";
                tmp3661.Type = TType.Struct;
                tmp3661.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3661, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3662 = new StringBuilder("variableAddrByName_result(");
          int tmp3663 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3663++) { tmp3662.Append(", "); }
            tmp3662.Append("Success: ");
            Success.ToString(tmp3662);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3663++) { tmp3662.Append(", "); }
            tmp3662.Append("E: ");
            E.ToString(tmp3662);
          }
          tmp3662.Append(')');
          return tmp3662.ToString();
        }
      }


      public partial class setVariableName_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
          public bool name;
        }

        public setVariableName_args()
        {
        }

        public setVariableName_args DeepCopy()
        {
          var tmp3664 = new setVariableName_args();
          if(__isset.c)
          {
            tmp3664.C = this.C;
          }
          tmp3664.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3664.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3664.__isset.addr = this.__isset.addr;
          if((Name != null) && __isset.name)
          {
            tmp3664.Name = this.Name;
          }
          tmp3664.__isset.name = this.__isset.name;
          return tmp3664;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3665 = new TStruct("setVariableName_args");
            await oprot.WriteStructBeginAsync(tmp3665, cancellationToken);
            var tmp3666 = new TField();
            if(__isset.c)
            {
              tmp3666.Name = "c";
              tmp3666.Type = TType.I64;
              tmp3666.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3666, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3666.Name = "addr";
              tmp3666.Type = TType.Struct;
              tmp3666.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3666, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3666.Name = "name";
              tmp3666.Type = TType.String;
              tmp3666.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3666, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3667 = new StringBuilder("setVariableName_args(");
          int tmp3668 = 0;
          if(__isset.c)
          {
            if(0 < tmp3668++) { tmp3667.Append(", "); }
            tmp3667.Append("C: ");
            C.ToString(tmp3667);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3668++) { tmp3667.Append(", "); }
            tmp3667.Append("Addr: ");
            Addr.ToString(tmp3667);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3668++) { tmp3667.Append(", "); }
            tmp3667.Append("Name: ");
            Name.ToString(tmp3667);
          }
          tmp3667.Append(')');
          return tmp3667.ToString();
        }
      }


      public partial class setVariableName_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariableName_result()
        {
        }

        public setVariableName_result DeepCopy()
        {
          var tmp3669 = new setVariableName_result();
          if((E != null) && __isset.e)
          {
            tmp3669.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3669.__isset.e = this.__isset.e;
          return tmp3669;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3670 = new TStruct("setVariableName_result");
            await oprot.WriteStructBeginAsync(tmp3670, cancellationToken);
            var tmp3671 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3671.Name = "E";
                tmp3671.Type = TType.Struct;
                tmp3671.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3671, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3672 = new StringBuilder("setVariableName_result(");
          int tmp3673 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3673++) { tmp3672.Append(", "); }
            tmp3672.Append("E: ");
            E.ToString(tmp3672);
          }
          tmp3672.Append(')');
          return tmp3672.ToString();
        }
      }


      public partial class monitorVariable_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public monitorVariable_args()
        {
        }

        public monitorVariable_args DeepCopy()
        {
          var tmp3674 = new monitorVariable_args();
          if(__isset.c)
          {
            tmp3674.C = this.C;
          }
          tmp3674.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3674.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3674.__isset.addr = this.__isset.addr;
          return tmp3674;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3675 = new TStruct("monitorVariable_args");
            await oprot.WriteStructBeginAsync(tmp3675, cancellationToken);
            var tmp3676 = new TField();
            if(__isset.c)
            {
              tmp3676.Name = "c";
              tmp3676.Type = TType.I64;
              tmp3676.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3676, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3676.Name = "addr";
              tmp3676.Type = TType.Struct;
              tmp3676.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3676, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3677 = new StringBuilder("monitorVariable_args(");
          int tmp3678 = 0;
          if(__isset.c)
          {
            if(0 < tmp3678++) { tmp3677.Append(", "); }
            tmp3677.Append("C: ");
            C.ToString(tmp3677);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3678++) { tmp3677.Append(", "); }
            tmp3677.Append("Addr: ");
            Addr.ToString(tmp3677);
          }
          tmp3677.Append(')');
          return tmp3677.ToString();
        }
      }


      public partial class monitorVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorVariable_result()
        {
        }

        public monitorVariable_result DeepCopy()
        {
          var tmp3679 = new monitorVariable_result();
          if((E != null) && __isset.e)
          {
            tmp3679.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3679.__isset.e = this.__isset.e;
          return tmp3679;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3680 = new TStruct("monitorVariable_result");
            await oprot.WriteStructBeginAsync(tmp3680, cancellationToken);
            var tmp3681 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3681.Name = "E";
                tmp3681.Type = TType.Struct;
                tmp3681.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3681, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3682 = new StringBuilder("monitorVariable_result(");
          int tmp3683 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3683++) { tmp3682.Append(", "); }
            tmp3682.Append("E: ");
            E.ToString(tmp3682);
          }
          tmp3682.Append(')');
          return tmp3682.ToString();
        }
      }


      public partial class unmonitorVariable_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public unmonitorVariable_args()
        {
        }

        public unmonitorVariable_args DeepCopy()
        {
          var tmp3684 = new unmonitorVariable_args();
          if(__isset.c)
          {
            tmp3684.C = this.C;
          }
          tmp3684.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3684.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3684.__isset.addr = this.__isset.addr;
          return tmp3684;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3685 = new TStruct("unmonitorVariable_args");
            await oprot.WriteStructBeginAsync(tmp3685, cancellationToken);
            var tmp3686 = new TField();
            if(__isset.c)
            {
              tmp3686.Name = "c";
              tmp3686.Type = TType.I64;
              tmp3686.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3686, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3686.Name = "addr";
              tmp3686.Type = TType.Struct;
              tmp3686.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3686, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3687 = new StringBuilder("unmonitorVariable_args(");
          int tmp3688 = 0;
          if(__isset.c)
          {
            if(0 < tmp3688++) { tmp3687.Append(", "); }
            tmp3687.Append("C: ");
            C.ToString(tmp3687);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3688++) { tmp3687.Append(", "); }
            tmp3687.Append("Addr: ");
            Addr.ToString(tmp3687);
          }
          tmp3687.Append(')');
          return tmp3687.ToString();
        }
      }


      public partial class unmonitorVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unmonitorVariable_result()
        {
        }

        public unmonitorVariable_result DeepCopy()
        {
          var tmp3689 = new unmonitorVariable_result();
          if((E != null) && __isset.e)
          {
            tmp3689.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3689.__isset.e = this.__isset.e;
          return tmp3689;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3690 = new TStruct("unmonitorVariable_result");
            await oprot.WriteStructBeginAsync(tmp3690, cancellationToken);
            var tmp3691 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3691.Name = "E";
                tmp3691.Type = TType.Struct;
                tmp3691.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3691, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3692 = new StringBuilder("unmonitorVariable_result(");
          int tmp3693 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3693++) { tmp3692.Append(", "); }
            tmp3692.Append("E: ");
            E.ToString(tmp3692);
          }
          tmp3692.Append(')');
          return tmp3692.ToString();
        }
      }


      public partial class variableRange_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.AddressSpace _space;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.AddressSpace"/>
        /// </summary>
        public global::Yaskawa.Ext.API.AddressSpace Space
        {
          get
          {
            return _space;
          }
          set
          {
            __isset.space = true;
            this._space = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool space;
        }

        public variableRange_args()
        {
        }

        public variableRange_args DeepCopy()
        {
          var tmp3694 = new variableRange_args();
          if(__isset.c)
          {
            tmp3694.C = this.C;
          }
          tmp3694.__isset.c = this.__isset.c;
          if(__isset.space)
          {
            tmp3694.Space = this.Space;
          }
          tmp3694.__isset.space = this.__isset.space;
          return tmp3694;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Space = (global::Yaskawa.Ext.API.AddressSpace)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3695 = new TStruct("variableRange_args");
            await oprot.WriteStructBeginAsync(tmp3695, cancellationToken);
            var tmp3696 = new TField();
            if(__isset.c)
            {
              tmp3696.Name = "c";
              tmp3696.Type = TType.I64;
              tmp3696.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3696, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.space)
            {
              tmp3696.Name = "space";
              tmp3696.Type = TType.I32;
              tmp3696.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3696, cancellationToken);
              await oprot.WriteI32Async((int)Space, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableRange_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.space == other.__isset.space) && ((!__isset.space) || (global::System.Object.Equals(Space, other.Space))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.space)
            {
              hashcode = (hashcode * 397) + Space.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3697 = new StringBuilder("variableRange_args(");
          int tmp3698 = 0;
          if(__isset.c)
          {
            if(0 < tmp3698++) { tmp3697.Append(", "); }
            tmp3697.Append("C: ");
            C.ToString(tmp3697);
          }
          if(__isset.space)
          {
            if(0 < tmp3698++) { tmp3697.Append(", "); }
            tmp3697.Append("Space: ");
            Space.ToString(tmp3697);
          }
          tmp3697.Append(')');
          return tmp3697.ToString();
        }
      }


      public partial class variableRange_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableRange_result()
        {
        }

        public variableRange_result DeepCopy()
        {
          var tmp3699 = new variableRange_result();
          if(__isset.success)
          {
            tmp3699.Success = this.Success;
          }
          tmp3699.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3699.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3699.__isset.e = this.__isset.e;
          return tmp3699;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3700 = new TStruct("variableRange_result");
            await oprot.WriteStructBeginAsync(tmp3700, cancellationToken);
            var tmp3701 = new TField();

            if(this.__isset.success)
            {
              tmp3701.Name = "Success";
              tmp3701.Type = TType.I32;
              tmp3701.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3701, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3701.Name = "E";
                tmp3701.Type = TType.Struct;
                tmp3701.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3701, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableRange_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3702 = new StringBuilder("variableRange_result(");
          int tmp3703 = 0;
          if(__isset.success)
          {
            if(0 < tmp3703++) { tmp3702.Append(", "); }
            tmp3702.Append("Success: ");
            Success.ToString(tmp3702);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3703++) { tmp3702.Append(", "); }
            tmp3702.Append("E: ");
            E.ToString(tmp3702);
          }
          tmp3702.Append(')');
          return tmp3702.ToString();
        }
      }


      public partial class zone_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public zone_args()
        {
        }

        public zone_args DeepCopy()
        {
          var tmp3704 = new zone_args();
          if(__isset.c)
          {
            tmp3704.C = this.C;
          }
          tmp3704.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3704.Index = this.Index;
          }
          tmp3704.__isset.index = this.__isset.index;
          return tmp3704;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3705 = new TStruct("zone_args");
            await oprot.WriteStructBeginAsync(tmp3705, cancellationToken);
            var tmp3706 = new TField();
            if(__isset.c)
            {
              tmp3706.Name = "c";
              tmp3706.Type = TType.I64;
              tmp3706.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3706, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3706.Name = "index";
              tmp3706.Type = TType.I32;
              tmp3706.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3706, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is zone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3707 = new StringBuilder("zone_args(");
          int tmp3708 = 0;
          if(__isset.c)
          {
            if(0 < tmp3708++) { tmp3707.Append(", "); }
            tmp3707.Append("C: ");
            C.ToString(tmp3707);
          }
          if(__isset.index)
          {
            if(0 < tmp3708++) { tmp3707.Append(", "); }
            tmp3707.Append("Index: ");
            Index.ToString(tmp3707);
          }
          tmp3707.Append(')');
          return tmp3707.ToString();
        }
      }


      public partial class zone_result : TBase
      {
        private global::Yaskawa.Ext.API.Zone _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Zone Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public zone_result()
        {
        }

        public zone_result DeepCopy()
        {
          var tmp3709 = new zone_result();
          if((Success != null) && __isset.success)
          {
            tmp3709.Success = (global::Yaskawa.Ext.API.Zone)this.Success.DeepCopy();
          }
          tmp3709.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3709.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3709.__isset.e = this.__isset.e;
          return tmp3709;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Zone();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3710 = new TStruct("zone_result");
            await oprot.WriteStructBeginAsync(tmp3710, cancellationToken);
            var tmp3711 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3711.Name = "Success";
                tmp3711.Type = TType.Struct;
                tmp3711.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3711, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3711.Name = "E";
                tmp3711.Type = TType.Struct;
                tmp3711.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3711, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is zone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3712 = new StringBuilder("zone_result(");
          int tmp3713 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3713++) { tmp3712.Append(", "); }
            tmp3712.Append("Success: ");
            Success.ToString(tmp3712);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3713++) { tmp3712.Append(", "); }
            tmp3712.Append("E: ");
            E.ToString(tmp3712);
          }
          tmp3712.Append(')');
          return tmp3712.ToString();
        }
      }


      public partial class newZone_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public newZone_args()
        {
        }

        public newZone_args DeepCopy()
        {
          var tmp3714 = new newZone_args();
          if(__isset.c)
          {
            tmp3714.C = this.C;
          }
          tmp3714.__isset.c = this.__isset.c;
          return tmp3714;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3715 = new TStruct("newZone_args");
            await oprot.WriteStructBeginAsync(tmp3715, cancellationToken);
            var tmp3716 = new TField();
            if(__isset.c)
            {
              tmp3716.Name = "c";
              tmp3716.Type = TType.I64;
              tmp3716.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3716, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3717 = new StringBuilder("newZone_args(");
          int tmp3718 = 0;
          if(__isset.c)
          {
            if(0 < tmp3718++) { tmp3717.Append(", "); }
            tmp3717.Append("C: ");
            C.ToString(tmp3717);
          }
          tmp3717.Append(')');
          return tmp3717.ToString();
        }
      }


      public partial class newZone_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public newZone_result()
        {
        }

        public newZone_result DeepCopy()
        {
          var tmp3719 = new newZone_result();
          if(__isset.success)
          {
            tmp3719.Success = this.Success;
          }
          tmp3719.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3719.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3719.__isset.e = this.__isset.e;
          return tmp3719;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3720 = new TStruct("newZone_result");
            await oprot.WriteStructBeginAsync(tmp3720, cancellationToken);
            var tmp3721 = new TField();

            if(this.__isset.success)
            {
              tmp3721.Name = "Success";
              tmp3721.Type = TType.I32;
              tmp3721.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3721, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3721.Name = "E";
                tmp3721.Type = TType.Struct;
                tmp3721.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3721, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3722 = new StringBuilder("newZone_result(");
          int tmp3723 = 0;
          if(__isset.success)
          {
            if(0 < tmp3723++) { tmp3722.Append(", "); }
            tmp3722.Append("Success: ");
            Success.ToString(tmp3722);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3723++) { tmp3722.Append(", "); }
            tmp3722.Append("E: ");
            E.ToString(tmp3722);
          }
          tmp3722.Append(')');
          return tmp3722.ToString();
        }
      }


      public partial class modifyZone_args : TBase
      {
        private long _c;
        private int _index;
        private global::Yaskawa.Ext.API.Zone _z;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public global::Yaskawa.Ext.API.Zone Z
        {
          get
          {
            return _z;
          }
          set
          {
            __isset.z = true;
            this._z = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool z;
        }

        public modifyZone_args()
        {
        }

        public modifyZone_args DeepCopy()
        {
          var tmp3724 = new modifyZone_args();
          if(__isset.c)
          {
            tmp3724.C = this.C;
          }
          tmp3724.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3724.Index = this.Index;
          }
          tmp3724.__isset.index = this.__isset.index;
          if((Z != null) && __isset.z)
          {
            tmp3724.Z = (global::Yaskawa.Ext.API.Zone)this.Z.DeepCopy();
          }
          tmp3724.__isset.z = this.__isset.z;
          return tmp3724;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Z = new global::Yaskawa.Ext.API.Zone();
                    await Z.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3725 = new TStruct("modifyZone_args");
            await oprot.WriteStructBeginAsync(tmp3725, cancellationToken);
            var tmp3726 = new TField();
            if(__isset.c)
            {
              tmp3726.Name = "c";
              tmp3726.Type = TType.I64;
              tmp3726.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3726, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3726.Name = "index";
              tmp3726.Type = TType.I32;
              tmp3726.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3726, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Z != null) && __isset.z)
            {
              tmp3726.Name = "z";
              tmp3726.Type = TType.Struct;
              tmp3726.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3726, cancellationToken);
              await Z.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is modifyZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.z == other.__isset.z) && ((!__isset.z) || (global::System.Object.Equals(Z, other.Z))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if((Z != null) && __isset.z)
            {
              hashcode = (hashcode * 397) + Z.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3727 = new StringBuilder("modifyZone_args(");
          int tmp3728 = 0;
          if(__isset.c)
          {
            if(0 < tmp3728++) { tmp3727.Append(", "); }
            tmp3727.Append("C: ");
            C.ToString(tmp3727);
          }
          if(__isset.index)
          {
            if(0 < tmp3728++) { tmp3727.Append(", "); }
            tmp3727.Append("Index: ");
            Index.ToString(tmp3727);
          }
          if((Z != null) && __isset.z)
          {
            if(0 < tmp3728++) { tmp3727.Append(", "); }
            tmp3727.Append("Z: ");
            Z.ToString(tmp3727);
          }
          tmp3727.Append(')');
          return tmp3727.ToString();
        }
      }


      public partial class modifyZone_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public modifyZone_result()
        {
        }

        public modifyZone_result DeepCopy()
        {
          var tmp3729 = new modifyZone_result();
          if((E != null) && __isset.e)
          {
            tmp3729.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3729.__isset.e = this.__isset.e;
          return tmp3729;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3730 = new TStruct("modifyZone_result");
            await oprot.WriteStructBeginAsync(tmp3730, cancellationToken);
            var tmp3731 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3731.Name = "E";
                tmp3731.Type = TType.Struct;
                tmp3731.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3731, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is modifyZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3732 = new StringBuilder("modifyZone_result(");
          int tmp3733 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3733++) { tmp3732.Append(", "); }
            tmp3732.Append("E: ");
            E.ToString(tmp3732);
          }
          tmp3732.Append(')');
          return tmp3732.ToString();
        }
      }


      public partial class deleteZone_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public deleteZone_args()
        {
        }

        public deleteZone_args DeepCopy()
        {
          var tmp3734 = new deleteZone_args();
          if(__isset.c)
          {
            tmp3734.C = this.C;
          }
          tmp3734.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3734.Index = this.Index;
          }
          tmp3734.__isset.index = this.__isset.index;
          return tmp3734;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3735 = new TStruct("deleteZone_args");
            await oprot.WriteStructBeginAsync(tmp3735, cancellationToken);
            var tmp3736 = new TField();
            if(__isset.c)
            {
              tmp3736.Name = "c";
              tmp3736.Type = TType.I64;
              tmp3736.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3736, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3736.Name = "index";
              tmp3736.Type = TType.I32;
              tmp3736.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3736, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3737 = new StringBuilder("deleteZone_args(");
          int tmp3738 = 0;
          if(__isset.c)
          {
            if(0 < tmp3738++) { tmp3737.Append(", "); }
            tmp3737.Append("C: ");
            C.ToString(tmp3737);
          }
          if(__isset.index)
          {
            if(0 < tmp3738++) { tmp3737.Append(", "); }
            tmp3737.Append("Index: ");
            Index.ToString(tmp3737);
          }
          tmp3737.Append(')');
          return tmp3737.ToString();
        }
      }


      public partial class deleteZone_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteZone_result()
        {
        }

        public deleteZone_result DeepCopy()
        {
          var tmp3739 = new deleteZone_result();
          if((E != null) && __isset.e)
          {
            tmp3739.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3739.__isset.e = this.__isset.e;
          return tmp3739;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3740 = new TStruct("deleteZone_result");
            await oprot.WriteStructBeginAsync(tmp3740, cancellationToken);
            var tmp3741 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3741.Name = "E";
                tmp3741.Type = TType.Struct;
                tmp3741.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3741, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3742 = new StringBuilder("deleteZone_result(");
          int tmp3743 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3743++) { tmp3742.Append(", "); }
            tmp3742.Append("E: ");
            E.ToString(tmp3742);
          }
          tmp3742.Append(')');
          return tmp3742.ToString();
        }
      }


      public partial class userFrames_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public userFrames_args()
        {
        }

        public userFrames_args DeepCopy()
        {
          var tmp3744 = new userFrames_args();
          if(__isset.c)
          {
            tmp3744.C = this.C;
          }
          tmp3744.__isset.c = this.__isset.c;
          return tmp3744;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3745 = new TStruct("userFrames_args");
            await oprot.WriteStructBeginAsync(tmp3745, cancellationToken);
            var tmp3746 = new TField();
            if(__isset.c)
            {
              tmp3746.Name = "c";
              tmp3746.Type = TType.I64;
              tmp3746.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3746, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrames_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3747 = new StringBuilder("userFrames_args(");
          int tmp3748 = 0;
          if(__isset.c)
          {
            if(0 < tmp3748++) { tmp3747.Append(", "); }
            tmp3747.Append("C: ");
            C.ToString(tmp3747);
          }
          tmp3747.Append(')');
          return tmp3747.ToString();
        }
      }


      public partial class userFrames_result : TBase
      {
        private Dictionary<int, string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<int, string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public userFrames_result()
        {
        }

        public userFrames_result DeepCopy()
        {
          var tmp3749 = new userFrames_result();
          if((Success != null) && __isset.success)
          {
            tmp3749.Success = this.Success.DeepCopy();
          }
          tmp3749.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3749.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3749.__isset.e = this.__isset.e;
          return tmp3749;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map3750 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<int, string>(_map3750.Count);
                      for(int _i3751 = 0; _i3751 < _map3750.Count; ++_i3751)
                      {
                        int _key3752;
                        string _val3753;
                        _key3752 = await iprot.ReadI32Async(cancellationToken);
                        _val3753 = await iprot.ReadStringAsync(cancellationToken);
                        Success[_key3752] = _val3753;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3754 = new TStruct("userFrames_result");
            await oprot.WriteStructBeginAsync(tmp3754, cancellationToken);
            var tmp3755 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3755.Name = "Success";
                tmp3755.Type = TType.Map;
                tmp3755.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3755, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, Success.Count), cancellationToken);
                foreach (int _iter3756 in Success.Keys)
                {
                  await oprot.WriteI32Async(_iter3756, cancellationToken);
                  await oprot.WriteStringAsync(Success[_iter3756], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3755.Name = "E";
                tmp3755.Type = TType.Struct;
                tmp3755.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3755, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrames_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3757 = new StringBuilder("userFrames_result(");
          int tmp3758 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3758++) { tmp3757.Append(", "); }
            tmp3757.Append("Success: ");
            Success.ToString(tmp3757);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3758++) { tmp3757.Append(", "); }
            tmp3757.Append("E: ");
            E.ToString(tmp3757);
          }
          tmp3757.Append(')');
          return tmp3757.ToString();
        }
      }


      public partial class userFrame_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public userFrame_args()
        {
        }

        public userFrame_args DeepCopy()
        {
          var tmp3759 = new userFrame_args();
          if(__isset.c)
          {
            tmp3759.C = this.C;
          }
          tmp3759.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3759.Index = this.Index;
          }
          tmp3759.__isset.index = this.__isset.index;
          return tmp3759;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3760 = new TStruct("userFrame_args");
            await oprot.WriteStructBeginAsync(tmp3760, cancellationToken);
            var tmp3761 = new TField();
            if(__isset.c)
            {
              tmp3761.Name = "c";
              tmp3761.Type = TType.I64;
              tmp3761.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3761, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3761.Name = "index";
              tmp3761.Type = TType.I32;
              tmp3761.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3761, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3762 = new StringBuilder("userFrame_args(");
          int tmp3763 = 0;
          if(__isset.c)
          {
            if(0 < tmp3763++) { tmp3762.Append(", "); }
            tmp3762.Append("C: ");
            C.ToString(tmp3762);
          }
          if(__isset.index)
          {
            if(0 < tmp3763++) { tmp3762.Append(", "); }
            tmp3762.Append("Index: ");
            Index.ToString(tmp3762);
          }
          tmp3762.Append(')');
          return tmp3762.ToString();
        }
      }


      public partial class userFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.CoordinateFrame _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.CoordinateFrame Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public userFrame_result()
        {
        }

        public userFrame_result DeepCopy()
        {
          var tmp3764 = new userFrame_result();
          if((Success != null) && __isset.success)
          {
            tmp3764.Success = (global::Yaskawa.Ext.API.CoordinateFrame)this.Success.DeepCopy();
          }
          tmp3764.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3764.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3764.__isset.e = this.__isset.e;
          return tmp3764;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3765 = new TStruct("userFrame_result");
            await oprot.WriteStructBeginAsync(tmp3765, cancellationToken);
            var tmp3766 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3766.Name = "Success";
                tmp3766.Type = TType.Struct;
                tmp3766.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3766, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3766.Name = "E";
                tmp3766.Type = TType.Struct;
                tmp3766.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3766, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3767 = new StringBuilder("userFrame_result(");
          int tmp3768 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3768++) { tmp3767.Append(", "); }
            tmp3767.Append("Success: ");
            Success.ToString(tmp3767);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3768++) { tmp3767.Append(", "); }
            tmp3767.Append("E: ");
            E.ToString(tmp3767);
          }
          tmp3767.Append(')');
          return tmp3767.ToString();
        }
      }


      public partial class newUserFrame_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public newUserFrame_args()
        {
        }

        public newUserFrame_args DeepCopy()
        {
          var tmp3769 = new newUserFrame_args();
          if(__isset.c)
          {
            tmp3769.C = this.C;
          }
          tmp3769.__isset.c = this.__isset.c;
          return tmp3769;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3770 = new TStruct("newUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp3770, cancellationToken);
            var tmp3771 = new TField();
            if(__isset.c)
            {
              tmp3771.Name = "c";
              tmp3771.Type = TType.I64;
              tmp3771.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3771, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3772 = new StringBuilder("newUserFrame_args(");
          int tmp3773 = 0;
          if(__isset.c)
          {
            if(0 < tmp3773++) { tmp3772.Append(", "); }
            tmp3772.Append("C: ");
            C.ToString(tmp3772);
          }
          tmp3772.Append(')');
          return tmp3772.ToString();
        }
      }


      public partial class newUserFrame_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public newUserFrame_result()
        {
        }

        public newUserFrame_result DeepCopy()
        {
          var tmp3774 = new newUserFrame_result();
          if(__isset.success)
          {
            tmp3774.Success = this.Success;
          }
          tmp3774.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3774.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3774.__isset.e = this.__isset.e;
          return tmp3774;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3775 = new TStruct("newUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp3775, cancellationToken);
            var tmp3776 = new TField();

            if(this.__isset.success)
            {
              tmp3776.Name = "Success";
              tmp3776.Type = TType.I32;
              tmp3776.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3776, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3776.Name = "E";
                tmp3776.Type = TType.Struct;
                tmp3776.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3776, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3777 = new StringBuilder("newUserFrame_result(");
          int tmp3778 = 0;
          if(__isset.success)
          {
            if(0 < tmp3778++) { tmp3777.Append(", "); }
            tmp3777.Append("Success: ");
            Success.ToString(tmp3777);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3778++) { tmp3777.Append(", "); }
            tmp3777.Append("E: ");
            E.ToString(tmp3777);
          }
          tmp3777.Append(')');
          return tmp3777.ToString();
        }
      }


      public partial class setUserFrame_args : TBase
      {
        private long _c;
        private int _index;
        private global::Yaskawa.Ext.API.CoordinateFrame _f;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public global::Yaskawa.Ext.API.CoordinateFrame F
        {
          get
          {
            return _f;
          }
          set
          {
            __isset.f = true;
            this._f = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool f;
        }

        public setUserFrame_args()
        {
        }

        public setUserFrame_args DeepCopy()
        {
          var tmp3779 = new setUserFrame_args();
          if(__isset.c)
          {
            tmp3779.C = this.C;
          }
          tmp3779.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3779.Index = this.Index;
          }
          tmp3779.__isset.index = this.__isset.index;
          if((F != null) && __isset.f)
          {
            tmp3779.F = (global::Yaskawa.Ext.API.CoordinateFrame)this.F.DeepCopy();
          }
          tmp3779.__isset.f = this.__isset.f;
          return tmp3779;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    F = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await F.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3780 = new TStruct("setUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp3780, cancellationToken);
            var tmp3781 = new TField();
            if(__isset.c)
            {
              tmp3781.Name = "c";
              tmp3781.Type = TType.I64;
              tmp3781.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3781, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3781.Name = "index";
              tmp3781.Type = TType.I32;
              tmp3781.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3781, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((F != null) && __isset.f)
            {
              tmp3781.Name = "f";
              tmp3781.Type = TType.Struct;
              tmp3781.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3781, cancellationToken);
              await F.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.f == other.__isset.f) && ((!__isset.f) || (global::System.Object.Equals(F, other.F))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if((F != null) && __isset.f)
            {
              hashcode = (hashcode * 397) + F.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3782 = new StringBuilder("setUserFrame_args(");
          int tmp3783 = 0;
          if(__isset.c)
          {
            if(0 < tmp3783++) { tmp3782.Append(", "); }
            tmp3782.Append("C: ");
            C.ToString(tmp3782);
          }
          if(__isset.index)
          {
            if(0 < tmp3783++) { tmp3782.Append(", "); }
            tmp3782.Append("Index: ");
            Index.ToString(tmp3782);
          }
          if((F != null) && __isset.f)
          {
            if(0 < tmp3783++) { tmp3782.Append(", "); }
            tmp3782.Append("F: ");
            F.ToString(tmp3782);
          }
          tmp3782.Append(')');
          return tmp3782.ToString();
        }
      }


      public partial class setUserFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setUserFrame_result()
        {
        }

        public setUserFrame_result DeepCopy()
        {
          var tmp3784 = new setUserFrame_result();
          if((E != null) && __isset.e)
          {
            tmp3784.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3784.__isset.e = this.__isset.e;
          return tmp3784;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3785 = new TStruct("setUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp3785, cancellationToken);
            var tmp3786 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3786.Name = "E";
                tmp3786.Type = TType.Struct;
                tmp3786.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3786, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3787 = new StringBuilder("setUserFrame_result(");
          int tmp3788 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3788++) { tmp3787.Append(", "); }
            tmp3787.Append("E: ");
            E.ToString(tmp3787);
          }
          tmp3787.Append(')');
          return tmp3787.ToString();
        }
      }


      public partial class deleteUserFrame_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public deleteUserFrame_args()
        {
        }

        public deleteUserFrame_args DeepCopy()
        {
          var tmp3789 = new deleteUserFrame_args();
          if(__isset.c)
          {
            tmp3789.C = this.C;
          }
          tmp3789.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3789.Index = this.Index;
          }
          tmp3789.__isset.index = this.__isset.index;
          return tmp3789;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3790 = new TStruct("deleteUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp3790, cancellationToken);
            var tmp3791 = new TField();
            if(__isset.c)
            {
              tmp3791.Name = "c";
              tmp3791.Type = TType.I64;
              tmp3791.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3791, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3791.Name = "index";
              tmp3791.Type = TType.I32;
              tmp3791.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3791, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3792 = new StringBuilder("deleteUserFrame_args(");
          int tmp3793 = 0;
          if(__isset.c)
          {
            if(0 < tmp3793++) { tmp3792.Append(", "); }
            tmp3792.Append("C: ");
            C.ToString(tmp3792);
          }
          if(__isset.index)
          {
            if(0 < tmp3793++) { tmp3792.Append(", "); }
            tmp3792.Append("Index: ");
            Index.ToString(tmp3792);
          }
          tmp3792.Append(')');
          return tmp3792.ToString();
        }
      }


      public partial class deleteUserFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteUserFrame_result()
        {
        }

        public deleteUserFrame_result DeepCopy()
        {
          var tmp3794 = new deleteUserFrame_result();
          if((E != null) && __isset.e)
          {
            tmp3794.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3794.__isset.e = this.__isset.e;
          return tmp3794;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3795 = new TStruct("deleteUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp3795, cancellationToken);
            var tmp3796 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3796.Name = "E";
                tmp3796.Type = TType.Struct;
                tmp3796.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3796, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3797 = new StringBuilder("deleteUserFrame_result(");
          int tmp3798 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3798++) { tmp3797.Append(", "); }
            tmp3797.Append("E: ");
            E.ToString(tmp3797);
          }
          tmp3797.Append(')');
          return tmp3797.ToString();
        }
      }


      public partial class networkInterfaceAddress_args : TBase
      {
        private long _c;
        private string _controllerInterface;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
        }

        public networkInterfaceAddress_args()
        {
        }

        public networkInterfaceAddress_args DeepCopy()
        {
          var tmp3799 = new networkInterfaceAddress_args();
          if(__isset.c)
          {
            tmp3799.C = this.C;
          }
          tmp3799.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3799.ControllerInterface = this.ControllerInterface;
          }
          tmp3799.__isset.controllerInterface = this.__isset.controllerInterface;
          return tmp3799;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3800 = new TStruct("networkInterfaceAddress_args");
            await oprot.WriteStructBeginAsync(tmp3800, cancellationToken);
            var tmp3801 = new TField();
            if(__isset.c)
            {
              tmp3801.Name = "c";
              tmp3801.Type = TType.I64;
              tmp3801.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3801, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3801.Name = "controllerInterface";
              tmp3801.Type = TType.String;
              tmp3801.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3801, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is networkInterfaceAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3802 = new StringBuilder("networkInterfaceAddress_args(");
          int tmp3803 = 0;
          if(__isset.c)
          {
            if(0 < tmp3803++) { tmp3802.Append(", "); }
            tmp3802.Append("C: ");
            C.ToString(tmp3802);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3803++) { tmp3802.Append(", "); }
            tmp3802.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3802);
          }
          tmp3802.Append(')');
          return tmp3802.ToString();
        }
      }


      public partial class networkInterfaceAddress_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public networkInterfaceAddress_result()
        {
        }

        public networkInterfaceAddress_result DeepCopy()
        {
          var tmp3804 = new networkInterfaceAddress_result();
          if((Success != null) && __isset.success)
          {
            tmp3804.Success = this.Success;
          }
          tmp3804.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3804.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3804.__isset.e = this.__isset.e;
          return tmp3804;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3805 = new TStruct("networkInterfaceAddress_result");
            await oprot.WriteStructBeginAsync(tmp3805, cancellationToken);
            var tmp3806 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3806.Name = "Success";
                tmp3806.Type = TType.String;
                tmp3806.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3806, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3806.Name = "E";
                tmp3806.Type = TType.Struct;
                tmp3806.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3806, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is networkInterfaceAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3807 = new StringBuilder("networkInterfaceAddress_result(");
          int tmp3808 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3808++) { tmp3807.Append(", "); }
            tmp3807.Append("Success: ");
            Success.ToString(tmp3807);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3808++) { tmp3807.Append(", "); }
            tmp3807.Append("E: ");
            E.ToString(tmp3807);
          }
          tmp3807.Append(')');
          return tmp3807.ToString();
        }
      }


      public partial class requestNetworkAccess_args : TBase
      {
        private long _c;
        private string _controllerInterface;
        private int _port;
        private string _protocol;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }

        public int Port
        {
          get
          {
            return _port;
          }
          set
          {
            __isset.port = true;
            this._port = value;
          }
        }

        public string Protocol
        {
          get
          {
            return _protocol;
          }
          set
          {
            __isset.protocol = true;
            this._protocol = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
          public bool port;
          public bool protocol;
        }

        public requestNetworkAccess_args()
        {
        }

        public requestNetworkAccess_args DeepCopy()
        {
          var tmp3809 = new requestNetworkAccess_args();
          if(__isset.c)
          {
            tmp3809.C = this.C;
          }
          tmp3809.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3809.ControllerInterface = this.ControllerInterface;
          }
          tmp3809.__isset.controllerInterface = this.__isset.controllerInterface;
          if(__isset.port)
          {
            tmp3809.Port = this.Port;
          }
          tmp3809.__isset.port = this.__isset.port;
          if((Protocol != null) && __isset.protocol)
          {
            tmp3809.Protocol = this.Protocol;
          }
          tmp3809.__isset.protocol = this.__isset.protocol;
          return tmp3809;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Port = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Protocol = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3810 = new TStruct("requestNetworkAccess_args");
            await oprot.WriteStructBeginAsync(tmp3810, cancellationToken);
            var tmp3811 = new TField();
            if(__isset.c)
            {
              tmp3811.Name = "c";
              tmp3811.Type = TType.I64;
              tmp3811.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3811, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3811.Name = "controllerInterface";
              tmp3811.Type = TType.String;
              tmp3811.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3811, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.port)
            {
              tmp3811.Name = "port";
              tmp3811.Type = TType.I32;
              tmp3811.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3811, cancellationToken);
              await oprot.WriteI32Async(Port, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Protocol != null) && __isset.protocol)
            {
              tmp3811.Name = "protocol";
              tmp3811.Type = TType.String;
              tmp3811.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3811, cancellationToken);
              await oprot.WriteStringAsync(Protocol, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkAccess_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))))
            && ((__isset.port == other.__isset.port) && ((!__isset.port) || (global::System.Object.Equals(Port, other.Port))))
            && ((__isset.protocol == other.__isset.protocol) && ((!__isset.protocol) || (global::System.Object.Equals(Protocol, other.Protocol))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
            if(__isset.port)
            {
              hashcode = (hashcode * 397) + Port.GetHashCode();
            }
            if((Protocol != null) && __isset.protocol)
            {
              hashcode = (hashcode * 397) + Protocol.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3812 = new StringBuilder("requestNetworkAccess_args(");
          int tmp3813 = 0;
          if(__isset.c)
          {
            if(0 < tmp3813++) { tmp3812.Append(", "); }
            tmp3812.Append("C: ");
            C.ToString(tmp3812);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3813++) { tmp3812.Append(", "); }
            tmp3812.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3812);
          }
          if(__isset.port)
          {
            if(0 < tmp3813++) { tmp3812.Append(", "); }
            tmp3812.Append("Port: ");
            Port.ToString(tmp3812);
          }
          if((Protocol != null) && __isset.protocol)
          {
            if(0 < tmp3813++) { tmp3812.Append(", "); }
            tmp3812.Append("Protocol: ");
            Protocol.ToString(tmp3812);
          }
          tmp3812.Append(')');
          return tmp3812.ToString();
        }
      }


      public partial class requestNetworkAccess_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestNetworkAccess_result()
        {
        }

        public requestNetworkAccess_result DeepCopy()
        {
          var tmp3814 = new requestNetworkAccess_result();
          if(__isset.success)
          {
            tmp3814.Success = this.Success;
          }
          tmp3814.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3814.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3814.__isset.e = this.__isset.e;
          return tmp3814;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3815 = new TStruct("requestNetworkAccess_result");
            await oprot.WriteStructBeginAsync(tmp3815, cancellationToken);
            var tmp3816 = new TField();

            if(this.__isset.success)
            {
              tmp3816.Name = "Success";
              tmp3816.Type = TType.I32;
              tmp3816.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3816, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3816.Name = "E";
                tmp3816.Type = TType.Struct;
                tmp3816.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3816, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkAccess_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3817 = new StringBuilder("requestNetworkAccess_result(");
          int tmp3818 = 0;
          if(__isset.success)
          {
            if(0 < tmp3818++) { tmp3817.Append(", "); }
            tmp3817.Append("Success: ");
            Success.ToString(tmp3817);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3818++) { tmp3817.Append(", "); }
            tmp3817.Append("E: ");
            E.ToString(tmp3817);
          }
          tmp3817.Append(')');
          return tmp3817.ToString();
        }
      }


      public partial class removeNetworkAccess_args : TBase
      {
        private long _c;
        private int _accessHandle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int AccessHandle
        {
          get
          {
            return _accessHandle;
          }
          set
          {
            __isset.accessHandle = true;
            this._accessHandle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool accessHandle;
        }

        public removeNetworkAccess_args()
        {
        }

        public removeNetworkAccess_args DeepCopy()
        {
          var tmp3819 = new removeNetworkAccess_args();
          if(__isset.c)
          {
            tmp3819.C = this.C;
          }
          tmp3819.__isset.c = this.__isset.c;
          if(__isset.accessHandle)
          {
            tmp3819.AccessHandle = this.AccessHandle;
          }
          tmp3819.__isset.accessHandle = this.__isset.accessHandle;
          return tmp3819;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    AccessHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3820 = new TStruct("removeNetworkAccess_args");
            await oprot.WriteStructBeginAsync(tmp3820, cancellationToken);
            var tmp3821 = new TField();
            if(__isset.c)
            {
              tmp3821.Name = "c";
              tmp3821.Type = TType.I64;
              tmp3821.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3821, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.accessHandle)
            {
              tmp3821.Name = "accessHandle";
              tmp3821.Type = TType.I32;
              tmp3821.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3821, cancellationToken);
              await oprot.WriteI32Async(AccessHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkAccess_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.accessHandle == other.__isset.accessHandle) && ((!__isset.accessHandle) || (global::System.Object.Equals(AccessHandle, other.AccessHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.accessHandle)
            {
              hashcode = (hashcode * 397) + AccessHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3822 = new StringBuilder("removeNetworkAccess_args(");
          int tmp3823 = 0;
          if(__isset.c)
          {
            if(0 < tmp3823++) { tmp3822.Append(", "); }
            tmp3822.Append("C: ");
            C.ToString(tmp3822);
          }
          if(__isset.accessHandle)
          {
            if(0 < tmp3823++) { tmp3822.Append(", "); }
            tmp3822.Append("AccessHandle: ");
            AccessHandle.ToString(tmp3822);
          }
          tmp3822.Append(')');
          return tmp3822.ToString();
        }
      }


      public partial class removeNetworkAccess_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeNetworkAccess_result()
        {
        }

        public removeNetworkAccess_result DeepCopy()
        {
          var tmp3824 = new removeNetworkAccess_result();
          if((E != null) && __isset.e)
          {
            tmp3824.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3824.__isset.e = this.__isset.e;
          return tmp3824;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3825 = new TStruct("removeNetworkAccess_result");
            await oprot.WriteStructBeginAsync(tmp3825, cancellationToken);
            var tmp3826 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3826.Name = "E";
                tmp3826.Type = TType.Struct;
                tmp3826.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3826, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkAccess_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3827 = new StringBuilder("removeNetworkAccess_result(");
          int tmp3828 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3828++) { tmp3827.Append(", "); }
            tmp3827.Append("E: ");
            E.ToString(tmp3827);
          }
          tmp3827.Append(')');
          return tmp3827.ToString();
        }
      }


      public partial class requestNetworkService_args : TBase
      {
        private long _c;
        private string _controllerInterface;
        private int _port;
        private string _protocol;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }

        public int Port
        {
          get
          {
            return _port;
          }
          set
          {
            __isset.port = true;
            this._port = value;
          }
        }

        public string Protocol
        {
          get
          {
            return _protocol;
          }
          set
          {
            __isset.protocol = true;
            this._protocol = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
          public bool port;
          public bool protocol;
        }

        public requestNetworkService_args()
        {
        }

        public requestNetworkService_args DeepCopy()
        {
          var tmp3829 = new requestNetworkService_args();
          if(__isset.c)
          {
            tmp3829.C = this.C;
          }
          tmp3829.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3829.ControllerInterface = this.ControllerInterface;
          }
          tmp3829.__isset.controllerInterface = this.__isset.controllerInterface;
          if(__isset.port)
          {
            tmp3829.Port = this.Port;
          }
          tmp3829.__isset.port = this.__isset.port;
          if((Protocol != null) && __isset.protocol)
          {
            tmp3829.Protocol = this.Protocol;
          }
          tmp3829.__isset.protocol = this.__isset.protocol;
          return tmp3829;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Port = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Protocol = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3830 = new TStruct("requestNetworkService_args");
            await oprot.WriteStructBeginAsync(tmp3830, cancellationToken);
            var tmp3831 = new TField();
            if(__isset.c)
            {
              tmp3831.Name = "c";
              tmp3831.Type = TType.I64;
              tmp3831.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3831, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3831.Name = "controllerInterface";
              tmp3831.Type = TType.String;
              tmp3831.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3831, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.port)
            {
              tmp3831.Name = "port";
              tmp3831.Type = TType.I32;
              tmp3831.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3831, cancellationToken);
              await oprot.WriteI32Async(Port, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Protocol != null) && __isset.protocol)
            {
              tmp3831.Name = "protocol";
              tmp3831.Type = TType.String;
              tmp3831.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3831, cancellationToken);
              await oprot.WriteStringAsync(Protocol, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))))
            && ((__isset.port == other.__isset.port) && ((!__isset.port) || (global::System.Object.Equals(Port, other.Port))))
            && ((__isset.protocol == other.__isset.protocol) && ((!__isset.protocol) || (global::System.Object.Equals(Protocol, other.Protocol))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
            if(__isset.port)
            {
              hashcode = (hashcode * 397) + Port.GetHashCode();
            }
            if((Protocol != null) && __isset.protocol)
            {
              hashcode = (hashcode * 397) + Protocol.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3832 = new StringBuilder("requestNetworkService_args(");
          int tmp3833 = 0;
          if(__isset.c)
          {
            if(0 < tmp3833++) { tmp3832.Append(", "); }
            tmp3832.Append("C: ");
            C.ToString(tmp3832);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3833++) { tmp3832.Append(", "); }
            tmp3832.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3832);
          }
          if(__isset.port)
          {
            if(0 < tmp3833++) { tmp3832.Append(", "); }
            tmp3832.Append("Port: ");
            Port.ToString(tmp3832);
          }
          if((Protocol != null) && __isset.protocol)
          {
            if(0 < tmp3833++) { tmp3832.Append(", "); }
            tmp3832.Append("Protocol: ");
            Protocol.ToString(tmp3832);
          }
          tmp3832.Append(')');
          return tmp3832.ToString();
        }
      }


      public partial class requestNetworkService_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestNetworkService_result()
        {
        }

        public requestNetworkService_result DeepCopy()
        {
          var tmp3834 = new requestNetworkService_result();
          if(__isset.success)
          {
            tmp3834.Success = this.Success;
          }
          tmp3834.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3834.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3834.__isset.e = this.__isset.e;
          return tmp3834;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3835 = new TStruct("requestNetworkService_result");
            await oprot.WriteStructBeginAsync(tmp3835, cancellationToken);
            var tmp3836 = new TField();

            if(this.__isset.success)
            {
              tmp3836.Name = "Success";
              tmp3836.Type = TType.I32;
              tmp3836.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3836, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3836.Name = "E";
                tmp3836.Type = TType.Struct;
                tmp3836.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3836, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3837 = new StringBuilder("requestNetworkService_result(");
          int tmp3838 = 0;
          if(__isset.success)
          {
            if(0 < tmp3838++) { tmp3837.Append(", "); }
            tmp3837.Append("Success: ");
            Success.ToString(tmp3837);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3838++) { tmp3837.Append(", "); }
            tmp3837.Append("E: ");
            E.ToString(tmp3837);
          }
          tmp3837.Append(')');
          return tmp3837.ToString();
        }
      }


      public partial class removeNetworkService_args : TBase
      {
        private long _c;
        private int _accessHandle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int AccessHandle
        {
          get
          {
            return _accessHandle;
          }
          set
          {
            __isset.accessHandle = true;
            this._accessHandle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool accessHandle;
        }

        public removeNetworkService_args()
        {
        }

        public removeNetworkService_args DeepCopy()
        {
          var tmp3839 = new removeNetworkService_args();
          if(__isset.c)
          {
            tmp3839.C = this.C;
          }
          tmp3839.__isset.c = this.__isset.c;
          if(__isset.accessHandle)
          {
            tmp3839.AccessHandle = this.AccessHandle;
          }
          tmp3839.__isset.accessHandle = this.__isset.accessHandle;
          return tmp3839;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    AccessHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3840 = new TStruct("removeNetworkService_args");
            await oprot.WriteStructBeginAsync(tmp3840, cancellationToken);
            var tmp3841 = new TField();
            if(__isset.c)
            {
              tmp3841.Name = "c";
              tmp3841.Type = TType.I64;
              tmp3841.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3841, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.accessHandle)
            {
              tmp3841.Name = "accessHandle";
              tmp3841.Type = TType.I32;
              tmp3841.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3841, cancellationToken);
              await oprot.WriteI32Async(AccessHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.accessHandle == other.__isset.accessHandle) && ((!__isset.accessHandle) || (global::System.Object.Equals(AccessHandle, other.AccessHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.accessHandle)
            {
              hashcode = (hashcode * 397) + AccessHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3842 = new StringBuilder("removeNetworkService_args(");
          int tmp3843 = 0;
          if(__isset.c)
          {
            if(0 < tmp3843++) { tmp3842.Append(", "); }
            tmp3842.Append("C: ");
            C.ToString(tmp3842);
          }
          if(__isset.accessHandle)
          {
            if(0 < tmp3843++) { tmp3842.Append(", "); }
            tmp3842.Append("AccessHandle: ");
            AccessHandle.ToString(tmp3842);
          }
          tmp3842.Append(')');
          return tmp3842.ToString();
        }
      }


      public partial class removeNetworkService_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeNetworkService_result()
        {
        }

        public removeNetworkService_result DeepCopy()
        {
          var tmp3844 = new removeNetworkService_result();
          if((E != null) && __isset.e)
          {
            tmp3844.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3844.__isset.e = this.__isset.e;
          return tmp3844;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3845 = new TStruct("removeNetworkService_result");
            await oprot.WriteStructBeginAsync(tmp3845, cancellationToken);
            var tmp3846 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3846.Name = "E";
                tmp3846.Type = TType.Struct;
                tmp3846.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3846, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3847 = new StringBuilder("removeNetworkService_result(");
          int tmp3848 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3848++) { tmp3847.Append(", "); }
            tmp3847.Append("E: ");
            E.ToString(tmp3847);
          }
          tmp3847.Append(')');
          return tmp3847.ToString();
        }
      }


      public partial class getGaugeSensorSpec_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public getGaugeSensorSpec_args()
        {
        }

        public getGaugeSensorSpec_args DeepCopy()
        {
          var tmp3849 = new getGaugeSensorSpec_args();
          if(__isset.c)
          {
            tmp3849.C = this.C;
          }
          tmp3849.__isset.c = this.__isset.c;
          return tmp3849;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3850 = new TStruct("getGaugeSensorSpec_args");
            await oprot.WriteStructBeginAsync(tmp3850, cancellationToken);
            var tmp3851 = new TField();
            if(__isset.c)
            {
              tmp3851.Name = "c";
              tmp3851.Type = TType.I64;
              tmp3851.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3851, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getGaugeSensorSpec_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3852 = new StringBuilder("getGaugeSensorSpec_args(");
          int tmp3853 = 0;
          if(__isset.c)
          {
            if(0 < tmp3853++) { tmp3852.Append(", "); }
            tmp3852.Append("C: ");
            C.ToString(tmp3852);
          }
          tmp3852.Append(')');
          return tmp3852.ToString();
        }
      }


      public partial class getGaugeSensorSpec_result : TBase
      {
        private List<global::Yaskawa.Ext.API.GaugeSensorSpec> _success;

        public List<global::Yaskawa.Ext.API.GaugeSensorSpec> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getGaugeSensorSpec_result()
        {
        }

        public getGaugeSensorSpec_result DeepCopy()
        {
          var tmp3854 = new getGaugeSensorSpec_result();
          if((Success != null) && __isset.success)
          {
            tmp3854.Success = this.Success.DeepCopy();
          }
          tmp3854.__isset.success = this.__isset.success;
          return tmp3854;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3855 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.GaugeSensorSpec>(_list3855.Count);
                      for(int _i3856 = 0; _i3856 < _list3855.Count; ++_i3856)
                      {
                        global::Yaskawa.Ext.API.GaugeSensorSpec _elem3857;
                        _elem3857 = new global::Yaskawa.Ext.API.GaugeSensorSpec();
                        await _elem3857.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem3857);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3858 = new TStruct("getGaugeSensorSpec_result");
            await oprot.WriteStructBeginAsync(tmp3858, cancellationToken);
            var tmp3859 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3859.Name = "Success";
                tmp3859.Type = TType.List;
                tmp3859.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3859, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.GaugeSensorSpec _iter3860 in Success)
                {
                  await _iter3860.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getGaugeSensorSpec_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3861 = new StringBuilder("getGaugeSensorSpec_result(");
          int tmp3862 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3862++) { tmp3861.Append(", "); }
            tmp3861.Append("Success: ");
            Success.ToString(tmp3861);
          }
          tmp3861.Append(')');
          return tmp3861.ToString();
        }
      }


      public partial class gaugeSensorCalibration_args : TBase
      {
        private long _c;
        private sbyte _channel;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public sbyte Channel
        {
          get
          {
            return _channel;
          }
          set
          {
            __isset.channel = true;
            this._channel = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool channel;
        }

        public gaugeSensorCalibration_args()
        {
        }

        public gaugeSensorCalibration_args DeepCopy()
        {
          var tmp3863 = new gaugeSensorCalibration_args();
          if(__isset.c)
          {
            tmp3863.C = this.C;
          }
          tmp3863.__isset.c = this.__isset.c;
          if(__isset.channel)
          {
            tmp3863.Channel = this.Channel;
          }
          tmp3863.__isset.channel = this.__isset.channel;
          return tmp3863;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Byte)
                  {
                    Channel = await iprot.ReadByteAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3864 = new TStruct("gaugeSensorCalibration_args");
            await oprot.WriteStructBeginAsync(tmp3864, cancellationToken);
            var tmp3865 = new TField();
            if(__isset.c)
            {
              tmp3865.Name = "c";
              tmp3865.Type = TType.I64;
              tmp3865.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3865, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.channel)
            {
              tmp3865.Name = "channel";
              tmp3865.Type = TType.Byte;
              tmp3865.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3865, cancellationToken);
              await oprot.WriteByteAsync(Channel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is gaugeSensorCalibration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.channel == other.__isset.channel) && ((!__isset.channel) || (global::System.Object.Equals(Channel, other.Channel))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.channel)
            {
              hashcode = (hashcode * 397) + Channel.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3866 = new StringBuilder("gaugeSensorCalibration_args(");
          int tmp3867 = 0;
          if(__isset.c)
          {
            if(0 < tmp3867++) { tmp3866.Append(", "); }
            tmp3866.Append("C: ");
            C.ToString(tmp3866);
          }
          if(__isset.channel)
          {
            if(0 < tmp3867++) { tmp3866.Append(", "); }
            tmp3866.Append("Channel: ");
            Channel.ToString(tmp3866);
          }
          tmp3866.Append(')');
          return tmp3866.ToString();
        }
      }


      public partial class gaugeSensorCalibration_result : TBase
      {

        public gaugeSensorCalibration_result()
        {
        }

        public gaugeSensorCalibration_result DeepCopy()
        {
          var tmp3868 = new gaugeSensorCalibration_result();
          return tmp3868;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3869 = new TStruct("gaugeSensorCalibration_result");
            await oprot.WriteStructBeginAsync(tmp3869, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is gaugeSensorCalibration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3870 = new StringBuilder("gaugeSensorCalibration_result(");
          tmp3870.Append(')');
          return tmp3870.ToString();
        }
      }

    }

  }
}
