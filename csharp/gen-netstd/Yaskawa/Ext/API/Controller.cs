/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Controller
  {
    /// <summary>
    /// Interface to Robot Controllers
    /// 
    /// In general, a pendant may operate in connected or disconnected states.  When connected to a Robot Controller
    /// it may be monitoring or not have exclusive control (i.e. not be the single-point-of-control).
    /// 
    /// However, typically, once an extension is running, the pendant is connected to the controller and
    /// is the single-point-of-control.
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Request specified permissions.
      /// "jobcontrol" permission is used to manipulate jobs
      /// "networking" permission is used to connect to external networks
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permissions"></param>
      global::System.Threading.Tasks.Task<bool> requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default);

      /// <summary>
      /// Check permisions obtained.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permission"></param>
      global::System.Threading.Tasks.Task<bool> havePermission(long c, string permission, CancellationToken cancellationToken = default);

      /// <summary>
      /// Relinquish permissions (no effect if not held).
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permissions"></param>
      global::System.Threading.Tasks.Task relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default);

      /// <summary>
      /// Connect to the specified Robot Controller (by IP adress or hostname if DNS available)
      /// Typically, the pendant will already be connected to a controller when extensions are started,
      /// so calling connect() is not required.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="hostName"></param>
      global::System.Threading.Tasks.Task connect(long c, string hostName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Disconnect from the connected controller.  This leaves the pendant in the 'disconnected' state.
      /// When disconnected, many functions are unavailable or will return default values.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task disconnect(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to the specified events, if not already.
      /// Note: If using a Yaskawa supplied client library with event consumer callback support,
      ///       registering an event consumer callback will automatically subscribe to the appropriate event.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from the specified events.
      /// If called directly, this may causes event consumers for the events not to be called.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Poll the API Service for pending events.
      /// Note: If using a Yaskawa supplied client library, this does not need to be called explicitly.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> events(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if the pendant is connected to a robot controller
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> connected(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the hostname or IP address of the robot controller to which the pendant is connected, if any
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> connectedHostName(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// The software version string of the robot controller system software.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> softwareVersion(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if the pendant is only monitoring the robot controller to which it is connected.  This
      /// implies that no functions that modify the controller and/or robot state will succeed.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> monitoring(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if this pendant is the single-point-of-control for the connected Robot Controller.
      /// If not, most functions that modify the controller and/or robot state will fail.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> haveExclusiveControl(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Current operation mode of the controller
      /// Automatic (aka Play) - running jobs
      /// Manual (aka Teach) - for editing jobs, teaching points, jogging, setup etc.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> operationMode(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Are the servo drives engaged?
      /// On - yes, robot(s) are being actively controlled
      /// Off - no.  Typically brakes are engaged (unless brake-release engaged)
      /// Ready - ready to engage servos.  Typically requires operator to use servo enable switch.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> servoState(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Indicates if a job us running or stopped.
      /// Run - jobs are running (robot may be moving)
      /// Held - jobs were running but have been held/paused.
      /// Idle - no jobs are running
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> playbackState(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// The playback cycle affects how the controller runs a job.
      /// Step - a job is run line-for-line.
      /// Once - a job is run from the beginning to the end.
      /// Continuous - a job is run indefinitely from the beginning to the end.
      /// (API Version 3.0 and Later)
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackCycle> playbackCycle(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Sets the playback cycle mode. (API Version 3.0 and Later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="cycle"></param>
      global::System.Threading.Tasks.Task setPlaybackCycle(long c, global::Yaskawa.Ext.API.PlaybackCycle cycle, CancellationToken cancellationToken = default);

      /// <summary>
      /// Run the current robot job from the current line.  Requires Servos engaged & Automatic/Play operation and 'jobcontrol' permission.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task run(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Pause running job (servoes will remain engaged. 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task pause(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Resume running job from paused state. 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task resume(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop runnng job (will stop motion and disengage servos). 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task stop(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Name of the current job (e.g. job being run or edited)
      /// Empty if none.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> currentJob(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the current job. 'jobcontrol' permission required. Pass line=1 for start of job, line=0 for default/no-change.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="line"></param>
      global::System.Threading.Tasks.Task setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default);

      /// <summary>
      /// Current job line
      /// </summary>
      /// <param name="c"></param>
      /// <param name="taskNo"></param>
      global::System.Threading.Tasks.Task<int> currentJobLine(long c, int taskNo, CancellationToken cancellationToken = default);

      /// <summary>
      /// Name of the default (aka master) job.  Empty if no default job designated
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> defaultJob(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// query if job with specified name exists
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<bool> jobExists(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Details for the named job (throws if non-existent job)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> jobDetails(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of robot job names (empty if not connected)
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<string>> jobs(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of robot job names matching the name regular expression AND with the given tag
      /// (empty if not connected or no matches)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="nameRegex"></param>
      /// <param name="tag"></param>
      global::System.Threading.Tasks.Task<List<string>> jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default);

      /// <summary>
      /// Duplicate an existing job with a new name for the copy
      /// </summary>
      /// <param name="c"></param>
      /// <param name="existingName"></param>
      /// <param name="newName"></param>
      global::System.Threading.Tasks.Task duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default);

      /// <summary>
      /// delete the specified job.  The default job cannot be deleted.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task deleteJob(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Read source code for named job (in the programmingLanguage listed in jobDetails() )
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<string> jobSource(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Replace named job with the source code provided, in given programmingLanguage (e.g. "INFORM").
      /// Will thow if syntax errors in source.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="programmingLanguage"></param>
      /// <param name="sourceCode"></param>
      global::System.Threading.Tasks.Task storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default);

      /// <summary>
      /// Store a file on the controller. If a file with the same name already exists, it will be overwritten.
      /// * Management mode or higher required to write files to the controller.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="fileName"></param>
      /// <param name="fileContents"></param>
      global::System.Threading.Tasks.Task<bool> storeSystemFileContents(long c, string fileName, string fileContents, CancellationToken cancellationToken = default);

      /// <summary>
      /// Store a file on the controller. If a file with the same name already exists, it will be overwritten.
      /// * Management mode or higher required to write files to the controller.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="fileName"></param>
      global::System.Threading.Tasks.Task<bool> storeSystemFile(long c, string fileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Retrieve file content from the controller and save it into a string. If the file does not exist, an empty string will be returned.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="fileName"></param>
      global::System.Threading.Tasks.Task<string> retrieveSystemFileContents(long c, string fileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Retrieve a file from the controller and save it to the specified destName within the Extension folder.
      /// *  If the file does not exist, false will be returned.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="fileName"></param>
      global::System.Threading.Tasks.Task retrieveSystemFile(long c, string fileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of tools mapping index -> name.
      /// Unset/defaulted tools are omitted (e.g. those with no name, 0 weight etc.)
      /// Indices (map keys) may not be sequential.  Returned map may be empty.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<Dictionary<int, string>> tools(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on a specific tool, by index
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> tool(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return input number of given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return input group number for group beginning with given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputGroupNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return output nunber of given output name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return output group number for group beginning with given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputGroupNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return name of specified input number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<string> inputName(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return name of specified output number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<string> outputName(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of specified input
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setInputName(long c, int num, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of specified output
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setOutputName(long c, int num, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring specified input
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task monitorInput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring all inputs in given input group
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals (1 group = 8 signals)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring specified output
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task monitorOutput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring all outputs in given output group
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals (1 group = 8 signals)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring specified input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task unmonitorInput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring all inputs in specified group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring specified output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task unmonitorOutput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring all outputs in specified group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return value of given input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<bool> inputValue(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return values of input groups from specified group number (upto 4 contiguous groups/bytes, from least significant byte)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task<int> inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of given output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<bool> outputValue(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return values of output groups from specified group number (upto 4 contiguous groups/bytes)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task<int> outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the specified output number
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the values of the outputs in the specified contigous output groups (upto 4 contiguous groups/bytes)
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the named input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputAddress(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the given input number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<int> inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the named output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputAddress(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the given output number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<int> outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring a logical IO address.  Will generate IOValueChanged events
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task monitorIOAddress(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring a logical IO address. (events for address may still be generated if it corresponds to a monitored input or output)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given general input by logicial IO address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> inputAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given general output by logicial IO address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> outputAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given logicial IO address
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> ioAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given output by logical IO address
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given network input by logical IO address
      /// Note it is asyncronous so no errors/exceptions are thrown (SDK 3.1+)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setNetworkInputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given M-Register (SDK 3.1+)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<int> mRegisterValue(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given M-Register by index
      /// Note it is asynchronous so no errors/exceptions are thrown.(SDK 3.1+)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setMRegisterValue(long c, int index, int @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain input group number (byte) of field bus status input.  e.g. busType 'ethip' yields EtherNet/IP status byte group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="busType"></param>
      global::System.Threading.Tasks.Task<int> fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the list of control groups configured on the controller.
      /// If only one robot is connected to the controller, this will return a single element,
      /// containing the simple control group representing the robot.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> controlGroups(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the index of the currently active control group.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<sbyte> currentControlGroup(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the number of robots connected to the controller
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<sbyte> robotCount(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the index of the currently active robot.
      /// Note: index is 0-based, but in the UI the first robot is Robot 1.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> currentRobot(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Variable value by name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variable(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Variable value by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set variable value by name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set variable by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Lookup variable address by name and space
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="space"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default);

      /// <summary>
      /// Lookup variable address by name (less efficient)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByName(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of variable by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring a variable.  Will generate VariableChanged events.
      /// Note that a maximum of 1 position variable, 4 string variables and 15 variables of each of the remain types can be monitored at the same time.
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task monitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring a variable.
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task unmonitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the maximum number of variables available for the given space
      /// </summary>
      /// <param name="c"></param>
      /// <param name="space"></param>
      global::System.Threading.Tasks.Task<int> variableRange(long c, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default);

      /// <summary>
      /// Transform a Position coordinate values into another coordinate frame (not all conversion are supported or make sense)
      /// Also supports transformation between Joint frame and Cartesian frames of the TCP (Tool Center Point) position (implicitly).
      /// In this case the specific tool that determines the kinematic structure of the robot must be supplied (via the kinematicTool parameter).
      /// Additionally, since Cartesian IK may not be unique, you can select between matching the closure of another provided refPosition (Closure ikScheme)
      /// or minimizing the joint angle coordinate difference to the additionally provided refPosition (Delta ikScheme).  Pass ikScheme None if not applicable.
      /// These parameters will be ignored when not relevant.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="pos"></param>
      /// <param name="newFrame"></param>
      /// <param name="kinematicTool"></param>
      /// <param name="ikScheme"></param>
      /// <param name="refPosition"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> transformPositionToFrame(long c, global::Yaskawa.Ext.API.Position pos, global::Yaskawa.Ext.API.CoordinateFrame newFrame, int kinematicTool, global::Yaskawa.Ext.API.InverseKinematicsScheme ikScheme, global::Yaskawa.Ext.API.Position refPosition, CancellationToken cancellationToken = default);

      /// <summary>
      /// Convert coordinate values for length and/or angles in pos to the specified units, as appropriate (pass unit None for no-change or if irrelevant)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="pos"></param>
      /// <param name="newDistUnit"></param>
      /// <param name="newOrientUnit"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> convertPositionUnits(long c, global::Yaskawa.Ext.API.Position pos, global::Yaskawa.Ext.API.DistanceUnit newDistUnit, global::Yaskawa.Ext.API.OrientationUnit newOrientUnit, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on specified zone, by index (not number)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> zone(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Creates a new Zone and returns its index.  It will have default values
      /// which can be change via modifyZone()
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> newZone(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Modify Zone information.  Only fields set in Zone will be updated.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="z"></param>
      global::System.Threading.Tasks.Task modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default);

      /// <summary>
      /// Delete a Zone
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task deleteZone(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of user frames mapping index -> name.
      /// NB: Indices (map keys) may not be sequential. Returned map may be empty.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<Dictionary<int, string>> userFrames(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on specified User Frame, by index (not number)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> userFrame(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Creates a new User Frame with default values and returns its index.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> newUserFrame(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the specified User Frame to the provided values
      /// If a user frame at the selected index does not exist it is created. Otherwise, the user frame at the selected index is replaced.
      /// (API Version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="f"></param>
      global::System.Threading.Tasks.Task setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default);

      /// <summary>
      /// Delete a User Frame
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task deleteUserFrame(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query current controller network interface IP address.
      /// controllerInterface must be one of ['LAN1','LAN'/'LAN2' or 'LAN3']
      /// (NB: On YRC1000micro, 'LAN' is the external Ethernet port, corresponding to 'LAN2' on the YRC1000)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="controllerInterface"></param>
      global::System.Threading.Tasks.Task<string> networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default);

      /// <summary>
      /// Request external network access via specified protocol and port originating
      /// from the given controller interface. The controllerInferface may be left blank, in which case
      /// connections will be routed from the controller according to the destination address and
      /// current subnetwork of the external LAN ports).
      /// Access only persists while power is maintained to the controller.
      /// The protocol must be either 'tcp' or 'udp'. controllerInterface must be one of ['LAN1','LAN'/'LAN2' or 'LAN3'].
      /// Returns a handle that can subsequently used to remove the access, or -1 if the access request
      /// failed (may happen in case of network conflicts with other extensions).
      /// Requires 'networking' permision.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="controllerInterface"></param>
      /// <param name="port"></param>
      /// <param name="protocol"></param>
      global::System.Threading.Tasks.Task<int> requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// Interface to Robot Controllers
    /// 
    /// In general, a pendant may operate in connected or disconnected states.  When connected to a Robot Controller
    /// it may be monitoring or not have exclusive control (i.e. not be the single-point-of-control).
    /// 
    /// However, typically, once an extension is running, the pendant is connected to the controller and
    /// is the single-point-of-control.
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<bool> requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await send_requestPermissions(c, permissions, cancellationToken);
        return await recv_requestPermissions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1846 = new InternalStructs.requestPermissions_args() {
          C = c,
          Permissions = permissions,
        };
        
        await tmp1846.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_requestPermissions(CancellationToken cancellationToken = default)
      {
        
        var tmp1847 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1847.Type == TMessageType.Exception)
        {
          var tmp1848 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1848;
        }

        var tmp1849 = new InternalStructs.requestPermissions_result();
        await tmp1849.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1849.__isset.success)
        {
          return tmp1849.Success;
        }
        if (tmp1849.__isset.e)
        {
          throw tmp1849.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestPermissions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> havePermission(long c, string permission, CancellationToken cancellationToken = default)
      {
        await send_havePermission(c, permission, cancellationToken);
        return await recv_havePermission(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_havePermission(long c, string permission, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1850 = new InternalStructs.havePermission_args() {
          C = c,
          Permission = permission,
        };
        
        await tmp1850.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_havePermission(CancellationToken cancellationToken = default)
      {
        
        var tmp1851 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1851.Type == TMessageType.Exception)
        {
          var tmp1852 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1852;
        }

        var tmp1853 = new InternalStructs.havePermission_result();
        await tmp1853.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1853.__isset.success)
        {
          return tmp1853.Success;
        }
        if (tmp1853.__isset.e)
        {
          throw tmp1853.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "havePermission failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await send_relinquishPermissions(c, permissions, cancellationToken);
        await recv_relinquishPermissions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1854 = new InternalStructs.relinquishPermissions_args() {
          C = c,
          Permissions = permissions,
        };
        
        await tmp1854.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_relinquishPermissions(CancellationToken cancellationToken = default)
      {
        
        var tmp1855 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1855.Type == TMessageType.Exception)
        {
          var tmp1856 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1856;
        }

        var tmp1857 = new InternalStructs.relinquishPermissions_result();
        await tmp1857.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connect(long c, string hostName, CancellationToken cancellationToken = default)
      {
        await send_connect(c, hostName, cancellationToken);
        await recv_connect(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connect(long c, string hostName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1858 = new InternalStructs.connect_args() {
          C = c,
          HostName = hostName,
        };
        
        await tmp1858.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_connect(CancellationToken cancellationToken = default)
      {
        
        var tmp1859 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1859.Type == TMessageType.Exception)
        {
          var tmp1860 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1860;
        }

        var tmp1861 = new InternalStructs.connect_result();
        await tmp1861.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task disconnect(long c, CancellationToken cancellationToken = default)
      {
        await send_disconnect(c, cancellationToken);
        await recv_disconnect(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_disconnect(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1862 = new InternalStructs.disconnect_args() {
          C = c,
        };
        
        await tmp1862.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_disconnect(CancellationToken cancellationToken = default)
      {
        
        var tmp1863 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1863.Type == TMessageType.Exception)
        {
          var tmp1864 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1864;
        }

        var tmp1865 = new InternalStructs.disconnect_result();
        await tmp1865.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeEventTypes(c, types, cancellationToken);
        await recv_subscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1866 = new InternalStructs.subscribeEventTypes_args() {
          C = c,
          Types = types,
        };
        
        await tmp1866.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp1867 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1867.Type == TMessageType.Exception)
        {
          var tmp1868 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1868;
        }

        var tmp1869 = new InternalStructs.subscribeEventTypes_result();
        await tmp1869.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeEventTypes(c, types, cancellationToken);
        await recv_unsubscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1870 = new InternalStructs.unsubscribeEventTypes_args() {
          C = c,
          Types = types,
        };
        
        await tmp1870.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp1871 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1871.Type == TMessageType.Exception)
        {
          var tmp1872 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1872;
        }

        var tmp1873 = new InternalStructs.unsubscribeEventTypes_result();
        await tmp1873.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> events(long c, CancellationToken cancellationToken = default)
      {
        await send_events(c, cancellationToken);
        return await recv_events(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_events(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("events", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1874 = new InternalStructs.events_args() {
          C = c,
        };
        
        await tmp1874.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> recv_events(CancellationToken cancellationToken = default)
      {
        
        var tmp1875 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1875.Type == TMessageType.Exception)
        {
          var tmp1876 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1876;
        }

        var tmp1877 = new InternalStructs.events_result();
        await tmp1877.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1877.__isset.success)
        {
          return tmp1877.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "events failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> connected(long c, CancellationToken cancellationToken = default)
      {
        await send_connected(c, cancellationToken);
        return await recv_connected(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connected(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1878 = new InternalStructs.connected_args() {
          C = c,
        };
        
        await tmp1878.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_connected(CancellationToken cancellationToken = default)
      {
        
        var tmp1879 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1879.Type == TMessageType.Exception)
        {
          var tmp1880 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1880;
        }

        var tmp1881 = new InternalStructs.connected_result();
        await tmp1881.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1881.__isset.success)
        {
          return tmp1881.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connected failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> connectedHostName(long c, CancellationToken cancellationToken = default)
      {
        await send_connectedHostName(c, cancellationToken);
        return await recv_connectedHostName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connectedHostName(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1882 = new InternalStructs.connectedHostName_args() {
          C = c,
        };
        
        await tmp1882.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_connectedHostName(CancellationToken cancellationToken = default)
      {
        
        var tmp1883 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1883.Type == TMessageType.Exception)
        {
          var tmp1884 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1884;
        }

        var tmp1885 = new InternalStructs.connectedHostName_result();
        await tmp1885.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1885.__isset.success)
        {
          return tmp1885.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connectedHostName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> softwareVersion(long c, CancellationToken cancellationToken = default)
      {
        await send_softwareVersion(c, cancellationToken);
        return await recv_softwareVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_softwareVersion(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1886 = new InternalStructs.softwareVersion_args() {
          C = c,
        };
        
        await tmp1886.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_softwareVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp1887 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1887.Type == TMessageType.Exception)
        {
          var tmp1888 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1888;
        }

        var tmp1889 = new InternalStructs.softwareVersion_result();
        await tmp1889.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1889.__isset.success)
        {
          return tmp1889.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "softwareVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> monitoring(long c, CancellationToken cancellationToken = default)
      {
        await send_monitoring(c, cancellationToken);
        return await recv_monitoring(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitoring(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1890 = new InternalStructs.monitoring_args() {
          C = c,
        };
        
        await tmp1890.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_monitoring(CancellationToken cancellationToken = default)
      {
        
        var tmp1891 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1891.Type == TMessageType.Exception)
        {
          var tmp1892 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1892;
        }

        var tmp1893 = new InternalStructs.monitoring_result();
        await tmp1893.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1893.__isset.success)
        {
          return tmp1893.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "monitoring failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> haveExclusiveControl(long c, CancellationToken cancellationToken = default)
      {
        await send_haveExclusiveControl(c, cancellationToken);
        return await recv_haveExclusiveControl(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_haveExclusiveControl(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1894 = new InternalStructs.haveExclusiveControl_args() {
          C = c,
        };
        
        await tmp1894.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_haveExclusiveControl(CancellationToken cancellationToken = default)
      {
        
        var tmp1895 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1895.Type == TMessageType.Exception)
        {
          var tmp1896 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1896;
        }

        var tmp1897 = new InternalStructs.haveExclusiveControl_result();
        await tmp1897.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1897.__isset.success)
        {
          return tmp1897.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "haveExclusiveControl failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> operationMode(long c, CancellationToken cancellationToken = default)
      {
        await send_operationMode(c, cancellationToken);
        return await recv_operationMode(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_operationMode(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1898 = new InternalStructs.operationMode_args() {
          C = c,
        };
        
        await tmp1898.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> recv_operationMode(CancellationToken cancellationToken = default)
      {
        
        var tmp1899 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1899.Type == TMessageType.Exception)
        {
          var tmp1900 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1900;
        }

        var tmp1901 = new InternalStructs.operationMode_result();
        await tmp1901.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1901.__isset.success)
        {
          return tmp1901.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "operationMode failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> servoState(long c, CancellationToken cancellationToken = default)
      {
        await send_servoState(c, cancellationToken);
        return await recv_servoState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_servoState(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1902 = new InternalStructs.servoState_args() {
          C = c,
        };
        
        await tmp1902.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> recv_servoState(CancellationToken cancellationToken = default)
      {
        
        var tmp1903 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1903.Type == TMessageType.Exception)
        {
          var tmp1904 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1904;
        }

        var tmp1905 = new InternalStructs.servoState_result();
        await tmp1905.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1905.__isset.success)
        {
          return tmp1905.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "servoState failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> playbackState(long c, CancellationToken cancellationToken = default)
      {
        await send_playbackState(c, cancellationToken);
        return await recv_playbackState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_playbackState(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1906 = new InternalStructs.playbackState_args() {
          C = c,
        };
        
        await tmp1906.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> recv_playbackState(CancellationToken cancellationToken = default)
      {
        
        var tmp1907 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1907.Type == TMessageType.Exception)
        {
          var tmp1908 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1908;
        }

        var tmp1909 = new InternalStructs.playbackState_result();
        await tmp1909.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1909.__isset.success)
        {
          return tmp1909.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "playbackState failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackCycle> playbackCycle(long c, CancellationToken cancellationToken = default)
      {
        await send_playbackCycle(c, cancellationToken);
        return await recv_playbackCycle(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_playbackCycle(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("playbackCycle", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1910 = new InternalStructs.playbackCycle_args() {
          C = c,
        };
        
        await tmp1910.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackCycle> recv_playbackCycle(CancellationToken cancellationToken = default)
      {
        
        var tmp1911 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1911.Type == TMessageType.Exception)
        {
          var tmp1912 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1912;
        }

        var tmp1913 = new InternalStructs.playbackCycle_result();
        await tmp1913.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1913.__isset.success)
        {
          return tmp1913.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "playbackCycle failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setPlaybackCycle(long c, global::Yaskawa.Ext.API.PlaybackCycle cycle, CancellationToken cancellationToken = default)
      {
        await send_setPlaybackCycle(c, cycle, cancellationToken);
        await recv_setPlaybackCycle(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setPlaybackCycle(long c, global::Yaskawa.Ext.API.PlaybackCycle cycle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setPlaybackCycle", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1914 = new InternalStructs.setPlaybackCycle_args() {
          C = c,
          Cycle = cycle,
        };
        
        await tmp1914.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setPlaybackCycle(CancellationToken cancellationToken = default)
      {
        
        var tmp1915 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1915.Type == TMessageType.Exception)
        {
          var tmp1916 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1916;
        }

        var tmp1917 = new InternalStructs.setPlaybackCycle_result();
        await tmp1917.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task run(long c, CancellationToken cancellationToken = default)
      {
        await send_run(c, cancellationToken);
        await recv_run(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_run(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("run", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1918 = new InternalStructs.run_args() {
          C = c,
        };
        
        await tmp1918.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_run(CancellationToken cancellationToken = default)
      {
        
        var tmp1919 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1919.Type == TMessageType.Exception)
        {
          var tmp1920 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1920;
        }

        var tmp1921 = new InternalStructs.run_result();
        await tmp1921.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pause(long c, CancellationToken cancellationToken = default)
      {
        await send_pause(c, cancellationToken);
        await recv_pause(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pause(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1922 = new InternalStructs.pause_args() {
          C = c,
        };
        
        await tmp1922.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_pause(CancellationToken cancellationToken = default)
      {
        
        var tmp1923 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1923.Type == TMessageType.Exception)
        {
          var tmp1924 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1924;
        }

        var tmp1925 = new InternalStructs.pause_result();
        await tmp1925.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resume(long c, CancellationToken cancellationToken = default)
      {
        await send_resume(c, cancellationToken);
        await recv_resume(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_resume(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1926 = new InternalStructs.resume_args() {
          C = c,
        };
        
        await tmp1926.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_resume(CancellationToken cancellationToken = default)
      {
        
        var tmp1927 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1927.Type == TMessageType.Exception)
        {
          var tmp1928 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1928;
        }

        var tmp1929 = new InternalStructs.resume_result();
        await tmp1929.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stop(long c, CancellationToken cancellationToken = default)
      {
        await send_stop(c, cancellationToken);
        await recv_stop(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_stop(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1930 = new InternalStructs.stop_args() {
          C = c,
        };
        
        await tmp1930.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_stop(CancellationToken cancellationToken = default)
      {
        
        var tmp1931 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1931.Type == TMessageType.Exception)
        {
          var tmp1932 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1932;
        }

        var tmp1933 = new InternalStructs.stop_result();
        await tmp1933.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> currentJob(long c, CancellationToken cancellationToken = default)
      {
        await send_currentJob(c, cancellationToken);
        return await recv_currentJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentJob(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1934 = new InternalStructs.currentJob_args() {
          C = c,
        };
        
        await tmp1934.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1935 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1935.Type == TMessageType.Exception)
        {
          var tmp1936 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1936;
        }

        var tmp1937 = new InternalStructs.currentJob_result();
        await tmp1937.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1937.__isset.success)
        {
          return tmp1937.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentJob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default)
      {
        await send_setCurrentJob(c, name, line, cancellationToken);
        await recv_setCurrentJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1938 = new InternalStructs.setCurrentJob_args() {
          C = c,
          Name = name,
          Line = line,
        };
        
        await tmp1938.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setCurrentJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1939 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1939.Type == TMessageType.Exception)
        {
          var tmp1940 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1940;
        }

        var tmp1941 = new InternalStructs.setCurrentJob_result();
        await tmp1941.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1941.__isset.e)
        {
          throw tmp1941.E;
        }
      }

      public async global::System.Threading.Tasks.Task<int> currentJobLine(long c, int taskNo, CancellationToken cancellationToken = default)
      {
        await send_currentJobLine(c, taskNo, cancellationToken);
        return await recv_currentJobLine(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentJobLine(long c, int taskNo, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentJobLine", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1942 = new InternalStructs.currentJobLine_args() {
          C = c,
          TaskNo = taskNo,
        };
        
        await tmp1942.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_currentJobLine(CancellationToken cancellationToken = default)
      {
        
        var tmp1943 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1943.Type == TMessageType.Exception)
        {
          var tmp1944 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1944;
        }

        var tmp1945 = new InternalStructs.currentJobLine_result();
        await tmp1945.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1945.__isset.success)
        {
          return tmp1945.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentJobLine failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> defaultJob(long c, CancellationToken cancellationToken = default)
      {
        await send_defaultJob(c, cancellationToken);
        return await recv_defaultJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_defaultJob(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1946 = new InternalStructs.defaultJob_args() {
          C = c,
        };
        
        await tmp1946.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_defaultJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1947 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1947.Type == TMessageType.Exception)
        {
          var tmp1948 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1948;
        }

        var tmp1949 = new InternalStructs.defaultJob_result();
        await tmp1949.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1949.__isset.success)
        {
          return tmp1949.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "defaultJob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> jobExists(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobExists(c, name, cancellationToken);
        return await recv_jobExists(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobExists(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1950 = new InternalStructs.jobExists_args() {
          C = c,
          Name = name,
        };
        
        await tmp1950.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_jobExists(CancellationToken cancellationToken = default)
      {
        
        var tmp1951 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1951.Type == TMessageType.Exception)
        {
          var tmp1952 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1952;
        }

        var tmp1953 = new InternalStructs.jobExists_result();
        await tmp1953.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1953.__isset.success)
        {
          return tmp1953.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobExists failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> jobDetails(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobDetails(c, name, cancellationToken);
        return await recv_jobDetails(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobDetails(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1954 = new InternalStructs.jobDetails_args() {
          C = c,
          Name = name,
        };
        
        await tmp1954.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> recv_jobDetails(CancellationToken cancellationToken = default)
      {
        
        var tmp1955 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1955.Type == TMessageType.Exception)
        {
          var tmp1956 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1956;
        }

        var tmp1957 = new InternalStructs.jobDetails_result();
        await tmp1957.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1957.__isset.success)
        {
          return tmp1957.Success;
        }
        if (tmp1957.__isset.e)
        {
          throw tmp1957.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobDetails failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jobs(long c, CancellationToken cancellationToken = default)
      {
        await send_jobs(c, cancellationToken);
        return await recv_jobs(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobs(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1958 = new InternalStructs.jobs_args() {
          C = c,
        };
        
        await tmp1958.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jobs(CancellationToken cancellationToken = default)
      {
        
        var tmp1959 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1959.Type == TMessageType.Exception)
        {
          var tmp1960 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1960;
        }

        var tmp1961 = new InternalStructs.jobs_result();
        await tmp1961.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1961.__isset.success)
        {
          return tmp1961.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobs failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default)
      {
        await send_jobsMatching(c, nameRegex, tag, cancellationToken);
        return await recv_jobsMatching(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1962 = new InternalStructs.jobsMatching_args() {
          C = c,
          NameRegex = nameRegex,
          Tag = tag,
        };
        
        await tmp1962.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jobsMatching(CancellationToken cancellationToken = default)
      {
        
        var tmp1963 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1963.Type == TMessageType.Exception)
        {
          var tmp1964 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1964;
        }

        var tmp1965 = new InternalStructs.jobsMatching_result();
        await tmp1965.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1965.__isset.success)
        {
          return tmp1965.Success;
        }
        if (tmp1965.__isset.e)
        {
          throw tmp1965.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobsMatching failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default)
      {
        await send_duplicateJob(c, existingName, newName, cancellationToken);
        await recv_duplicateJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1966 = new InternalStructs.duplicateJob_args() {
          C = c,
          ExistingName = existingName,
          NewName = newName,
        };
        
        await tmp1966.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_duplicateJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1967 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1967.Type == TMessageType.Exception)
        {
          var tmp1968 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1968;
        }

        var tmp1969 = new InternalStructs.duplicateJob_result();
        await tmp1969.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1969.__isset.e)
        {
          throw tmp1969.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteJob(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_deleteJob(c, name, cancellationToken);
        await recv_deleteJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteJob(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1970 = new InternalStructs.deleteJob_args() {
          C = c,
          Name = name,
        };
        
        await tmp1970.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1971 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1971.Type == TMessageType.Exception)
        {
          var tmp1972 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1972;
        }

        var tmp1973 = new InternalStructs.deleteJob_result();
        await tmp1973.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1973.__isset.e)
        {
          throw tmp1973.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> jobSource(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobSource(c, name, cancellationToken);
        return await recv_jobSource(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobSource(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1974 = new InternalStructs.jobSource_args() {
          C = c,
          Name = name,
        };
        
        await tmp1974.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_jobSource(CancellationToken cancellationToken = default)
      {
        
        var tmp1975 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1975.Type == TMessageType.Exception)
        {
          var tmp1976 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1976;
        }

        var tmp1977 = new InternalStructs.jobSource_result();
        await tmp1977.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1977.__isset.success)
        {
          return tmp1977.Success;
        }
        if (tmp1977.__isset.e)
        {
          throw tmp1977.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobSource failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default)
      {
        await send_storeJobSource(c, name, programmingLanguage, sourceCode, cancellationToken);
        await recv_storeJobSource(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1978 = new InternalStructs.storeJobSource_args() {
          C = c,
          Name = name,
          ProgrammingLanguage = programmingLanguage,
          SourceCode = sourceCode,
        };
        
        await tmp1978.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_storeJobSource(CancellationToken cancellationToken = default)
      {
        
        var tmp1979 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1979.Type == TMessageType.Exception)
        {
          var tmp1980 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1980;
        }

        var tmp1981 = new InternalStructs.storeJobSource_result();
        await tmp1981.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1981.__isset.e)
        {
          throw tmp1981.E;
        }
      }

      public async global::System.Threading.Tasks.Task<bool> storeSystemFileContents(long c, string fileName, string fileContents, CancellationToken cancellationToken = default)
      {
        await send_storeSystemFileContents(c, fileName, fileContents, cancellationToken);
        return await recv_storeSystemFileContents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_storeSystemFileContents(long c, string fileName, string fileContents, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("storeSystemFileContents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1982 = new InternalStructs.storeSystemFileContents_args() {
          C = c,
          FileName = fileName,
          FileContents = fileContents,
        };
        
        await tmp1982.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_storeSystemFileContents(CancellationToken cancellationToken = default)
      {
        
        var tmp1983 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1983.Type == TMessageType.Exception)
        {
          var tmp1984 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1984;
        }

        var tmp1985 = new InternalStructs.storeSystemFileContents_result();
        await tmp1985.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1985.__isset.success)
        {
          return tmp1985.Success;
        }
        if (tmp1985.__isset.e)
        {
          throw tmp1985.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "storeSystemFileContents failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> storeSystemFile(long c, string fileName, CancellationToken cancellationToken = default)
      {
        await send_storeSystemFile(c, fileName, cancellationToken);
        return await recv_storeSystemFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_storeSystemFile(long c, string fileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("storeSystemFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1986 = new InternalStructs.storeSystemFile_args() {
          C = c,
          FileName = fileName,
        };
        
        await tmp1986.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_storeSystemFile(CancellationToken cancellationToken = default)
      {
        
        var tmp1987 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1987.Type == TMessageType.Exception)
        {
          var tmp1988 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1988;
        }

        var tmp1989 = new InternalStructs.storeSystemFile_result();
        await tmp1989.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1989.__isset.success)
        {
          return tmp1989.Success;
        }
        if (tmp1989.__isset.e)
        {
          throw tmp1989.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "storeSystemFile failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> retrieveSystemFileContents(long c, string fileName, CancellationToken cancellationToken = default)
      {
        await send_retrieveSystemFileContents(c, fileName, cancellationToken);
        return await recv_retrieveSystemFileContents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_retrieveSystemFileContents(long c, string fileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("retrieveSystemFileContents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1990 = new InternalStructs.retrieveSystemFileContents_args() {
          C = c,
          FileName = fileName,
        };
        
        await tmp1990.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_retrieveSystemFileContents(CancellationToken cancellationToken = default)
      {
        
        var tmp1991 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1991.Type == TMessageType.Exception)
        {
          var tmp1992 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1992;
        }

        var tmp1993 = new InternalStructs.retrieveSystemFileContents_result();
        await tmp1993.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1993.__isset.success)
        {
          return tmp1993.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveSystemFileContents failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task retrieveSystemFile(long c, string fileName, CancellationToken cancellationToken = default)
      {
        await send_retrieveSystemFile(c, fileName, cancellationToken);
        await recv_retrieveSystemFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_retrieveSystemFile(long c, string fileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("retrieveSystemFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1994 = new InternalStructs.retrieveSystemFile_args() {
          C = c,
          FileName = fileName,
        };
        
        await tmp1994.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_retrieveSystemFile(CancellationToken cancellationToken = default)
      {
        
        var tmp1995 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1995.Type == TMessageType.Exception)
        {
          var tmp1996 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1996;
        }

        var tmp1997 = new InternalStructs.retrieveSystemFile_result();
        await tmp1997.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1997.__isset.e)
        {
          throw tmp1997.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> tools(long c, CancellationToken cancellationToken = default)
      {
        await send_tools(c, cancellationToken);
        return await recv_tools(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_tools(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1998 = new InternalStructs.tools_args() {
          C = c,
        };
        
        await tmp1998.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> recv_tools(CancellationToken cancellationToken = default)
      {
        
        var tmp1999 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1999.Type == TMessageType.Exception)
        {
          var tmp2000 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2000;
        }

        var tmp2001 = new InternalStructs.tools_result();
        await tmp2001.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2001.__isset.success)
        {
          return tmp2001.Success;
        }
        if (tmp2001.__isset.e)
        {
          throw tmp2001.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tools failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> tool(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_tool(c, index, cancellationToken);
        return await recv_tool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_tool(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2002 = new InternalStructs.tool_args() {
          C = c,
          Index = index,
        };
        
        await tmp2002.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> recv_tool(CancellationToken cancellationToken = default)
      {
        
        var tmp2003 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2003.Type == TMessageType.Exception)
        {
          var tmp2004 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2004;
        }

        var tmp2005 = new InternalStructs.tool_result();
        await tmp2005.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2005.__isset.success)
        {
          return tmp2005.Success;
        }
        if (tmp2005.__isset.e)
        {
          throw tmp2005.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputNumber(c, name, cancellationToken);
        return await recv_inputNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2006 = new InternalStructs.inputNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp2006.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp2007 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2007.Type == TMessageType.Exception)
        {
          var tmp2008 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2008;
        }

        var tmp2009 = new InternalStructs.inputNumber_result();
        await tmp2009.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2009.__isset.success)
        {
          return tmp2009.Success;
        }
        if (tmp2009.__isset.e)
        {
          throw tmp2009.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputGroupNumber(c, name, cancellationToken);
        return await recv_inputGroupNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2010 = new InternalStructs.inputGroupNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp2010.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputGroupNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp2011 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2011.Type == TMessageType.Exception)
        {
          var tmp2012 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2012;
        }

        var tmp2013 = new InternalStructs.inputGroupNumber_result();
        await tmp2013.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2013.__isset.success)
        {
          return tmp2013.Success;
        }
        if (tmp2013.__isset.e)
        {
          throw tmp2013.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputGroupNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputNumber(c, name, cancellationToken);
        return await recv_outputNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2014 = new InternalStructs.outputNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp2014.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp2015 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2015.Type == TMessageType.Exception)
        {
          var tmp2016 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2016;
        }

        var tmp2017 = new InternalStructs.outputNumber_result();
        await tmp2017.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2017.__isset.success)
        {
          return tmp2017.Success;
        }
        if (tmp2017.__isset.e)
        {
          throw tmp2017.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputGroupNumber(c, name, cancellationToken);
        return await recv_outputGroupNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2018 = new InternalStructs.outputGroupNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp2018.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputGroupNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp2019 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2019.Type == TMessageType.Exception)
        {
          var tmp2020 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2020;
        }

        var tmp2021 = new InternalStructs.outputGroupNumber_result();
        await tmp2021.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2021.__isset.success)
        {
          return tmp2021.Success;
        }
        if (tmp2021.__isset.e)
        {
          throw tmp2021.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputGroupNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> inputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputName(c, num, cancellationToken);
        return await recv_inputName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2022 = new InternalStructs.inputName_args() {
          C = c,
          Num = num,
        };
        
        await tmp2022.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_inputName(CancellationToken cancellationToken = default)
      {
        
        var tmp2023 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2023.Type == TMessageType.Exception)
        {
          var tmp2024 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2024;
        }

        var tmp2025 = new InternalStructs.inputName_result();
        await tmp2025.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2025.__isset.success)
        {
          return tmp2025.Success;
        }
        if (tmp2025.__isset.e)
        {
          throw tmp2025.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> outputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputName(c, num, cancellationToken);
        return await recv_outputName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2026 = new InternalStructs.outputName_args() {
          C = c,
          Num = num,
        };
        
        await tmp2026.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_outputName(CancellationToken cancellationToken = default)
      {
        
        var tmp2027 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2027.Type == TMessageType.Exception)
        {
          var tmp2028 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2028;
        }

        var tmp2029 = new InternalStructs.outputName_result();
        await tmp2029.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2029.__isset.success)
        {
          return tmp2029.Success;
        }
        if (tmp2029.__isset.e)
        {
          throw tmp2029.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setInputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await send_setInputName(c, num, name, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setInputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setInputName", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2030 = new InternalStructs.setInputName_args() {
          C = c,
          Num = num,
          Name = name,
        };
        
        await tmp2030.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await send_setOutputName(c, num, name, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputName", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2031 = new InternalStructs.setOutputName_args() {
          C = c,
          Num = num,
          Name = name,
        };
        
        await tmp2031.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_monitorInput(c, num, cancellationToken);
        await recv_monitorInput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2032 = new InternalStructs.monitorInput_args() {
          C = c,
          Num = num,
        };
        
        await tmp2032.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorInput(CancellationToken cancellationToken = default)
      {
        
        var tmp2033 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2033.Type == TMessageType.Exception)
        {
          var tmp2034 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2034;
        }

        var tmp2035 = new InternalStructs.monitorInput_result();
        await tmp2035.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2035.__isset.e)
        {
          throw tmp2035.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_monitorInputGroups(c, groupNum, count, cancellationToken);
        await recv_monitorInputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2036 = new InternalStructs.monitorInputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp2036.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorInputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp2037 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2037.Type == TMessageType.Exception)
        {
          var tmp2038 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2038;
        }

        var tmp2039 = new InternalStructs.monitorInputGroups_result();
        await tmp2039.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2039.__isset.e)
        {
          throw tmp2039.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_monitorOutput(c, num, cancellationToken);
        await recv_monitorOutput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2040 = new InternalStructs.monitorOutput_args() {
          C = c,
          Num = num,
        };
        
        await tmp2040.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorOutput(CancellationToken cancellationToken = default)
      {
        
        var tmp2041 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2041.Type == TMessageType.Exception)
        {
          var tmp2042 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2042;
        }

        var tmp2043 = new InternalStructs.monitorOutput_result();
        await tmp2043.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2043.__isset.e)
        {
          throw tmp2043.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_monitorOutputGroups(c, groupNum, count, cancellationToken);
        await recv_monitorOutputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2044 = new InternalStructs.monitorOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp2044.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorOutputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp2045 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2045.Type == TMessageType.Exception)
        {
          var tmp2046 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2046;
        }

        var tmp2047 = new InternalStructs.monitorOutputGroups_result();
        await tmp2047.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2047.__isset.e)
        {
          throw tmp2047.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_unmonitorInput(c, num, cancellationToken);
        await recv_unmonitorInput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2048 = new InternalStructs.unmonitorInput_args() {
          C = c,
          Num = num,
        };
        
        await tmp2048.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorInput(CancellationToken cancellationToken = default)
      {
        
        var tmp2049 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2049.Type == TMessageType.Exception)
        {
          var tmp2050 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2050;
        }

        var tmp2051 = new InternalStructs.unmonitorInput_result();
        await tmp2051.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_unmonitorInputGroups(c, groupNum, count, cancellationToken);
        await recv_unmonitorInputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2052 = new InternalStructs.unmonitorInputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp2052.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorInputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp2053 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2053.Type == TMessageType.Exception)
        {
          var tmp2054 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2054;
        }

        var tmp2055 = new InternalStructs.unmonitorInputGroups_result();
        await tmp2055.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_unmonitorOutput(c, num, cancellationToken);
        await recv_unmonitorOutput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2056 = new InternalStructs.unmonitorOutput_args() {
          C = c,
          Num = num,
        };
        
        await tmp2056.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorOutput(CancellationToken cancellationToken = default)
      {
        
        var tmp2057 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2057.Type == TMessageType.Exception)
        {
          var tmp2058 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2058;
        }

        var tmp2059 = new InternalStructs.unmonitorOutput_result();
        await tmp2059.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_unmonitorOutputGroups(c, groupNum, count, cancellationToken);
        await recv_unmonitorOutputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2060 = new InternalStructs.unmonitorOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp2060.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorOutputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp2061 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2061.Type == TMessageType.Exception)
        {
          var tmp2062 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2062;
        }

        var tmp2063 = new InternalStructs.unmonitorOutputGroups_result();
        await tmp2063.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> inputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputValue(c, num, cancellationToken);
        return await recv_inputValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2064 = new InternalStructs.inputValue_args() {
          C = c,
          Num = num,
        };
        
        await tmp2064.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_inputValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2065 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2065.Type == TMessageType.Exception)
        {
          var tmp2066 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2066;
        }

        var tmp2067 = new InternalStructs.inputValue_result();
        await tmp2067.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2067.__isset.success)
        {
          return tmp2067.Success;
        }
        if (tmp2067.__isset.e)
        {
          throw tmp2067.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_inputGroupsValue(c, groupNum, count, cancellationToken);
        return await recv_inputGroupsValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2068 = new InternalStructs.inputGroupsValue_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp2068.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputGroupsValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2069 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2069.Type == TMessageType.Exception)
        {
          var tmp2070 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2070;
        }

        var tmp2071 = new InternalStructs.inputGroupsValue_result();
        await tmp2071.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2071.__isset.success)
        {
          return tmp2071.Success;
        }
        if (tmp2071.__isset.e)
        {
          throw tmp2071.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputGroupsValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> outputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputValue(c, num, cancellationToken);
        return await recv_outputValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2072 = new InternalStructs.outputValue_args() {
          C = c,
          Num = num,
        };
        
        await tmp2072.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_outputValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2073 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2073.Type == TMessageType.Exception)
        {
          var tmp2074 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2074;
        }

        var tmp2075 = new InternalStructs.outputValue_result();
        await tmp2075.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2075.__isset.success)
        {
          return tmp2075.Success;
        }
        if (tmp2075.__isset.e)
        {
          throw tmp2075.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_outputGroupsValue(c, groupNum, count, cancellationToken);
        return await recv_outputGroupsValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2076 = new InternalStructs.outputGroupsValue_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp2076.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputGroupsValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2077 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2077.Type == TMessageType.Exception)
        {
          var tmp2078 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2078;
        }

        var tmp2079 = new InternalStructs.outputGroupsValue_result();
        await tmp2079.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2079.__isset.success)
        {
          return tmp2079.Success;
        }
        if (tmp2079.__isset.e)
        {
          throw tmp2079.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputGroupsValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setOutput(c, num, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutput", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2080 = new InternalStructs.setOutput_args() {
          C = c,
          Num = num,
          Value = @value,
        };
        
        await tmp2080.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default)
      {
        await send_setOutputGroups(c, groupNum, count, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputGroups", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2081 = new InternalStructs.setOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
          Value = @value,
        };
        
        await tmp2081.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> inputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputAddress(c, name, cancellationToken);
        return await recv_inputAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2082 = new InternalStructs.inputAddress_args() {
          C = c,
          Name = name,
        };
        
        await tmp2082.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp2083 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2083.Type == TMessageType.Exception)
        {
          var tmp2084 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2084;
        }

        var tmp2085 = new InternalStructs.inputAddress_result();
        await tmp2085.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2085.__isset.success)
        {
          return tmp2085.Success;
        }
        if (tmp2085.__isset.e)
        {
          throw tmp2085.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputAddressByNumber(c, num, cancellationToken);
        return await recv_inputAddressByNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2086 = new InternalStructs.inputAddressByNumber_args() {
          C = c,
          Num = num,
        };
        
        await tmp2086.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputAddressByNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp2087 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2087.Type == TMessageType.Exception)
        {
          var tmp2088 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2088;
        }

        var tmp2089 = new InternalStructs.inputAddressByNumber_result();
        await tmp2089.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2089.__isset.success)
        {
          return tmp2089.Success;
        }
        if (tmp2089.__isset.e)
        {
          throw tmp2089.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddressByNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputAddress(c, name, cancellationToken);
        return await recv_outputAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2090 = new InternalStructs.outputAddress_args() {
          C = c,
          Name = name,
        };
        
        await tmp2090.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp2091 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2091.Type == TMessageType.Exception)
        {
          var tmp2092 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2092;
        }

        var tmp2093 = new InternalStructs.outputAddress_result();
        await tmp2093.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2093.__isset.success)
        {
          return tmp2093.Success;
        }
        if (tmp2093.__isset.e)
        {
          throw tmp2093.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputAddressByNumber(c, num, cancellationToken);
        return await recv_outputAddressByNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2094 = new InternalStructs.outputAddressByNumber_args() {
          C = c,
          Num = num,
        };
        
        await tmp2094.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputAddressByNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp2095 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2095.Type == TMessageType.Exception)
        {
          var tmp2096 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2096;
        }

        var tmp2097 = new InternalStructs.outputAddressByNumber_result();
        await tmp2097.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2097.__isset.success)
        {
          return tmp2097.Success;
        }
        if (tmp2097.__isset.e)
        {
          throw tmp2097.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddressByNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task monitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_monitorIOAddress(c, address, cancellationToken);
        await recv_monitorIOAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2098 = new InternalStructs.monitorIOAddress_args() {
          C = c,
          Address = address,
        };
        
        await tmp2098.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorIOAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp2099 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2099.Type == TMessageType.Exception)
        {
          var tmp2100 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2100;
        }

        var tmp2101 = new InternalStructs.monitorIOAddress_result();
        await tmp2101.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2101.__isset.e)
        {
          throw tmp2101.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_unmonitorIOAddress(c, address, cancellationToken);
        await recv_unmonitorIOAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2102 = new InternalStructs.unmonitorIOAddress_args() {
          C = c,
          Address = address,
        };
        
        await tmp2102.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorIOAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp2103 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2103.Type == TMessageType.Exception)
        {
          var tmp2104 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2104;
        }

        var tmp2105 = new InternalStructs.unmonitorIOAddress_result();
        await tmp2105.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> inputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_inputAddressValue(c, address, cancellationToken);
        return await recv_inputAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2106 = new InternalStructs.inputAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp2106.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_inputAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2107 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2107.Type == TMessageType.Exception)
        {
          var tmp2108 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2108;
        }

        var tmp2109 = new InternalStructs.inputAddressValue_result();
        await tmp2109.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2109.__isset.success)
        {
          return tmp2109.Success;
        }
        if (tmp2109.__isset.e)
        {
          throw tmp2109.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> outputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_outputAddressValue(c, address, cancellationToken);
        return await recv_outputAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2110 = new InternalStructs.outputAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp2110.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_outputAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2111 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2111.Type == TMessageType.Exception)
        {
          var tmp2112 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2112;
        }

        var tmp2113 = new InternalStructs.outputAddressValue_result();
        await tmp2113.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2113.__isset.success)
        {
          return tmp2113.Success;
        }
        if (tmp2113.__isset.e)
        {
          throw tmp2113.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> ioAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_ioAddressValue(c, address, cancellationToken);
        return await recv_ioAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ioAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ioAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2114 = new InternalStructs.ioAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp2114.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_ioAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2115 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2115.Type == TMessageType.Exception)
        {
          var tmp2116 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2116;
        }

        var tmp2117 = new InternalStructs.ioAddressValue_result();
        await tmp2117.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2117.__isset.success)
        {
          return tmp2117.Success;
        }
        if (tmp2117.__isset.e)
        {
          throw tmp2117.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ioAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setOutputAddress(c, address, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputAddress", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2118 = new InternalStructs.setOutputAddress_args() {
          C = c,
          Address = address,
          Value = @value,
        };
        
        await tmp2118.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setNetworkInputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setNetworkInputAddress(c, address, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setNetworkInputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setNetworkInputAddress", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2119 = new InternalStructs.setNetworkInputAddress_args() {
          C = c,
          Address = address,
          Value = @value,
        };
        
        await tmp2119.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> mRegisterValue(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_mRegisterValue(c, index, cancellationToken);
        return await recv_mRegisterValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_mRegisterValue(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("mRegisterValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2120 = new InternalStructs.mRegisterValue_args() {
          C = c,
          Index = index,
        };
        
        await tmp2120.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_mRegisterValue(CancellationToken cancellationToken = default)
      {
        
        var tmp2121 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2121.Type == TMessageType.Exception)
        {
          var tmp2122 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2122;
        }

        var tmp2123 = new InternalStructs.mRegisterValue_result();
        await tmp2123.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2123.__isset.success)
        {
          return tmp2123.Success;
        }
        if (tmp2123.__isset.e)
        {
          throw tmp2123.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mRegisterValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setMRegisterValue(long c, int index, int @value, CancellationToken cancellationToken = default)
      {
        await send_setMRegisterValue(c, index, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setMRegisterValue(long c, int index, int @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setMRegisterValue", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp2124 = new InternalStructs.setMRegisterValue_args() {
          C = c,
          Index = index,
          Value = @value,
        };
        
        await tmp2124.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default)
      {
        await send_fieldBusStatusInputGroup(c, busType, cancellationToken);
        return await recv_fieldBusStatusInputGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2125 = new InternalStructs.fieldBusStatusInputGroup_args() {
          C = c,
          BusType = busType,
        };
        
        await tmp2125.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_fieldBusStatusInputGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp2126 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2126.Type == TMessageType.Exception)
        {
          var tmp2127 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2127;
        }

        var tmp2128 = new InternalStructs.fieldBusStatusInputGroup_result();
        await tmp2128.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2128.__isset.success)
        {
          return tmp2128.Success;
        }
        if (tmp2128.__isset.e)
        {
          throw tmp2128.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fieldBusStatusInputGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> controlGroups(long c, CancellationToken cancellationToken = default)
      {
        await send_controlGroups(c, cancellationToken);
        return await recv_controlGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_controlGroups(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2129 = new InternalStructs.controlGroups_args() {
          C = c,
        };
        
        await tmp2129.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> recv_controlGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp2130 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2130.Type == TMessageType.Exception)
        {
          var tmp2131 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2131;
        }

        var tmp2132 = new InternalStructs.controlGroups_result();
        await tmp2132.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2132.__isset.success)
        {
          return tmp2132.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "controlGroups failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<sbyte> currentControlGroup(long c, CancellationToken cancellationToken = default)
      {
        await send_currentControlGroup(c, cancellationToken);
        return await recv_currentControlGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentControlGroup(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2133 = new InternalStructs.currentControlGroup_args() {
          C = c,
        };
        
        await tmp2133.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<sbyte> recv_currentControlGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp2134 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2134.Type == TMessageType.Exception)
        {
          var tmp2135 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2135;
        }

        var tmp2136 = new InternalStructs.currentControlGroup_result();
        await tmp2136.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2136.__isset.success)
        {
          return tmp2136.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentControlGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<sbyte> robotCount(long c, CancellationToken cancellationToken = default)
      {
        await send_robotCount(c, cancellationToken);
        return await recv_robotCount(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_robotCount(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2137 = new InternalStructs.robotCount_args() {
          C = c,
        };
        
        await tmp2137.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<sbyte> recv_robotCount(CancellationToken cancellationToken = default)
      {
        
        var tmp2138 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2138.Type == TMessageType.Exception)
        {
          var tmp2139 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2139;
        }

        var tmp2140 = new InternalStructs.robotCount_result();
        await tmp2140.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2140.__isset.success)
        {
          return tmp2140.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "robotCount failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> currentRobot(long c, CancellationToken cancellationToken = default)
      {
        await send_currentRobot(c, cancellationToken);
        return await recv_currentRobot(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentRobot(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2141 = new InternalStructs.currentRobot_args() {
          C = c,
        };
        
        await tmp2141.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_currentRobot(CancellationToken cancellationToken = default)
      {
        
        var tmp2142 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2142.Type == TMessageType.Exception)
        {
          var tmp2143 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2143;
        }

        var tmp2144 = new InternalStructs.currentRobot_result();
        await tmp2144.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2144.__isset.success)
        {
          return tmp2144.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentRobot failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variable(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_variable(c, name, cancellationToken);
        return await recv_variable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variable(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2145 = new InternalStructs.variable_args() {
          C = c,
          Name = name,
        };
        
        await tmp2145.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_variable(CancellationToken cancellationToken = default)
      {
        
        var tmp2146 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2146.Type == TMessageType.Exception)
        {
          var tmp2147 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2147;
        }

        var tmp2148 = new InternalStructs.variable_result();
        await tmp2148.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2148.__isset.success)
        {
          return tmp2148.Success;
        }
        if (tmp2148.__isset.e)
        {
          throw tmp2148.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_variableByAddr(c, addr, cancellationToken);
        return await recv_variableByAddr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2149 = new InternalStructs.variableByAddr_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp2149.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_variableByAddr(CancellationToken cancellationToken = default)
      {
        
        var tmp2150 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2150.Type == TMessageType.Exception)
        {
          var tmp2151 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2151;
        }

        var tmp2152 = new InternalStructs.variableByAddr_result();
        await tmp2152.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2152.__isset.success)
        {
          return tmp2152.Success;
        }
        if (tmp2152.__isset.e)
        {
          throw tmp2152.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableByAddr failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setVariable(c, name, @value, cancellationToken);
        await recv_setVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2153 = new InternalStructs.setVariable_args() {
          C = c,
          Name = name,
          Value = @value,
        };
        
        await tmp2153.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp2154 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2154.Type == TMessageType.Exception)
        {
          var tmp2155 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2155;
        }

        var tmp2156 = new InternalStructs.setVariable_result();
        await tmp2156.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2156.__isset.e)
        {
          throw tmp2156.E;
        }
      }

      public async global::System.Threading.Tasks.Task setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setVariableByAddr(c, addr, @value, cancellationToken);
        await recv_setVariableByAddr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2157 = new InternalStructs.setVariableByAddr_args() {
          C = c,
          Addr = addr,
          Value = @value,
        };
        
        await tmp2157.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariableByAddr(CancellationToken cancellationToken = default)
      {
        
        var tmp2158 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2158.Type == TMessageType.Exception)
        {
          var tmp2159 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2159;
        }

        var tmp2160 = new InternalStructs.setVariableByAddr_result();
        await tmp2160.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2160.__isset.e)
        {
          throw tmp2160.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await send_variableAddrByNameAndSpace(c, name, space, cancellationToken);
        return await recv_variableAddrByNameAndSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2161 = new InternalStructs.variableAddrByNameAndSpace_args() {
          C = c,
          Name = name,
          Space = space,
        };
        
        await tmp2161.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> recv_variableAddrByNameAndSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp2162 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2162.Type == TMessageType.Exception)
        {
          var tmp2163 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2163;
        }

        var tmp2164 = new InternalStructs.variableAddrByNameAndSpace_result();
        await tmp2164.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2164.__isset.success)
        {
          return tmp2164.Success;
        }
        if (tmp2164.__isset.e)
        {
          throw tmp2164.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableAddrByNameAndSpace failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByName(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_variableAddrByName(c, name, cancellationToken);
        return await recv_variableAddrByName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableAddrByName(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2165 = new InternalStructs.variableAddrByName_args() {
          C = c,
          Name = name,
        };
        
        await tmp2165.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> recv_variableAddrByName(CancellationToken cancellationToken = default)
      {
        
        var tmp2166 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2166.Type == TMessageType.Exception)
        {
          var tmp2167 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2167;
        }

        var tmp2168 = new InternalStructs.variableAddrByName_result();
        await tmp2168.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2168.__isset.success)
        {
          return tmp2168.Success;
        }
        if (tmp2168.__isset.e)
        {
          throw tmp2168.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableAddrByName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default)
      {
        await send_setVariableName(c, addr, name, cancellationToken);
        await recv_setVariableName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2169 = new InternalStructs.setVariableName_args() {
          C = c,
          Addr = addr,
          Name = name,
        };
        
        await tmp2169.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariableName(CancellationToken cancellationToken = default)
      {
        
        var tmp2170 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2170.Type == TMessageType.Exception)
        {
          var tmp2171 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2171;
        }

        var tmp2172 = new InternalStructs.setVariableName_result();
        await tmp2172.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2172.__isset.e)
        {
          throw tmp2172.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_monitorVariable(c, addr, cancellationToken);
        await recv_monitorVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2173 = new InternalStructs.monitorVariable_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp2173.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp2174 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2174.Type == TMessageType.Exception)
        {
          var tmp2175 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2175;
        }

        var tmp2176 = new InternalStructs.monitorVariable_result();
        await tmp2176.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2176.__isset.e)
        {
          throw tmp2176.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_unmonitorVariable(c, addr, cancellationToken);
        await recv_unmonitorVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2177 = new InternalStructs.unmonitorVariable_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp2177.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp2178 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2178.Type == TMessageType.Exception)
        {
          var tmp2179 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2179;
        }

        var tmp2180 = new InternalStructs.unmonitorVariable_result();
        await tmp2180.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2180.__isset.e)
        {
          throw tmp2180.E;
        }
      }

      public async global::System.Threading.Tasks.Task<int> variableRange(long c, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await send_variableRange(c, space, cancellationToken);
        return await recv_variableRange(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableRange(long c, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableRange", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2181 = new InternalStructs.variableRange_args() {
          C = c,
          Space = space,
        };
        
        await tmp2181.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_variableRange(CancellationToken cancellationToken = default)
      {
        
        var tmp2182 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2182.Type == TMessageType.Exception)
        {
          var tmp2183 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2183;
        }

        var tmp2184 = new InternalStructs.variableRange_result();
        await tmp2184.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2184.__isset.success)
        {
          return tmp2184.Success;
        }
        if (tmp2184.__isset.e)
        {
          throw tmp2184.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableRange failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> transformPositionToFrame(long c, global::Yaskawa.Ext.API.Position pos, global::Yaskawa.Ext.API.CoordinateFrame newFrame, int kinematicTool, global::Yaskawa.Ext.API.InverseKinematicsScheme ikScheme, global::Yaskawa.Ext.API.Position refPosition, CancellationToken cancellationToken = default)
      {
        await send_transformPositionToFrame(c, pos, newFrame, kinematicTool, ikScheme, refPosition, cancellationToken);
        return await recv_transformPositionToFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_transformPositionToFrame(long c, global::Yaskawa.Ext.API.Position pos, global::Yaskawa.Ext.API.CoordinateFrame newFrame, int kinematicTool, global::Yaskawa.Ext.API.InverseKinematicsScheme ikScheme, global::Yaskawa.Ext.API.Position refPosition, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("transformPositionToFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2185 = new InternalStructs.transformPositionToFrame_args() {
          C = c,
          Pos = pos,
          NewFrame = newFrame,
          KinematicTool = kinematicTool,
          IkScheme = ikScheme,
          RefPosition = refPosition,
        };
        
        await tmp2185.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_transformPositionToFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp2186 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2186.Type == TMessageType.Exception)
        {
          var tmp2187 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2187;
        }

        var tmp2188 = new InternalStructs.transformPositionToFrame_result();
        await tmp2188.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2188.__isset.success)
        {
          return tmp2188.Success;
        }
        if (tmp2188.__isset.e)
        {
          throw tmp2188.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "transformPositionToFrame failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> convertPositionUnits(long c, global::Yaskawa.Ext.API.Position pos, global::Yaskawa.Ext.API.DistanceUnit newDistUnit, global::Yaskawa.Ext.API.OrientationUnit newOrientUnit, CancellationToken cancellationToken = default)
      {
        await send_convertPositionUnits(c, pos, newDistUnit, newOrientUnit, cancellationToken);
        return await recv_convertPositionUnits(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_convertPositionUnits(long c, global::Yaskawa.Ext.API.Position pos, global::Yaskawa.Ext.API.DistanceUnit newDistUnit, global::Yaskawa.Ext.API.OrientationUnit newOrientUnit, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("convertPositionUnits", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2189 = new InternalStructs.convertPositionUnits_args() {
          C = c,
          Pos = pos,
          NewDistUnit = newDistUnit,
          NewOrientUnit = newOrientUnit,
        };
        
        await tmp2189.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_convertPositionUnits(CancellationToken cancellationToken = default)
      {
        
        var tmp2190 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2190.Type == TMessageType.Exception)
        {
          var tmp2191 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2191;
        }

        var tmp2192 = new InternalStructs.convertPositionUnits_result();
        await tmp2192.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2192.__isset.success)
        {
          return tmp2192.Success;
        }
        if (tmp2192.__isset.e)
        {
          throw tmp2192.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "convertPositionUnits failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> zone(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_zone(c, index, cancellationToken);
        return await recv_zone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_zone(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2193 = new InternalStructs.zone_args() {
          C = c,
          Index = index,
        };
        
        await tmp2193.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> recv_zone(CancellationToken cancellationToken = default)
      {
        
        var tmp2194 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2194.Type == TMessageType.Exception)
        {
          var tmp2195 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2195;
        }

        var tmp2196 = new InternalStructs.zone_result();
        await tmp2196.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2196.__isset.success)
        {
          return tmp2196.Success;
        }
        if (tmp2196.__isset.e)
        {
          throw tmp2196.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "zone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> newZone(long c, CancellationToken cancellationToken = default)
      {
        await send_newZone(c, cancellationToken);
        return await recv_newZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_newZone(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2197 = new InternalStructs.newZone_args() {
          C = c,
        };
        
        await tmp2197.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_newZone(CancellationToken cancellationToken = default)
      {
        
        var tmp2198 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2198.Type == TMessageType.Exception)
        {
          var tmp2199 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2199;
        }

        var tmp2200 = new InternalStructs.newZone_result();
        await tmp2200.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2200.__isset.success)
        {
          return tmp2200.Success;
        }
        if (tmp2200.__isset.e)
        {
          throw tmp2200.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "newZone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default)
      {
        await send_modifyZone(c, index, z, cancellationToken);
        await recv_modifyZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2201 = new InternalStructs.modifyZone_args() {
          C = c,
          Index = index,
          Z = z,
        };
        
        await tmp2201.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_modifyZone(CancellationToken cancellationToken = default)
      {
        
        var tmp2202 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2202.Type == TMessageType.Exception)
        {
          var tmp2203 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2203;
        }

        var tmp2204 = new InternalStructs.modifyZone_result();
        await tmp2204.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2204.__isset.e)
        {
          throw tmp2204.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteZone(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_deleteZone(c, index, cancellationToken);
        await recv_deleteZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteZone(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2205 = new InternalStructs.deleteZone_args() {
          C = c,
          Index = index,
        };
        
        await tmp2205.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteZone(CancellationToken cancellationToken = default)
      {
        
        var tmp2206 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2206.Type == TMessageType.Exception)
        {
          var tmp2207 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2207;
        }

        var tmp2208 = new InternalStructs.deleteZone_result();
        await tmp2208.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2208.__isset.e)
        {
          throw tmp2208.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> userFrames(long c, CancellationToken cancellationToken = default)
      {
        await send_userFrames(c, cancellationToken);
        return await recv_userFrames(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_userFrames(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2209 = new InternalStructs.userFrames_args() {
          C = c,
        };
        
        await tmp2209.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> recv_userFrames(CancellationToken cancellationToken = default)
      {
        
        var tmp2210 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2210.Type == TMessageType.Exception)
        {
          var tmp2211 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2211;
        }

        var tmp2212 = new InternalStructs.userFrames_result();
        await tmp2212.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2212.__isset.success)
        {
          return tmp2212.Success;
        }
        if (tmp2212.__isset.e)
        {
          throw tmp2212.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "userFrames failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> userFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_userFrame(c, index, cancellationToken);
        return await recv_userFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_userFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2213 = new InternalStructs.userFrame_args() {
          C = c,
          Index = index,
        };
        
        await tmp2213.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> recv_userFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp2214 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2214.Type == TMessageType.Exception)
        {
          var tmp2215 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2215;
        }

        var tmp2216 = new InternalStructs.userFrame_result();
        await tmp2216.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2216.__isset.success)
        {
          return tmp2216.Success;
        }
        if (tmp2216.__isset.e)
        {
          throw tmp2216.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "userFrame failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> newUserFrame(long c, CancellationToken cancellationToken = default)
      {
        await send_newUserFrame(c, cancellationToken);
        return await recv_newUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_newUserFrame(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2217 = new InternalStructs.newUserFrame_args() {
          C = c,
        };
        
        await tmp2217.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_newUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp2218 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2218.Type == TMessageType.Exception)
        {
          var tmp2219 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2219;
        }

        var tmp2220 = new InternalStructs.newUserFrame_result();
        await tmp2220.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2220.__isset.success)
        {
          return tmp2220.Success;
        }
        if (tmp2220.__isset.e)
        {
          throw tmp2220.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "newUserFrame failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default)
      {
        await send_setUserFrame(c, index, f, cancellationToken);
        await recv_setUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2221 = new InternalStructs.setUserFrame_args() {
          C = c,
          Index = index,
          F = f,
        };
        
        await tmp2221.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp2222 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2222.Type == TMessageType.Exception)
        {
          var tmp2223 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2223;
        }

        var tmp2224 = new InternalStructs.setUserFrame_result();
        await tmp2224.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2224.__isset.e)
        {
          throw tmp2224.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteUserFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_deleteUserFrame(c, index, cancellationToken);
        await recv_deleteUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteUserFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2225 = new InternalStructs.deleteUserFrame_args() {
          C = c,
          Index = index,
        };
        
        await tmp2225.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp2226 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2226.Type == TMessageType.Exception)
        {
          var tmp2227 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2227;
        }

        var tmp2228 = new InternalStructs.deleteUserFrame_result();
        await tmp2228.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2228.__isset.e)
        {
          throw tmp2228.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default)
      {
        await send_networkInterfaceAddress(c, controllerInterface, cancellationToken);
        return await recv_networkInterfaceAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2229 = new InternalStructs.networkInterfaceAddress_args() {
          C = c,
          ControllerInterface = controllerInterface,
        };
        
        await tmp2229.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_networkInterfaceAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp2230 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2230.Type == TMessageType.Exception)
        {
          var tmp2231 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2231;
        }

        var tmp2232 = new InternalStructs.networkInterfaceAddress_result();
        await tmp2232.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2232.__isset.success)
        {
          return tmp2232.Success;
        }
        if (tmp2232.__isset.e)
        {
          throw tmp2232.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "networkInterfaceAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await send_requestNetworkAccess(c, controllerInterface, port, protocol, cancellationToken);
        return await recv_requestNetworkAccess(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2233 = new InternalStructs.requestNetworkAccess_args() {
          C = c,
          ControllerInterface = controllerInterface,
          Port = port,
          Protocol = protocol,
        };
        
        await tmp2233.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_requestNetworkAccess(CancellationToken cancellationToken = default)
      {
        
        var tmp2234 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2234.Type == TMessageType.Exception)
        {
          var tmp2235 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2235;
        }

        var tmp2236 = new InternalStructs.requestNetworkAccess_result();
        await tmp2236.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2236.__isset.success)
        {
          return tmp2236.Success;
        }
        if (tmp2236.__isset.e)
        {
          throw tmp2236.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestNetworkAccess failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await send_removeNetworkAccess(c, accessHandle, cancellationToken);
        await recv_removeNetworkAccess(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2237 = new InternalStructs.removeNetworkAccess_args() {
          C = c,
          AccessHandle = accessHandle,
        };
        
        await tmp2237.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeNetworkAccess(CancellationToken cancellationToken = default)
      {
        
        var tmp2238 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2238.Type == TMessageType.Exception)
        {
          var tmp2239 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2239;
        }

        var tmp2240 = new InternalStructs.removeNetworkAccess_result();
        await tmp2240.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2240.__isset.e)
        {
          throw tmp2240.E;
        }
      }

      public async global::System.Threading.Tasks.Task<int> requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await send_requestNetworkService(c, controllerInterface, port, protocol, cancellationToken);
        return await recv_requestNetworkService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2241 = new InternalStructs.requestNetworkService_args() {
          C = c,
          ControllerInterface = controllerInterface,
          Port = port,
          Protocol = protocol,
        };
        
        await tmp2241.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_requestNetworkService(CancellationToken cancellationToken = default)
      {
        
        var tmp2242 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2242.Type == TMessageType.Exception)
        {
          var tmp2243 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2243;
        }

        var tmp2244 = new InternalStructs.requestNetworkService_result();
        await tmp2244.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2244.__isset.success)
        {
          return tmp2244.Success;
        }
        if (tmp2244.__isset.e)
        {
          throw tmp2244.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestNetworkService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await send_removeNetworkService(c, accessHandle, cancellationToken);
        await recv_removeNetworkService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2245 = new InternalStructs.removeNetworkService_args() {
          C = c,
          AccessHandle = accessHandle,
        };
        
        await tmp2245.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeNetworkService(CancellationToken cancellationToken = default)
      {
        
        var tmp2246 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2246.Type == TMessageType.Exception)
        {
          var tmp2247 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2247;
        }

        var tmp2248 = new InternalStructs.removeNetworkService_result();
        await tmp2248.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2248.__isset.e)
        {
          throw tmp2248.E;
        }
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["requestPermissions"] = requestPermissions_ProcessAsync;
        processMap_["havePermission"] = havePermission_ProcessAsync;
        processMap_["relinquishPermissions"] = relinquishPermissions_ProcessAsync;
        processMap_["connect"] = connect_ProcessAsync;
        processMap_["disconnect"] = disconnect_ProcessAsync;
        processMap_["subscribeEventTypes"] = subscribeEventTypes_ProcessAsync;
        processMap_["unsubscribeEventTypes"] = unsubscribeEventTypes_ProcessAsync;
        processMap_["events"] = events_ProcessAsync;
        processMap_["connected"] = connected_ProcessAsync;
        processMap_["connectedHostName"] = connectedHostName_ProcessAsync;
        processMap_["softwareVersion"] = softwareVersion_ProcessAsync;
        processMap_["monitoring"] = monitoring_ProcessAsync;
        processMap_["haveExclusiveControl"] = haveExclusiveControl_ProcessAsync;
        processMap_["operationMode"] = operationMode_ProcessAsync;
        processMap_["servoState"] = servoState_ProcessAsync;
        processMap_["playbackState"] = playbackState_ProcessAsync;
        processMap_["playbackCycle"] = playbackCycle_ProcessAsync;
        processMap_["setPlaybackCycle"] = setPlaybackCycle_ProcessAsync;
        processMap_["run"] = run_ProcessAsync;
        processMap_["pause"] = pause_ProcessAsync;
        processMap_["resume"] = resume_ProcessAsync;
        processMap_["stop"] = stop_ProcessAsync;
        processMap_["currentJob"] = currentJob_ProcessAsync;
        processMap_["setCurrentJob"] = setCurrentJob_ProcessAsync;
        processMap_["currentJobLine"] = currentJobLine_ProcessAsync;
        processMap_["defaultJob"] = defaultJob_ProcessAsync;
        processMap_["jobExists"] = jobExists_ProcessAsync;
        processMap_["jobDetails"] = jobDetails_ProcessAsync;
        processMap_["jobs"] = jobs_ProcessAsync;
        processMap_["jobsMatching"] = jobsMatching_ProcessAsync;
        processMap_["duplicateJob"] = duplicateJob_ProcessAsync;
        processMap_["deleteJob"] = deleteJob_ProcessAsync;
        processMap_["jobSource"] = jobSource_ProcessAsync;
        processMap_["storeJobSource"] = storeJobSource_ProcessAsync;
        processMap_["storeSystemFileContents"] = storeSystemFileContents_ProcessAsync;
        processMap_["storeSystemFile"] = storeSystemFile_ProcessAsync;
        processMap_["retrieveSystemFileContents"] = retrieveSystemFileContents_ProcessAsync;
        processMap_["retrieveSystemFile"] = retrieveSystemFile_ProcessAsync;
        processMap_["tools"] = tools_ProcessAsync;
        processMap_["tool"] = tool_ProcessAsync;
        processMap_["inputNumber"] = inputNumber_ProcessAsync;
        processMap_["inputGroupNumber"] = inputGroupNumber_ProcessAsync;
        processMap_["outputNumber"] = outputNumber_ProcessAsync;
        processMap_["outputGroupNumber"] = outputGroupNumber_ProcessAsync;
        processMap_["inputName"] = inputName_ProcessAsync;
        processMap_["outputName"] = outputName_ProcessAsync;
        processMap_["setInputName"] = setInputName_ProcessAsync;
        processMap_["setOutputName"] = setOutputName_ProcessAsync;
        processMap_["monitorInput"] = monitorInput_ProcessAsync;
        processMap_["monitorInputGroups"] = monitorInputGroups_ProcessAsync;
        processMap_["monitorOutput"] = monitorOutput_ProcessAsync;
        processMap_["monitorOutputGroups"] = monitorOutputGroups_ProcessAsync;
        processMap_["unmonitorInput"] = unmonitorInput_ProcessAsync;
        processMap_["unmonitorInputGroups"] = unmonitorInputGroups_ProcessAsync;
        processMap_["unmonitorOutput"] = unmonitorOutput_ProcessAsync;
        processMap_["unmonitorOutputGroups"] = unmonitorOutputGroups_ProcessAsync;
        processMap_["inputValue"] = inputValue_ProcessAsync;
        processMap_["inputGroupsValue"] = inputGroupsValue_ProcessAsync;
        processMap_["outputValue"] = outputValue_ProcessAsync;
        processMap_["outputGroupsValue"] = outputGroupsValue_ProcessAsync;
        processMap_["setOutput"] = setOutput_ProcessAsync;
        processMap_["setOutputGroups"] = setOutputGroups_ProcessAsync;
        processMap_["inputAddress"] = inputAddress_ProcessAsync;
        processMap_["inputAddressByNumber"] = inputAddressByNumber_ProcessAsync;
        processMap_["outputAddress"] = outputAddress_ProcessAsync;
        processMap_["outputAddressByNumber"] = outputAddressByNumber_ProcessAsync;
        processMap_["monitorIOAddress"] = monitorIOAddress_ProcessAsync;
        processMap_["unmonitorIOAddress"] = unmonitorIOAddress_ProcessAsync;
        processMap_["inputAddressValue"] = inputAddressValue_ProcessAsync;
        processMap_["outputAddressValue"] = outputAddressValue_ProcessAsync;
        processMap_["ioAddressValue"] = ioAddressValue_ProcessAsync;
        processMap_["setOutputAddress"] = setOutputAddress_ProcessAsync;
        processMap_["setNetworkInputAddress"] = setNetworkInputAddress_ProcessAsync;
        processMap_["mRegisterValue"] = mRegisterValue_ProcessAsync;
        processMap_["setMRegisterValue"] = setMRegisterValue_ProcessAsync;
        processMap_["fieldBusStatusInputGroup"] = fieldBusStatusInputGroup_ProcessAsync;
        processMap_["controlGroups"] = controlGroups_ProcessAsync;
        processMap_["currentControlGroup"] = currentControlGroup_ProcessAsync;
        processMap_["robotCount"] = robotCount_ProcessAsync;
        processMap_["currentRobot"] = currentRobot_ProcessAsync;
        processMap_["variable"] = variable_ProcessAsync;
        processMap_["variableByAddr"] = variableByAddr_ProcessAsync;
        processMap_["setVariable"] = setVariable_ProcessAsync;
        processMap_["setVariableByAddr"] = setVariableByAddr_ProcessAsync;
        processMap_["variableAddrByNameAndSpace"] = variableAddrByNameAndSpace_ProcessAsync;
        processMap_["variableAddrByName"] = variableAddrByName_ProcessAsync;
        processMap_["setVariableName"] = setVariableName_ProcessAsync;
        processMap_["monitorVariable"] = monitorVariable_ProcessAsync;
        processMap_["unmonitorVariable"] = unmonitorVariable_ProcessAsync;
        processMap_["variableRange"] = variableRange_ProcessAsync;
        processMap_["transformPositionToFrame"] = transformPositionToFrame_ProcessAsync;
        processMap_["convertPositionUnits"] = convertPositionUnits_ProcessAsync;
        processMap_["zone"] = zone_ProcessAsync;
        processMap_["newZone"] = newZone_ProcessAsync;
        processMap_["modifyZone"] = modifyZone_ProcessAsync;
        processMap_["deleteZone"] = deleteZone_ProcessAsync;
        processMap_["userFrames"] = userFrames_ProcessAsync;
        processMap_["userFrame"] = userFrame_ProcessAsync;
        processMap_["newUserFrame"] = newUserFrame_ProcessAsync;
        processMap_["setUserFrame"] = setUserFrame_ProcessAsync;
        processMap_["deleteUserFrame"] = deleteUserFrame_ProcessAsync;
        processMap_["networkInterfaceAddress"] = networkInterfaceAddress_ProcessAsync;
        processMap_["requestNetworkAccess"] = requestNetworkAccess_ProcessAsync;
        processMap_["removeNetworkAccess"] = removeNetworkAccess_ProcessAsync;
        processMap_["requestNetworkService"] = requestNetworkService_ProcessAsync;
        processMap_["removeNetworkService"] = removeNetworkService_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task requestPermissions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2249 = new InternalStructs.requestPermissions_args();
        await tmp2249.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2250 = new InternalStructs.requestPermissions_result();
        try
        {
          try
          {
            tmp2250.Success = await _iAsync.requestPermissions(tmp2249.C, tmp2249.Permissions, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2251)
          {
            tmp2250.E = tmp2251;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2250.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2252)
        {
          var tmp2253 = $"Error occurred in {GetType().FullName}: {tmp2252.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2252, tmp2253);
          else
            Console.Error.WriteLine(tmp2253);
          var tmp2254 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Exception, seqid), cancellationToken);
          await tmp2254.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task havePermission_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2255 = new InternalStructs.havePermission_args();
        await tmp2255.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2256 = new InternalStructs.havePermission_result();
        try
        {
          try
          {
            tmp2256.Success = await _iAsync.havePermission(tmp2255.C, tmp2255.Permission, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2257)
          {
            tmp2256.E = tmp2257;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2256.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2258)
        {
          var tmp2259 = $"Error occurred in {GetType().FullName}: {tmp2258.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2258, tmp2259);
          else
            Console.Error.WriteLine(tmp2259);
          var tmp2260 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Exception, seqid), cancellationToken);
          await tmp2260.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task relinquishPermissions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2261 = new InternalStructs.relinquishPermissions_args();
        await tmp2261.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2262 = new InternalStructs.relinquishPermissions_result();
        try
        {
          await _iAsync.relinquishPermissions(tmp2261.C, tmp2261.Permissions, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2262.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2263)
        {
          var tmp2264 = $"Error occurred in {GetType().FullName}: {tmp2263.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2263, tmp2264);
          else
            Console.Error.WriteLine(tmp2264);
          var tmp2265 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Exception, seqid), cancellationToken);
          await tmp2265.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connect_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2266 = new InternalStructs.connect_args();
        await tmp2266.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2267 = new InternalStructs.connect_result();
        try
        {
          await _iAsync.connect(tmp2266.C, tmp2266.HostName, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2267.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2268)
        {
          var tmp2269 = $"Error occurred in {GetType().FullName}: {tmp2268.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2268, tmp2269);
          else
            Console.Error.WriteLine(tmp2269);
          var tmp2270 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Exception, seqid), cancellationToken);
          await tmp2270.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task disconnect_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2271 = new InternalStructs.disconnect_args();
        await tmp2271.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2272 = new InternalStructs.disconnect_result();
        try
        {
          await _iAsync.disconnect(tmp2271.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2272.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2273)
        {
          var tmp2274 = $"Error occurred in {GetType().FullName}: {tmp2273.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2273, tmp2274);
          else
            Console.Error.WriteLine(tmp2274);
          var tmp2275 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Exception, seqid), cancellationToken);
          await tmp2275.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2276 = new InternalStructs.subscribeEventTypes_args();
        await tmp2276.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2277 = new InternalStructs.subscribeEventTypes_result();
        try
        {
          await _iAsync.subscribeEventTypes(tmp2276.C, tmp2276.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2277.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2278)
        {
          var tmp2279 = $"Error occurred in {GetType().FullName}: {tmp2278.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2278, tmp2279);
          else
            Console.Error.WriteLine(tmp2279);
          var tmp2280 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp2280.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2281 = new InternalStructs.unsubscribeEventTypes_args();
        await tmp2281.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2282 = new InternalStructs.unsubscribeEventTypes_result();
        try
        {
          await _iAsync.unsubscribeEventTypes(tmp2281.C, tmp2281.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2282.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2283)
        {
          var tmp2284 = $"Error occurred in {GetType().FullName}: {tmp2283.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2283, tmp2284);
          else
            Console.Error.WriteLine(tmp2284);
          var tmp2285 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp2285.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task events_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2286 = new InternalStructs.events_args();
        await tmp2286.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2287 = new InternalStructs.events_result();
        try
        {
          tmp2287.Success = await _iAsync.events(tmp2286.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2287.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2288)
        {
          var tmp2289 = $"Error occurred in {GetType().FullName}: {tmp2288.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2288, tmp2289);
          else
            Console.Error.WriteLine(tmp2289);
          var tmp2290 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Exception, seqid), cancellationToken);
          await tmp2290.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connected_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2291 = new InternalStructs.connected_args();
        await tmp2291.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2292 = new InternalStructs.connected_result();
        try
        {
          tmp2292.Success = await _iAsync.connected(tmp2291.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2292.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2293)
        {
          var tmp2294 = $"Error occurred in {GetType().FullName}: {tmp2293.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2293, tmp2294);
          else
            Console.Error.WriteLine(tmp2294);
          var tmp2295 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Exception, seqid), cancellationToken);
          await tmp2295.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connectedHostName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2296 = new InternalStructs.connectedHostName_args();
        await tmp2296.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2297 = new InternalStructs.connectedHostName_result();
        try
        {
          tmp2297.Success = await _iAsync.connectedHostName(tmp2296.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2297.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2298)
        {
          var tmp2299 = $"Error occurred in {GetType().FullName}: {tmp2298.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2298, tmp2299);
          else
            Console.Error.WriteLine(tmp2299);
          var tmp2300 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2300.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task softwareVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2301 = new InternalStructs.softwareVersion_args();
        await tmp2301.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2302 = new InternalStructs.softwareVersion_result();
        try
        {
          tmp2302.Success = await _iAsync.softwareVersion(tmp2301.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2302.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2303)
        {
          var tmp2304 = $"Error occurred in {GetType().FullName}: {tmp2303.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2303, tmp2304);
          else
            Console.Error.WriteLine(tmp2304);
          var tmp2305 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp2305.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitoring_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2306 = new InternalStructs.monitoring_args();
        await tmp2306.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2307 = new InternalStructs.monitoring_result();
        try
        {
          tmp2307.Success = await _iAsync.monitoring(tmp2306.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2307.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2308)
        {
          var tmp2309 = $"Error occurred in {GetType().FullName}: {tmp2308.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2308, tmp2309);
          else
            Console.Error.WriteLine(tmp2309);
          var tmp2310 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Exception, seqid), cancellationToken);
          await tmp2310.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task haveExclusiveControl_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2311 = new InternalStructs.haveExclusiveControl_args();
        await tmp2311.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2312 = new InternalStructs.haveExclusiveControl_result();
        try
        {
          tmp2312.Success = await _iAsync.haveExclusiveControl(tmp2311.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2312.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2313)
        {
          var tmp2314 = $"Error occurred in {GetType().FullName}: {tmp2313.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2313, tmp2314);
          else
            Console.Error.WriteLine(tmp2314);
          var tmp2315 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Exception, seqid), cancellationToken);
          await tmp2315.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task operationMode_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2316 = new InternalStructs.operationMode_args();
        await tmp2316.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2317 = new InternalStructs.operationMode_result();
        try
        {
          tmp2317.Success = await _iAsync.operationMode(tmp2316.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2317.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2318)
        {
          var tmp2319 = $"Error occurred in {GetType().FullName}: {tmp2318.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2318, tmp2319);
          else
            Console.Error.WriteLine(tmp2319);
          var tmp2320 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Exception, seqid), cancellationToken);
          await tmp2320.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task servoState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2321 = new InternalStructs.servoState_args();
        await tmp2321.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2322 = new InternalStructs.servoState_result();
        try
        {
          tmp2322.Success = await _iAsync.servoState(tmp2321.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2322.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2323)
        {
          var tmp2324 = $"Error occurred in {GetType().FullName}: {tmp2323.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2323, tmp2324);
          else
            Console.Error.WriteLine(tmp2324);
          var tmp2325 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Exception, seqid), cancellationToken);
          await tmp2325.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task playbackState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2326 = new InternalStructs.playbackState_args();
        await tmp2326.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2327 = new InternalStructs.playbackState_result();
        try
        {
          tmp2327.Success = await _iAsync.playbackState(tmp2326.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2327.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2328)
        {
          var tmp2329 = $"Error occurred in {GetType().FullName}: {tmp2328.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2328, tmp2329);
          else
            Console.Error.WriteLine(tmp2329);
          var tmp2330 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Exception, seqid), cancellationToken);
          await tmp2330.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task playbackCycle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2331 = new InternalStructs.playbackCycle_args();
        await tmp2331.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2332 = new InternalStructs.playbackCycle_result();
        try
        {
          tmp2332.Success = await _iAsync.playbackCycle(tmp2331.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("playbackCycle", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2332.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2333)
        {
          var tmp2334 = $"Error occurred in {GetType().FullName}: {tmp2333.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2333, tmp2334);
          else
            Console.Error.WriteLine(tmp2334);
          var tmp2335 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("playbackCycle", TMessageType.Exception, seqid), cancellationToken);
          await tmp2335.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setPlaybackCycle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2336 = new InternalStructs.setPlaybackCycle_args();
        await tmp2336.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2337 = new InternalStructs.setPlaybackCycle_result();
        try
        {
          await _iAsync.setPlaybackCycle(tmp2336.C, tmp2336.Cycle, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setPlaybackCycle", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2337.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2338)
        {
          var tmp2339 = $"Error occurred in {GetType().FullName}: {tmp2338.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2338, tmp2339);
          else
            Console.Error.WriteLine(tmp2339);
          var tmp2340 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setPlaybackCycle", TMessageType.Exception, seqid), cancellationToken);
          await tmp2340.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task run_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2341 = new InternalStructs.run_args();
        await tmp2341.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2342 = new InternalStructs.run_result();
        try
        {
          await _iAsync.run(tmp2341.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("run", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2342.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2343)
        {
          var tmp2344 = $"Error occurred in {GetType().FullName}: {tmp2343.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2343, tmp2344);
          else
            Console.Error.WriteLine(tmp2344);
          var tmp2345 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("run", TMessageType.Exception, seqid), cancellationToken);
          await tmp2345.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pause_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2346 = new InternalStructs.pause_args();
        await tmp2346.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2347 = new InternalStructs.pause_result();
        try
        {
          await _iAsync.pause(tmp2346.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2347.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2348)
        {
          var tmp2349 = $"Error occurred in {GetType().FullName}: {tmp2348.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2348, tmp2349);
          else
            Console.Error.WriteLine(tmp2349);
          var tmp2350 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Exception, seqid), cancellationToken);
          await tmp2350.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resume_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2351 = new InternalStructs.resume_args();
        await tmp2351.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2352 = new InternalStructs.resume_result();
        try
        {
          await _iAsync.resume(tmp2351.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2352.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2353)
        {
          var tmp2354 = $"Error occurred in {GetType().FullName}: {tmp2353.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2353, tmp2354);
          else
            Console.Error.WriteLine(tmp2354);
          var tmp2355 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Exception, seqid), cancellationToken);
          await tmp2355.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stop_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2356 = new InternalStructs.stop_args();
        await tmp2356.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2357 = new InternalStructs.stop_result();
        try
        {
          await _iAsync.stop(tmp2356.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2357.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2358)
        {
          var tmp2359 = $"Error occurred in {GetType().FullName}: {tmp2358.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2358, tmp2359);
          else
            Console.Error.WriteLine(tmp2359);
          var tmp2360 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Exception, seqid), cancellationToken);
          await tmp2360.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2361 = new InternalStructs.currentJob_args();
        await tmp2361.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2362 = new InternalStructs.currentJob_result();
        try
        {
          tmp2362.Success = await _iAsync.currentJob(tmp2361.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2362.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2363)
        {
          var tmp2364 = $"Error occurred in {GetType().FullName}: {tmp2363.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2363, tmp2364);
          else
            Console.Error.WriteLine(tmp2364);
          var tmp2365 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2365.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setCurrentJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2366 = new InternalStructs.setCurrentJob_args();
        await tmp2366.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2367 = new InternalStructs.setCurrentJob_result();
        try
        {
          try
          {
            await _iAsync.setCurrentJob(tmp2366.C, tmp2366.Name, tmp2366.Line, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2368)
          {
            tmp2367.E = tmp2368;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2367.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2369)
        {
          var tmp2370 = $"Error occurred in {GetType().FullName}: {tmp2369.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2369, tmp2370);
          else
            Console.Error.WriteLine(tmp2370);
          var tmp2371 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2371.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentJobLine_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2372 = new InternalStructs.currentJobLine_args();
        await tmp2372.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2373 = new InternalStructs.currentJobLine_result();
        try
        {
          tmp2373.Success = await _iAsync.currentJobLine(tmp2372.C, tmp2372.TaskNo, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentJobLine", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2373.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2374)
        {
          var tmp2375 = $"Error occurred in {GetType().FullName}: {tmp2374.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2374, tmp2375);
          else
            Console.Error.WriteLine(tmp2375);
          var tmp2376 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentJobLine", TMessageType.Exception, seqid), cancellationToken);
          await tmp2376.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task defaultJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2377 = new InternalStructs.defaultJob_args();
        await tmp2377.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2378 = new InternalStructs.defaultJob_result();
        try
        {
          tmp2378.Success = await _iAsync.defaultJob(tmp2377.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2378.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2379)
        {
          var tmp2380 = $"Error occurred in {GetType().FullName}: {tmp2379.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2379, tmp2380);
          else
            Console.Error.WriteLine(tmp2380);
          var tmp2381 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2381.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobExists_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2382 = new InternalStructs.jobExists_args();
        await tmp2382.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2383 = new InternalStructs.jobExists_result();
        try
        {
          tmp2383.Success = await _iAsync.jobExists(tmp2382.C, tmp2382.Name, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2383.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2384)
        {
          var tmp2385 = $"Error occurred in {GetType().FullName}: {tmp2384.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2384, tmp2385);
          else
            Console.Error.WriteLine(tmp2385);
          var tmp2386 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Exception, seqid), cancellationToken);
          await tmp2386.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobDetails_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2387 = new InternalStructs.jobDetails_args();
        await tmp2387.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2388 = new InternalStructs.jobDetails_result();
        try
        {
          try
          {
            tmp2388.Success = await _iAsync.jobDetails(tmp2387.C, tmp2387.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2389)
          {
            tmp2388.E = tmp2389;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2388.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2390)
        {
          var tmp2391 = $"Error occurred in {GetType().FullName}: {tmp2390.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2390, tmp2391);
          else
            Console.Error.WriteLine(tmp2391);
          var tmp2392 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Exception, seqid), cancellationToken);
          await tmp2392.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2393 = new InternalStructs.jobs_args();
        await tmp2393.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2394 = new InternalStructs.jobs_result();
        try
        {
          tmp2394.Success = await _iAsync.jobs(tmp2393.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2394.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2395)
        {
          var tmp2396 = $"Error occurred in {GetType().FullName}: {tmp2395.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2395, tmp2396);
          else
            Console.Error.WriteLine(tmp2396);
          var tmp2397 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Exception, seqid), cancellationToken);
          await tmp2397.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobsMatching_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2398 = new InternalStructs.jobsMatching_args();
        await tmp2398.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2399 = new InternalStructs.jobsMatching_result();
        try
        {
          try
          {
            tmp2399.Success = await _iAsync.jobsMatching(tmp2398.C, tmp2398.NameRegex, tmp2398.Tag, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2400)
          {
            tmp2399.E = tmp2400;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2399.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2401)
        {
          var tmp2402 = $"Error occurred in {GetType().FullName}: {tmp2401.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2401, tmp2402);
          else
            Console.Error.WriteLine(tmp2402);
          var tmp2403 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Exception, seqid), cancellationToken);
          await tmp2403.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task duplicateJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2404 = new InternalStructs.duplicateJob_args();
        await tmp2404.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2405 = new InternalStructs.duplicateJob_result();
        try
        {
          try
          {
            await _iAsync.duplicateJob(tmp2404.C, tmp2404.ExistingName, tmp2404.NewName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2406)
          {
            tmp2405.E = tmp2406;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2405.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2407)
        {
          var tmp2408 = $"Error occurred in {GetType().FullName}: {tmp2407.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2407, tmp2408);
          else
            Console.Error.WriteLine(tmp2408);
          var tmp2409 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2409.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2410 = new InternalStructs.deleteJob_args();
        await tmp2410.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2411 = new InternalStructs.deleteJob_result();
        try
        {
          try
          {
            await _iAsync.deleteJob(tmp2410.C, tmp2410.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2412)
          {
            tmp2411.E = tmp2412;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2411.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2413)
        {
          var tmp2414 = $"Error occurred in {GetType().FullName}: {tmp2413.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2413, tmp2414);
          else
            Console.Error.WriteLine(tmp2414);
          var tmp2415 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2415.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobSource_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2416 = new InternalStructs.jobSource_args();
        await tmp2416.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2417 = new InternalStructs.jobSource_result();
        try
        {
          try
          {
            tmp2417.Success = await _iAsync.jobSource(tmp2416.C, tmp2416.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2418)
          {
            tmp2417.E = tmp2418;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2417.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2419)
        {
          var tmp2420 = $"Error occurred in {GetType().FullName}: {tmp2419.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2419, tmp2420);
          else
            Console.Error.WriteLine(tmp2420);
          var tmp2421 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Exception, seqid), cancellationToken);
          await tmp2421.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task storeJobSource_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2422 = new InternalStructs.storeJobSource_args();
        await tmp2422.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2423 = new InternalStructs.storeJobSource_result();
        try
        {
          try
          {
            await _iAsync.storeJobSource(tmp2422.C, tmp2422.Name, tmp2422.ProgrammingLanguage, tmp2422.SourceCode, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2424)
          {
            tmp2423.E = tmp2424;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2423.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2425)
        {
          var tmp2426 = $"Error occurred in {GetType().FullName}: {tmp2425.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2425, tmp2426);
          else
            Console.Error.WriteLine(tmp2426);
          var tmp2427 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Exception, seqid), cancellationToken);
          await tmp2427.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task storeSystemFileContents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2428 = new InternalStructs.storeSystemFileContents_args();
        await tmp2428.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2429 = new InternalStructs.storeSystemFileContents_result();
        try
        {
          try
          {
            tmp2429.Success = await _iAsync.storeSystemFileContents(tmp2428.C, tmp2428.FileName, tmp2428.FileContents, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2430)
          {
            tmp2429.E = tmp2430;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("storeSystemFileContents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2429.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2431)
        {
          var tmp2432 = $"Error occurred in {GetType().FullName}: {tmp2431.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2431, tmp2432);
          else
            Console.Error.WriteLine(tmp2432);
          var tmp2433 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("storeSystemFileContents", TMessageType.Exception, seqid), cancellationToken);
          await tmp2433.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task storeSystemFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2434 = new InternalStructs.storeSystemFile_args();
        await tmp2434.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2435 = new InternalStructs.storeSystemFile_result();
        try
        {
          try
          {
            tmp2435.Success = await _iAsync.storeSystemFile(tmp2434.C, tmp2434.FileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2436)
          {
            tmp2435.E = tmp2436;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("storeSystemFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2435.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2437)
        {
          var tmp2438 = $"Error occurred in {GetType().FullName}: {tmp2437.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2437, tmp2438);
          else
            Console.Error.WriteLine(tmp2438);
          var tmp2439 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("storeSystemFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp2439.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task retrieveSystemFileContents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2440 = new InternalStructs.retrieveSystemFileContents_args();
        await tmp2440.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2441 = new InternalStructs.retrieveSystemFileContents_result();
        try
        {
          tmp2441.Success = await _iAsync.retrieveSystemFileContents(tmp2440.C, tmp2440.FileName, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("retrieveSystemFileContents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2441.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2442)
        {
          var tmp2443 = $"Error occurred in {GetType().FullName}: {tmp2442.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2442, tmp2443);
          else
            Console.Error.WriteLine(tmp2443);
          var tmp2444 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("retrieveSystemFileContents", TMessageType.Exception, seqid), cancellationToken);
          await tmp2444.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task retrieveSystemFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2445 = new InternalStructs.retrieveSystemFile_args();
        await tmp2445.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2446 = new InternalStructs.retrieveSystemFile_result();
        try
        {
          try
          {
            await _iAsync.retrieveSystemFile(tmp2445.C, tmp2445.FileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2447)
          {
            tmp2446.E = tmp2447;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("retrieveSystemFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2446.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2448)
        {
          var tmp2449 = $"Error occurred in {GetType().FullName}: {tmp2448.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2448, tmp2449);
          else
            Console.Error.WriteLine(tmp2449);
          var tmp2450 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("retrieveSystemFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp2450.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task tools_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2451 = new InternalStructs.tools_args();
        await tmp2451.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2452 = new InternalStructs.tools_result();
        try
        {
          try
          {
            tmp2452.Success = await _iAsync.tools(tmp2451.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2453)
          {
            tmp2452.E = tmp2453;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2452.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2454)
        {
          var tmp2455 = $"Error occurred in {GetType().FullName}: {tmp2454.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2454, tmp2455);
          else
            Console.Error.WriteLine(tmp2455);
          var tmp2456 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Exception, seqid), cancellationToken);
          await tmp2456.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task tool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2457 = new InternalStructs.tool_args();
        await tmp2457.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2458 = new InternalStructs.tool_result();
        try
        {
          try
          {
            tmp2458.Success = await _iAsync.tool(tmp2457.C, tmp2457.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2459)
          {
            tmp2458.E = tmp2459;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2458.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2460)
        {
          var tmp2461 = $"Error occurred in {GetType().FullName}: {tmp2460.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2460, tmp2461);
          else
            Console.Error.WriteLine(tmp2461);
          var tmp2462 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Exception, seqid), cancellationToken);
          await tmp2462.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2463 = new InternalStructs.inputNumber_args();
        await tmp2463.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2464 = new InternalStructs.inputNumber_result();
        try
        {
          try
          {
            tmp2464.Success = await _iAsync.inputNumber(tmp2463.C, tmp2463.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2465)
          {
            tmp2464.E = tmp2465;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2464.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2466)
        {
          var tmp2467 = $"Error occurred in {GetType().FullName}: {tmp2466.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2466, tmp2467);
          else
            Console.Error.WriteLine(tmp2467);
          var tmp2468 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2468.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputGroupNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2469 = new InternalStructs.inputGroupNumber_args();
        await tmp2469.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2470 = new InternalStructs.inputGroupNumber_result();
        try
        {
          try
          {
            tmp2470.Success = await _iAsync.inputGroupNumber(tmp2469.C, tmp2469.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2471)
          {
            tmp2470.E = tmp2471;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2470.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2472)
        {
          var tmp2473 = $"Error occurred in {GetType().FullName}: {tmp2472.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2472, tmp2473);
          else
            Console.Error.WriteLine(tmp2473);
          var tmp2474 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2474.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2475 = new InternalStructs.outputNumber_args();
        await tmp2475.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2476 = new InternalStructs.outputNumber_result();
        try
        {
          try
          {
            tmp2476.Success = await _iAsync.outputNumber(tmp2475.C, tmp2475.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2477)
          {
            tmp2476.E = tmp2477;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2476.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2478)
        {
          var tmp2479 = $"Error occurred in {GetType().FullName}: {tmp2478.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2478, tmp2479);
          else
            Console.Error.WriteLine(tmp2479);
          var tmp2480 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2480.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputGroupNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2481 = new InternalStructs.outputGroupNumber_args();
        await tmp2481.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2482 = new InternalStructs.outputGroupNumber_result();
        try
        {
          try
          {
            tmp2482.Success = await _iAsync.outputGroupNumber(tmp2481.C, tmp2481.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2483)
          {
            tmp2482.E = tmp2483;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2482.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2484)
        {
          var tmp2485 = $"Error occurred in {GetType().FullName}: {tmp2484.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2484, tmp2485);
          else
            Console.Error.WriteLine(tmp2485);
          var tmp2486 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2486.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2487 = new InternalStructs.inputName_args();
        await tmp2487.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2488 = new InternalStructs.inputName_result();
        try
        {
          try
          {
            tmp2488.Success = await _iAsync.inputName(tmp2487.C, tmp2487.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2489)
          {
            tmp2488.E = tmp2489;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2488.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2490)
        {
          var tmp2491 = $"Error occurred in {GetType().FullName}: {tmp2490.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2490, tmp2491);
          else
            Console.Error.WriteLine(tmp2491);
          var tmp2492 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2492.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2493 = new InternalStructs.outputName_args();
        await tmp2493.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2494 = new InternalStructs.outputName_result();
        try
        {
          try
          {
            tmp2494.Success = await _iAsync.outputName(tmp2493.C, tmp2493.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2495)
          {
            tmp2494.E = tmp2495;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2494.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2496)
        {
          var tmp2497 = $"Error occurred in {GetType().FullName}: {tmp2496.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2496, tmp2497);
          else
            Console.Error.WriteLine(tmp2497);
          var tmp2498 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2498.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setInputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2499 = new InternalStructs.setInputName_args();
        await tmp2499.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setInputName(tmp2499.C, tmp2499.Num, tmp2499.Name, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2501)
        {
          var tmp2502 = $"Error occurred in {GetType().FullName}: {tmp2501.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2501, tmp2502);
          else
            Console.Error.WriteLine(tmp2502);
        }
      }

      public async global::System.Threading.Tasks.Task setOutputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2503 = new InternalStructs.setOutputName_args();
        await tmp2503.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputName(tmp2503.C, tmp2503.Num, tmp2503.Name, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2505)
        {
          var tmp2506 = $"Error occurred in {GetType().FullName}: {tmp2505.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2505, tmp2506);
          else
            Console.Error.WriteLine(tmp2506);
        }
      }

      public async global::System.Threading.Tasks.Task monitorInput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2507 = new InternalStructs.monitorInput_args();
        await tmp2507.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2508 = new InternalStructs.monitorInput_result();
        try
        {
          try
          {
            await _iAsync.monitorInput(tmp2507.C, tmp2507.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2509)
          {
            tmp2508.E = tmp2509;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2508.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2510)
        {
          var tmp2511 = $"Error occurred in {GetType().FullName}: {tmp2510.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2510, tmp2511);
          else
            Console.Error.WriteLine(tmp2511);
          var tmp2512 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2512.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorInputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2513 = new InternalStructs.monitorInputGroups_args();
        await tmp2513.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2514 = new InternalStructs.monitorInputGroups_result();
        try
        {
          try
          {
            await _iAsync.monitorInputGroups(tmp2513.C, tmp2513.GroupNum, tmp2513.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2515)
          {
            tmp2514.E = tmp2515;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2514.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2516)
        {
          var tmp2517 = $"Error occurred in {GetType().FullName}: {tmp2516.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2516, tmp2517);
          else
            Console.Error.WriteLine(tmp2517);
          var tmp2518 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2518.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2519 = new InternalStructs.monitorOutput_args();
        await tmp2519.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2520 = new InternalStructs.monitorOutput_result();
        try
        {
          try
          {
            await _iAsync.monitorOutput(tmp2519.C, tmp2519.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2521)
          {
            tmp2520.E = tmp2521;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2520.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2522)
        {
          var tmp2523 = $"Error occurred in {GetType().FullName}: {tmp2522.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2522, tmp2523);
          else
            Console.Error.WriteLine(tmp2523);
          var tmp2524 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2524.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2525 = new InternalStructs.monitorOutputGroups_args();
        await tmp2525.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2526 = new InternalStructs.monitorOutputGroups_result();
        try
        {
          try
          {
            await _iAsync.monitorOutputGroups(tmp2525.C, tmp2525.GroupNum, tmp2525.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2527)
          {
            tmp2526.E = tmp2527;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2526.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2528)
        {
          var tmp2529 = $"Error occurred in {GetType().FullName}: {tmp2528.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2528, tmp2529);
          else
            Console.Error.WriteLine(tmp2529);
          var tmp2530 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2530.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2531 = new InternalStructs.unmonitorInput_args();
        await tmp2531.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2532 = new InternalStructs.unmonitorInput_result();
        try
        {
          await _iAsync.unmonitorInput(tmp2531.C, tmp2531.Num, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2532.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2533)
        {
          var tmp2534 = $"Error occurred in {GetType().FullName}: {tmp2533.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2533, tmp2534);
          else
            Console.Error.WriteLine(tmp2534);
          var tmp2535 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2535.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2536 = new InternalStructs.unmonitorInputGroups_args();
        await tmp2536.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2537 = new InternalStructs.unmonitorInputGroups_result();
        try
        {
          await _iAsync.unmonitorInputGroups(tmp2536.C, tmp2536.GroupNum, tmp2536.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2537.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2538)
        {
          var tmp2539 = $"Error occurred in {GetType().FullName}: {tmp2538.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2538, tmp2539);
          else
            Console.Error.WriteLine(tmp2539);
          var tmp2540 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2540.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2541 = new InternalStructs.unmonitorOutput_args();
        await tmp2541.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2542 = new InternalStructs.unmonitorOutput_result();
        try
        {
          await _iAsync.unmonitorOutput(tmp2541.C, tmp2541.Num, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2542.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2543)
        {
          var tmp2544 = $"Error occurred in {GetType().FullName}: {tmp2543.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2543, tmp2544);
          else
            Console.Error.WriteLine(tmp2544);
          var tmp2545 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2545.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2546 = new InternalStructs.unmonitorOutputGroups_args();
        await tmp2546.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2547 = new InternalStructs.unmonitorOutputGroups_result();
        try
        {
          await _iAsync.unmonitorOutputGroups(tmp2546.C, tmp2546.GroupNum, tmp2546.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2547.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2548)
        {
          var tmp2549 = $"Error occurred in {GetType().FullName}: {tmp2548.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2548, tmp2549);
          else
            Console.Error.WriteLine(tmp2549);
          var tmp2550 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2550.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2551 = new InternalStructs.inputValue_args();
        await tmp2551.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2552 = new InternalStructs.inputValue_result();
        try
        {
          try
          {
            tmp2552.Success = await _iAsync.inputValue(tmp2551.C, tmp2551.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2553)
          {
            tmp2552.E = tmp2553;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2552.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2554)
        {
          var tmp2555 = $"Error occurred in {GetType().FullName}: {tmp2554.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2554, tmp2555);
          else
            Console.Error.WriteLine(tmp2555);
          var tmp2556 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2556.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputGroupsValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2557 = new InternalStructs.inputGroupsValue_args();
        await tmp2557.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2558 = new InternalStructs.inputGroupsValue_result();
        try
        {
          try
          {
            tmp2558.Success = await _iAsync.inputGroupsValue(tmp2557.C, tmp2557.GroupNum, tmp2557.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2559)
          {
            tmp2558.E = tmp2559;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2558.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2560)
        {
          var tmp2561 = $"Error occurred in {GetType().FullName}: {tmp2560.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2560, tmp2561);
          else
            Console.Error.WriteLine(tmp2561);
          var tmp2562 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2562.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2563 = new InternalStructs.outputValue_args();
        await tmp2563.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2564 = new InternalStructs.outputValue_result();
        try
        {
          try
          {
            tmp2564.Success = await _iAsync.outputValue(tmp2563.C, tmp2563.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2565)
          {
            tmp2564.E = tmp2565;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2564.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2566)
        {
          var tmp2567 = $"Error occurred in {GetType().FullName}: {tmp2566.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2566, tmp2567);
          else
            Console.Error.WriteLine(tmp2567);
          var tmp2568 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2568.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputGroupsValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2569 = new InternalStructs.outputGroupsValue_args();
        await tmp2569.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2570 = new InternalStructs.outputGroupsValue_result();
        try
        {
          try
          {
            tmp2570.Success = await _iAsync.outputGroupsValue(tmp2569.C, tmp2569.GroupNum, tmp2569.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2571)
          {
            tmp2570.E = tmp2571;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2570.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2572)
        {
          var tmp2573 = $"Error occurred in {GetType().FullName}: {tmp2572.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2572, tmp2573);
          else
            Console.Error.WriteLine(tmp2573);
          var tmp2574 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2574.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2575 = new InternalStructs.setOutput_args();
        await tmp2575.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutput(tmp2575.C, tmp2575.Num, tmp2575.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2577)
        {
          var tmp2578 = $"Error occurred in {GetType().FullName}: {tmp2577.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2577, tmp2578);
          else
            Console.Error.WriteLine(tmp2578);
        }
      }

      public async global::System.Threading.Tasks.Task setOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2579 = new InternalStructs.setOutputGroups_args();
        await tmp2579.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputGroups(tmp2579.C, tmp2579.GroupNum, tmp2579.Count, tmp2579.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2581)
        {
          var tmp2582 = $"Error occurred in {GetType().FullName}: {tmp2581.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2581, tmp2582);
          else
            Console.Error.WriteLine(tmp2582);
        }
      }

      public async global::System.Threading.Tasks.Task inputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2583 = new InternalStructs.inputAddress_args();
        await tmp2583.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2584 = new InternalStructs.inputAddress_result();
        try
        {
          try
          {
            tmp2584.Success = await _iAsync.inputAddress(tmp2583.C, tmp2583.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2585)
          {
            tmp2584.E = tmp2585;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2584.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2586)
        {
          var tmp2587 = $"Error occurred in {GetType().FullName}: {tmp2586.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2586, tmp2587);
          else
            Console.Error.WriteLine(tmp2587);
          var tmp2588 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2588.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputAddressByNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2589 = new InternalStructs.inputAddressByNumber_args();
        await tmp2589.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2590 = new InternalStructs.inputAddressByNumber_result();
        try
        {
          try
          {
            tmp2590.Success = await _iAsync.inputAddressByNumber(tmp2589.C, tmp2589.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2591)
          {
            tmp2590.E = tmp2591;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2590.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2592)
        {
          var tmp2593 = $"Error occurred in {GetType().FullName}: {tmp2592.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2592, tmp2593);
          else
            Console.Error.WriteLine(tmp2593);
          var tmp2594 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2594.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2595 = new InternalStructs.outputAddress_args();
        await tmp2595.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2596 = new InternalStructs.outputAddress_result();
        try
        {
          try
          {
            tmp2596.Success = await _iAsync.outputAddress(tmp2595.C, tmp2595.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2597)
          {
            tmp2596.E = tmp2597;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2596.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2598)
        {
          var tmp2599 = $"Error occurred in {GetType().FullName}: {tmp2598.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2598, tmp2599);
          else
            Console.Error.WriteLine(tmp2599);
          var tmp2600 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2600.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddressByNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2601 = new InternalStructs.outputAddressByNumber_args();
        await tmp2601.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2602 = new InternalStructs.outputAddressByNumber_result();
        try
        {
          try
          {
            tmp2602.Success = await _iAsync.outputAddressByNumber(tmp2601.C, tmp2601.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2603)
          {
            tmp2602.E = tmp2603;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2602.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2604)
        {
          var tmp2605 = $"Error occurred in {GetType().FullName}: {tmp2604.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2604, tmp2605);
          else
            Console.Error.WriteLine(tmp2605);
          var tmp2606 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2606.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorIOAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2607 = new InternalStructs.monitorIOAddress_args();
        await tmp2607.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2608 = new InternalStructs.monitorIOAddress_result();
        try
        {
          try
          {
            await _iAsync.monitorIOAddress(tmp2607.C, tmp2607.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2609)
          {
            tmp2608.E = tmp2609;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2608.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2610)
        {
          var tmp2611 = $"Error occurred in {GetType().FullName}: {tmp2610.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2610, tmp2611);
          else
            Console.Error.WriteLine(tmp2611);
          var tmp2612 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2612.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorIOAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2613 = new InternalStructs.unmonitorIOAddress_args();
        await tmp2613.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2614 = new InternalStructs.unmonitorIOAddress_result();
        try
        {
          await _iAsync.unmonitorIOAddress(tmp2613.C, tmp2613.Address, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2614.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2615)
        {
          var tmp2616 = $"Error occurred in {GetType().FullName}: {tmp2615.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2615, tmp2616);
          else
            Console.Error.WriteLine(tmp2616);
          var tmp2617 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2617.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2618 = new InternalStructs.inputAddressValue_args();
        await tmp2618.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2619 = new InternalStructs.inputAddressValue_result();
        try
        {
          try
          {
            tmp2619.Success = await _iAsync.inputAddressValue(tmp2618.C, tmp2618.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2620)
          {
            tmp2619.E = tmp2620;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2619.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2621)
        {
          var tmp2622 = $"Error occurred in {GetType().FullName}: {tmp2621.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2621, tmp2622);
          else
            Console.Error.WriteLine(tmp2622);
          var tmp2623 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2623.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2624 = new InternalStructs.outputAddressValue_args();
        await tmp2624.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2625 = new InternalStructs.outputAddressValue_result();
        try
        {
          try
          {
            tmp2625.Success = await _iAsync.outputAddressValue(tmp2624.C, tmp2624.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2626)
          {
            tmp2625.E = tmp2626;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2625.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2627)
        {
          var tmp2628 = $"Error occurred in {GetType().FullName}: {tmp2627.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2627, tmp2628);
          else
            Console.Error.WriteLine(tmp2628);
          var tmp2629 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2629.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ioAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2630 = new InternalStructs.ioAddressValue_args();
        await tmp2630.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2631 = new InternalStructs.ioAddressValue_result();
        try
        {
          try
          {
            tmp2631.Success = await _iAsync.ioAddressValue(tmp2630.C, tmp2630.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2632)
          {
            tmp2631.E = tmp2632;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("ioAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2631.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2633)
        {
          var tmp2634 = $"Error occurred in {GetType().FullName}: {tmp2633.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2633, tmp2634);
          else
            Console.Error.WriteLine(tmp2634);
          var tmp2635 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ioAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2635.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2636 = new InternalStructs.setOutputAddress_args();
        await tmp2636.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputAddress(tmp2636.C, tmp2636.Address, tmp2636.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2638)
        {
          var tmp2639 = $"Error occurred in {GetType().FullName}: {tmp2638.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2638, tmp2639);
          else
            Console.Error.WriteLine(tmp2639);
        }
      }

      public async global::System.Threading.Tasks.Task setNetworkInputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2640 = new InternalStructs.setNetworkInputAddress_args();
        await tmp2640.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setNetworkInputAddress(tmp2640.C, tmp2640.Address, tmp2640.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2642)
        {
          var tmp2643 = $"Error occurred in {GetType().FullName}: {tmp2642.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2642, tmp2643);
          else
            Console.Error.WriteLine(tmp2643);
        }
      }

      public async global::System.Threading.Tasks.Task mRegisterValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2644 = new InternalStructs.mRegisterValue_args();
        await tmp2644.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2645 = new InternalStructs.mRegisterValue_result();
        try
        {
          try
          {
            tmp2645.Success = await _iAsync.mRegisterValue(tmp2644.C, tmp2644.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2646)
          {
            tmp2645.E = tmp2646;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("mRegisterValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2645.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2647)
        {
          var tmp2648 = $"Error occurred in {GetType().FullName}: {tmp2647.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2647, tmp2648);
          else
            Console.Error.WriteLine(tmp2648);
          var tmp2649 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("mRegisterValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2649.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setMRegisterValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2650 = new InternalStructs.setMRegisterValue_args();
        await tmp2650.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setMRegisterValue(tmp2650.C, tmp2650.Index, tmp2650.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2652)
        {
          var tmp2653 = $"Error occurred in {GetType().FullName}: {tmp2652.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2652, tmp2653);
          else
            Console.Error.WriteLine(tmp2653);
        }
      }

      public async global::System.Threading.Tasks.Task fieldBusStatusInputGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2654 = new InternalStructs.fieldBusStatusInputGroup_args();
        await tmp2654.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2655 = new InternalStructs.fieldBusStatusInputGroup_result();
        try
        {
          try
          {
            tmp2655.Success = await _iAsync.fieldBusStatusInputGroup(tmp2654.C, tmp2654.BusType, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2656)
          {
            tmp2655.E = tmp2656;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2655.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2657)
        {
          var tmp2658 = $"Error occurred in {GetType().FullName}: {tmp2657.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2657, tmp2658);
          else
            Console.Error.WriteLine(tmp2658);
          var tmp2659 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp2659.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task controlGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2660 = new InternalStructs.controlGroups_args();
        await tmp2660.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2661 = new InternalStructs.controlGroups_result();
        try
        {
          tmp2661.Success = await _iAsync.controlGroups(tmp2660.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2661.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2662)
        {
          var tmp2663 = $"Error occurred in {GetType().FullName}: {tmp2662.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2662, tmp2663);
          else
            Console.Error.WriteLine(tmp2663);
          var tmp2664 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2664.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentControlGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2665 = new InternalStructs.currentControlGroup_args();
        await tmp2665.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2666 = new InternalStructs.currentControlGroup_result();
        try
        {
          tmp2666.Success = await _iAsync.currentControlGroup(tmp2665.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2666.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2667)
        {
          var tmp2668 = $"Error occurred in {GetType().FullName}: {tmp2667.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2667, tmp2668);
          else
            Console.Error.WriteLine(tmp2668);
          var tmp2669 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp2669.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task robotCount_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2670 = new InternalStructs.robotCount_args();
        await tmp2670.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2671 = new InternalStructs.robotCount_result();
        try
        {
          tmp2671.Success = await _iAsync.robotCount(tmp2670.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2671.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2672)
        {
          var tmp2673 = $"Error occurred in {GetType().FullName}: {tmp2672.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2672, tmp2673);
          else
            Console.Error.WriteLine(tmp2673);
          var tmp2674 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Exception, seqid), cancellationToken);
          await tmp2674.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentRobot_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2675 = new InternalStructs.currentRobot_args();
        await tmp2675.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2676 = new InternalStructs.currentRobot_result();
        try
        {
          tmp2676.Success = await _iAsync.currentRobot(tmp2675.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2676.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2677)
        {
          var tmp2678 = $"Error occurred in {GetType().FullName}: {tmp2677.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2677, tmp2678);
          else
            Console.Error.WriteLine(tmp2678);
          var tmp2679 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Exception, seqid), cancellationToken);
          await tmp2679.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2680 = new InternalStructs.variable_args();
        await tmp2680.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2681 = new InternalStructs.variable_result();
        try
        {
          try
          {
            tmp2681.Success = await _iAsync.variable(tmp2680.C, tmp2680.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2682)
          {
            tmp2681.E = tmp2682;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2681.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2683)
        {
          var tmp2684 = $"Error occurred in {GetType().FullName}: {tmp2683.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2683, tmp2684);
          else
            Console.Error.WriteLine(tmp2684);
          var tmp2685 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2685.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableByAddr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2686 = new InternalStructs.variableByAddr_args();
        await tmp2686.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2687 = new InternalStructs.variableByAddr_result();
        try
        {
          try
          {
            tmp2687.Success = await _iAsync.variableByAddr(tmp2686.C, tmp2686.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2688)
          {
            tmp2687.E = tmp2688;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2687.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2689)
        {
          var tmp2690 = $"Error occurred in {GetType().FullName}: {tmp2689.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2689, tmp2690);
          else
            Console.Error.WriteLine(tmp2690);
          var tmp2691 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Exception, seqid), cancellationToken);
          await tmp2691.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2692 = new InternalStructs.setVariable_args();
        await tmp2692.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2693 = new InternalStructs.setVariable_result();
        try
        {
          try
          {
            await _iAsync.setVariable(tmp2692.C, tmp2692.Name, tmp2692.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2694)
          {
            tmp2693.E = tmp2694;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2693.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2695)
        {
          var tmp2696 = $"Error occurred in {GetType().FullName}: {tmp2695.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2695, tmp2696);
          else
            Console.Error.WriteLine(tmp2696);
          var tmp2697 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2697.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariableByAddr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2698 = new InternalStructs.setVariableByAddr_args();
        await tmp2698.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2699 = new InternalStructs.setVariableByAddr_result();
        try
        {
          try
          {
            await _iAsync.setVariableByAddr(tmp2698.C, tmp2698.Addr, tmp2698.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2700)
          {
            tmp2699.E = tmp2700;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2699.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2701)
        {
          var tmp2702 = $"Error occurred in {GetType().FullName}: {tmp2701.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2701, tmp2702);
          else
            Console.Error.WriteLine(tmp2702);
          var tmp2703 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Exception, seqid), cancellationToken);
          await tmp2703.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableAddrByNameAndSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2704 = new InternalStructs.variableAddrByNameAndSpace_args();
        await tmp2704.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2705 = new InternalStructs.variableAddrByNameAndSpace_result();
        try
        {
          try
          {
            tmp2705.Success = await _iAsync.variableAddrByNameAndSpace(tmp2704.C, tmp2704.Name, tmp2704.Space, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2706)
          {
            tmp2705.E = tmp2706;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2705.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2707)
        {
          var tmp2708 = $"Error occurred in {GetType().FullName}: {tmp2707.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2707, tmp2708);
          else
            Console.Error.WriteLine(tmp2708);
          var tmp2709 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp2709.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableAddrByName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2710 = new InternalStructs.variableAddrByName_args();
        await tmp2710.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2711 = new InternalStructs.variableAddrByName_result();
        try
        {
          try
          {
            tmp2711.Success = await _iAsync.variableAddrByName(tmp2710.C, tmp2710.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2712)
          {
            tmp2711.E = tmp2712;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2711.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2713)
        {
          var tmp2714 = $"Error occurred in {GetType().FullName}: {tmp2713.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2713, tmp2714);
          else
            Console.Error.WriteLine(tmp2714);
          var tmp2715 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2715.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariableName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2716 = new InternalStructs.setVariableName_args();
        await tmp2716.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2717 = new InternalStructs.setVariableName_result();
        try
        {
          try
          {
            await _iAsync.setVariableName(tmp2716.C, tmp2716.Addr, tmp2716.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2718)
          {
            tmp2717.E = tmp2718;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2717.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2719)
        {
          var tmp2720 = $"Error occurred in {GetType().FullName}: {tmp2719.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2719, tmp2720);
          else
            Console.Error.WriteLine(tmp2720);
          var tmp2721 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2721.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2722 = new InternalStructs.monitorVariable_args();
        await tmp2722.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2723 = new InternalStructs.monitorVariable_result();
        try
        {
          try
          {
            await _iAsync.monitorVariable(tmp2722.C, tmp2722.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2724)
          {
            tmp2723.E = tmp2724;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2723.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2725)
        {
          var tmp2726 = $"Error occurred in {GetType().FullName}: {tmp2725.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2725, tmp2726);
          else
            Console.Error.WriteLine(tmp2726);
          var tmp2727 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2727.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2728 = new InternalStructs.unmonitorVariable_args();
        await tmp2728.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2729 = new InternalStructs.unmonitorVariable_result();
        try
        {
          try
          {
            await _iAsync.unmonitorVariable(tmp2728.C, tmp2728.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2730)
          {
            tmp2729.E = tmp2730;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2729.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2731)
        {
          var tmp2732 = $"Error occurred in {GetType().FullName}: {tmp2731.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2731, tmp2732);
          else
            Console.Error.WriteLine(tmp2732);
          var tmp2733 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2733.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableRange_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2734 = new InternalStructs.variableRange_args();
        await tmp2734.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2735 = new InternalStructs.variableRange_result();
        try
        {
          try
          {
            tmp2735.Success = await _iAsync.variableRange(tmp2734.C, tmp2734.Space, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2736)
          {
            tmp2735.E = tmp2736;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableRange", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2735.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2737)
        {
          var tmp2738 = $"Error occurred in {GetType().FullName}: {tmp2737.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2737, tmp2738);
          else
            Console.Error.WriteLine(tmp2738);
          var tmp2739 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableRange", TMessageType.Exception, seqid), cancellationToken);
          await tmp2739.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task transformPositionToFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2740 = new InternalStructs.transformPositionToFrame_args();
        await tmp2740.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2741 = new InternalStructs.transformPositionToFrame_result();
        try
        {
          try
          {
            tmp2741.Success = await _iAsync.transformPositionToFrame(tmp2740.C, tmp2740.Pos, tmp2740.NewFrame, tmp2740.KinematicTool, tmp2740.IkScheme, tmp2740.RefPosition, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2742)
          {
            tmp2741.E = tmp2742;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("transformPositionToFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2741.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2743)
        {
          var tmp2744 = $"Error occurred in {GetType().FullName}: {tmp2743.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2743, tmp2744);
          else
            Console.Error.WriteLine(tmp2744);
          var tmp2745 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("transformPositionToFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2745.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task convertPositionUnits_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2746 = new InternalStructs.convertPositionUnits_args();
        await tmp2746.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2747 = new InternalStructs.convertPositionUnits_result();
        try
        {
          try
          {
            tmp2747.Success = await _iAsync.convertPositionUnits(tmp2746.C, tmp2746.Pos, tmp2746.NewDistUnit, tmp2746.NewOrientUnit, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2748)
          {
            tmp2747.E = tmp2748;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("convertPositionUnits", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2747.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2749)
        {
          var tmp2750 = $"Error occurred in {GetType().FullName}: {tmp2749.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2749, tmp2750);
          else
            Console.Error.WriteLine(tmp2750);
          var tmp2751 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("convertPositionUnits", TMessageType.Exception, seqid), cancellationToken);
          await tmp2751.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task zone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2752 = new InternalStructs.zone_args();
        await tmp2752.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2753 = new InternalStructs.zone_result();
        try
        {
          try
          {
            tmp2753.Success = await _iAsync.zone(tmp2752.C, tmp2752.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2754)
          {
            tmp2753.E = tmp2754;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2753.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2755)
        {
          var tmp2756 = $"Error occurred in {GetType().FullName}: {tmp2755.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2755, tmp2756);
          else
            Console.Error.WriteLine(tmp2756);
          var tmp2757 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2757.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task newZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2758 = new InternalStructs.newZone_args();
        await tmp2758.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2759 = new InternalStructs.newZone_result();
        try
        {
          try
          {
            tmp2759.Success = await _iAsync.newZone(tmp2758.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2760)
          {
            tmp2759.E = tmp2760;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2759.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2761)
        {
          var tmp2762 = $"Error occurred in {GetType().FullName}: {tmp2761.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2761, tmp2762);
          else
            Console.Error.WriteLine(tmp2762);
          var tmp2763 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2763.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task modifyZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2764 = new InternalStructs.modifyZone_args();
        await tmp2764.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2765 = new InternalStructs.modifyZone_result();
        try
        {
          try
          {
            await _iAsync.modifyZone(tmp2764.C, tmp2764.Index, tmp2764.Z, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2766)
          {
            tmp2765.E = tmp2766;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2765.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2767)
        {
          var tmp2768 = $"Error occurred in {GetType().FullName}: {tmp2767.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2767, tmp2768);
          else
            Console.Error.WriteLine(tmp2768);
          var tmp2769 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2769.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2770 = new InternalStructs.deleteZone_args();
        await tmp2770.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2771 = new InternalStructs.deleteZone_result();
        try
        {
          try
          {
            await _iAsync.deleteZone(tmp2770.C, tmp2770.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2772)
          {
            tmp2771.E = tmp2772;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2771.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2773)
        {
          var tmp2774 = $"Error occurred in {GetType().FullName}: {tmp2773.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2773, tmp2774);
          else
            Console.Error.WriteLine(tmp2774);
          var tmp2775 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2775.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task userFrames_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2776 = new InternalStructs.userFrames_args();
        await tmp2776.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2777 = new InternalStructs.userFrames_result();
        try
        {
          try
          {
            tmp2777.Success = await _iAsync.userFrames(tmp2776.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2778)
          {
            tmp2777.E = tmp2778;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2777.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2779)
        {
          var tmp2780 = $"Error occurred in {GetType().FullName}: {tmp2779.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2779, tmp2780);
          else
            Console.Error.WriteLine(tmp2780);
          var tmp2781 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Exception, seqid), cancellationToken);
          await tmp2781.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task userFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2782 = new InternalStructs.userFrame_args();
        await tmp2782.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2783 = new InternalStructs.userFrame_result();
        try
        {
          try
          {
            tmp2783.Success = await _iAsync.userFrame(tmp2782.C, tmp2782.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2784)
          {
            tmp2783.E = tmp2784;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2783.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2785)
        {
          var tmp2786 = $"Error occurred in {GetType().FullName}: {tmp2785.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2785, tmp2786);
          else
            Console.Error.WriteLine(tmp2786);
          var tmp2787 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2787.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task newUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2788 = new InternalStructs.newUserFrame_args();
        await tmp2788.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2789 = new InternalStructs.newUserFrame_result();
        try
        {
          try
          {
            tmp2789.Success = await _iAsync.newUserFrame(tmp2788.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2790)
          {
            tmp2789.E = tmp2790;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2789.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2791)
        {
          var tmp2792 = $"Error occurred in {GetType().FullName}: {tmp2791.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2791, tmp2792);
          else
            Console.Error.WriteLine(tmp2792);
          var tmp2793 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2793.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2794 = new InternalStructs.setUserFrame_args();
        await tmp2794.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2795 = new InternalStructs.setUserFrame_result();
        try
        {
          try
          {
            await _iAsync.setUserFrame(tmp2794.C, tmp2794.Index, tmp2794.F, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2796)
          {
            tmp2795.E = tmp2796;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2795.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2797)
        {
          var tmp2798 = $"Error occurred in {GetType().FullName}: {tmp2797.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2797, tmp2798);
          else
            Console.Error.WriteLine(tmp2798);
          var tmp2799 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2799.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2800 = new InternalStructs.deleteUserFrame_args();
        await tmp2800.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2801 = new InternalStructs.deleteUserFrame_result();
        try
        {
          try
          {
            await _iAsync.deleteUserFrame(tmp2800.C, tmp2800.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2802)
          {
            tmp2801.E = tmp2802;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2801.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2803)
        {
          var tmp2804 = $"Error occurred in {GetType().FullName}: {tmp2803.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2803, tmp2804);
          else
            Console.Error.WriteLine(tmp2804);
          var tmp2805 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2805.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task networkInterfaceAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2806 = new InternalStructs.networkInterfaceAddress_args();
        await tmp2806.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2807 = new InternalStructs.networkInterfaceAddress_result();
        try
        {
          try
          {
            tmp2807.Success = await _iAsync.networkInterfaceAddress(tmp2806.C, tmp2806.ControllerInterface, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2808)
          {
            tmp2807.E = tmp2808;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2807.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2809)
        {
          var tmp2810 = $"Error occurred in {GetType().FullName}: {tmp2809.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2809, tmp2810);
          else
            Console.Error.WriteLine(tmp2810);
          var tmp2811 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2811.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task requestNetworkAccess_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2812 = new InternalStructs.requestNetworkAccess_args();
        await tmp2812.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2813 = new InternalStructs.requestNetworkAccess_result();
        try
        {
          try
          {
            tmp2813.Success = await _iAsync.requestNetworkAccess(tmp2812.C, tmp2812.ControllerInterface, tmp2812.Port, tmp2812.Protocol, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2814)
          {
            tmp2813.E = tmp2814;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2813.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2815)
        {
          var tmp2816 = $"Error occurred in {GetType().FullName}: {tmp2815.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2815, tmp2816);
          else
            Console.Error.WriteLine(tmp2816);
          var tmp2817 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Exception, seqid), cancellationToken);
          await tmp2817.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeNetworkAccess_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2818 = new InternalStructs.removeNetworkAccess_args();
        await tmp2818.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2819 = new InternalStructs.removeNetworkAccess_result();
        try
        {
          try
          {
            await _iAsync.removeNetworkAccess(tmp2818.C, tmp2818.AccessHandle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2820)
          {
            tmp2819.E = tmp2820;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2819.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2821)
        {
          var tmp2822 = $"Error occurred in {GetType().FullName}: {tmp2821.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2821, tmp2822);
          else
            Console.Error.WriteLine(tmp2822);
          var tmp2823 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Exception, seqid), cancellationToken);
          await tmp2823.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task requestNetworkService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2824 = new InternalStructs.requestNetworkService_args();
        await tmp2824.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2825 = new InternalStructs.requestNetworkService_result();
        try
        {
          try
          {
            tmp2825.Success = await _iAsync.requestNetworkService(tmp2824.C, tmp2824.ControllerInterface, tmp2824.Port, tmp2824.Protocol, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2826)
          {
            tmp2825.E = tmp2826;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2825.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2827)
        {
          var tmp2828 = $"Error occurred in {GetType().FullName}: {tmp2827.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2827, tmp2828);
          else
            Console.Error.WriteLine(tmp2828);
          var tmp2829 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Exception, seqid), cancellationToken);
          await tmp2829.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeNetworkService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2830 = new InternalStructs.removeNetworkService_args();
        await tmp2830.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2831 = new InternalStructs.removeNetworkService_result();
        try
        {
          try
          {
            await _iAsync.removeNetworkService(tmp2830.C, tmp2830.AccessHandle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2832)
          {
            tmp2831.E = tmp2832;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2831.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2833)
        {
          var tmp2834 = $"Error occurred in {GetType().FullName}: {tmp2833.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2833, tmp2834);
          else
            Console.Error.WriteLine(tmp2834);
          var tmp2835 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Exception, seqid), cancellationToken);
          await tmp2835.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class requestPermissions_args : TBase
      {
        private long _c;
        private HashSet<string> _permissions;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<string> Permissions
        {
          get
          {
            return _permissions;
          }
          set
          {
            __isset.permissions = true;
            this._permissions = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permissions;
        }

        public requestPermissions_args()
        {
        }

        public requestPermissions_args DeepCopy()
        {
          var tmp2836 = new requestPermissions_args();
          if(__isset.c)
          {
            tmp2836.C = this.C;
          }
          tmp2836.__isset.c = this.__isset.c;
          if((Permissions != null) && __isset.permissions)
          {
            tmp2836.Permissions = this.Permissions.DeepCopy();
          }
          tmp2836.__isset.permissions = this.__isset.permissions;
          return tmp2836;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2837 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Permissions = new HashSet<string>(_set2837.Count);
                      for(int _i2838 = 0; _i2838 < _set2837.Count; ++_i2838)
                      {
                        string _elem2839;
                        _elem2839 = await iprot.ReadStringAsync(cancellationToken);
                        Permissions.Add(_elem2839);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2840 = new TStruct("requestPermissions_args");
            await oprot.WriteStructBeginAsync(tmp2840, cancellationToken);
            var tmp2841 = new TField();
            if(__isset.c)
            {
              tmp2841.Name = "c";
              tmp2841.Type = TType.I64;
              tmp2841.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2841, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permissions != null) && __isset.permissions)
            {
              tmp2841.Name = "permissions";
              tmp2841.Type = TType.Set;
              tmp2841.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2841, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, Permissions.Count), cancellationToken);
              foreach (string _iter2842 in Permissions)
              {
                await oprot.WriteStringAsync(_iter2842, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestPermissions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permissions == other.__isset.permissions) && ((!__isset.permissions) || (TCollections.Equals(Permissions, other.Permissions))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permissions != null) && __isset.permissions)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Permissions);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2843 = new StringBuilder("requestPermissions_args(");
          int tmp2844 = 0;
          if(__isset.c)
          {
            if(0 < tmp2844++) { tmp2843.Append(", "); }
            tmp2843.Append("C: ");
            C.ToString(tmp2843);
          }
          if((Permissions != null) && __isset.permissions)
          {
            if(0 < tmp2844++) { tmp2843.Append(", "); }
            tmp2843.Append("Permissions: ");
            Permissions.ToString(tmp2843);
          }
          tmp2843.Append(')');
          return tmp2843.ToString();
        }
      }


      public partial class requestPermissions_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestPermissions_result()
        {
        }

        public requestPermissions_result DeepCopy()
        {
          var tmp2845 = new requestPermissions_result();
          if(__isset.success)
          {
            tmp2845.Success = this.Success;
          }
          tmp2845.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2845.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2845.__isset.e = this.__isset.e;
          return tmp2845;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2846 = new TStruct("requestPermissions_result");
            await oprot.WriteStructBeginAsync(tmp2846, cancellationToken);
            var tmp2847 = new TField();

            if(this.__isset.success)
            {
              tmp2847.Name = "Success";
              tmp2847.Type = TType.Bool;
              tmp2847.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2847, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2847.Name = "E";
                tmp2847.Type = TType.Struct;
                tmp2847.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2847, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestPermissions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2848 = new StringBuilder("requestPermissions_result(");
          int tmp2849 = 0;
          if(__isset.success)
          {
            if(0 < tmp2849++) { tmp2848.Append(", "); }
            tmp2848.Append("Success: ");
            Success.ToString(tmp2848);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2849++) { tmp2848.Append(", "); }
            tmp2848.Append("E: ");
            E.ToString(tmp2848);
          }
          tmp2848.Append(')');
          return tmp2848.ToString();
        }
      }


      public partial class havePermission_args : TBase
      {
        private long _c;
        private string _permission;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Permission
        {
          get
          {
            return _permission;
          }
          set
          {
            __isset.permission = true;
            this._permission = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permission;
        }

        public havePermission_args()
        {
        }

        public havePermission_args DeepCopy()
        {
          var tmp2850 = new havePermission_args();
          if(__isset.c)
          {
            tmp2850.C = this.C;
          }
          tmp2850.__isset.c = this.__isset.c;
          if((Permission != null) && __isset.permission)
          {
            tmp2850.Permission = this.Permission;
          }
          tmp2850.__isset.permission = this.__isset.permission;
          return tmp2850;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Permission = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2851 = new TStruct("havePermission_args");
            await oprot.WriteStructBeginAsync(tmp2851, cancellationToken);
            var tmp2852 = new TField();
            if(__isset.c)
            {
              tmp2852.Name = "c";
              tmp2852.Type = TType.I64;
              tmp2852.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2852, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permission != null) && __isset.permission)
            {
              tmp2852.Name = "permission";
              tmp2852.Type = TType.String;
              tmp2852.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2852, cancellationToken);
              await oprot.WriteStringAsync(Permission, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is havePermission_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permission == other.__isset.permission) && ((!__isset.permission) || (global::System.Object.Equals(Permission, other.Permission))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permission != null) && __isset.permission)
            {
              hashcode = (hashcode * 397) + Permission.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2853 = new StringBuilder("havePermission_args(");
          int tmp2854 = 0;
          if(__isset.c)
          {
            if(0 < tmp2854++) { tmp2853.Append(", "); }
            tmp2853.Append("C: ");
            C.ToString(tmp2853);
          }
          if((Permission != null) && __isset.permission)
          {
            if(0 < tmp2854++) { tmp2853.Append(", "); }
            tmp2853.Append("Permission: ");
            Permission.ToString(tmp2853);
          }
          tmp2853.Append(')');
          return tmp2853.ToString();
        }
      }


      public partial class havePermission_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public havePermission_result()
        {
        }

        public havePermission_result DeepCopy()
        {
          var tmp2855 = new havePermission_result();
          if(__isset.success)
          {
            tmp2855.Success = this.Success;
          }
          tmp2855.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2855.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2855.__isset.e = this.__isset.e;
          return tmp2855;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2856 = new TStruct("havePermission_result");
            await oprot.WriteStructBeginAsync(tmp2856, cancellationToken);
            var tmp2857 = new TField();

            if(this.__isset.success)
            {
              tmp2857.Name = "Success";
              tmp2857.Type = TType.Bool;
              tmp2857.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2857, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2857.Name = "E";
                tmp2857.Type = TType.Struct;
                tmp2857.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2857, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is havePermission_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2858 = new StringBuilder("havePermission_result(");
          int tmp2859 = 0;
          if(__isset.success)
          {
            if(0 < tmp2859++) { tmp2858.Append(", "); }
            tmp2858.Append("Success: ");
            Success.ToString(tmp2858);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2859++) { tmp2858.Append(", "); }
            tmp2858.Append("E: ");
            E.ToString(tmp2858);
          }
          tmp2858.Append(')');
          return tmp2858.ToString();
        }
      }


      public partial class relinquishPermissions_args : TBase
      {
        private long _c;
        private HashSet<string> _permissions;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<string> Permissions
        {
          get
          {
            return _permissions;
          }
          set
          {
            __isset.permissions = true;
            this._permissions = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permissions;
        }

        public relinquishPermissions_args()
        {
        }

        public relinquishPermissions_args DeepCopy()
        {
          var tmp2860 = new relinquishPermissions_args();
          if(__isset.c)
          {
            tmp2860.C = this.C;
          }
          tmp2860.__isset.c = this.__isset.c;
          if((Permissions != null) && __isset.permissions)
          {
            tmp2860.Permissions = this.Permissions.DeepCopy();
          }
          tmp2860.__isset.permissions = this.__isset.permissions;
          return tmp2860;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2861 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Permissions = new HashSet<string>(_set2861.Count);
                      for(int _i2862 = 0; _i2862 < _set2861.Count; ++_i2862)
                      {
                        string _elem2863;
                        _elem2863 = await iprot.ReadStringAsync(cancellationToken);
                        Permissions.Add(_elem2863);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2864 = new TStruct("relinquishPermissions_args");
            await oprot.WriteStructBeginAsync(tmp2864, cancellationToken);
            var tmp2865 = new TField();
            if(__isset.c)
            {
              tmp2865.Name = "c";
              tmp2865.Type = TType.I64;
              tmp2865.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2865, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permissions != null) && __isset.permissions)
            {
              tmp2865.Name = "permissions";
              tmp2865.Type = TType.Set;
              tmp2865.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2865, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, Permissions.Count), cancellationToken);
              foreach (string _iter2866 in Permissions)
              {
                await oprot.WriteStringAsync(_iter2866, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is relinquishPermissions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permissions == other.__isset.permissions) && ((!__isset.permissions) || (TCollections.Equals(Permissions, other.Permissions))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permissions != null) && __isset.permissions)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Permissions);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2867 = new StringBuilder("relinquishPermissions_args(");
          int tmp2868 = 0;
          if(__isset.c)
          {
            if(0 < tmp2868++) { tmp2867.Append(", "); }
            tmp2867.Append("C: ");
            C.ToString(tmp2867);
          }
          if((Permissions != null) && __isset.permissions)
          {
            if(0 < tmp2868++) { tmp2867.Append(", "); }
            tmp2867.Append("Permissions: ");
            Permissions.ToString(tmp2867);
          }
          tmp2867.Append(')');
          return tmp2867.ToString();
        }
      }


      public partial class relinquishPermissions_result : TBase
      {

        public relinquishPermissions_result()
        {
        }

        public relinquishPermissions_result DeepCopy()
        {
          var tmp2869 = new relinquishPermissions_result();
          return tmp2869;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2870 = new TStruct("relinquishPermissions_result");
            await oprot.WriteStructBeginAsync(tmp2870, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is relinquishPermissions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2871 = new StringBuilder("relinquishPermissions_result(");
          tmp2871.Append(')');
          return tmp2871.ToString();
        }
      }


      public partial class connect_args : TBase
      {
        private long _c;
        private string _hostName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string HostName
        {
          get
          {
            return _hostName;
          }
          set
          {
            __isset.hostName = true;
            this._hostName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool hostName;
        }

        public connect_args()
        {
        }

        public connect_args DeepCopy()
        {
          var tmp2873 = new connect_args();
          if(__isset.c)
          {
            tmp2873.C = this.C;
          }
          tmp2873.__isset.c = this.__isset.c;
          if((HostName != null) && __isset.hostName)
          {
            tmp2873.HostName = this.HostName;
          }
          tmp2873.__isset.hostName = this.__isset.hostName;
          return tmp2873;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HostName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2874 = new TStruct("connect_args");
            await oprot.WriteStructBeginAsync(tmp2874, cancellationToken);
            var tmp2875 = new TField();
            if(__isset.c)
            {
              tmp2875.Name = "c";
              tmp2875.Type = TType.I64;
              tmp2875.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2875, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HostName != null) && __isset.hostName)
            {
              tmp2875.Name = "hostName";
              tmp2875.Type = TType.String;
              tmp2875.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2875, cancellationToken);
              await oprot.WriteStringAsync(HostName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connect_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.hostName == other.__isset.hostName) && ((!__isset.hostName) || (global::System.Object.Equals(HostName, other.HostName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((HostName != null) && __isset.hostName)
            {
              hashcode = (hashcode * 397) + HostName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2876 = new StringBuilder("connect_args(");
          int tmp2877 = 0;
          if(__isset.c)
          {
            if(0 < tmp2877++) { tmp2876.Append(", "); }
            tmp2876.Append("C: ");
            C.ToString(tmp2876);
          }
          if((HostName != null) && __isset.hostName)
          {
            if(0 < tmp2877++) { tmp2876.Append(", "); }
            tmp2876.Append("HostName: ");
            HostName.ToString(tmp2876);
          }
          tmp2876.Append(')');
          return tmp2876.ToString();
        }
      }


      public partial class connect_result : TBase
      {

        public connect_result()
        {
        }

        public connect_result DeepCopy()
        {
          var tmp2878 = new connect_result();
          return tmp2878;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2879 = new TStruct("connect_result");
            await oprot.WriteStructBeginAsync(tmp2879, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connect_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2880 = new StringBuilder("connect_result(");
          tmp2880.Append(')');
          return tmp2880.ToString();
        }
      }


      public partial class disconnect_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public disconnect_args()
        {
        }

        public disconnect_args DeepCopy()
        {
          var tmp2882 = new disconnect_args();
          if(__isset.c)
          {
            tmp2882.C = this.C;
          }
          tmp2882.__isset.c = this.__isset.c;
          return tmp2882;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2883 = new TStruct("disconnect_args");
            await oprot.WriteStructBeginAsync(tmp2883, cancellationToken);
            var tmp2884 = new TField();
            if(__isset.c)
            {
              tmp2884.Name = "c";
              tmp2884.Type = TType.I64;
              tmp2884.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2884, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is disconnect_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2885 = new StringBuilder("disconnect_args(");
          int tmp2886 = 0;
          if(__isset.c)
          {
            if(0 < tmp2886++) { tmp2885.Append(", "); }
            tmp2885.Append("C: ");
            C.ToString(tmp2885);
          }
          tmp2885.Append(')');
          return tmp2885.ToString();
        }
      }


      public partial class disconnect_result : TBase
      {

        public disconnect_result()
        {
        }

        public disconnect_result DeepCopy()
        {
          var tmp2887 = new disconnect_result();
          return tmp2887;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2888 = new TStruct("disconnect_result");
            await oprot.WriteStructBeginAsync(tmp2888, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is disconnect_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2889 = new StringBuilder("disconnect_result(");
          tmp2889.Append(')');
          return tmp2889.ToString();
        }
      }


      public partial class subscribeEventTypes_args : TBase
      {
        private long _c;
        private HashSet<global::Yaskawa.Ext.API.ControllerEventType> _types;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.ControllerEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool types;
        }

        public subscribeEventTypes_args()
        {
        }

        public subscribeEventTypes_args DeepCopy()
        {
          var tmp2891 = new subscribeEventTypes_args();
          if(__isset.c)
          {
            tmp2891.C = this.C;
          }
          tmp2891.__isset.c = this.__isset.c;
          if((Types != null) && __isset.types)
          {
            tmp2891.Types = this.Types.DeepCopy();
          }
          tmp2891.__isset.types = this.__isset.types;
          return tmp2891;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2892 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.ControllerEventType>(_set2892.Count);
                      for(int _i2893 = 0; _i2893 < _set2892.Count; ++_i2893)
                      {
                        global::Yaskawa.Ext.API.ControllerEventType _elem2894;
                        _elem2894 = (global::Yaskawa.Ext.API.ControllerEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem2894);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2895 = new TStruct("subscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp2895, cancellationToken);
            var tmp2896 = new TField();
            if(__isset.c)
            {
              tmp2896.Name = "c";
              tmp2896.Type = TType.I64;
              tmp2896.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2896, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp2896.Name = "types";
              tmp2896.Type = TType.Set;
              tmp2896.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2896, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.ControllerEventType _iter2897 in Types)
              {
                await oprot.WriteI32Async((int)_iter2897, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2898 = new StringBuilder("subscribeEventTypes_args(");
          int tmp2899 = 0;
          if(__isset.c)
          {
            if(0 < tmp2899++) { tmp2898.Append(", "); }
            tmp2898.Append("C: ");
            C.ToString(tmp2898);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp2899++) { tmp2898.Append(", "); }
            tmp2898.Append("Types: ");
            Types.ToString(tmp2898);
          }
          tmp2898.Append(')');
          return tmp2898.ToString();
        }
      }


      public partial class subscribeEventTypes_result : TBase
      {

        public subscribeEventTypes_result()
        {
        }

        public subscribeEventTypes_result DeepCopy()
        {
          var tmp2900 = new subscribeEventTypes_result();
          return tmp2900;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2901 = new TStruct("subscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp2901, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2902 = new StringBuilder("subscribeEventTypes_result(");
          tmp2902.Append(')');
          return tmp2902.ToString();
        }
      }


      public partial class unsubscribeEventTypes_args : TBase
      {
        private long _c;
        private HashSet<global::Yaskawa.Ext.API.ControllerEventType> _types;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.ControllerEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool types;
        }

        public unsubscribeEventTypes_args()
        {
        }

        public unsubscribeEventTypes_args DeepCopy()
        {
          var tmp2904 = new unsubscribeEventTypes_args();
          if(__isset.c)
          {
            tmp2904.C = this.C;
          }
          tmp2904.__isset.c = this.__isset.c;
          if((Types != null) && __isset.types)
          {
            tmp2904.Types = this.Types.DeepCopy();
          }
          tmp2904.__isset.types = this.__isset.types;
          return tmp2904;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2905 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.ControllerEventType>(_set2905.Count);
                      for(int _i2906 = 0; _i2906 < _set2905.Count; ++_i2906)
                      {
                        global::Yaskawa.Ext.API.ControllerEventType _elem2907;
                        _elem2907 = (global::Yaskawa.Ext.API.ControllerEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem2907);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2908 = new TStruct("unsubscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp2908, cancellationToken);
            var tmp2909 = new TField();
            if(__isset.c)
            {
              tmp2909.Name = "c";
              tmp2909.Type = TType.I64;
              tmp2909.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2909, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp2909.Name = "types";
              tmp2909.Type = TType.Set;
              tmp2909.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2909, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.ControllerEventType _iter2910 in Types)
              {
                await oprot.WriteI32Async((int)_iter2910, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2911 = new StringBuilder("unsubscribeEventTypes_args(");
          int tmp2912 = 0;
          if(__isset.c)
          {
            if(0 < tmp2912++) { tmp2911.Append(", "); }
            tmp2911.Append("C: ");
            C.ToString(tmp2911);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp2912++) { tmp2911.Append(", "); }
            tmp2911.Append("Types: ");
            Types.ToString(tmp2911);
          }
          tmp2911.Append(')');
          return tmp2911.ToString();
        }
      }


      public partial class unsubscribeEventTypes_result : TBase
      {

        public unsubscribeEventTypes_result()
        {
        }

        public unsubscribeEventTypes_result DeepCopy()
        {
          var tmp2913 = new unsubscribeEventTypes_result();
          return tmp2913;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2914 = new TStruct("unsubscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp2914, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2915 = new StringBuilder("unsubscribeEventTypes_result(");
          tmp2915.Append(')');
          return tmp2915.ToString();
        }
      }


      public partial class events_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public events_args()
        {
        }

        public events_args DeepCopy()
        {
          var tmp2917 = new events_args();
          if(__isset.c)
          {
            tmp2917.C = this.C;
          }
          tmp2917.__isset.c = this.__isset.c;
          return tmp2917;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2918 = new TStruct("events_args");
            await oprot.WriteStructBeginAsync(tmp2918, cancellationToken);
            var tmp2919 = new TField();
            if(__isset.c)
            {
              tmp2919.Name = "c";
              tmp2919.Type = TType.I64;
              tmp2919.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2919, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2920 = new StringBuilder("events_args(");
          int tmp2921 = 0;
          if(__isset.c)
          {
            if(0 < tmp2921++) { tmp2920.Append(", "); }
            tmp2920.Append("C: ");
            C.ToString(tmp2920);
          }
          tmp2920.Append(')');
          return tmp2920.ToString();
        }
      }


      public partial class events_result : TBase
      {
        private List<global::Yaskawa.Ext.API.ControllerEvent> _success;

        public List<global::Yaskawa.Ext.API.ControllerEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public events_result()
        {
        }

        public events_result DeepCopy()
        {
          var tmp2922 = new events_result();
          if((Success != null) && __isset.success)
          {
            tmp2922.Success = this.Success.DeepCopy();
          }
          tmp2922.__isset.success = this.__isset.success;
          return tmp2922;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list2923 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.ControllerEvent>(_list2923.Count);
                      for(int _i2924 = 0; _i2924 < _list2923.Count; ++_i2924)
                      {
                        global::Yaskawa.Ext.API.ControllerEvent _elem2925;
                        _elem2925 = new global::Yaskawa.Ext.API.ControllerEvent();
                        await _elem2925.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem2925);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2926 = new TStruct("events_result");
            await oprot.WriteStructBeginAsync(tmp2926, cancellationToken);
            var tmp2927 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2927.Name = "Success";
                tmp2927.Type = TType.List;
                tmp2927.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2927, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.ControllerEvent _iter2928 in Success)
                {
                  await _iter2928.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2929 = new StringBuilder("events_result(");
          int tmp2930 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2930++) { tmp2929.Append(", "); }
            tmp2929.Append("Success: ");
            Success.ToString(tmp2929);
          }
          tmp2929.Append(')');
          return tmp2929.ToString();
        }
      }


      public partial class connected_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public connected_args()
        {
        }

        public connected_args DeepCopy()
        {
          var tmp2931 = new connected_args();
          if(__isset.c)
          {
            tmp2931.C = this.C;
          }
          tmp2931.__isset.c = this.__isset.c;
          return tmp2931;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2932 = new TStruct("connected_args");
            await oprot.WriteStructBeginAsync(tmp2932, cancellationToken);
            var tmp2933 = new TField();
            if(__isset.c)
            {
              tmp2933.Name = "c";
              tmp2933.Type = TType.I64;
              tmp2933.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2933, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connected_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2934 = new StringBuilder("connected_args(");
          int tmp2935 = 0;
          if(__isset.c)
          {
            if(0 < tmp2935++) { tmp2934.Append(", "); }
            tmp2934.Append("C: ");
            C.ToString(tmp2934);
          }
          tmp2934.Append(')');
          return tmp2934.ToString();
        }
      }


      public partial class connected_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public connected_result()
        {
        }

        public connected_result DeepCopy()
        {
          var tmp2936 = new connected_result();
          if(__isset.success)
          {
            tmp2936.Success = this.Success;
          }
          tmp2936.__isset.success = this.__isset.success;
          return tmp2936;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2937 = new TStruct("connected_result");
            await oprot.WriteStructBeginAsync(tmp2937, cancellationToken);
            var tmp2938 = new TField();

            if(this.__isset.success)
            {
              tmp2938.Name = "Success";
              tmp2938.Type = TType.Bool;
              tmp2938.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2938, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connected_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2939 = new StringBuilder("connected_result(");
          int tmp2940 = 0;
          if(__isset.success)
          {
            if(0 < tmp2940++) { tmp2939.Append(", "); }
            tmp2939.Append("Success: ");
            Success.ToString(tmp2939);
          }
          tmp2939.Append(')');
          return tmp2939.ToString();
        }
      }


      public partial class connectedHostName_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public connectedHostName_args()
        {
        }

        public connectedHostName_args DeepCopy()
        {
          var tmp2941 = new connectedHostName_args();
          if(__isset.c)
          {
            tmp2941.C = this.C;
          }
          tmp2941.__isset.c = this.__isset.c;
          return tmp2941;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2942 = new TStruct("connectedHostName_args");
            await oprot.WriteStructBeginAsync(tmp2942, cancellationToken);
            var tmp2943 = new TField();
            if(__isset.c)
            {
              tmp2943.Name = "c";
              tmp2943.Type = TType.I64;
              tmp2943.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2943, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connectedHostName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2944 = new StringBuilder("connectedHostName_args(");
          int tmp2945 = 0;
          if(__isset.c)
          {
            if(0 < tmp2945++) { tmp2944.Append(", "); }
            tmp2944.Append("C: ");
            C.ToString(tmp2944);
          }
          tmp2944.Append(')');
          return tmp2944.ToString();
        }
      }


      public partial class connectedHostName_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public connectedHostName_result()
        {
        }

        public connectedHostName_result DeepCopy()
        {
          var tmp2946 = new connectedHostName_result();
          if((Success != null) && __isset.success)
          {
            tmp2946.Success = this.Success;
          }
          tmp2946.__isset.success = this.__isset.success;
          return tmp2946;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2947 = new TStruct("connectedHostName_result");
            await oprot.WriteStructBeginAsync(tmp2947, cancellationToken);
            var tmp2948 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2948.Name = "Success";
                tmp2948.Type = TType.String;
                tmp2948.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2948, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connectedHostName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2949 = new StringBuilder("connectedHostName_result(");
          int tmp2950 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2950++) { tmp2949.Append(", "); }
            tmp2949.Append("Success: ");
            Success.ToString(tmp2949);
          }
          tmp2949.Append(')');
          return tmp2949.ToString();
        }
      }


      public partial class softwareVersion_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public softwareVersion_args()
        {
        }

        public softwareVersion_args DeepCopy()
        {
          var tmp2951 = new softwareVersion_args();
          if(__isset.c)
          {
            tmp2951.C = this.C;
          }
          tmp2951.__isset.c = this.__isset.c;
          return tmp2951;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2952 = new TStruct("softwareVersion_args");
            await oprot.WriteStructBeginAsync(tmp2952, cancellationToken);
            var tmp2953 = new TField();
            if(__isset.c)
            {
              tmp2953.Name = "c";
              tmp2953.Type = TType.I64;
              tmp2953.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2953, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is softwareVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2954 = new StringBuilder("softwareVersion_args(");
          int tmp2955 = 0;
          if(__isset.c)
          {
            if(0 < tmp2955++) { tmp2954.Append(", "); }
            tmp2954.Append("C: ");
            C.ToString(tmp2954);
          }
          tmp2954.Append(')');
          return tmp2954.ToString();
        }
      }


      public partial class softwareVersion_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public softwareVersion_result()
        {
        }

        public softwareVersion_result DeepCopy()
        {
          var tmp2956 = new softwareVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp2956.Success = this.Success;
          }
          tmp2956.__isset.success = this.__isset.success;
          return tmp2956;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2957 = new TStruct("softwareVersion_result");
            await oprot.WriteStructBeginAsync(tmp2957, cancellationToken);
            var tmp2958 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2958.Name = "Success";
                tmp2958.Type = TType.String;
                tmp2958.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2958, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is softwareVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2959 = new StringBuilder("softwareVersion_result(");
          int tmp2960 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2960++) { tmp2959.Append(", "); }
            tmp2959.Append("Success: ");
            Success.ToString(tmp2959);
          }
          tmp2959.Append(')');
          return tmp2959.ToString();
        }
      }


      public partial class monitoring_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public monitoring_args()
        {
        }

        public monitoring_args DeepCopy()
        {
          var tmp2961 = new monitoring_args();
          if(__isset.c)
          {
            tmp2961.C = this.C;
          }
          tmp2961.__isset.c = this.__isset.c;
          return tmp2961;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2962 = new TStruct("monitoring_args");
            await oprot.WriteStructBeginAsync(tmp2962, cancellationToken);
            var tmp2963 = new TField();
            if(__isset.c)
            {
              tmp2963.Name = "c";
              tmp2963.Type = TType.I64;
              tmp2963.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2963, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitoring_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2964 = new StringBuilder("monitoring_args(");
          int tmp2965 = 0;
          if(__isset.c)
          {
            if(0 < tmp2965++) { tmp2964.Append(", "); }
            tmp2964.Append("C: ");
            C.ToString(tmp2964);
          }
          tmp2964.Append(')');
          return tmp2964.ToString();
        }
      }


      public partial class monitoring_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public monitoring_result()
        {
        }

        public monitoring_result DeepCopy()
        {
          var tmp2966 = new monitoring_result();
          if(__isset.success)
          {
            tmp2966.Success = this.Success;
          }
          tmp2966.__isset.success = this.__isset.success;
          return tmp2966;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2967 = new TStruct("monitoring_result");
            await oprot.WriteStructBeginAsync(tmp2967, cancellationToken);
            var tmp2968 = new TField();

            if(this.__isset.success)
            {
              tmp2968.Name = "Success";
              tmp2968.Type = TType.Bool;
              tmp2968.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2968, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitoring_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2969 = new StringBuilder("monitoring_result(");
          int tmp2970 = 0;
          if(__isset.success)
          {
            if(0 < tmp2970++) { tmp2969.Append(", "); }
            tmp2969.Append("Success: ");
            Success.ToString(tmp2969);
          }
          tmp2969.Append(')');
          return tmp2969.ToString();
        }
      }


      public partial class haveExclusiveControl_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public haveExclusiveControl_args()
        {
        }

        public haveExclusiveControl_args DeepCopy()
        {
          var tmp2971 = new haveExclusiveControl_args();
          if(__isset.c)
          {
            tmp2971.C = this.C;
          }
          tmp2971.__isset.c = this.__isset.c;
          return tmp2971;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2972 = new TStruct("haveExclusiveControl_args");
            await oprot.WriteStructBeginAsync(tmp2972, cancellationToken);
            var tmp2973 = new TField();
            if(__isset.c)
            {
              tmp2973.Name = "c";
              tmp2973.Type = TType.I64;
              tmp2973.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2973, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is haveExclusiveControl_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2974 = new StringBuilder("haveExclusiveControl_args(");
          int tmp2975 = 0;
          if(__isset.c)
          {
            if(0 < tmp2975++) { tmp2974.Append(", "); }
            tmp2974.Append("C: ");
            C.ToString(tmp2974);
          }
          tmp2974.Append(')');
          return tmp2974.ToString();
        }
      }


      public partial class haveExclusiveControl_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public haveExclusiveControl_result()
        {
        }

        public haveExclusiveControl_result DeepCopy()
        {
          var tmp2976 = new haveExclusiveControl_result();
          if(__isset.success)
          {
            tmp2976.Success = this.Success;
          }
          tmp2976.__isset.success = this.__isset.success;
          return tmp2976;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2977 = new TStruct("haveExclusiveControl_result");
            await oprot.WriteStructBeginAsync(tmp2977, cancellationToken);
            var tmp2978 = new TField();

            if(this.__isset.success)
            {
              tmp2978.Name = "Success";
              tmp2978.Type = TType.Bool;
              tmp2978.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2978, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is haveExclusiveControl_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2979 = new StringBuilder("haveExclusiveControl_result(");
          int tmp2980 = 0;
          if(__isset.success)
          {
            if(0 < tmp2980++) { tmp2979.Append(", "); }
            tmp2979.Append("Success: ");
            Success.ToString(tmp2979);
          }
          tmp2979.Append(')');
          return tmp2979.ToString();
        }
      }


      public partial class operationMode_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public operationMode_args()
        {
        }

        public operationMode_args DeepCopy()
        {
          var tmp2981 = new operationMode_args();
          if(__isset.c)
          {
            tmp2981.C = this.C;
          }
          tmp2981.__isset.c = this.__isset.c;
          return tmp2981;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2982 = new TStruct("operationMode_args");
            await oprot.WriteStructBeginAsync(tmp2982, cancellationToken);
            var tmp2983 = new TField();
            if(__isset.c)
            {
              tmp2983.Name = "c";
              tmp2983.Type = TType.I64;
              tmp2983.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2983, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is operationMode_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2984 = new StringBuilder("operationMode_args(");
          int tmp2985 = 0;
          if(__isset.c)
          {
            if(0 < tmp2985++) { tmp2984.Append(", "); }
            tmp2984.Append("C: ");
            C.ToString(tmp2984);
          }
          tmp2984.Append(')');
          return tmp2984.ToString();
        }
      }


      public partial class operationMode_result : TBase
      {
        private global::Yaskawa.Ext.API.OperationMode _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.OperationMode"/>
        /// </summary>
        public global::Yaskawa.Ext.API.OperationMode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public operationMode_result()
        {
        }

        public operationMode_result DeepCopy()
        {
          var tmp2986 = new operationMode_result();
          if(__isset.success)
          {
            tmp2986.Success = this.Success;
          }
          tmp2986.__isset.success = this.__isset.success;
          return tmp2986;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.OperationMode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2987 = new TStruct("operationMode_result");
            await oprot.WriteStructBeginAsync(tmp2987, cancellationToken);
            var tmp2988 = new TField();

            if(this.__isset.success)
            {
              tmp2988.Name = "Success";
              tmp2988.Type = TType.I32;
              tmp2988.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2988, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is operationMode_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2989 = new StringBuilder("operationMode_result(");
          int tmp2990 = 0;
          if(__isset.success)
          {
            if(0 < tmp2990++) { tmp2989.Append(", "); }
            tmp2989.Append("Success: ");
            Success.ToString(tmp2989);
          }
          tmp2989.Append(')');
          return tmp2989.ToString();
        }
      }


      public partial class servoState_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public servoState_args()
        {
        }

        public servoState_args DeepCopy()
        {
          var tmp2991 = new servoState_args();
          if(__isset.c)
          {
            tmp2991.C = this.C;
          }
          tmp2991.__isset.c = this.__isset.c;
          return tmp2991;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2992 = new TStruct("servoState_args");
            await oprot.WriteStructBeginAsync(tmp2992, cancellationToken);
            var tmp2993 = new TField();
            if(__isset.c)
            {
              tmp2993.Name = "c";
              tmp2993.Type = TType.I64;
              tmp2993.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2993, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is servoState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2994 = new StringBuilder("servoState_args(");
          int tmp2995 = 0;
          if(__isset.c)
          {
            if(0 < tmp2995++) { tmp2994.Append(", "); }
            tmp2994.Append("C: ");
            C.ToString(tmp2994);
          }
          tmp2994.Append(')');
          return tmp2994.ToString();
        }
      }


      public partial class servoState_result : TBase
      {
        private global::Yaskawa.Ext.API.ServoState _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.ServoState"/>
        /// </summary>
        public global::Yaskawa.Ext.API.ServoState Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public servoState_result()
        {
        }

        public servoState_result DeepCopy()
        {
          var tmp2996 = new servoState_result();
          if(__isset.success)
          {
            tmp2996.Success = this.Success;
          }
          tmp2996.__isset.success = this.__isset.success;
          return tmp2996;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.ServoState)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2997 = new TStruct("servoState_result");
            await oprot.WriteStructBeginAsync(tmp2997, cancellationToken);
            var tmp2998 = new TField();

            if(this.__isset.success)
            {
              tmp2998.Name = "Success";
              tmp2998.Type = TType.I32;
              tmp2998.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2998, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is servoState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2999 = new StringBuilder("servoState_result(");
          int tmp3000 = 0;
          if(__isset.success)
          {
            if(0 < tmp3000++) { tmp2999.Append(", "); }
            tmp2999.Append("Success: ");
            Success.ToString(tmp2999);
          }
          tmp2999.Append(')');
          return tmp2999.ToString();
        }
      }


      public partial class playbackState_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public playbackState_args()
        {
        }

        public playbackState_args DeepCopy()
        {
          var tmp3001 = new playbackState_args();
          if(__isset.c)
          {
            tmp3001.C = this.C;
          }
          tmp3001.__isset.c = this.__isset.c;
          return tmp3001;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3002 = new TStruct("playbackState_args");
            await oprot.WriteStructBeginAsync(tmp3002, cancellationToken);
            var tmp3003 = new TField();
            if(__isset.c)
            {
              tmp3003.Name = "c";
              tmp3003.Type = TType.I64;
              tmp3003.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3003, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3004 = new StringBuilder("playbackState_args(");
          int tmp3005 = 0;
          if(__isset.c)
          {
            if(0 < tmp3005++) { tmp3004.Append(", "); }
            tmp3004.Append("C: ");
            C.ToString(tmp3004);
          }
          tmp3004.Append(')');
          return tmp3004.ToString();
        }
      }


      public partial class playbackState_result : TBase
      {
        private global::Yaskawa.Ext.API.PlaybackState _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackState"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackState Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public playbackState_result()
        {
        }

        public playbackState_result DeepCopy()
        {
          var tmp3006 = new playbackState_result();
          if(__isset.success)
          {
            tmp3006.Success = this.Success;
          }
          tmp3006.__isset.success = this.__isset.success;
          return tmp3006;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.PlaybackState)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3007 = new TStruct("playbackState_result");
            await oprot.WriteStructBeginAsync(tmp3007, cancellationToken);
            var tmp3008 = new TField();

            if(this.__isset.success)
            {
              tmp3008.Name = "Success";
              tmp3008.Type = TType.I32;
              tmp3008.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3008, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3009 = new StringBuilder("playbackState_result(");
          int tmp3010 = 0;
          if(__isset.success)
          {
            if(0 < tmp3010++) { tmp3009.Append(", "); }
            tmp3009.Append("Success: ");
            Success.ToString(tmp3009);
          }
          tmp3009.Append(')');
          return tmp3009.ToString();
        }
      }


      public partial class playbackCycle_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public playbackCycle_args()
        {
        }

        public playbackCycle_args DeepCopy()
        {
          var tmp3011 = new playbackCycle_args();
          if(__isset.c)
          {
            tmp3011.C = this.C;
          }
          tmp3011.__isset.c = this.__isset.c;
          return tmp3011;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3012 = new TStruct("playbackCycle_args");
            await oprot.WriteStructBeginAsync(tmp3012, cancellationToken);
            var tmp3013 = new TField();
            if(__isset.c)
            {
              tmp3013.Name = "c";
              tmp3013.Type = TType.I64;
              tmp3013.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3013, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackCycle_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3014 = new StringBuilder("playbackCycle_args(");
          int tmp3015 = 0;
          if(__isset.c)
          {
            if(0 < tmp3015++) { tmp3014.Append(", "); }
            tmp3014.Append("C: ");
            C.ToString(tmp3014);
          }
          tmp3014.Append(')');
          return tmp3014.ToString();
        }
      }


      public partial class playbackCycle_result : TBase
      {
        private global::Yaskawa.Ext.API.PlaybackCycle _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackCycle"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackCycle Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public playbackCycle_result()
        {
        }

        public playbackCycle_result DeepCopy()
        {
          var tmp3016 = new playbackCycle_result();
          if(__isset.success)
          {
            tmp3016.Success = this.Success;
          }
          tmp3016.__isset.success = this.__isset.success;
          return tmp3016;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.PlaybackCycle)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3017 = new TStruct("playbackCycle_result");
            await oprot.WriteStructBeginAsync(tmp3017, cancellationToken);
            var tmp3018 = new TField();

            if(this.__isset.success)
            {
              tmp3018.Name = "Success";
              tmp3018.Type = TType.I32;
              tmp3018.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3018, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackCycle_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3019 = new StringBuilder("playbackCycle_result(");
          int tmp3020 = 0;
          if(__isset.success)
          {
            if(0 < tmp3020++) { tmp3019.Append(", "); }
            tmp3019.Append("Success: ");
            Success.ToString(tmp3019);
          }
          tmp3019.Append(')');
          return tmp3019.ToString();
        }
      }


      public partial class setPlaybackCycle_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.PlaybackCycle _cycle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackCycle"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackCycle Cycle
        {
          get
          {
            return _cycle;
          }
          set
          {
            __isset.cycle = true;
            this._cycle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool cycle;
        }

        public setPlaybackCycle_args()
        {
        }

        public setPlaybackCycle_args DeepCopy()
        {
          var tmp3021 = new setPlaybackCycle_args();
          if(__isset.c)
          {
            tmp3021.C = this.C;
          }
          tmp3021.__isset.c = this.__isset.c;
          if(__isset.cycle)
          {
            tmp3021.Cycle = this.Cycle;
          }
          tmp3021.__isset.cycle = this.__isset.cycle;
          return tmp3021;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Cycle = (global::Yaskawa.Ext.API.PlaybackCycle)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3022 = new TStruct("setPlaybackCycle_args");
            await oprot.WriteStructBeginAsync(tmp3022, cancellationToken);
            var tmp3023 = new TField();
            if(__isset.c)
            {
              tmp3023.Name = "c";
              tmp3023.Type = TType.I64;
              tmp3023.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3023, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.cycle)
            {
              tmp3023.Name = "cycle";
              tmp3023.Type = TType.I32;
              tmp3023.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3023, cancellationToken);
              await oprot.WriteI32Async((int)Cycle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setPlaybackCycle_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.cycle == other.__isset.cycle) && ((!__isset.cycle) || (global::System.Object.Equals(Cycle, other.Cycle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.cycle)
            {
              hashcode = (hashcode * 397) + Cycle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3024 = new StringBuilder("setPlaybackCycle_args(");
          int tmp3025 = 0;
          if(__isset.c)
          {
            if(0 < tmp3025++) { tmp3024.Append(", "); }
            tmp3024.Append("C: ");
            C.ToString(tmp3024);
          }
          if(__isset.cycle)
          {
            if(0 < tmp3025++) { tmp3024.Append(", "); }
            tmp3024.Append("Cycle: ");
            Cycle.ToString(tmp3024);
          }
          tmp3024.Append(')');
          return tmp3024.ToString();
        }
      }


      public partial class setPlaybackCycle_result : TBase
      {

        public setPlaybackCycle_result()
        {
        }

        public setPlaybackCycle_result DeepCopy()
        {
          var tmp3026 = new setPlaybackCycle_result();
          return tmp3026;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3027 = new TStruct("setPlaybackCycle_result");
            await oprot.WriteStructBeginAsync(tmp3027, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setPlaybackCycle_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3028 = new StringBuilder("setPlaybackCycle_result(");
          tmp3028.Append(')');
          return tmp3028.ToString();
        }
      }


      public partial class run_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public run_args()
        {
        }

        public run_args DeepCopy()
        {
          var tmp3030 = new run_args();
          if(__isset.c)
          {
            tmp3030.C = this.C;
          }
          tmp3030.__isset.c = this.__isset.c;
          return tmp3030;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3031 = new TStruct("run_args");
            await oprot.WriteStructBeginAsync(tmp3031, cancellationToken);
            var tmp3032 = new TField();
            if(__isset.c)
            {
              tmp3032.Name = "c";
              tmp3032.Type = TType.I64;
              tmp3032.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3032, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is run_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3033 = new StringBuilder("run_args(");
          int tmp3034 = 0;
          if(__isset.c)
          {
            if(0 < tmp3034++) { tmp3033.Append(", "); }
            tmp3033.Append("C: ");
            C.ToString(tmp3033);
          }
          tmp3033.Append(')');
          return tmp3033.ToString();
        }
      }


      public partial class run_result : TBase
      {

        public run_result()
        {
        }

        public run_result DeepCopy()
        {
          var tmp3035 = new run_result();
          return tmp3035;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3036 = new TStruct("run_result");
            await oprot.WriteStructBeginAsync(tmp3036, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is run_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3037 = new StringBuilder("run_result(");
          tmp3037.Append(')');
          return tmp3037.ToString();
        }
      }


      public partial class pause_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public pause_args()
        {
        }

        public pause_args DeepCopy()
        {
          var tmp3039 = new pause_args();
          if(__isset.c)
          {
            tmp3039.C = this.C;
          }
          tmp3039.__isset.c = this.__isset.c;
          return tmp3039;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3040 = new TStruct("pause_args");
            await oprot.WriteStructBeginAsync(tmp3040, cancellationToken);
            var tmp3041 = new TField();
            if(__isset.c)
            {
              tmp3041.Name = "c";
              tmp3041.Type = TType.I64;
              tmp3041.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3041, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pause_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3042 = new StringBuilder("pause_args(");
          int tmp3043 = 0;
          if(__isset.c)
          {
            if(0 < tmp3043++) { tmp3042.Append(", "); }
            tmp3042.Append("C: ");
            C.ToString(tmp3042);
          }
          tmp3042.Append(')');
          return tmp3042.ToString();
        }
      }


      public partial class pause_result : TBase
      {

        public pause_result()
        {
        }

        public pause_result DeepCopy()
        {
          var tmp3044 = new pause_result();
          return tmp3044;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3045 = new TStruct("pause_result");
            await oprot.WriteStructBeginAsync(tmp3045, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pause_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3046 = new StringBuilder("pause_result(");
          tmp3046.Append(')');
          return tmp3046.ToString();
        }
      }


      public partial class resume_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public resume_args()
        {
        }

        public resume_args DeepCopy()
        {
          var tmp3048 = new resume_args();
          if(__isset.c)
          {
            tmp3048.C = this.C;
          }
          tmp3048.__isset.c = this.__isset.c;
          return tmp3048;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3049 = new TStruct("resume_args");
            await oprot.WriteStructBeginAsync(tmp3049, cancellationToken);
            var tmp3050 = new TField();
            if(__isset.c)
            {
              tmp3050.Name = "c";
              tmp3050.Type = TType.I64;
              tmp3050.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3050, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resume_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3051 = new StringBuilder("resume_args(");
          int tmp3052 = 0;
          if(__isset.c)
          {
            if(0 < tmp3052++) { tmp3051.Append(", "); }
            tmp3051.Append("C: ");
            C.ToString(tmp3051);
          }
          tmp3051.Append(')');
          return tmp3051.ToString();
        }
      }


      public partial class resume_result : TBase
      {

        public resume_result()
        {
        }

        public resume_result DeepCopy()
        {
          var tmp3053 = new resume_result();
          return tmp3053;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3054 = new TStruct("resume_result");
            await oprot.WriteStructBeginAsync(tmp3054, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resume_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3055 = new StringBuilder("resume_result(");
          tmp3055.Append(')');
          return tmp3055.ToString();
        }
      }


      public partial class stop_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public stop_args()
        {
        }

        public stop_args DeepCopy()
        {
          var tmp3057 = new stop_args();
          if(__isset.c)
          {
            tmp3057.C = this.C;
          }
          tmp3057.__isset.c = this.__isset.c;
          return tmp3057;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3058 = new TStruct("stop_args");
            await oprot.WriteStructBeginAsync(tmp3058, cancellationToken);
            var tmp3059 = new TField();
            if(__isset.c)
            {
              tmp3059.Name = "c";
              tmp3059.Type = TType.I64;
              tmp3059.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3059, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stop_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3060 = new StringBuilder("stop_args(");
          int tmp3061 = 0;
          if(__isset.c)
          {
            if(0 < tmp3061++) { tmp3060.Append(", "); }
            tmp3060.Append("C: ");
            C.ToString(tmp3060);
          }
          tmp3060.Append(')');
          return tmp3060.ToString();
        }
      }


      public partial class stop_result : TBase
      {

        public stop_result()
        {
        }

        public stop_result DeepCopy()
        {
          var tmp3062 = new stop_result();
          return tmp3062;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3063 = new TStruct("stop_result");
            await oprot.WriteStructBeginAsync(tmp3063, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stop_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3064 = new StringBuilder("stop_result(");
          tmp3064.Append(')');
          return tmp3064.ToString();
        }
      }


      public partial class currentJob_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentJob_args()
        {
        }

        public currentJob_args DeepCopy()
        {
          var tmp3066 = new currentJob_args();
          if(__isset.c)
          {
            tmp3066.C = this.C;
          }
          tmp3066.__isset.c = this.__isset.c;
          return tmp3066;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3067 = new TStruct("currentJob_args");
            await oprot.WriteStructBeginAsync(tmp3067, cancellationToken);
            var tmp3068 = new TField();
            if(__isset.c)
            {
              tmp3068.Name = "c";
              tmp3068.Type = TType.I64;
              tmp3068.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3068, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3069 = new StringBuilder("currentJob_args(");
          int tmp3070 = 0;
          if(__isset.c)
          {
            if(0 < tmp3070++) { tmp3069.Append(", "); }
            tmp3069.Append("C: ");
            C.ToString(tmp3069);
          }
          tmp3069.Append(')');
          return tmp3069.ToString();
        }
      }


      public partial class currentJob_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentJob_result()
        {
        }

        public currentJob_result DeepCopy()
        {
          var tmp3071 = new currentJob_result();
          if((Success != null) && __isset.success)
          {
            tmp3071.Success = this.Success;
          }
          tmp3071.__isset.success = this.__isset.success;
          return tmp3071;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3072 = new TStruct("currentJob_result");
            await oprot.WriteStructBeginAsync(tmp3072, cancellationToken);
            var tmp3073 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3073.Name = "Success";
                tmp3073.Type = TType.String;
                tmp3073.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3073, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3074 = new StringBuilder("currentJob_result(");
          int tmp3075 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3075++) { tmp3074.Append(", "); }
            tmp3074.Append("Success: ");
            Success.ToString(tmp3074);
          }
          tmp3074.Append(')');
          return tmp3074.ToString();
        }
      }


      public partial class setCurrentJob_args : TBase
      {
        private long _c;
        private string _name;
        private int _line;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public int Line
        {
          get
          {
            return _line;
          }
          set
          {
            __isset.line = true;
            this._line = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool line;
        }

        public setCurrentJob_args()
        {
        }

        public setCurrentJob_args DeepCopy()
        {
          var tmp3076 = new setCurrentJob_args();
          if(__isset.c)
          {
            tmp3076.C = this.C;
          }
          tmp3076.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3076.Name = this.Name;
          }
          tmp3076.__isset.name = this.__isset.name;
          if(__isset.line)
          {
            tmp3076.Line = this.Line;
          }
          tmp3076.__isset.line = this.__isset.line;
          return tmp3076;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Line = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3077 = new TStruct("setCurrentJob_args");
            await oprot.WriteStructBeginAsync(tmp3077, cancellationToken);
            var tmp3078 = new TField();
            if(__isset.c)
            {
              tmp3078.Name = "c";
              tmp3078.Type = TType.I64;
              tmp3078.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3078, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3078.Name = "name";
              tmp3078.Type = TType.String;
              tmp3078.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3078, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.line)
            {
              tmp3078.Name = "line";
              tmp3078.Type = TType.I32;
              tmp3078.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3078, cancellationToken);
              await oprot.WriteI32Async(Line, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setCurrentJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.line == other.__isset.line) && ((!__isset.line) || (global::System.Object.Equals(Line, other.Line))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if(__isset.line)
            {
              hashcode = (hashcode * 397) + Line.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3079 = new StringBuilder("setCurrentJob_args(");
          int tmp3080 = 0;
          if(__isset.c)
          {
            if(0 < tmp3080++) { tmp3079.Append(", "); }
            tmp3079.Append("C: ");
            C.ToString(tmp3079);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3080++) { tmp3079.Append(", "); }
            tmp3079.Append("Name: ");
            Name.ToString(tmp3079);
          }
          if(__isset.line)
          {
            if(0 < tmp3080++) { tmp3079.Append(", "); }
            tmp3079.Append("Line: ");
            Line.ToString(tmp3079);
          }
          tmp3079.Append(')');
          return tmp3079.ToString();
        }
      }


      public partial class setCurrentJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setCurrentJob_result()
        {
        }

        public setCurrentJob_result DeepCopy()
        {
          var tmp3081 = new setCurrentJob_result();
          if((E != null) && __isset.e)
          {
            tmp3081.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3081.__isset.e = this.__isset.e;
          return tmp3081;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3082 = new TStruct("setCurrentJob_result");
            await oprot.WriteStructBeginAsync(tmp3082, cancellationToken);
            var tmp3083 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3083.Name = "E";
                tmp3083.Type = TType.Struct;
                tmp3083.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3083, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setCurrentJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3084 = new StringBuilder("setCurrentJob_result(");
          int tmp3085 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3085++) { tmp3084.Append(", "); }
            tmp3084.Append("E: ");
            E.ToString(tmp3084);
          }
          tmp3084.Append(')');
          return tmp3084.ToString();
        }
      }


      public partial class currentJobLine_args : TBase
      {
        private long _c;
        private int _taskNo;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int TaskNo
        {
          get
          {
            return _taskNo;
          }
          set
          {
            __isset.taskNo = true;
            this._taskNo = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool taskNo;
        }

        public currentJobLine_args()
        {
        }

        public currentJobLine_args DeepCopy()
        {
          var tmp3086 = new currentJobLine_args();
          if(__isset.c)
          {
            tmp3086.C = this.C;
          }
          tmp3086.__isset.c = this.__isset.c;
          if(__isset.taskNo)
          {
            tmp3086.TaskNo = this.TaskNo;
          }
          tmp3086.__isset.taskNo = this.__isset.taskNo;
          return tmp3086;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    TaskNo = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3087 = new TStruct("currentJobLine_args");
            await oprot.WriteStructBeginAsync(tmp3087, cancellationToken);
            var tmp3088 = new TField();
            if(__isset.c)
            {
              tmp3088.Name = "c";
              tmp3088.Type = TType.I64;
              tmp3088.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3088, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.taskNo)
            {
              tmp3088.Name = "taskNo";
              tmp3088.Type = TType.I32;
              tmp3088.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3088, cancellationToken);
              await oprot.WriteI32Async(TaskNo, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJobLine_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.taskNo == other.__isset.taskNo) && ((!__isset.taskNo) || (global::System.Object.Equals(TaskNo, other.TaskNo))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.taskNo)
            {
              hashcode = (hashcode * 397) + TaskNo.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3089 = new StringBuilder("currentJobLine_args(");
          int tmp3090 = 0;
          if(__isset.c)
          {
            if(0 < tmp3090++) { tmp3089.Append(", "); }
            tmp3089.Append("C: ");
            C.ToString(tmp3089);
          }
          if(__isset.taskNo)
          {
            if(0 < tmp3090++) { tmp3089.Append(", "); }
            tmp3089.Append("TaskNo: ");
            TaskNo.ToString(tmp3089);
          }
          tmp3089.Append(')');
          return tmp3089.ToString();
        }
      }


      public partial class currentJobLine_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentJobLine_result()
        {
        }

        public currentJobLine_result DeepCopy()
        {
          var tmp3091 = new currentJobLine_result();
          if(__isset.success)
          {
            tmp3091.Success = this.Success;
          }
          tmp3091.__isset.success = this.__isset.success;
          return tmp3091;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3092 = new TStruct("currentJobLine_result");
            await oprot.WriteStructBeginAsync(tmp3092, cancellationToken);
            var tmp3093 = new TField();

            if(this.__isset.success)
            {
              tmp3093.Name = "Success";
              tmp3093.Type = TType.I32;
              tmp3093.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3093, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJobLine_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3094 = new StringBuilder("currentJobLine_result(");
          int tmp3095 = 0;
          if(__isset.success)
          {
            if(0 < tmp3095++) { tmp3094.Append(", "); }
            tmp3094.Append("Success: ");
            Success.ToString(tmp3094);
          }
          tmp3094.Append(')');
          return tmp3094.ToString();
        }
      }


      public partial class defaultJob_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public defaultJob_args()
        {
        }

        public defaultJob_args DeepCopy()
        {
          var tmp3096 = new defaultJob_args();
          if(__isset.c)
          {
            tmp3096.C = this.C;
          }
          tmp3096.__isset.c = this.__isset.c;
          return tmp3096;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3097 = new TStruct("defaultJob_args");
            await oprot.WriteStructBeginAsync(tmp3097, cancellationToken);
            var tmp3098 = new TField();
            if(__isset.c)
            {
              tmp3098.Name = "c";
              tmp3098.Type = TType.I64;
              tmp3098.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3098, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is defaultJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3099 = new StringBuilder("defaultJob_args(");
          int tmp3100 = 0;
          if(__isset.c)
          {
            if(0 < tmp3100++) { tmp3099.Append(", "); }
            tmp3099.Append("C: ");
            C.ToString(tmp3099);
          }
          tmp3099.Append(')');
          return tmp3099.ToString();
        }
      }


      public partial class defaultJob_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public defaultJob_result()
        {
        }

        public defaultJob_result DeepCopy()
        {
          var tmp3101 = new defaultJob_result();
          if((Success != null) && __isset.success)
          {
            tmp3101.Success = this.Success;
          }
          tmp3101.__isset.success = this.__isset.success;
          return tmp3101;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3102 = new TStruct("defaultJob_result");
            await oprot.WriteStructBeginAsync(tmp3102, cancellationToken);
            var tmp3103 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3103.Name = "Success";
                tmp3103.Type = TType.String;
                tmp3103.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3103, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is defaultJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3104 = new StringBuilder("defaultJob_result(");
          int tmp3105 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3105++) { tmp3104.Append(", "); }
            tmp3104.Append("Success: ");
            Success.ToString(tmp3104);
          }
          tmp3104.Append(')');
          return tmp3104.ToString();
        }
      }


      public partial class jobExists_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobExists_args()
        {
        }

        public jobExists_args DeepCopy()
        {
          var tmp3106 = new jobExists_args();
          if(__isset.c)
          {
            tmp3106.C = this.C;
          }
          tmp3106.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3106.Name = this.Name;
          }
          tmp3106.__isset.name = this.__isset.name;
          return tmp3106;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3107 = new TStruct("jobExists_args");
            await oprot.WriteStructBeginAsync(tmp3107, cancellationToken);
            var tmp3108 = new TField();
            if(__isset.c)
            {
              tmp3108.Name = "c";
              tmp3108.Type = TType.I64;
              tmp3108.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3108, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3108.Name = "name";
              tmp3108.Type = TType.String;
              tmp3108.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3108, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobExists_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3109 = new StringBuilder("jobExists_args(");
          int tmp3110 = 0;
          if(__isset.c)
          {
            if(0 < tmp3110++) { tmp3109.Append(", "); }
            tmp3109.Append("C: ");
            C.ToString(tmp3109);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3110++) { tmp3109.Append(", "); }
            tmp3109.Append("Name: ");
            Name.ToString(tmp3109);
          }
          tmp3109.Append(')');
          return tmp3109.ToString();
        }
      }


      public partial class jobExists_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jobExists_result()
        {
        }

        public jobExists_result DeepCopy()
        {
          var tmp3111 = new jobExists_result();
          if(__isset.success)
          {
            tmp3111.Success = this.Success;
          }
          tmp3111.__isset.success = this.__isset.success;
          return tmp3111;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3112 = new TStruct("jobExists_result");
            await oprot.WriteStructBeginAsync(tmp3112, cancellationToken);
            var tmp3113 = new TField();

            if(this.__isset.success)
            {
              tmp3113.Name = "Success";
              tmp3113.Type = TType.Bool;
              tmp3113.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3113, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobExists_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3114 = new StringBuilder("jobExists_result(");
          int tmp3115 = 0;
          if(__isset.success)
          {
            if(0 < tmp3115++) { tmp3114.Append(", "); }
            tmp3114.Append("Success: ");
            Success.ToString(tmp3114);
          }
          tmp3114.Append(')');
          return tmp3114.ToString();
        }
      }


      public partial class jobDetails_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobDetails_args()
        {
        }

        public jobDetails_args DeepCopy()
        {
          var tmp3116 = new jobDetails_args();
          if(__isset.c)
          {
            tmp3116.C = this.C;
          }
          tmp3116.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3116.Name = this.Name;
          }
          tmp3116.__isset.name = this.__isset.name;
          return tmp3116;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3117 = new TStruct("jobDetails_args");
            await oprot.WriteStructBeginAsync(tmp3117, cancellationToken);
            var tmp3118 = new TField();
            if(__isset.c)
            {
              tmp3118.Name = "c";
              tmp3118.Type = TType.I64;
              tmp3118.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3118, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3118.Name = "name";
              tmp3118.Type = TType.String;
              tmp3118.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3118, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobDetails_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3119 = new StringBuilder("jobDetails_args(");
          int tmp3120 = 0;
          if(__isset.c)
          {
            if(0 < tmp3120++) { tmp3119.Append(", "); }
            tmp3119.Append("C: ");
            C.ToString(tmp3119);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3120++) { tmp3119.Append(", "); }
            tmp3119.Append("Name: ");
            Name.ToString(tmp3119);
          }
          tmp3119.Append(')');
          return tmp3119.ToString();
        }
      }


      public partial class jobDetails_result : TBase
      {
        private global::Yaskawa.Ext.API.RobotJobInfo _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.RobotJobInfo Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobDetails_result()
        {
        }

        public jobDetails_result DeepCopy()
        {
          var tmp3121 = new jobDetails_result();
          if((Success != null) && __isset.success)
          {
            tmp3121.Success = (global::Yaskawa.Ext.API.RobotJobInfo)this.Success.DeepCopy();
          }
          tmp3121.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3121.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3121.__isset.e = this.__isset.e;
          return tmp3121;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.RobotJobInfo();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3122 = new TStruct("jobDetails_result");
            await oprot.WriteStructBeginAsync(tmp3122, cancellationToken);
            var tmp3123 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3123.Name = "Success";
                tmp3123.Type = TType.Struct;
                tmp3123.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3123, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3123.Name = "E";
                tmp3123.Type = TType.Struct;
                tmp3123.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3123, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobDetails_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3124 = new StringBuilder("jobDetails_result(");
          int tmp3125 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3125++) { tmp3124.Append(", "); }
            tmp3124.Append("Success: ");
            Success.ToString(tmp3124);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3125++) { tmp3124.Append(", "); }
            tmp3124.Append("E: ");
            E.ToString(tmp3124);
          }
          tmp3124.Append(')');
          return tmp3124.ToString();
        }
      }


      public partial class jobs_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public jobs_args()
        {
        }

        public jobs_args DeepCopy()
        {
          var tmp3126 = new jobs_args();
          if(__isset.c)
          {
            tmp3126.C = this.C;
          }
          tmp3126.__isset.c = this.__isset.c;
          return tmp3126;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3127 = new TStruct("jobs_args");
            await oprot.WriteStructBeginAsync(tmp3127, cancellationToken);
            var tmp3128 = new TField();
            if(__isset.c)
            {
              tmp3128.Name = "c";
              tmp3128.Type = TType.I64;
              tmp3128.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3128, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobs_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3129 = new StringBuilder("jobs_args(");
          int tmp3130 = 0;
          if(__isset.c)
          {
            if(0 < tmp3130++) { tmp3129.Append(", "); }
            tmp3129.Append("C: ");
            C.ToString(tmp3129);
          }
          tmp3129.Append(')');
          return tmp3129.ToString();
        }
      }


      public partial class jobs_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jobs_result()
        {
        }

        public jobs_result DeepCopy()
        {
          var tmp3131 = new jobs_result();
          if((Success != null) && __isset.success)
          {
            tmp3131.Success = this.Success.DeepCopy();
          }
          tmp3131.__isset.success = this.__isset.success;
          return tmp3131;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3132 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list3132.Count);
                      for(int _i3133 = 0; _i3133 < _list3132.Count; ++_i3133)
                      {
                        string _elem3134;
                        _elem3134 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem3134);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3135 = new TStruct("jobs_result");
            await oprot.WriteStructBeginAsync(tmp3135, cancellationToken);
            var tmp3136 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3136.Name = "Success";
                tmp3136.Type = TType.List;
                tmp3136.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3136, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter3137 in Success)
                {
                  await oprot.WriteStringAsync(_iter3137, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobs_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3138 = new StringBuilder("jobs_result(");
          int tmp3139 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3139++) { tmp3138.Append(", "); }
            tmp3138.Append("Success: ");
            Success.ToString(tmp3138);
          }
          tmp3138.Append(')');
          return tmp3138.ToString();
        }
      }


      public partial class jobsMatching_args : TBase
      {
        private long _c;
        private string _nameRegex;
        private string _tag;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string NameRegex
        {
          get
          {
            return _nameRegex;
          }
          set
          {
            __isset.nameRegex = true;
            this._nameRegex = value;
          }
        }

        public string Tag
        {
          get
          {
            return _tag;
          }
          set
          {
            __isset.tag = true;
            this._tag = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool nameRegex;
          public bool tag;
        }

        public jobsMatching_args()
        {
        }

        public jobsMatching_args DeepCopy()
        {
          var tmp3140 = new jobsMatching_args();
          if(__isset.c)
          {
            tmp3140.C = this.C;
          }
          tmp3140.__isset.c = this.__isset.c;
          if((NameRegex != null) && __isset.nameRegex)
          {
            tmp3140.NameRegex = this.NameRegex;
          }
          tmp3140.__isset.nameRegex = this.__isset.nameRegex;
          if((Tag != null) && __isset.tag)
          {
            tmp3140.Tag = this.Tag;
          }
          tmp3140.__isset.tag = this.__isset.tag;
          return tmp3140;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NameRegex = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Tag = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3141 = new TStruct("jobsMatching_args");
            await oprot.WriteStructBeginAsync(tmp3141, cancellationToken);
            var tmp3142 = new TField();
            if(__isset.c)
            {
              tmp3142.Name = "c";
              tmp3142.Type = TType.I64;
              tmp3142.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3142, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NameRegex != null) && __isset.nameRegex)
            {
              tmp3142.Name = "nameRegex";
              tmp3142.Type = TType.String;
              tmp3142.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3142, cancellationToken);
              await oprot.WriteStringAsync(NameRegex, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Tag != null) && __isset.tag)
            {
              tmp3142.Name = "tag";
              tmp3142.Type = TType.String;
              tmp3142.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3142, cancellationToken);
              await oprot.WriteStringAsync(Tag, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobsMatching_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.nameRegex == other.__isset.nameRegex) && ((!__isset.nameRegex) || (global::System.Object.Equals(NameRegex, other.NameRegex))))
            && ((__isset.tag == other.__isset.tag) && ((!__isset.tag) || (global::System.Object.Equals(Tag, other.Tag))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((NameRegex != null) && __isset.nameRegex)
            {
              hashcode = (hashcode * 397) + NameRegex.GetHashCode();
            }
            if((Tag != null) && __isset.tag)
            {
              hashcode = (hashcode * 397) + Tag.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3143 = new StringBuilder("jobsMatching_args(");
          int tmp3144 = 0;
          if(__isset.c)
          {
            if(0 < tmp3144++) { tmp3143.Append(", "); }
            tmp3143.Append("C: ");
            C.ToString(tmp3143);
          }
          if((NameRegex != null) && __isset.nameRegex)
          {
            if(0 < tmp3144++) { tmp3143.Append(", "); }
            tmp3143.Append("NameRegex: ");
            NameRegex.ToString(tmp3143);
          }
          if((Tag != null) && __isset.tag)
          {
            if(0 < tmp3144++) { tmp3143.Append(", "); }
            tmp3143.Append("Tag: ");
            Tag.ToString(tmp3143);
          }
          tmp3143.Append(')');
          return tmp3143.ToString();
        }
      }


      public partial class jobsMatching_result : TBase
      {
        private List<string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobsMatching_result()
        {
        }

        public jobsMatching_result DeepCopy()
        {
          var tmp3145 = new jobsMatching_result();
          if((Success != null) && __isset.success)
          {
            tmp3145.Success = this.Success.DeepCopy();
          }
          tmp3145.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3145.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3145.__isset.e = this.__isset.e;
          return tmp3145;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3146 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list3146.Count);
                      for(int _i3147 = 0; _i3147 < _list3146.Count; ++_i3147)
                      {
                        string _elem3148;
                        _elem3148 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem3148);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3149 = new TStruct("jobsMatching_result");
            await oprot.WriteStructBeginAsync(tmp3149, cancellationToken);
            var tmp3150 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3150.Name = "Success";
                tmp3150.Type = TType.List;
                tmp3150.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3150, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter3151 in Success)
                {
                  await oprot.WriteStringAsync(_iter3151, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3150.Name = "E";
                tmp3150.Type = TType.Struct;
                tmp3150.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3150, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobsMatching_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3152 = new StringBuilder("jobsMatching_result(");
          int tmp3153 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3153++) { tmp3152.Append(", "); }
            tmp3152.Append("Success: ");
            Success.ToString(tmp3152);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3153++) { tmp3152.Append(", "); }
            tmp3152.Append("E: ");
            E.ToString(tmp3152);
          }
          tmp3152.Append(')');
          return tmp3152.ToString();
        }
      }


      public partial class duplicateJob_args : TBase
      {
        private long _c;
        private string _existingName;
        private string _newName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ExistingName
        {
          get
          {
            return _existingName;
          }
          set
          {
            __isset.existingName = true;
            this._existingName = value;
          }
        }

        public string NewName
        {
          get
          {
            return _newName;
          }
          set
          {
            __isset.newName = true;
            this._newName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool existingName;
          public bool newName;
        }

        public duplicateJob_args()
        {
        }

        public duplicateJob_args DeepCopy()
        {
          var tmp3154 = new duplicateJob_args();
          if(__isset.c)
          {
            tmp3154.C = this.C;
          }
          tmp3154.__isset.c = this.__isset.c;
          if((ExistingName != null) && __isset.existingName)
          {
            tmp3154.ExistingName = this.ExistingName;
          }
          tmp3154.__isset.existingName = this.__isset.existingName;
          if((NewName != null) && __isset.newName)
          {
            tmp3154.NewName = this.NewName;
          }
          tmp3154.__isset.newName = this.__isset.newName;
          return tmp3154;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ExistingName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    NewName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3155 = new TStruct("duplicateJob_args");
            await oprot.WriteStructBeginAsync(tmp3155, cancellationToken);
            var tmp3156 = new TField();
            if(__isset.c)
            {
              tmp3156.Name = "c";
              tmp3156.Type = TType.I64;
              tmp3156.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3156, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ExistingName != null) && __isset.existingName)
            {
              tmp3156.Name = "existingName";
              tmp3156.Type = TType.String;
              tmp3156.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3156, cancellationToken);
              await oprot.WriteStringAsync(ExistingName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NewName != null) && __isset.newName)
            {
              tmp3156.Name = "newName";
              tmp3156.Type = TType.String;
              tmp3156.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3156, cancellationToken);
              await oprot.WriteStringAsync(NewName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is duplicateJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.existingName == other.__isset.existingName) && ((!__isset.existingName) || (global::System.Object.Equals(ExistingName, other.ExistingName))))
            && ((__isset.newName == other.__isset.newName) && ((!__isset.newName) || (global::System.Object.Equals(NewName, other.NewName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ExistingName != null) && __isset.existingName)
            {
              hashcode = (hashcode * 397) + ExistingName.GetHashCode();
            }
            if((NewName != null) && __isset.newName)
            {
              hashcode = (hashcode * 397) + NewName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3157 = new StringBuilder("duplicateJob_args(");
          int tmp3158 = 0;
          if(__isset.c)
          {
            if(0 < tmp3158++) { tmp3157.Append(", "); }
            tmp3157.Append("C: ");
            C.ToString(tmp3157);
          }
          if((ExistingName != null) && __isset.existingName)
          {
            if(0 < tmp3158++) { tmp3157.Append(", "); }
            tmp3157.Append("ExistingName: ");
            ExistingName.ToString(tmp3157);
          }
          if((NewName != null) && __isset.newName)
          {
            if(0 < tmp3158++) { tmp3157.Append(", "); }
            tmp3157.Append("NewName: ");
            NewName.ToString(tmp3157);
          }
          tmp3157.Append(')');
          return tmp3157.ToString();
        }
      }


      public partial class duplicateJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public duplicateJob_result()
        {
        }

        public duplicateJob_result DeepCopy()
        {
          var tmp3159 = new duplicateJob_result();
          if((E != null) && __isset.e)
          {
            tmp3159.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3159.__isset.e = this.__isset.e;
          return tmp3159;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3160 = new TStruct("duplicateJob_result");
            await oprot.WriteStructBeginAsync(tmp3160, cancellationToken);
            var tmp3161 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3161.Name = "E";
                tmp3161.Type = TType.Struct;
                tmp3161.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3161, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is duplicateJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3162 = new StringBuilder("duplicateJob_result(");
          int tmp3163 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3163++) { tmp3162.Append(", "); }
            tmp3162.Append("E: ");
            E.ToString(tmp3162);
          }
          tmp3162.Append(')');
          return tmp3162.ToString();
        }
      }


      public partial class deleteJob_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public deleteJob_args()
        {
        }

        public deleteJob_args DeepCopy()
        {
          var tmp3164 = new deleteJob_args();
          if(__isset.c)
          {
            tmp3164.C = this.C;
          }
          tmp3164.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3164.Name = this.Name;
          }
          tmp3164.__isset.name = this.__isset.name;
          return tmp3164;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3165 = new TStruct("deleteJob_args");
            await oprot.WriteStructBeginAsync(tmp3165, cancellationToken);
            var tmp3166 = new TField();
            if(__isset.c)
            {
              tmp3166.Name = "c";
              tmp3166.Type = TType.I64;
              tmp3166.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3166, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3166.Name = "name";
              tmp3166.Type = TType.String;
              tmp3166.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3166, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3167 = new StringBuilder("deleteJob_args(");
          int tmp3168 = 0;
          if(__isset.c)
          {
            if(0 < tmp3168++) { tmp3167.Append(", "); }
            tmp3167.Append("C: ");
            C.ToString(tmp3167);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3168++) { tmp3167.Append(", "); }
            tmp3167.Append("Name: ");
            Name.ToString(tmp3167);
          }
          tmp3167.Append(')');
          return tmp3167.ToString();
        }
      }


      public partial class deleteJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteJob_result()
        {
        }

        public deleteJob_result DeepCopy()
        {
          var tmp3169 = new deleteJob_result();
          if((E != null) && __isset.e)
          {
            tmp3169.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3169.__isset.e = this.__isset.e;
          return tmp3169;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3170 = new TStruct("deleteJob_result");
            await oprot.WriteStructBeginAsync(tmp3170, cancellationToken);
            var tmp3171 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3171.Name = "E";
                tmp3171.Type = TType.Struct;
                tmp3171.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3171, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3172 = new StringBuilder("deleteJob_result(");
          int tmp3173 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3173++) { tmp3172.Append(", "); }
            tmp3172.Append("E: ");
            E.ToString(tmp3172);
          }
          tmp3172.Append(')');
          return tmp3172.ToString();
        }
      }


      public partial class jobSource_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobSource_args()
        {
        }

        public jobSource_args DeepCopy()
        {
          var tmp3174 = new jobSource_args();
          if(__isset.c)
          {
            tmp3174.C = this.C;
          }
          tmp3174.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3174.Name = this.Name;
          }
          tmp3174.__isset.name = this.__isset.name;
          return tmp3174;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3175 = new TStruct("jobSource_args");
            await oprot.WriteStructBeginAsync(tmp3175, cancellationToken);
            var tmp3176 = new TField();
            if(__isset.c)
            {
              tmp3176.Name = "c";
              tmp3176.Type = TType.I64;
              tmp3176.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3176, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3176.Name = "name";
              tmp3176.Type = TType.String;
              tmp3176.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3176, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobSource_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3177 = new StringBuilder("jobSource_args(");
          int tmp3178 = 0;
          if(__isset.c)
          {
            if(0 < tmp3178++) { tmp3177.Append(", "); }
            tmp3177.Append("C: ");
            C.ToString(tmp3177);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3178++) { tmp3177.Append(", "); }
            tmp3177.Append("Name: ");
            Name.ToString(tmp3177);
          }
          tmp3177.Append(')');
          return tmp3177.ToString();
        }
      }


      public partial class jobSource_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobSource_result()
        {
        }

        public jobSource_result DeepCopy()
        {
          var tmp3179 = new jobSource_result();
          if((Success != null) && __isset.success)
          {
            tmp3179.Success = this.Success;
          }
          tmp3179.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3179.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3179.__isset.e = this.__isset.e;
          return tmp3179;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3180 = new TStruct("jobSource_result");
            await oprot.WriteStructBeginAsync(tmp3180, cancellationToken);
            var tmp3181 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3181.Name = "Success";
                tmp3181.Type = TType.String;
                tmp3181.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3181, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3181.Name = "E";
                tmp3181.Type = TType.Struct;
                tmp3181.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3181, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobSource_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3182 = new StringBuilder("jobSource_result(");
          int tmp3183 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3183++) { tmp3182.Append(", "); }
            tmp3182.Append("Success: ");
            Success.ToString(tmp3182);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3183++) { tmp3182.Append(", "); }
            tmp3182.Append("E: ");
            E.ToString(tmp3182);
          }
          tmp3182.Append(')');
          return tmp3182.ToString();
        }
      }


      public partial class storeJobSource_args : TBase
      {
        private long _c;
        private string _name;
        private string _programmingLanguage;
        private string _sourceCode;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public string ProgrammingLanguage
        {
          get
          {
            return _programmingLanguage;
          }
          set
          {
            __isset.programmingLanguage = true;
            this._programmingLanguage = value;
          }
        }

        public string SourceCode
        {
          get
          {
            return _sourceCode;
          }
          set
          {
            __isset.sourceCode = true;
            this._sourceCode = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool programmingLanguage;
          public bool sourceCode;
        }

        public storeJobSource_args()
        {
        }

        public storeJobSource_args DeepCopy()
        {
          var tmp3184 = new storeJobSource_args();
          if(__isset.c)
          {
            tmp3184.C = this.C;
          }
          tmp3184.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3184.Name = this.Name;
          }
          tmp3184.__isset.name = this.__isset.name;
          if((ProgrammingLanguage != null) && __isset.programmingLanguage)
          {
            tmp3184.ProgrammingLanguage = this.ProgrammingLanguage;
          }
          tmp3184.__isset.programmingLanguage = this.__isset.programmingLanguage;
          if((SourceCode != null) && __isset.sourceCode)
          {
            tmp3184.SourceCode = this.SourceCode;
          }
          tmp3184.__isset.sourceCode = this.__isset.sourceCode;
          return tmp3184;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ProgrammingLanguage = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    SourceCode = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3185 = new TStruct("storeJobSource_args");
            await oprot.WriteStructBeginAsync(tmp3185, cancellationToken);
            var tmp3186 = new TField();
            if(__isset.c)
            {
              tmp3186.Name = "c";
              tmp3186.Type = TType.I64;
              tmp3186.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3186, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3186.Name = "name";
              tmp3186.Type = TType.String;
              tmp3186.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3186, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ProgrammingLanguage != null) && __isset.programmingLanguage)
            {
              tmp3186.Name = "programmingLanguage";
              tmp3186.Type = TType.String;
              tmp3186.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3186, cancellationToken);
              await oprot.WriteStringAsync(ProgrammingLanguage, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SourceCode != null) && __isset.sourceCode)
            {
              tmp3186.Name = "sourceCode";
              tmp3186.Type = TType.String;
              tmp3186.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3186, cancellationToken);
              await oprot.WriteStringAsync(SourceCode, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeJobSource_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.programmingLanguage == other.__isset.programmingLanguage) && ((!__isset.programmingLanguage) || (global::System.Object.Equals(ProgrammingLanguage, other.ProgrammingLanguage))))
            && ((__isset.sourceCode == other.__isset.sourceCode) && ((!__isset.sourceCode) || (global::System.Object.Equals(SourceCode, other.SourceCode))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((ProgrammingLanguage != null) && __isset.programmingLanguage)
            {
              hashcode = (hashcode * 397) + ProgrammingLanguage.GetHashCode();
            }
            if((SourceCode != null) && __isset.sourceCode)
            {
              hashcode = (hashcode * 397) + SourceCode.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3187 = new StringBuilder("storeJobSource_args(");
          int tmp3188 = 0;
          if(__isset.c)
          {
            if(0 < tmp3188++) { tmp3187.Append(", "); }
            tmp3187.Append("C: ");
            C.ToString(tmp3187);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3188++) { tmp3187.Append(", "); }
            tmp3187.Append("Name: ");
            Name.ToString(tmp3187);
          }
          if((ProgrammingLanguage != null) && __isset.programmingLanguage)
          {
            if(0 < tmp3188++) { tmp3187.Append(", "); }
            tmp3187.Append("ProgrammingLanguage: ");
            ProgrammingLanguage.ToString(tmp3187);
          }
          if((SourceCode != null) && __isset.sourceCode)
          {
            if(0 < tmp3188++) { tmp3187.Append(", "); }
            tmp3187.Append("SourceCode: ");
            SourceCode.ToString(tmp3187);
          }
          tmp3187.Append(')');
          return tmp3187.ToString();
        }
      }


      public partial class storeJobSource_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public storeJobSource_result()
        {
        }

        public storeJobSource_result DeepCopy()
        {
          var tmp3189 = new storeJobSource_result();
          if((E != null) && __isset.e)
          {
            tmp3189.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3189.__isset.e = this.__isset.e;
          return tmp3189;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3190 = new TStruct("storeJobSource_result");
            await oprot.WriteStructBeginAsync(tmp3190, cancellationToken);
            var tmp3191 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3191.Name = "E";
                tmp3191.Type = TType.Struct;
                tmp3191.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3191, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeJobSource_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3192 = new StringBuilder("storeJobSource_result(");
          int tmp3193 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3193++) { tmp3192.Append(", "); }
            tmp3192.Append("E: ");
            E.ToString(tmp3192);
          }
          tmp3192.Append(')');
          return tmp3192.ToString();
        }
      }


      public partial class storeSystemFileContents_args : TBase
      {
        private long _c;
        private string _fileName;
        private string _fileContents;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string FileName
        {
          get
          {
            return _fileName;
          }
          set
          {
            __isset.fileName = true;
            this._fileName = value;
          }
        }

        public string FileContents
        {
          get
          {
            return _fileContents;
          }
          set
          {
            __isset.fileContents = true;
            this._fileContents = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool fileName;
          public bool fileContents;
        }

        public storeSystemFileContents_args()
        {
        }

        public storeSystemFileContents_args DeepCopy()
        {
          var tmp3194 = new storeSystemFileContents_args();
          if(__isset.c)
          {
            tmp3194.C = this.C;
          }
          tmp3194.__isset.c = this.__isset.c;
          if((FileName != null) && __isset.fileName)
          {
            tmp3194.FileName = this.FileName;
          }
          tmp3194.__isset.fileName = this.__isset.fileName;
          if((FileContents != null) && __isset.fileContents)
          {
            tmp3194.FileContents = this.FileContents;
          }
          tmp3194.__isset.fileContents = this.__isset.fileContents;
          return tmp3194;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    FileContents = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3195 = new TStruct("storeSystemFileContents_args");
            await oprot.WriteStructBeginAsync(tmp3195, cancellationToken);
            var tmp3196 = new TField();
            if(__isset.c)
            {
              tmp3196.Name = "c";
              tmp3196.Type = TType.I64;
              tmp3196.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3196, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((FileName != null) && __isset.fileName)
            {
              tmp3196.Name = "fileName";
              tmp3196.Type = TType.String;
              tmp3196.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3196, cancellationToken);
              await oprot.WriteStringAsync(FileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((FileContents != null) && __isset.fileContents)
            {
              tmp3196.Name = "fileContents";
              tmp3196.Type = TType.String;
              tmp3196.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3196, cancellationToken);
              await oprot.WriteStringAsync(FileContents, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeSystemFileContents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (global::System.Object.Equals(FileName, other.FileName))))
            && ((__isset.fileContents == other.__isset.fileContents) && ((!__isset.fileContents) || (global::System.Object.Equals(FileContents, other.FileContents))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((FileName != null) && __isset.fileName)
            {
              hashcode = (hashcode * 397) + FileName.GetHashCode();
            }
            if((FileContents != null) && __isset.fileContents)
            {
              hashcode = (hashcode * 397) + FileContents.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3197 = new StringBuilder("storeSystemFileContents_args(");
          int tmp3198 = 0;
          if(__isset.c)
          {
            if(0 < tmp3198++) { tmp3197.Append(", "); }
            tmp3197.Append("C: ");
            C.ToString(tmp3197);
          }
          if((FileName != null) && __isset.fileName)
          {
            if(0 < tmp3198++) { tmp3197.Append(", "); }
            tmp3197.Append("FileName: ");
            FileName.ToString(tmp3197);
          }
          if((FileContents != null) && __isset.fileContents)
          {
            if(0 < tmp3198++) { tmp3197.Append(", "); }
            tmp3197.Append("FileContents: ");
            FileContents.ToString(tmp3197);
          }
          tmp3197.Append(')');
          return tmp3197.ToString();
        }
      }


      public partial class storeSystemFileContents_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public storeSystemFileContents_result()
        {
        }

        public storeSystemFileContents_result DeepCopy()
        {
          var tmp3199 = new storeSystemFileContents_result();
          if(__isset.success)
          {
            tmp3199.Success = this.Success;
          }
          tmp3199.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3199.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3199.__isset.e = this.__isset.e;
          return tmp3199;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3200 = new TStruct("storeSystemFileContents_result");
            await oprot.WriteStructBeginAsync(tmp3200, cancellationToken);
            var tmp3201 = new TField();

            if(this.__isset.success)
            {
              tmp3201.Name = "Success";
              tmp3201.Type = TType.Bool;
              tmp3201.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3201, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3201.Name = "E";
                tmp3201.Type = TType.Struct;
                tmp3201.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3201, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeSystemFileContents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3202 = new StringBuilder("storeSystemFileContents_result(");
          int tmp3203 = 0;
          if(__isset.success)
          {
            if(0 < tmp3203++) { tmp3202.Append(", "); }
            tmp3202.Append("Success: ");
            Success.ToString(tmp3202);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3203++) { tmp3202.Append(", "); }
            tmp3202.Append("E: ");
            E.ToString(tmp3202);
          }
          tmp3202.Append(')');
          return tmp3202.ToString();
        }
      }


      public partial class storeSystemFile_args : TBase
      {
        private long _c;
        private string _fileName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string FileName
        {
          get
          {
            return _fileName;
          }
          set
          {
            __isset.fileName = true;
            this._fileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool fileName;
        }

        public storeSystemFile_args()
        {
        }

        public storeSystemFile_args DeepCopy()
        {
          var tmp3204 = new storeSystemFile_args();
          if(__isset.c)
          {
            tmp3204.C = this.C;
          }
          tmp3204.__isset.c = this.__isset.c;
          if((FileName != null) && __isset.fileName)
          {
            tmp3204.FileName = this.FileName;
          }
          tmp3204.__isset.fileName = this.__isset.fileName;
          return tmp3204;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3205 = new TStruct("storeSystemFile_args");
            await oprot.WriteStructBeginAsync(tmp3205, cancellationToken);
            var tmp3206 = new TField();
            if(__isset.c)
            {
              tmp3206.Name = "c";
              tmp3206.Type = TType.I64;
              tmp3206.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3206, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((FileName != null) && __isset.fileName)
            {
              tmp3206.Name = "fileName";
              tmp3206.Type = TType.String;
              tmp3206.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3206, cancellationToken);
              await oprot.WriteStringAsync(FileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeSystemFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (global::System.Object.Equals(FileName, other.FileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((FileName != null) && __isset.fileName)
            {
              hashcode = (hashcode * 397) + FileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3207 = new StringBuilder("storeSystemFile_args(");
          int tmp3208 = 0;
          if(__isset.c)
          {
            if(0 < tmp3208++) { tmp3207.Append(", "); }
            tmp3207.Append("C: ");
            C.ToString(tmp3207);
          }
          if((FileName != null) && __isset.fileName)
          {
            if(0 < tmp3208++) { tmp3207.Append(", "); }
            tmp3207.Append("FileName: ");
            FileName.ToString(tmp3207);
          }
          tmp3207.Append(')');
          return tmp3207.ToString();
        }
      }


      public partial class storeSystemFile_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public storeSystemFile_result()
        {
        }

        public storeSystemFile_result DeepCopy()
        {
          var tmp3209 = new storeSystemFile_result();
          if(__isset.success)
          {
            tmp3209.Success = this.Success;
          }
          tmp3209.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3209.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3209.__isset.e = this.__isset.e;
          return tmp3209;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3210 = new TStruct("storeSystemFile_result");
            await oprot.WriteStructBeginAsync(tmp3210, cancellationToken);
            var tmp3211 = new TField();

            if(this.__isset.success)
            {
              tmp3211.Name = "Success";
              tmp3211.Type = TType.Bool;
              tmp3211.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3211, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3211.Name = "E";
                tmp3211.Type = TType.Struct;
                tmp3211.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3211, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeSystemFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3212 = new StringBuilder("storeSystemFile_result(");
          int tmp3213 = 0;
          if(__isset.success)
          {
            if(0 < tmp3213++) { tmp3212.Append(", "); }
            tmp3212.Append("Success: ");
            Success.ToString(tmp3212);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3213++) { tmp3212.Append(", "); }
            tmp3212.Append("E: ");
            E.ToString(tmp3212);
          }
          tmp3212.Append(')');
          return tmp3212.ToString();
        }
      }


      public partial class retrieveSystemFileContents_args : TBase
      {
        private long _c;
        private string _fileName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string FileName
        {
          get
          {
            return _fileName;
          }
          set
          {
            __isset.fileName = true;
            this._fileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool fileName;
        }

        public retrieveSystemFileContents_args()
        {
        }

        public retrieveSystemFileContents_args DeepCopy()
        {
          var tmp3214 = new retrieveSystemFileContents_args();
          if(__isset.c)
          {
            tmp3214.C = this.C;
          }
          tmp3214.__isset.c = this.__isset.c;
          if((FileName != null) && __isset.fileName)
          {
            tmp3214.FileName = this.FileName;
          }
          tmp3214.__isset.fileName = this.__isset.fileName;
          return tmp3214;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3215 = new TStruct("retrieveSystemFileContents_args");
            await oprot.WriteStructBeginAsync(tmp3215, cancellationToken);
            var tmp3216 = new TField();
            if(__isset.c)
            {
              tmp3216.Name = "c";
              tmp3216.Type = TType.I64;
              tmp3216.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3216, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((FileName != null) && __isset.fileName)
            {
              tmp3216.Name = "fileName";
              tmp3216.Type = TType.String;
              tmp3216.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3216, cancellationToken);
              await oprot.WriteStringAsync(FileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is retrieveSystemFileContents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (global::System.Object.Equals(FileName, other.FileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((FileName != null) && __isset.fileName)
            {
              hashcode = (hashcode * 397) + FileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3217 = new StringBuilder("retrieveSystemFileContents_args(");
          int tmp3218 = 0;
          if(__isset.c)
          {
            if(0 < tmp3218++) { tmp3217.Append(", "); }
            tmp3217.Append("C: ");
            C.ToString(tmp3217);
          }
          if((FileName != null) && __isset.fileName)
          {
            if(0 < tmp3218++) { tmp3217.Append(", "); }
            tmp3217.Append("FileName: ");
            FileName.ToString(tmp3217);
          }
          tmp3217.Append(')');
          return tmp3217.ToString();
        }
      }


      public partial class retrieveSystemFileContents_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public retrieveSystemFileContents_result()
        {
        }

        public retrieveSystemFileContents_result DeepCopy()
        {
          var tmp3219 = new retrieveSystemFileContents_result();
          if((Success != null) && __isset.success)
          {
            tmp3219.Success = this.Success;
          }
          tmp3219.__isset.success = this.__isset.success;
          return tmp3219;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3220 = new TStruct("retrieveSystemFileContents_result");
            await oprot.WriteStructBeginAsync(tmp3220, cancellationToken);
            var tmp3221 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3221.Name = "Success";
                tmp3221.Type = TType.String;
                tmp3221.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3221, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is retrieveSystemFileContents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3222 = new StringBuilder("retrieveSystemFileContents_result(");
          int tmp3223 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3223++) { tmp3222.Append(", "); }
            tmp3222.Append("Success: ");
            Success.ToString(tmp3222);
          }
          tmp3222.Append(')');
          return tmp3222.ToString();
        }
      }


      public partial class retrieveSystemFile_args : TBase
      {
        private long _c;
        private string _fileName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string FileName
        {
          get
          {
            return _fileName;
          }
          set
          {
            __isset.fileName = true;
            this._fileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool fileName;
        }

        public retrieveSystemFile_args()
        {
        }

        public retrieveSystemFile_args DeepCopy()
        {
          var tmp3224 = new retrieveSystemFile_args();
          if(__isset.c)
          {
            tmp3224.C = this.C;
          }
          tmp3224.__isset.c = this.__isset.c;
          if((FileName != null) && __isset.fileName)
          {
            tmp3224.FileName = this.FileName;
          }
          tmp3224.__isset.fileName = this.__isset.fileName;
          return tmp3224;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3225 = new TStruct("retrieveSystemFile_args");
            await oprot.WriteStructBeginAsync(tmp3225, cancellationToken);
            var tmp3226 = new TField();
            if(__isset.c)
            {
              tmp3226.Name = "c";
              tmp3226.Type = TType.I64;
              tmp3226.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3226, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((FileName != null) && __isset.fileName)
            {
              tmp3226.Name = "fileName";
              tmp3226.Type = TType.String;
              tmp3226.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3226, cancellationToken);
              await oprot.WriteStringAsync(FileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is retrieveSystemFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (global::System.Object.Equals(FileName, other.FileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((FileName != null) && __isset.fileName)
            {
              hashcode = (hashcode * 397) + FileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3227 = new StringBuilder("retrieveSystemFile_args(");
          int tmp3228 = 0;
          if(__isset.c)
          {
            if(0 < tmp3228++) { tmp3227.Append(", "); }
            tmp3227.Append("C: ");
            C.ToString(tmp3227);
          }
          if((FileName != null) && __isset.fileName)
          {
            if(0 < tmp3228++) { tmp3227.Append(", "); }
            tmp3227.Append("FileName: ");
            FileName.ToString(tmp3227);
          }
          tmp3227.Append(')');
          return tmp3227.ToString();
        }
      }


      public partial class retrieveSystemFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public retrieveSystemFile_result()
        {
        }

        public retrieveSystemFile_result DeepCopy()
        {
          var tmp3229 = new retrieveSystemFile_result();
          if((E != null) && __isset.e)
          {
            tmp3229.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3229.__isset.e = this.__isset.e;
          return tmp3229;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3230 = new TStruct("retrieveSystemFile_result");
            await oprot.WriteStructBeginAsync(tmp3230, cancellationToken);
            var tmp3231 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3231.Name = "E";
                tmp3231.Type = TType.Struct;
                tmp3231.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3231, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is retrieveSystemFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3232 = new StringBuilder("retrieveSystemFile_result(");
          int tmp3233 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3233++) { tmp3232.Append(", "); }
            tmp3232.Append("E: ");
            E.ToString(tmp3232);
          }
          tmp3232.Append(')');
          return tmp3232.ToString();
        }
      }


      public partial class tools_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public tools_args()
        {
        }

        public tools_args DeepCopy()
        {
          var tmp3234 = new tools_args();
          if(__isset.c)
          {
            tmp3234.C = this.C;
          }
          tmp3234.__isset.c = this.__isset.c;
          return tmp3234;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3235 = new TStruct("tools_args");
            await oprot.WriteStructBeginAsync(tmp3235, cancellationToken);
            var tmp3236 = new TField();
            if(__isset.c)
            {
              tmp3236.Name = "c";
              tmp3236.Type = TType.I64;
              tmp3236.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3236, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tools_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3237 = new StringBuilder("tools_args(");
          int tmp3238 = 0;
          if(__isset.c)
          {
            if(0 < tmp3238++) { tmp3237.Append(", "); }
            tmp3237.Append("C: ");
            C.ToString(tmp3237);
          }
          tmp3237.Append(')');
          return tmp3237.ToString();
        }
      }


      public partial class tools_result : TBase
      {
        private Dictionary<int, string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<int, string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public tools_result()
        {
        }

        public tools_result DeepCopy()
        {
          var tmp3239 = new tools_result();
          if((Success != null) && __isset.success)
          {
            tmp3239.Success = this.Success.DeepCopy();
          }
          tmp3239.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3239.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3239.__isset.e = this.__isset.e;
          return tmp3239;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map3240 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<int, string>(_map3240.Count);
                      for(int _i3241 = 0; _i3241 < _map3240.Count; ++_i3241)
                      {
                        int _key3242;
                        string _val3243;
                        _key3242 = await iprot.ReadI32Async(cancellationToken);
                        _val3243 = await iprot.ReadStringAsync(cancellationToken);
                        Success[_key3242] = _val3243;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3244 = new TStruct("tools_result");
            await oprot.WriteStructBeginAsync(tmp3244, cancellationToken);
            var tmp3245 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3245.Name = "Success";
                tmp3245.Type = TType.Map;
                tmp3245.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3245, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, Success.Count), cancellationToken);
                foreach (int _iter3246 in Success.Keys)
                {
                  await oprot.WriteI32Async(_iter3246, cancellationToken);
                  await oprot.WriteStringAsync(Success[_iter3246], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3245.Name = "E";
                tmp3245.Type = TType.Struct;
                tmp3245.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3245, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tools_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3247 = new StringBuilder("tools_result(");
          int tmp3248 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3248++) { tmp3247.Append(", "); }
            tmp3247.Append("Success: ");
            Success.ToString(tmp3247);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3248++) { tmp3247.Append(", "); }
            tmp3247.Append("E: ");
            E.ToString(tmp3247);
          }
          tmp3247.Append(')');
          return tmp3247.ToString();
        }
      }


      public partial class tool_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public tool_args()
        {
        }

        public tool_args DeepCopy()
        {
          var tmp3249 = new tool_args();
          if(__isset.c)
          {
            tmp3249.C = this.C;
          }
          tmp3249.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3249.Index = this.Index;
          }
          tmp3249.__isset.index = this.__isset.index;
          return tmp3249;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3250 = new TStruct("tool_args");
            await oprot.WriteStructBeginAsync(tmp3250, cancellationToken);
            var tmp3251 = new TField();
            if(__isset.c)
            {
              tmp3251.Name = "c";
              tmp3251.Type = TType.I64;
              tmp3251.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3251, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3251.Name = "index";
              tmp3251.Type = TType.I32;
              tmp3251.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3251, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3252 = new StringBuilder("tool_args(");
          int tmp3253 = 0;
          if(__isset.c)
          {
            if(0 < tmp3253++) { tmp3252.Append(", "); }
            tmp3252.Append("C: ");
            C.ToString(tmp3252);
          }
          if(__isset.index)
          {
            if(0 < tmp3253++) { tmp3252.Append(", "); }
            tmp3252.Append("Index: ");
            Index.ToString(tmp3252);
          }
          tmp3252.Append(')');
          return tmp3252.ToString();
        }
      }


      public partial class tool_result : TBase
      {
        private global::Yaskawa.Ext.API.Tool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Tool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public tool_result()
        {
        }

        public tool_result DeepCopy()
        {
          var tmp3254 = new tool_result();
          if((Success != null) && __isset.success)
          {
            tmp3254.Success = (global::Yaskawa.Ext.API.Tool)this.Success.DeepCopy();
          }
          tmp3254.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3254.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3254.__isset.e = this.__isset.e;
          return tmp3254;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Tool();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3255 = new TStruct("tool_result");
            await oprot.WriteStructBeginAsync(tmp3255, cancellationToken);
            var tmp3256 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3256.Name = "Success";
                tmp3256.Type = TType.Struct;
                tmp3256.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3256, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3256.Name = "E";
                tmp3256.Type = TType.Struct;
                tmp3256.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3256, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3257 = new StringBuilder("tool_result(");
          int tmp3258 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3258++) { tmp3257.Append(", "); }
            tmp3257.Append("Success: ");
            Success.ToString(tmp3257);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3258++) { tmp3257.Append(", "); }
            tmp3257.Append("E: ");
            E.ToString(tmp3257);
          }
          tmp3257.Append(')');
          return tmp3257.ToString();
        }
      }


      public partial class inputNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputNumber_args()
        {
        }

        public inputNumber_args DeepCopy()
        {
          var tmp3259 = new inputNumber_args();
          if(__isset.c)
          {
            tmp3259.C = this.C;
          }
          tmp3259.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3259.Name = this.Name;
          }
          tmp3259.__isset.name = this.__isset.name;
          return tmp3259;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3260 = new TStruct("inputNumber_args");
            await oprot.WriteStructBeginAsync(tmp3260, cancellationToken);
            var tmp3261 = new TField();
            if(__isset.c)
            {
              tmp3261.Name = "c";
              tmp3261.Type = TType.I64;
              tmp3261.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3261, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3261.Name = "name";
              tmp3261.Type = TType.String;
              tmp3261.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3261, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3262 = new StringBuilder("inputNumber_args(");
          int tmp3263 = 0;
          if(__isset.c)
          {
            if(0 < tmp3263++) { tmp3262.Append(", "); }
            tmp3262.Append("C: ");
            C.ToString(tmp3262);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3263++) { tmp3262.Append(", "); }
            tmp3262.Append("Name: ");
            Name.ToString(tmp3262);
          }
          tmp3262.Append(')');
          return tmp3262.ToString();
        }
      }


      public partial class inputNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputNumber_result()
        {
        }

        public inputNumber_result DeepCopy()
        {
          var tmp3264 = new inputNumber_result();
          if(__isset.success)
          {
            tmp3264.Success = this.Success;
          }
          tmp3264.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3264.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3264.__isset.e = this.__isset.e;
          return tmp3264;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3265 = new TStruct("inputNumber_result");
            await oprot.WriteStructBeginAsync(tmp3265, cancellationToken);
            var tmp3266 = new TField();

            if(this.__isset.success)
            {
              tmp3266.Name = "Success";
              tmp3266.Type = TType.I32;
              tmp3266.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3266, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3266.Name = "E";
                tmp3266.Type = TType.Struct;
                tmp3266.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3266, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3267 = new StringBuilder("inputNumber_result(");
          int tmp3268 = 0;
          if(__isset.success)
          {
            if(0 < tmp3268++) { tmp3267.Append(", "); }
            tmp3267.Append("Success: ");
            Success.ToString(tmp3267);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3268++) { tmp3267.Append(", "); }
            tmp3267.Append("E: ");
            E.ToString(tmp3267);
          }
          tmp3267.Append(')');
          return tmp3267.ToString();
        }
      }


      public partial class inputGroupNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputGroupNumber_args()
        {
        }

        public inputGroupNumber_args DeepCopy()
        {
          var tmp3269 = new inputGroupNumber_args();
          if(__isset.c)
          {
            tmp3269.C = this.C;
          }
          tmp3269.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3269.Name = this.Name;
          }
          tmp3269.__isset.name = this.__isset.name;
          return tmp3269;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3270 = new TStruct("inputGroupNumber_args");
            await oprot.WriteStructBeginAsync(tmp3270, cancellationToken);
            var tmp3271 = new TField();
            if(__isset.c)
            {
              tmp3271.Name = "c";
              tmp3271.Type = TType.I64;
              tmp3271.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3271, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3271.Name = "name";
              tmp3271.Type = TType.String;
              tmp3271.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3271, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3272 = new StringBuilder("inputGroupNumber_args(");
          int tmp3273 = 0;
          if(__isset.c)
          {
            if(0 < tmp3273++) { tmp3272.Append(", "); }
            tmp3272.Append("C: ");
            C.ToString(tmp3272);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3273++) { tmp3272.Append(", "); }
            tmp3272.Append("Name: ");
            Name.ToString(tmp3272);
          }
          tmp3272.Append(')');
          return tmp3272.ToString();
        }
      }


      public partial class inputGroupNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputGroupNumber_result()
        {
        }

        public inputGroupNumber_result DeepCopy()
        {
          var tmp3274 = new inputGroupNumber_result();
          if(__isset.success)
          {
            tmp3274.Success = this.Success;
          }
          tmp3274.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3274.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3274.__isset.e = this.__isset.e;
          return tmp3274;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3275 = new TStruct("inputGroupNumber_result");
            await oprot.WriteStructBeginAsync(tmp3275, cancellationToken);
            var tmp3276 = new TField();

            if(this.__isset.success)
            {
              tmp3276.Name = "Success";
              tmp3276.Type = TType.I32;
              tmp3276.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3276, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3276.Name = "E";
                tmp3276.Type = TType.Struct;
                tmp3276.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3276, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3277 = new StringBuilder("inputGroupNumber_result(");
          int tmp3278 = 0;
          if(__isset.success)
          {
            if(0 < tmp3278++) { tmp3277.Append(", "); }
            tmp3277.Append("Success: ");
            Success.ToString(tmp3277);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3278++) { tmp3277.Append(", "); }
            tmp3277.Append("E: ");
            E.ToString(tmp3277);
          }
          tmp3277.Append(')');
          return tmp3277.ToString();
        }
      }


      public partial class outputNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputNumber_args()
        {
        }

        public outputNumber_args DeepCopy()
        {
          var tmp3279 = new outputNumber_args();
          if(__isset.c)
          {
            tmp3279.C = this.C;
          }
          tmp3279.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3279.Name = this.Name;
          }
          tmp3279.__isset.name = this.__isset.name;
          return tmp3279;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3280 = new TStruct("outputNumber_args");
            await oprot.WriteStructBeginAsync(tmp3280, cancellationToken);
            var tmp3281 = new TField();
            if(__isset.c)
            {
              tmp3281.Name = "c";
              tmp3281.Type = TType.I64;
              tmp3281.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3281, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3281.Name = "name";
              tmp3281.Type = TType.String;
              tmp3281.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3281, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3282 = new StringBuilder("outputNumber_args(");
          int tmp3283 = 0;
          if(__isset.c)
          {
            if(0 < tmp3283++) { tmp3282.Append(", "); }
            tmp3282.Append("C: ");
            C.ToString(tmp3282);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3283++) { tmp3282.Append(", "); }
            tmp3282.Append("Name: ");
            Name.ToString(tmp3282);
          }
          tmp3282.Append(')');
          return tmp3282.ToString();
        }
      }


      public partial class outputNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputNumber_result()
        {
        }

        public outputNumber_result DeepCopy()
        {
          var tmp3284 = new outputNumber_result();
          if(__isset.success)
          {
            tmp3284.Success = this.Success;
          }
          tmp3284.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3284.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3284.__isset.e = this.__isset.e;
          return tmp3284;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3285 = new TStruct("outputNumber_result");
            await oprot.WriteStructBeginAsync(tmp3285, cancellationToken);
            var tmp3286 = new TField();

            if(this.__isset.success)
            {
              tmp3286.Name = "Success";
              tmp3286.Type = TType.I32;
              tmp3286.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3286, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3286.Name = "E";
                tmp3286.Type = TType.Struct;
                tmp3286.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3286, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3287 = new StringBuilder("outputNumber_result(");
          int tmp3288 = 0;
          if(__isset.success)
          {
            if(0 < tmp3288++) { tmp3287.Append(", "); }
            tmp3287.Append("Success: ");
            Success.ToString(tmp3287);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3288++) { tmp3287.Append(", "); }
            tmp3287.Append("E: ");
            E.ToString(tmp3287);
          }
          tmp3287.Append(')');
          return tmp3287.ToString();
        }
      }


      public partial class outputGroupNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputGroupNumber_args()
        {
        }

        public outputGroupNumber_args DeepCopy()
        {
          var tmp3289 = new outputGroupNumber_args();
          if(__isset.c)
          {
            tmp3289.C = this.C;
          }
          tmp3289.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3289.Name = this.Name;
          }
          tmp3289.__isset.name = this.__isset.name;
          return tmp3289;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3290 = new TStruct("outputGroupNumber_args");
            await oprot.WriteStructBeginAsync(tmp3290, cancellationToken);
            var tmp3291 = new TField();
            if(__isset.c)
            {
              tmp3291.Name = "c";
              tmp3291.Type = TType.I64;
              tmp3291.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3291, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3291.Name = "name";
              tmp3291.Type = TType.String;
              tmp3291.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3291, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3292 = new StringBuilder("outputGroupNumber_args(");
          int tmp3293 = 0;
          if(__isset.c)
          {
            if(0 < tmp3293++) { tmp3292.Append(", "); }
            tmp3292.Append("C: ");
            C.ToString(tmp3292);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3293++) { tmp3292.Append(", "); }
            tmp3292.Append("Name: ");
            Name.ToString(tmp3292);
          }
          tmp3292.Append(')');
          return tmp3292.ToString();
        }
      }


      public partial class outputGroupNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputGroupNumber_result()
        {
        }

        public outputGroupNumber_result DeepCopy()
        {
          var tmp3294 = new outputGroupNumber_result();
          if(__isset.success)
          {
            tmp3294.Success = this.Success;
          }
          tmp3294.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3294.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3294.__isset.e = this.__isset.e;
          return tmp3294;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3295 = new TStruct("outputGroupNumber_result");
            await oprot.WriteStructBeginAsync(tmp3295, cancellationToken);
            var tmp3296 = new TField();

            if(this.__isset.success)
            {
              tmp3296.Name = "Success";
              tmp3296.Type = TType.I32;
              tmp3296.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3296, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3296.Name = "E";
                tmp3296.Type = TType.Struct;
                tmp3296.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3296, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3297 = new StringBuilder("outputGroupNumber_result(");
          int tmp3298 = 0;
          if(__isset.success)
          {
            if(0 < tmp3298++) { tmp3297.Append(", "); }
            tmp3297.Append("Success: ");
            Success.ToString(tmp3297);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3298++) { tmp3297.Append(", "); }
            tmp3297.Append("E: ");
            E.ToString(tmp3297);
          }
          tmp3297.Append(')');
          return tmp3297.ToString();
        }
      }


      public partial class inputName_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputName_args()
        {
        }

        public inputName_args DeepCopy()
        {
          var tmp3299 = new inputName_args();
          if(__isset.c)
          {
            tmp3299.C = this.C;
          }
          tmp3299.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3299.Num = this.Num;
          }
          tmp3299.__isset.num = this.__isset.num;
          return tmp3299;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3300 = new TStruct("inputName_args");
            await oprot.WriteStructBeginAsync(tmp3300, cancellationToken);
            var tmp3301 = new TField();
            if(__isset.c)
            {
              tmp3301.Name = "c";
              tmp3301.Type = TType.I64;
              tmp3301.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3301, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3301.Name = "num";
              tmp3301.Type = TType.I32;
              tmp3301.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3301, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3302 = new StringBuilder("inputName_args(");
          int tmp3303 = 0;
          if(__isset.c)
          {
            if(0 < tmp3303++) { tmp3302.Append(", "); }
            tmp3302.Append("C: ");
            C.ToString(tmp3302);
          }
          if(__isset.num)
          {
            if(0 < tmp3303++) { tmp3302.Append(", "); }
            tmp3302.Append("Num: ");
            Num.ToString(tmp3302);
          }
          tmp3302.Append(')');
          return tmp3302.ToString();
        }
      }


      public partial class inputName_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputName_result()
        {
        }

        public inputName_result DeepCopy()
        {
          var tmp3304 = new inputName_result();
          if((Success != null) && __isset.success)
          {
            tmp3304.Success = this.Success;
          }
          tmp3304.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3304.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3304.__isset.e = this.__isset.e;
          return tmp3304;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3305 = new TStruct("inputName_result");
            await oprot.WriteStructBeginAsync(tmp3305, cancellationToken);
            var tmp3306 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3306.Name = "Success";
                tmp3306.Type = TType.String;
                tmp3306.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3306, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3306.Name = "E";
                tmp3306.Type = TType.Struct;
                tmp3306.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3306, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3307 = new StringBuilder("inputName_result(");
          int tmp3308 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3308++) { tmp3307.Append(", "); }
            tmp3307.Append("Success: ");
            Success.ToString(tmp3307);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3308++) { tmp3307.Append(", "); }
            tmp3307.Append("E: ");
            E.ToString(tmp3307);
          }
          tmp3307.Append(')');
          return tmp3307.ToString();
        }
      }


      public partial class outputName_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputName_args()
        {
        }

        public outputName_args DeepCopy()
        {
          var tmp3309 = new outputName_args();
          if(__isset.c)
          {
            tmp3309.C = this.C;
          }
          tmp3309.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3309.Num = this.Num;
          }
          tmp3309.__isset.num = this.__isset.num;
          return tmp3309;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3310 = new TStruct("outputName_args");
            await oprot.WriteStructBeginAsync(tmp3310, cancellationToken);
            var tmp3311 = new TField();
            if(__isset.c)
            {
              tmp3311.Name = "c";
              tmp3311.Type = TType.I64;
              tmp3311.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3311, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3311.Name = "num";
              tmp3311.Type = TType.I32;
              tmp3311.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3311, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3312 = new StringBuilder("outputName_args(");
          int tmp3313 = 0;
          if(__isset.c)
          {
            if(0 < tmp3313++) { tmp3312.Append(", "); }
            tmp3312.Append("C: ");
            C.ToString(tmp3312);
          }
          if(__isset.num)
          {
            if(0 < tmp3313++) { tmp3312.Append(", "); }
            tmp3312.Append("Num: ");
            Num.ToString(tmp3312);
          }
          tmp3312.Append(')');
          return tmp3312.ToString();
        }
      }


      public partial class outputName_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputName_result()
        {
        }

        public outputName_result DeepCopy()
        {
          var tmp3314 = new outputName_result();
          if((Success != null) && __isset.success)
          {
            tmp3314.Success = this.Success;
          }
          tmp3314.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3314.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3314.__isset.e = this.__isset.e;
          return tmp3314;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3315 = new TStruct("outputName_result");
            await oprot.WriteStructBeginAsync(tmp3315, cancellationToken);
            var tmp3316 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3316.Name = "Success";
                tmp3316.Type = TType.String;
                tmp3316.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3316, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3316.Name = "E";
                tmp3316.Type = TType.Struct;
                tmp3316.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3316, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3317 = new StringBuilder("outputName_result(");
          int tmp3318 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3318++) { tmp3317.Append(", "); }
            tmp3317.Append("Success: ");
            Success.ToString(tmp3317);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3318++) { tmp3317.Append(", "); }
            tmp3317.Append("E: ");
            E.ToString(tmp3317);
          }
          tmp3317.Append(')');
          return tmp3317.ToString();
        }
      }


      public partial class setInputName_args : TBase
      {
        private long _c;
        private int _num;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool name;
        }

        public setInputName_args()
        {
        }

        public setInputName_args DeepCopy()
        {
          var tmp3319 = new setInputName_args();
          if(__isset.c)
          {
            tmp3319.C = this.C;
          }
          tmp3319.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3319.Num = this.Num;
          }
          tmp3319.__isset.num = this.__isset.num;
          if((Name != null) && __isset.name)
          {
            tmp3319.Name = this.Name;
          }
          tmp3319.__isset.name = this.__isset.name;
          return tmp3319;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3320 = new TStruct("setInputName_args");
            await oprot.WriteStructBeginAsync(tmp3320, cancellationToken);
            var tmp3321 = new TField();
            if(__isset.c)
            {
              tmp3321.Name = "c";
              tmp3321.Type = TType.I64;
              tmp3321.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3321, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3321.Name = "num";
              tmp3321.Type = TType.I32;
              tmp3321.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3321, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3321.Name = "name";
              tmp3321.Type = TType.String;
              tmp3321.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3321, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setInputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3322 = new StringBuilder("setInputName_args(");
          int tmp3323 = 0;
          if(__isset.c)
          {
            if(0 < tmp3323++) { tmp3322.Append(", "); }
            tmp3322.Append("C: ");
            C.ToString(tmp3322);
          }
          if(__isset.num)
          {
            if(0 < tmp3323++) { tmp3322.Append(", "); }
            tmp3322.Append("Num: ");
            Num.ToString(tmp3322);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3323++) { tmp3322.Append(", "); }
            tmp3322.Append("Name: ");
            Name.ToString(tmp3322);
          }
          tmp3322.Append(')');
          return tmp3322.ToString();
        }
      }


      public partial class setOutputName_args : TBase
      {
        private long _c;
        private int _num;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool name;
        }

        public setOutputName_args()
        {
        }

        public setOutputName_args DeepCopy()
        {
          var tmp3324 = new setOutputName_args();
          if(__isset.c)
          {
            tmp3324.C = this.C;
          }
          tmp3324.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3324.Num = this.Num;
          }
          tmp3324.__isset.num = this.__isset.num;
          if((Name != null) && __isset.name)
          {
            tmp3324.Name = this.Name;
          }
          tmp3324.__isset.name = this.__isset.name;
          return tmp3324;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3325 = new TStruct("setOutputName_args");
            await oprot.WriteStructBeginAsync(tmp3325, cancellationToken);
            var tmp3326 = new TField();
            if(__isset.c)
            {
              tmp3326.Name = "c";
              tmp3326.Type = TType.I64;
              tmp3326.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3326, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3326.Name = "num";
              tmp3326.Type = TType.I32;
              tmp3326.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3326, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3326.Name = "name";
              tmp3326.Type = TType.String;
              tmp3326.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3326, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3327 = new StringBuilder("setOutputName_args(");
          int tmp3328 = 0;
          if(__isset.c)
          {
            if(0 < tmp3328++) { tmp3327.Append(", "); }
            tmp3327.Append("C: ");
            C.ToString(tmp3327);
          }
          if(__isset.num)
          {
            if(0 < tmp3328++) { tmp3327.Append(", "); }
            tmp3327.Append("Num: ");
            Num.ToString(tmp3327);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3328++) { tmp3327.Append(", "); }
            tmp3327.Append("Name: ");
            Name.ToString(tmp3327);
          }
          tmp3327.Append(')');
          return tmp3327.ToString();
        }
      }


      public partial class monitorInput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public monitorInput_args()
        {
        }

        public monitorInput_args DeepCopy()
        {
          var tmp3329 = new monitorInput_args();
          if(__isset.c)
          {
            tmp3329.C = this.C;
          }
          tmp3329.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3329.Num = this.Num;
          }
          tmp3329.__isset.num = this.__isset.num;
          return tmp3329;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3330 = new TStruct("monitorInput_args");
            await oprot.WriteStructBeginAsync(tmp3330, cancellationToken);
            var tmp3331 = new TField();
            if(__isset.c)
            {
              tmp3331.Name = "c";
              tmp3331.Type = TType.I64;
              tmp3331.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3331, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3331.Name = "num";
              tmp3331.Type = TType.I32;
              tmp3331.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3331, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3332 = new StringBuilder("monitorInput_args(");
          int tmp3333 = 0;
          if(__isset.c)
          {
            if(0 < tmp3333++) { tmp3332.Append(", "); }
            tmp3332.Append("C: ");
            C.ToString(tmp3332);
          }
          if(__isset.num)
          {
            if(0 < tmp3333++) { tmp3332.Append(", "); }
            tmp3332.Append("Num: ");
            Num.ToString(tmp3332);
          }
          tmp3332.Append(')');
          return tmp3332.ToString();
        }
      }


      public partial class monitorInput_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorInput_result()
        {
        }

        public monitorInput_result DeepCopy()
        {
          var tmp3334 = new monitorInput_result();
          if((E != null) && __isset.e)
          {
            tmp3334.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3334.__isset.e = this.__isset.e;
          return tmp3334;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3335 = new TStruct("monitorInput_result");
            await oprot.WriteStructBeginAsync(tmp3335, cancellationToken);
            var tmp3336 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3336.Name = "E";
                tmp3336.Type = TType.Struct;
                tmp3336.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3336, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3337 = new StringBuilder("monitorInput_result(");
          int tmp3338 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3338++) { tmp3337.Append(", "); }
            tmp3337.Append("E: ");
            E.ToString(tmp3337);
          }
          tmp3337.Append(')');
          return tmp3337.ToString();
        }
      }


      public partial class monitorInputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public monitorInputGroups_args()
        {
        }

        public monitorInputGroups_args DeepCopy()
        {
          var tmp3339 = new monitorInputGroups_args();
          if(__isset.c)
          {
            tmp3339.C = this.C;
          }
          tmp3339.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3339.GroupNum = this.GroupNum;
          }
          tmp3339.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3339.Count = this.Count;
          }
          tmp3339.__isset.count = this.__isset.count;
          return tmp3339;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3340 = new TStruct("monitorInputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3340, cancellationToken);
            var tmp3341 = new TField();
            if(__isset.c)
            {
              tmp3341.Name = "c";
              tmp3341.Type = TType.I64;
              tmp3341.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3341, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3341.Name = "groupNum";
              tmp3341.Type = TType.I32;
              tmp3341.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3341, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3341.Name = "count";
              tmp3341.Type = TType.I32;
              tmp3341.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3341, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3342 = new StringBuilder("monitorInputGroups_args(");
          int tmp3343 = 0;
          if(__isset.c)
          {
            if(0 < tmp3343++) { tmp3342.Append(", "); }
            tmp3342.Append("C: ");
            C.ToString(tmp3342);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3343++) { tmp3342.Append(", "); }
            tmp3342.Append("GroupNum: ");
            GroupNum.ToString(tmp3342);
          }
          if(__isset.count)
          {
            if(0 < tmp3343++) { tmp3342.Append(", "); }
            tmp3342.Append("Count: ");
            Count.ToString(tmp3342);
          }
          tmp3342.Append(')');
          return tmp3342.ToString();
        }
      }


      public partial class monitorInputGroups_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorInputGroups_result()
        {
        }

        public monitorInputGroups_result DeepCopy()
        {
          var tmp3344 = new monitorInputGroups_result();
          if((E != null) && __isset.e)
          {
            tmp3344.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3344.__isset.e = this.__isset.e;
          return tmp3344;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3345 = new TStruct("monitorInputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3345, cancellationToken);
            var tmp3346 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3346.Name = "E";
                tmp3346.Type = TType.Struct;
                tmp3346.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3346, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3347 = new StringBuilder("monitorInputGroups_result(");
          int tmp3348 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3348++) { tmp3347.Append(", "); }
            tmp3347.Append("E: ");
            E.ToString(tmp3347);
          }
          tmp3347.Append(')');
          return tmp3347.ToString();
        }
      }


      public partial class monitorOutput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public monitorOutput_args()
        {
        }

        public monitorOutput_args DeepCopy()
        {
          var tmp3349 = new monitorOutput_args();
          if(__isset.c)
          {
            tmp3349.C = this.C;
          }
          tmp3349.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3349.Num = this.Num;
          }
          tmp3349.__isset.num = this.__isset.num;
          return tmp3349;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3350 = new TStruct("monitorOutput_args");
            await oprot.WriteStructBeginAsync(tmp3350, cancellationToken);
            var tmp3351 = new TField();
            if(__isset.c)
            {
              tmp3351.Name = "c";
              tmp3351.Type = TType.I64;
              tmp3351.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3351, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3351.Name = "num";
              tmp3351.Type = TType.I32;
              tmp3351.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3351, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3352 = new StringBuilder("monitorOutput_args(");
          int tmp3353 = 0;
          if(__isset.c)
          {
            if(0 < tmp3353++) { tmp3352.Append(", "); }
            tmp3352.Append("C: ");
            C.ToString(tmp3352);
          }
          if(__isset.num)
          {
            if(0 < tmp3353++) { tmp3352.Append(", "); }
            tmp3352.Append("Num: ");
            Num.ToString(tmp3352);
          }
          tmp3352.Append(')');
          return tmp3352.ToString();
        }
      }


      public partial class monitorOutput_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorOutput_result()
        {
        }

        public monitorOutput_result DeepCopy()
        {
          var tmp3354 = new monitorOutput_result();
          if((E != null) && __isset.e)
          {
            tmp3354.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3354.__isset.e = this.__isset.e;
          return tmp3354;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3355 = new TStruct("monitorOutput_result");
            await oprot.WriteStructBeginAsync(tmp3355, cancellationToken);
            var tmp3356 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3356.Name = "E";
                tmp3356.Type = TType.Struct;
                tmp3356.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3356, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3357 = new StringBuilder("monitorOutput_result(");
          int tmp3358 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3358++) { tmp3357.Append(", "); }
            tmp3357.Append("E: ");
            E.ToString(tmp3357);
          }
          tmp3357.Append(')');
          return tmp3357.ToString();
        }
      }


      public partial class monitorOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public monitorOutputGroups_args()
        {
        }

        public monitorOutputGroups_args DeepCopy()
        {
          var tmp3359 = new monitorOutputGroups_args();
          if(__isset.c)
          {
            tmp3359.C = this.C;
          }
          tmp3359.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3359.GroupNum = this.GroupNum;
          }
          tmp3359.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3359.Count = this.Count;
          }
          tmp3359.__isset.count = this.__isset.count;
          return tmp3359;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3360 = new TStruct("monitorOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3360, cancellationToken);
            var tmp3361 = new TField();
            if(__isset.c)
            {
              tmp3361.Name = "c";
              tmp3361.Type = TType.I64;
              tmp3361.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3361, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3361.Name = "groupNum";
              tmp3361.Type = TType.I32;
              tmp3361.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3361, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3361.Name = "count";
              tmp3361.Type = TType.I32;
              tmp3361.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3361, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3362 = new StringBuilder("monitorOutputGroups_args(");
          int tmp3363 = 0;
          if(__isset.c)
          {
            if(0 < tmp3363++) { tmp3362.Append(", "); }
            tmp3362.Append("C: ");
            C.ToString(tmp3362);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3363++) { tmp3362.Append(", "); }
            tmp3362.Append("GroupNum: ");
            GroupNum.ToString(tmp3362);
          }
          if(__isset.count)
          {
            if(0 < tmp3363++) { tmp3362.Append(", "); }
            tmp3362.Append("Count: ");
            Count.ToString(tmp3362);
          }
          tmp3362.Append(')');
          return tmp3362.ToString();
        }
      }


      public partial class monitorOutputGroups_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorOutputGroups_result()
        {
        }

        public monitorOutputGroups_result DeepCopy()
        {
          var tmp3364 = new monitorOutputGroups_result();
          if((E != null) && __isset.e)
          {
            tmp3364.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3364.__isset.e = this.__isset.e;
          return tmp3364;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3365 = new TStruct("monitorOutputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3365, cancellationToken);
            var tmp3366 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3366.Name = "E";
                tmp3366.Type = TType.Struct;
                tmp3366.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3366, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3367 = new StringBuilder("monitorOutputGroups_result(");
          int tmp3368 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3368++) { tmp3367.Append(", "); }
            tmp3367.Append("E: ");
            E.ToString(tmp3367);
          }
          tmp3367.Append(')');
          return tmp3367.ToString();
        }
      }


      public partial class unmonitorInput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public unmonitorInput_args()
        {
        }

        public unmonitorInput_args DeepCopy()
        {
          var tmp3369 = new unmonitorInput_args();
          if(__isset.c)
          {
            tmp3369.C = this.C;
          }
          tmp3369.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3369.Num = this.Num;
          }
          tmp3369.__isset.num = this.__isset.num;
          return tmp3369;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3370 = new TStruct("unmonitorInput_args");
            await oprot.WriteStructBeginAsync(tmp3370, cancellationToken);
            var tmp3371 = new TField();
            if(__isset.c)
            {
              tmp3371.Name = "c";
              tmp3371.Type = TType.I64;
              tmp3371.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3371, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3371.Name = "num";
              tmp3371.Type = TType.I32;
              tmp3371.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3371, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3372 = new StringBuilder("unmonitorInput_args(");
          int tmp3373 = 0;
          if(__isset.c)
          {
            if(0 < tmp3373++) { tmp3372.Append(", "); }
            tmp3372.Append("C: ");
            C.ToString(tmp3372);
          }
          if(__isset.num)
          {
            if(0 < tmp3373++) { tmp3372.Append(", "); }
            tmp3372.Append("Num: ");
            Num.ToString(tmp3372);
          }
          tmp3372.Append(')');
          return tmp3372.ToString();
        }
      }


      public partial class unmonitorInput_result : TBase
      {

        public unmonitorInput_result()
        {
        }

        public unmonitorInput_result DeepCopy()
        {
          var tmp3374 = new unmonitorInput_result();
          return tmp3374;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3375 = new TStruct("unmonitorInput_result");
            await oprot.WriteStructBeginAsync(tmp3375, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3376 = new StringBuilder("unmonitorInput_result(");
          tmp3376.Append(')');
          return tmp3376.ToString();
        }
      }


      public partial class unmonitorInputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public unmonitorInputGroups_args()
        {
        }

        public unmonitorInputGroups_args DeepCopy()
        {
          var tmp3378 = new unmonitorInputGroups_args();
          if(__isset.c)
          {
            tmp3378.C = this.C;
          }
          tmp3378.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3378.GroupNum = this.GroupNum;
          }
          tmp3378.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3378.Count = this.Count;
          }
          tmp3378.__isset.count = this.__isset.count;
          return tmp3378;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3379 = new TStruct("unmonitorInputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3379, cancellationToken);
            var tmp3380 = new TField();
            if(__isset.c)
            {
              tmp3380.Name = "c";
              tmp3380.Type = TType.I64;
              tmp3380.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3380, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3380.Name = "groupNum";
              tmp3380.Type = TType.I32;
              tmp3380.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3380, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3380.Name = "count";
              tmp3380.Type = TType.I32;
              tmp3380.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3380, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3381 = new StringBuilder("unmonitorInputGroups_args(");
          int tmp3382 = 0;
          if(__isset.c)
          {
            if(0 < tmp3382++) { tmp3381.Append(", "); }
            tmp3381.Append("C: ");
            C.ToString(tmp3381);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3382++) { tmp3381.Append(", "); }
            tmp3381.Append("GroupNum: ");
            GroupNum.ToString(tmp3381);
          }
          if(__isset.count)
          {
            if(0 < tmp3382++) { tmp3381.Append(", "); }
            tmp3381.Append("Count: ");
            Count.ToString(tmp3381);
          }
          tmp3381.Append(')');
          return tmp3381.ToString();
        }
      }


      public partial class unmonitorInputGroups_result : TBase
      {

        public unmonitorInputGroups_result()
        {
        }

        public unmonitorInputGroups_result DeepCopy()
        {
          var tmp3383 = new unmonitorInputGroups_result();
          return tmp3383;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3384 = new TStruct("unmonitorInputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3384, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3385 = new StringBuilder("unmonitorInputGroups_result(");
          tmp3385.Append(')');
          return tmp3385.ToString();
        }
      }


      public partial class unmonitorOutput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public unmonitorOutput_args()
        {
        }

        public unmonitorOutput_args DeepCopy()
        {
          var tmp3387 = new unmonitorOutput_args();
          if(__isset.c)
          {
            tmp3387.C = this.C;
          }
          tmp3387.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3387.Num = this.Num;
          }
          tmp3387.__isset.num = this.__isset.num;
          return tmp3387;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3388 = new TStruct("unmonitorOutput_args");
            await oprot.WriteStructBeginAsync(tmp3388, cancellationToken);
            var tmp3389 = new TField();
            if(__isset.c)
            {
              tmp3389.Name = "c";
              tmp3389.Type = TType.I64;
              tmp3389.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3389, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3389.Name = "num";
              tmp3389.Type = TType.I32;
              tmp3389.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3389, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3390 = new StringBuilder("unmonitorOutput_args(");
          int tmp3391 = 0;
          if(__isset.c)
          {
            if(0 < tmp3391++) { tmp3390.Append(", "); }
            tmp3390.Append("C: ");
            C.ToString(tmp3390);
          }
          if(__isset.num)
          {
            if(0 < tmp3391++) { tmp3390.Append(", "); }
            tmp3390.Append("Num: ");
            Num.ToString(tmp3390);
          }
          tmp3390.Append(')');
          return tmp3390.ToString();
        }
      }


      public partial class unmonitorOutput_result : TBase
      {

        public unmonitorOutput_result()
        {
        }

        public unmonitorOutput_result DeepCopy()
        {
          var tmp3392 = new unmonitorOutput_result();
          return tmp3392;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3393 = new TStruct("unmonitorOutput_result");
            await oprot.WriteStructBeginAsync(tmp3393, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3394 = new StringBuilder("unmonitorOutput_result(");
          tmp3394.Append(')');
          return tmp3394.ToString();
        }
      }


      public partial class unmonitorOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public unmonitorOutputGroups_args()
        {
        }

        public unmonitorOutputGroups_args DeepCopy()
        {
          var tmp3396 = new unmonitorOutputGroups_args();
          if(__isset.c)
          {
            tmp3396.C = this.C;
          }
          tmp3396.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3396.GroupNum = this.GroupNum;
          }
          tmp3396.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3396.Count = this.Count;
          }
          tmp3396.__isset.count = this.__isset.count;
          return tmp3396;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3397 = new TStruct("unmonitorOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3397, cancellationToken);
            var tmp3398 = new TField();
            if(__isset.c)
            {
              tmp3398.Name = "c";
              tmp3398.Type = TType.I64;
              tmp3398.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3398, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3398.Name = "groupNum";
              tmp3398.Type = TType.I32;
              tmp3398.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3398, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3398.Name = "count";
              tmp3398.Type = TType.I32;
              tmp3398.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3398, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3399 = new StringBuilder("unmonitorOutputGroups_args(");
          int tmp3400 = 0;
          if(__isset.c)
          {
            if(0 < tmp3400++) { tmp3399.Append(", "); }
            tmp3399.Append("C: ");
            C.ToString(tmp3399);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3400++) { tmp3399.Append(", "); }
            tmp3399.Append("GroupNum: ");
            GroupNum.ToString(tmp3399);
          }
          if(__isset.count)
          {
            if(0 < tmp3400++) { tmp3399.Append(", "); }
            tmp3399.Append("Count: ");
            Count.ToString(tmp3399);
          }
          tmp3399.Append(')');
          return tmp3399.ToString();
        }
      }


      public partial class unmonitorOutputGroups_result : TBase
      {

        public unmonitorOutputGroups_result()
        {
        }

        public unmonitorOutputGroups_result DeepCopy()
        {
          var tmp3401 = new unmonitorOutputGroups_result();
          return tmp3401;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3402 = new TStruct("unmonitorOutputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3402, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3403 = new StringBuilder("unmonitorOutputGroups_result(");
          tmp3403.Append(')');
          return tmp3403.ToString();
        }
      }


      public partial class inputValue_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputValue_args()
        {
        }

        public inputValue_args DeepCopy()
        {
          var tmp3405 = new inputValue_args();
          if(__isset.c)
          {
            tmp3405.C = this.C;
          }
          tmp3405.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3405.Num = this.Num;
          }
          tmp3405.__isset.num = this.__isset.num;
          return tmp3405;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3406 = new TStruct("inputValue_args");
            await oprot.WriteStructBeginAsync(tmp3406, cancellationToken);
            var tmp3407 = new TField();
            if(__isset.c)
            {
              tmp3407.Name = "c";
              tmp3407.Type = TType.I64;
              tmp3407.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3407, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3407.Name = "num";
              tmp3407.Type = TType.I32;
              tmp3407.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3407, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3408 = new StringBuilder("inputValue_args(");
          int tmp3409 = 0;
          if(__isset.c)
          {
            if(0 < tmp3409++) { tmp3408.Append(", "); }
            tmp3408.Append("C: ");
            C.ToString(tmp3408);
          }
          if(__isset.num)
          {
            if(0 < tmp3409++) { tmp3408.Append(", "); }
            tmp3408.Append("Num: ");
            Num.ToString(tmp3408);
          }
          tmp3408.Append(')');
          return tmp3408.ToString();
        }
      }


      public partial class inputValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputValue_result()
        {
        }

        public inputValue_result DeepCopy()
        {
          var tmp3410 = new inputValue_result();
          if(__isset.success)
          {
            tmp3410.Success = this.Success;
          }
          tmp3410.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3410.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3410.__isset.e = this.__isset.e;
          return tmp3410;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3411 = new TStruct("inputValue_result");
            await oprot.WriteStructBeginAsync(tmp3411, cancellationToken);
            var tmp3412 = new TField();

            if(this.__isset.success)
            {
              tmp3412.Name = "Success";
              tmp3412.Type = TType.Bool;
              tmp3412.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3412, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3412.Name = "E";
                tmp3412.Type = TType.Struct;
                tmp3412.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3412, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3413 = new StringBuilder("inputValue_result(");
          int tmp3414 = 0;
          if(__isset.success)
          {
            if(0 < tmp3414++) { tmp3413.Append(", "); }
            tmp3413.Append("Success: ");
            Success.ToString(tmp3413);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3414++) { tmp3413.Append(", "); }
            tmp3413.Append("E: ");
            E.ToString(tmp3413);
          }
          tmp3413.Append(')');
          return tmp3413.ToString();
        }
      }


      public partial class inputGroupsValue_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public inputGroupsValue_args()
        {
        }

        public inputGroupsValue_args DeepCopy()
        {
          var tmp3415 = new inputGroupsValue_args();
          if(__isset.c)
          {
            tmp3415.C = this.C;
          }
          tmp3415.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3415.GroupNum = this.GroupNum;
          }
          tmp3415.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3415.Count = this.Count;
          }
          tmp3415.__isset.count = this.__isset.count;
          return tmp3415;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3416 = new TStruct("inputGroupsValue_args");
            await oprot.WriteStructBeginAsync(tmp3416, cancellationToken);
            var tmp3417 = new TField();
            if(__isset.c)
            {
              tmp3417.Name = "c";
              tmp3417.Type = TType.I64;
              tmp3417.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3417, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3417.Name = "groupNum";
              tmp3417.Type = TType.I32;
              tmp3417.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3417, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3417.Name = "count";
              tmp3417.Type = TType.I32;
              tmp3417.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3417, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupsValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3418 = new StringBuilder("inputGroupsValue_args(");
          int tmp3419 = 0;
          if(__isset.c)
          {
            if(0 < tmp3419++) { tmp3418.Append(", "); }
            tmp3418.Append("C: ");
            C.ToString(tmp3418);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3419++) { tmp3418.Append(", "); }
            tmp3418.Append("GroupNum: ");
            GroupNum.ToString(tmp3418);
          }
          if(__isset.count)
          {
            if(0 < tmp3419++) { tmp3418.Append(", "); }
            tmp3418.Append("Count: ");
            Count.ToString(tmp3418);
          }
          tmp3418.Append(')');
          return tmp3418.ToString();
        }
      }


      public partial class inputGroupsValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputGroupsValue_result()
        {
        }

        public inputGroupsValue_result DeepCopy()
        {
          var tmp3420 = new inputGroupsValue_result();
          if(__isset.success)
          {
            tmp3420.Success = this.Success;
          }
          tmp3420.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3420.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3420.__isset.e = this.__isset.e;
          return tmp3420;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3421 = new TStruct("inputGroupsValue_result");
            await oprot.WriteStructBeginAsync(tmp3421, cancellationToken);
            var tmp3422 = new TField();

            if(this.__isset.success)
            {
              tmp3422.Name = "Success";
              tmp3422.Type = TType.I32;
              tmp3422.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3422, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3422.Name = "E";
                tmp3422.Type = TType.Struct;
                tmp3422.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3422, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupsValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3423 = new StringBuilder("inputGroupsValue_result(");
          int tmp3424 = 0;
          if(__isset.success)
          {
            if(0 < tmp3424++) { tmp3423.Append(", "); }
            tmp3423.Append("Success: ");
            Success.ToString(tmp3423);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3424++) { tmp3423.Append(", "); }
            tmp3423.Append("E: ");
            E.ToString(tmp3423);
          }
          tmp3423.Append(')');
          return tmp3423.ToString();
        }
      }


      public partial class outputValue_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputValue_args()
        {
        }

        public outputValue_args DeepCopy()
        {
          var tmp3425 = new outputValue_args();
          if(__isset.c)
          {
            tmp3425.C = this.C;
          }
          tmp3425.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3425.Num = this.Num;
          }
          tmp3425.__isset.num = this.__isset.num;
          return tmp3425;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3426 = new TStruct("outputValue_args");
            await oprot.WriteStructBeginAsync(tmp3426, cancellationToken);
            var tmp3427 = new TField();
            if(__isset.c)
            {
              tmp3427.Name = "c";
              tmp3427.Type = TType.I64;
              tmp3427.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3427, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3427.Name = "num";
              tmp3427.Type = TType.I32;
              tmp3427.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3427, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3428 = new StringBuilder("outputValue_args(");
          int tmp3429 = 0;
          if(__isset.c)
          {
            if(0 < tmp3429++) { tmp3428.Append(", "); }
            tmp3428.Append("C: ");
            C.ToString(tmp3428);
          }
          if(__isset.num)
          {
            if(0 < tmp3429++) { tmp3428.Append(", "); }
            tmp3428.Append("Num: ");
            Num.ToString(tmp3428);
          }
          tmp3428.Append(')');
          return tmp3428.ToString();
        }
      }


      public partial class outputValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputValue_result()
        {
        }

        public outputValue_result DeepCopy()
        {
          var tmp3430 = new outputValue_result();
          if(__isset.success)
          {
            tmp3430.Success = this.Success;
          }
          tmp3430.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3430.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3430.__isset.e = this.__isset.e;
          return tmp3430;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3431 = new TStruct("outputValue_result");
            await oprot.WriteStructBeginAsync(tmp3431, cancellationToken);
            var tmp3432 = new TField();

            if(this.__isset.success)
            {
              tmp3432.Name = "Success";
              tmp3432.Type = TType.Bool;
              tmp3432.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3432, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3432.Name = "E";
                tmp3432.Type = TType.Struct;
                tmp3432.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3432, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3433 = new StringBuilder("outputValue_result(");
          int tmp3434 = 0;
          if(__isset.success)
          {
            if(0 < tmp3434++) { tmp3433.Append(", "); }
            tmp3433.Append("Success: ");
            Success.ToString(tmp3433);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3434++) { tmp3433.Append(", "); }
            tmp3433.Append("E: ");
            E.ToString(tmp3433);
          }
          tmp3433.Append(')');
          return tmp3433.ToString();
        }
      }


      public partial class outputGroupsValue_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public outputGroupsValue_args()
        {
        }

        public outputGroupsValue_args DeepCopy()
        {
          var tmp3435 = new outputGroupsValue_args();
          if(__isset.c)
          {
            tmp3435.C = this.C;
          }
          tmp3435.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3435.GroupNum = this.GroupNum;
          }
          tmp3435.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3435.Count = this.Count;
          }
          tmp3435.__isset.count = this.__isset.count;
          return tmp3435;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3436 = new TStruct("outputGroupsValue_args");
            await oprot.WriteStructBeginAsync(tmp3436, cancellationToken);
            var tmp3437 = new TField();
            if(__isset.c)
            {
              tmp3437.Name = "c";
              tmp3437.Type = TType.I64;
              tmp3437.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3437, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3437.Name = "groupNum";
              tmp3437.Type = TType.I32;
              tmp3437.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3437, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3437.Name = "count";
              tmp3437.Type = TType.I32;
              tmp3437.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3437, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupsValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3438 = new StringBuilder("outputGroupsValue_args(");
          int tmp3439 = 0;
          if(__isset.c)
          {
            if(0 < tmp3439++) { tmp3438.Append(", "); }
            tmp3438.Append("C: ");
            C.ToString(tmp3438);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3439++) { tmp3438.Append(", "); }
            tmp3438.Append("GroupNum: ");
            GroupNum.ToString(tmp3438);
          }
          if(__isset.count)
          {
            if(0 < tmp3439++) { tmp3438.Append(", "); }
            tmp3438.Append("Count: ");
            Count.ToString(tmp3438);
          }
          tmp3438.Append(')');
          return tmp3438.ToString();
        }
      }


      public partial class outputGroupsValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputGroupsValue_result()
        {
        }

        public outputGroupsValue_result DeepCopy()
        {
          var tmp3440 = new outputGroupsValue_result();
          if(__isset.success)
          {
            tmp3440.Success = this.Success;
          }
          tmp3440.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3440.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3440.__isset.e = this.__isset.e;
          return tmp3440;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3441 = new TStruct("outputGroupsValue_result");
            await oprot.WriteStructBeginAsync(tmp3441, cancellationToken);
            var tmp3442 = new TField();

            if(this.__isset.success)
            {
              tmp3442.Name = "Success";
              tmp3442.Type = TType.I32;
              tmp3442.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3442, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3442.Name = "E";
                tmp3442.Type = TType.Struct;
                tmp3442.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3442, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupsValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3443 = new StringBuilder("outputGroupsValue_result(");
          int tmp3444 = 0;
          if(__isset.success)
          {
            if(0 < tmp3444++) { tmp3443.Append(", "); }
            tmp3443.Append("Success: ");
            Success.ToString(tmp3443);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3444++) { tmp3443.Append(", "); }
            tmp3443.Append("E: ");
            E.ToString(tmp3443);
          }
          tmp3443.Append(')');
          return tmp3443.ToString();
        }
      }


      public partial class setOutput_args : TBase
      {
        private long _c;
        private int _num;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool @value;
        }

        public setOutput_args()
        {
        }

        public setOutput_args DeepCopy()
        {
          var tmp3445 = new setOutput_args();
          if(__isset.c)
          {
            tmp3445.C = this.C;
          }
          tmp3445.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3445.Num = this.Num;
          }
          tmp3445.__isset.num = this.__isset.num;
          if(__isset.@value)
          {
            tmp3445.Value = this.Value;
          }
          tmp3445.__isset.@value = this.__isset.@value;
          return tmp3445;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3446 = new TStruct("setOutput_args");
            await oprot.WriteStructBeginAsync(tmp3446, cancellationToken);
            var tmp3447 = new TField();
            if(__isset.c)
            {
              tmp3447.Name = "c";
              tmp3447.Type = TType.I64;
              tmp3447.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3447, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3447.Name = "num";
              tmp3447.Type = TType.I32;
              tmp3447.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3447, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3447.Name = "value";
              tmp3447.Type = TType.Bool;
              tmp3447.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3447, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3448 = new StringBuilder("setOutput_args(");
          int tmp3449 = 0;
          if(__isset.c)
          {
            if(0 < tmp3449++) { tmp3448.Append(", "); }
            tmp3448.Append("C: ");
            C.ToString(tmp3448);
          }
          if(__isset.num)
          {
            if(0 < tmp3449++) { tmp3448.Append(", "); }
            tmp3448.Append("Num: ");
            Num.ToString(tmp3448);
          }
          if(__isset.@value)
          {
            if(0 < tmp3449++) { tmp3448.Append(", "); }
            tmp3448.Append("Value: ");
            Value.ToString(tmp3448);
          }
          tmp3448.Append(')');
          return tmp3448.ToString();
        }
      }


      public partial class setOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;
        private int _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }

        public int Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
          public bool @value;
        }

        public setOutputGroups_args()
        {
        }

        public setOutputGroups_args DeepCopy()
        {
          var tmp3450 = new setOutputGroups_args();
          if(__isset.c)
          {
            tmp3450.C = this.C;
          }
          tmp3450.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3450.GroupNum = this.GroupNum;
          }
          tmp3450.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3450.Count = this.Count;
          }
          tmp3450.__isset.count = this.__isset.count;
          if(__isset.@value)
          {
            tmp3450.Value = this.Value;
          }
          tmp3450.__isset.@value = this.__isset.@value;
          return tmp3450;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    Value = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3451 = new TStruct("setOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3451, cancellationToken);
            var tmp3452 = new TField();
            if(__isset.c)
            {
              tmp3452.Name = "c";
              tmp3452.Type = TType.I64;
              tmp3452.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3452, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3452.Name = "groupNum";
              tmp3452.Type = TType.I32;
              tmp3452.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3452, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3452.Name = "count";
              tmp3452.Type = TType.I32;
              tmp3452.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3452, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3452.Name = "value";
              tmp3452.Type = TType.I32;
              tmp3452.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3452, cancellationToken);
              await oprot.WriteI32Async(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3453 = new StringBuilder("setOutputGroups_args(");
          int tmp3454 = 0;
          if(__isset.c)
          {
            if(0 < tmp3454++) { tmp3453.Append(", "); }
            tmp3453.Append("C: ");
            C.ToString(tmp3453);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3454++) { tmp3453.Append(", "); }
            tmp3453.Append("GroupNum: ");
            GroupNum.ToString(tmp3453);
          }
          if(__isset.count)
          {
            if(0 < tmp3454++) { tmp3453.Append(", "); }
            tmp3453.Append("Count: ");
            Count.ToString(tmp3453);
          }
          if(__isset.@value)
          {
            if(0 < tmp3454++) { tmp3453.Append(", "); }
            tmp3453.Append("Value: ");
            Value.ToString(tmp3453);
          }
          tmp3453.Append(')');
          return tmp3453.ToString();
        }
      }


      public partial class inputAddress_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputAddress_args()
        {
        }

        public inputAddress_args DeepCopy()
        {
          var tmp3455 = new inputAddress_args();
          if(__isset.c)
          {
            tmp3455.C = this.C;
          }
          tmp3455.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3455.Name = this.Name;
          }
          tmp3455.__isset.name = this.__isset.name;
          return tmp3455;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3456 = new TStruct("inputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3456, cancellationToken);
            var tmp3457 = new TField();
            if(__isset.c)
            {
              tmp3457.Name = "c";
              tmp3457.Type = TType.I64;
              tmp3457.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3457, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3457.Name = "name";
              tmp3457.Type = TType.String;
              tmp3457.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3457, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3458 = new StringBuilder("inputAddress_args(");
          int tmp3459 = 0;
          if(__isset.c)
          {
            if(0 < tmp3459++) { tmp3458.Append(", "); }
            tmp3458.Append("C: ");
            C.ToString(tmp3458);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3459++) { tmp3458.Append(", "); }
            tmp3458.Append("Name: ");
            Name.ToString(tmp3458);
          }
          tmp3458.Append(')');
          return tmp3458.ToString();
        }
      }


      public partial class inputAddress_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddress_result()
        {
        }

        public inputAddress_result DeepCopy()
        {
          var tmp3460 = new inputAddress_result();
          if(__isset.success)
          {
            tmp3460.Success = this.Success;
          }
          tmp3460.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3460.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3460.__isset.e = this.__isset.e;
          return tmp3460;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3461 = new TStruct("inputAddress_result");
            await oprot.WriteStructBeginAsync(tmp3461, cancellationToken);
            var tmp3462 = new TField();

            if(this.__isset.success)
            {
              tmp3462.Name = "Success";
              tmp3462.Type = TType.I32;
              tmp3462.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3462, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3462.Name = "E";
                tmp3462.Type = TType.Struct;
                tmp3462.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3462, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3463 = new StringBuilder("inputAddress_result(");
          int tmp3464 = 0;
          if(__isset.success)
          {
            if(0 < tmp3464++) { tmp3463.Append(", "); }
            tmp3463.Append("Success: ");
            Success.ToString(tmp3463);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3464++) { tmp3463.Append(", "); }
            tmp3463.Append("E: ");
            E.ToString(tmp3463);
          }
          tmp3463.Append(')');
          return tmp3463.ToString();
        }
      }


      public partial class inputAddressByNumber_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputAddressByNumber_args()
        {
        }

        public inputAddressByNumber_args DeepCopy()
        {
          var tmp3465 = new inputAddressByNumber_args();
          if(__isset.c)
          {
            tmp3465.C = this.C;
          }
          tmp3465.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3465.Num = this.Num;
          }
          tmp3465.__isset.num = this.__isset.num;
          return tmp3465;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3466 = new TStruct("inputAddressByNumber_args");
            await oprot.WriteStructBeginAsync(tmp3466, cancellationToken);
            var tmp3467 = new TField();
            if(__isset.c)
            {
              tmp3467.Name = "c";
              tmp3467.Type = TType.I64;
              tmp3467.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3467, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3467.Name = "num";
              tmp3467.Type = TType.I32;
              tmp3467.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3467, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressByNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3468 = new StringBuilder("inputAddressByNumber_args(");
          int tmp3469 = 0;
          if(__isset.c)
          {
            if(0 < tmp3469++) { tmp3468.Append(", "); }
            tmp3468.Append("C: ");
            C.ToString(tmp3468);
          }
          if(__isset.num)
          {
            if(0 < tmp3469++) { tmp3468.Append(", "); }
            tmp3468.Append("Num: ");
            Num.ToString(tmp3468);
          }
          tmp3468.Append(')');
          return tmp3468.ToString();
        }
      }


      public partial class inputAddressByNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddressByNumber_result()
        {
        }

        public inputAddressByNumber_result DeepCopy()
        {
          var tmp3470 = new inputAddressByNumber_result();
          if(__isset.success)
          {
            tmp3470.Success = this.Success;
          }
          tmp3470.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3470.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3470.__isset.e = this.__isset.e;
          return tmp3470;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3471 = new TStruct("inputAddressByNumber_result");
            await oprot.WriteStructBeginAsync(tmp3471, cancellationToken);
            var tmp3472 = new TField();

            if(this.__isset.success)
            {
              tmp3472.Name = "Success";
              tmp3472.Type = TType.I32;
              tmp3472.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3472, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3472.Name = "E";
                tmp3472.Type = TType.Struct;
                tmp3472.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3472, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressByNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3473 = new StringBuilder("inputAddressByNumber_result(");
          int tmp3474 = 0;
          if(__isset.success)
          {
            if(0 < tmp3474++) { tmp3473.Append(", "); }
            tmp3473.Append("Success: ");
            Success.ToString(tmp3473);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3474++) { tmp3473.Append(", "); }
            tmp3473.Append("E: ");
            E.ToString(tmp3473);
          }
          tmp3473.Append(')');
          return tmp3473.ToString();
        }
      }


      public partial class outputAddress_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputAddress_args()
        {
        }

        public outputAddress_args DeepCopy()
        {
          var tmp3475 = new outputAddress_args();
          if(__isset.c)
          {
            tmp3475.C = this.C;
          }
          tmp3475.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3475.Name = this.Name;
          }
          tmp3475.__isset.name = this.__isset.name;
          return tmp3475;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3476 = new TStruct("outputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3476, cancellationToken);
            var tmp3477 = new TField();
            if(__isset.c)
            {
              tmp3477.Name = "c";
              tmp3477.Type = TType.I64;
              tmp3477.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3477, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3477.Name = "name";
              tmp3477.Type = TType.String;
              tmp3477.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3477, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3478 = new StringBuilder("outputAddress_args(");
          int tmp3479 = 0;
          if(__isset.c)
          {
            if(0 < tmp3479++) { tmp3478.Append(", "); }
            tmp3478.Append("C: ");
            C.ToString(tmp3478);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3479++) { tmp3478.Append(", "); }
            tmp3478.Append("Name: ");
            Name.ToString(tmp3478);
          }
          tmp3478.Append(')');
          return tmp3478.ToString();
        }
      }


      public partial class outputAddress_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddress_result()
        {
        }

        public outputAddress_result DeepCopy()
        {
          var tmp3480 = new outputAddress_result();
          if(__isset.success)
          {
            tmp3480.Success = this.Success;
          }
          tmp3480.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3480.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3480.__isset.e = this.__isset.e;
          return tmp3480;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3481 = new TStruct("outputAddress_result");
            await oprot.WriteStructBeginAsync(tmp3481, cancellationToken);
            var tmp3482 = new TField();

            if(this.__isset.success)
            {
              tmp3482.Name = "Success";
              tmp3482.Type = TType.I32;
              tmp3482.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3482, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3482.Name = "E";
                tmp3482.Type = TType.Struct;
                tmp3482.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3482, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3483 = new StringBuilder("outputAddress_result(");
          int tmp3484 = 0;
          if(__isset.success)
          {
            if(0 < tmp3484++) { tmp3483.Append(", "); }
            tmp3483.Append("Success: ");
            Success.ToString(tmp3483);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3484++) { tmp3483.Append(", "); }
            tmp3483.Append("E: ");
            E.ToString(tmp3483);
          }
          tmp3483.Append(')');
          return tmp3483.ToString();
        }
      }


      public partial class outputAddressByNumber_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputAddressByNumber_args()
        {
        }

        public outputAddressByNumber_args DeepCopy()
        {
          var tmp3485 = new outputAddressByNumber_args();
          if(__isset.c)
          {
            tmp3485.C = this.C;
          }
          tmp3485.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3485.Num = this.Num;
          }
          tmp3485.__isset.num = this.__isset.num;
          return tmp3485;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3486 = new TStruct("outputAddressByNumber_args");
            await oprot.WriteStructBeginAsync(tmp3486, cancellationToken);
            var tmp3487 = new TField();
            if(__isset.c)
            {
              tmp3487.Name = "c";
              tmp3487.Type = TType.I64;
              tmp3487.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3487, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3487.Name = "num";
              tmp3487.Type = TType.I32;
              tmp3487.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3487, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressByNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3488 = new StringBuilder("outputAddressByNumber_args(");
          int tmp3489 = 0;
          if(__isset.c)
          {
            if(0 < tmp3489++) { tmp3488.Append(", "); }
            tmp3488.Append("C: ");
            C.ToString(tmp3488);
          }
          if(__isset.num)
          {
            if(0 < tmp3489++) { tmp3488.Append(", "); }
            tmp3488.Append("Num: ");
            Num.ToString(tmp3488);
          }
          tmp3488.Append(')');
          return tmp3488.ToString();
        }
      }


      public partial class outputAddressByNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddressByNumber_result()
        {
        }

        public outputAddressByNumber_result DeepCopy()
        {
          var tmp3490 = new outputAddressByNumber_result();
          if(__isset.success)
          {
            tmp3490.Success = this.Success;
          }
          tmp3490.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3490.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3490.__isset.e = this.__isset.e;
          return tmp3490;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3491 = new TStruct("outputAddressByNumber_result");
            await oprot.WriteStructBeginAsync(tmp3491, cancellationToken);
            var tmp3492 = new TField();

            if(this.__isset.success)
            {
              tmp3492.Name = "Success";
              tmp3492.Type = TType.I32;
              tmp3492.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3492, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3492.Name = "E";
                tmp3492.Type = TType.Struct;
                tmp3492.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3492, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressByNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3493 = new StringBuilder("outputAddressByNumber_result(");
          int tmp3494 = 0;
          if(__isset.success)
          {
            if(0 < tmp3494++) { tmp3493.Append(", "); }
            tmp3493.Append("Success: ");
            Success.ToString(tmp3493);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3494++) { tmp3493.Append(", "); }
            tmp3493.Append("E: ");
            E.ToString(tmp3493);
          }
          tmp3493.Append(')');
          return tmp3493.ToString();
        }
      }


      public partial class monitorIOAddress_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public monitorIOAddress_args()
        {
        }

        public monitorIOAddress_args DeepCopy()
        {
          var tmp3495 = new monitorIOAddress_args();
          if(__isset.c)
          {
            tmp3495.C = this.C;
          }
          tmp3495.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3495.Address = this.Address;
          }
          tmp3495.__isset.address = this.__isset.address;
          return tmp3495;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3496 = new TStruct("monitorIOAddress_args");
            await oprot.WriteStructBeginAsync(tmp3496, cancellationToken);
            var tmp3497 = new TField();
            if(__isset.c)
            {
              tmp3497.Name = "c";
              tmp3497.Type = TType.I64;
              tmp3497.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3497, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3497.Name = "address";
              tmp3497.Type = TType.I32;
              tmp3497.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3497, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorIOAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3498 = new StringBuilder("monitorIOAddress_args(");
          int tmp3499 = 0;
          if(__isset.c)
          {
            if(0 < tmp3499++) { tmp3498.Append(", "); }
            tmp3498.Append("C: ");
            C.ToString(tmp3498);
          }
          if(__isset.address)
          {
            if(0 < tmp3499++) { tmp3498.Append(", "); }
            tmp3498.Append("Address: ");
            Address.ToString(tmp3498);
          }
          tmp3498.Append(')');
          return tmp3498.ToString();
        }
      }


      public partial class monitorIOAddress_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorIOAddress_result()
        {
        }

        public monitorIOAddress_result DeepCopy()
        {
          var tmp3500 = new monitorIOAddress_result();
          if((E != null) && __isset.e)
          {
            tmp3500.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3500.__isset.e = this.__isset.e;
          return tmp3500;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3501 = new TStruct("monitorIOAddress_result");
            await oprot.WriteStructBeginAsync(tmp3501, cancellationToken);
            var tmp3502 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3502.Name = "E";
                tmp3502.Type = TType.Struct;
                tmp3502.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3502, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorIOAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3503 = new StringBuilder("monitorIOAddress_result(");
          int tmp3504 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3504++) { tmp3503.Append(", "); }
            tmp3503.Append("E: ");
            E.ToString(tmp3503);
          }
          tmp3503.Append(')');
          return tmp3503.ToString();
        }
      }


      public partial class unmonitorIOAddress_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public unmonitorIOAddress_args()
        {
        }

        public unmonitorIOAddress_args DeepCopy()
        {
          var tmp3505 = new unmonitorIOAddress_args();
          if(__isset.c)
          {
            tmp3505.C = this.C;
          }
          tmp3505.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3505.Address = this.Address;
          }
          tmp3505.__isset.address = this.__isset.address;
          return tmp3505;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3506 = new TStruct("unmonitorIOAddress_args");
            await oprot.WriteStructBeginAsync(tmp3506, cancellationToken);
            var tmp3507 = new TField();
            if(__isset.c)
            {
              tmp3507.Name = "c";
              tmp3507.Type = TType.I64;
              tmp3507.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3507, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3507.Name = "address";
              tmp3507.Type = TType.I32;
              tmp3507.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3507, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorIOAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3508 = new StringBuilder("unmonitorIOAddress_args(");
          int tmp3509 = 0;
          if(__isset.c)
          {
            if(0 < tmp3509++) { tmp3508.Append(", "); }
            tmp3508.Append("C: ");
            C.ToString(tmp3508);
          }
          if(__isset.address)
          {
            if(0 < tmp3509++) { tmp3508.Append(", "); }
            tmp3508.Append("Address: ");
            Address.ToString(tmp3508);
          }
          tmp3508.Append(')');
          return tmp3508.ToString();
        }
      }


      public partial class unmonitorIOAddress_result : TBase
      {

        public unmonitorIOAddress_result()
        {
        }

        public unmonitorIOAddress_result DeepCopy()
        {
          var tmp3510 = new unmonitorIOAddress_result();
          return tmp3510;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3511 = new TStruct("unmonitorIOAddress_result");
            await oprot.WriteStructBeginAsync(tmp3511, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorIOAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3512 = new StringBuilder("unmonitorIOAddress_result(");
          tmp3512.Append(')');
          return tmp3512.ToString();
        }
      }


      public partial class inputAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public inputAddressValue_args()
        {
        }

        public inputAddressValue_args DeepCopy()
        {
          var tmp3514 = new inputAddressValue_args();
          if(__isset.c)
          {
            tmp3514.C = this.C;
          }
          tmp3514.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3514.Address = this.Address;
          }
          tmp3514.__isset.address = this.__isset.address;
          return tmp3514;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3515 = new TStruct("inputAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp3515, cancellationToken);
            var tmp3516 = new TField();
            if(__isset.c)
            {
              tmp3516.Name = "c";
              tmp3516.Type = TType.I64;
              tmp3516.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3516, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3516.Name = "address";
              tmp3516.Type = TType.I32;
              tmp3516.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3516, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3517 = new StringBuilder("inputAddressValue_args(");
          int tmp3518 = 0;
          if(__isset.c)
          {
            if(0 < tmp3518++) { tmp3517.Append(", "); }
            tmp3517.Append("C: ");
            C.ToString(tmp3517);
          }
          if(__isset.address)
          {
            if(0 < tmp3518++) { tmp3517.Append(", "); }
            tmp3517.Append("Address: ");
            Address.ToString(tmp3517);
          }
          tmp3517.Append(')');
          return tmp3517.ToString();
        }
      }


      public partial class inputAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddressValue_result()
        {
        }

        public inputAddressValue_result DeepCopy()
        {
          var tmp3519 = new inputAddressValue_result();
          if(__isset.success)
          {
            tmp3519.Success = this.Success;
          }
          tmp3519.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3519.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3519.__isset.e = this.__isset.e;
          return tmp3519;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3520 = new TStruct("inputAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp3520, cancellationToken);
            var tmp3521 = new TField();

            if(this.__isset.success)
            {
              tmp3521.Name = "Success";
              tmp3521.Type = TType.Bool;
              tmp3521.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3521, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3521.Name = "E";
                tmp3521.Type = TType.Struct;
                tmp3521.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3521, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3522 = new StringBuilder("inputAddressValue_result(");
          int tmp3523 = 0;
          if(__isset.success)
          {
            if(0 < tmp3523++) { tmp3522.Append(", "); }
            tmp3522.Append("Success: ");
            Success.ToString(tmp3522);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3523++) { tmp3522.Append(", "); }
            tmp3522.Append("E: ");
            E.ToString(tmp3522);
          }
          tmp3522.Append(')');
          return tmp3522.ToString();
        }
      }


      public partial class outputAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public outputAddressValue_args()
        {
        }

        public outputAddressValue_args DeepCopy()
        {
          var tmp3524 = new outputAddressValue_args();
          if(__isset.c)
          {
            tmp3524.C = this.C;
          }
          tmp3524.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3524.Address = this.Address;
          }
          tmp3524.__isset.address = this.__isset.address;
          return tmp3524;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3525 = new TStruct("outputAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp3525, cancellationToken);
            var tmp3526 = new TField();
            if(__isset.c)
            {
              tmp3526.Name = "c";
              tmp3526.Type = TType.I64;
              tmp3526.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3526, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3526.Name = "address";
              tmp3526.Type = TType.I32;
              tmp3526.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3526, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3527 = new StringBuilder("outputAddressValue_args(");
          int tmp3528 = 0;
          if(__isset.c)
          {
            if(0 < tmp3528++) { tmp3527.Append(", "); }
            tmp3527.Append("C: ");
            C.ToString(tmp3527);
          }
          if(__isset.address)
          {
            if(0 < tmp3528++) { tmp3527.Append(", "); }
            tmp3527.Append("Address: ");
            Address.ToString(tmp3527);
          }
          tmp3527.Append(')');
          return tmp3527.ToString();
        }
      }


      public partial class outputAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddressValue_result()
        {
        }

        public outputAddressValue_result DeepCopy()
        {
          var tmp3529 = new outputAddressValue_result();
          if(__isset.success)
          {
            tmp3529.Success = this.Success;
          }
          tmp3529.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3529.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3529.__isset.e = this.__isset.e;
          return tmp3529;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3530 = new TStruct("outputAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp3530, cancellationToken);
            var tmp3531 = new TField();

            if(this.__isset.success)
            {
              tmp3531.Name = "Success";
              tmp3531.Type = TType.Bool;
              tmp3531.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3531, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3531.Name = "E";
                tmp3531.Type = TType.Struct;
                tmp3531.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3531, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3532 = new StringBuilder("outputAddressValue_result(");
          int tmp3533 = 0;
          if(__isset.success)
          {
            if(0 < tmp3533++) { tmp3532.Append(", "); }
            tmp3532.Append("Success: ");
            Success.ToString(tmp3532);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3533++) { tmp3532.Append(", "); }
            tmp3532.Append("E: ");
            E.ToString(tmp3532);
          }
          tmp3532.Append(')');
          return tmp3532.ToString();
        }
      }


      public partial class ioAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public ioAddressValue_args()
        {
        }

        public ioAddressValue_args DeepCopy()
        {
          var tmp3534 = new ioAddressValue_args();
          if(__isset.c)
          {
            tmp3534.C = this.C;
          }
          tmp3534.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3534.Address = this.Address;
          }
          tmp3534.__isset.address = this.__isset.address;
          return tmp3534;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3535 = new TStruct("ioAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp3535, cancellationToken);
            var tmp3536 = new TField();
            if(__isset.c)
            {
              tmp3536.Name = "c";
              tmp3536.Type = TType.I64;
              tmp3536.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3536, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3536.Name = "address";
              tmp3536.Type = TType.I32;
              tmp3536.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3536, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ioAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3537 = new StringBuilder("ioAddressValue_args(");
          int tmp3538 = 0;
          if(__isset.c)
          {
            if(0 < tmp3538++) { tmp3537.Append(", "); }
            tmp3537.Append("C: ");
            C.ToString(tmp3537);
          }
          if(__isset.address)
          {
            if(0 < tmp3538++) { tmp3537.Append(", "); }
            tmp3537.Append("Address: ");
            Address.ToString(tmp3537);
          }
          tmp3537.Append(')');
          return tmp3537.ToString();
        }
      }


      public partial class ioAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public ioAddressValue_result()
        {
        }

        public ioAddressValue_result DeepCopy()
        {
          var tmp3539 = new ioAddressValue_result();
          if(__isset.success)
          {
            tmp3539.Success = this.Success;
          }
          tmp3539.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3539.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3539.__isset.e = this.__isset.e;
          return tmp3539;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3540 = new TStruct("ioAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp3540, cancellationToken);
            var tmp3541 = new TField();

            if(this.__isset.success)
            {
              tmp3541.Name = "Success";
              tmp3541.Type = TType.Bool;
              tmp3541.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3541, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3541.Name = "E";
                tmp3541.Type = TType.Struct;
                tmp3541.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3541, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ioAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3542 = new StringBuilder("ioAddressValue_result(");
          int tmp3543 = 0;
          if(__isset.success)
          {
            if(0 < tmp3543++) { tmp3542.Append(", "); }
            tmp3542.Append("Success: ");
            Success.ToString(tmp3542);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3543++) { tmp3542.Append(", "); }
            tmp3542.Append("E: ");
            E.ToString(tmp3542);
          }
          tmp3542.Append(')');
          return tmp3542.ToString();
        }
      }


      public partial class setOutputAddress_args : TBase
      {
        private long _c;
        private int _address;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
          public bool @value;
        }

        public setOutputAddress_args()
        {
        }

        public setOutputAddress_args DeepCopy()
        {
          var tmp3544 = new setOutputAddress_args();
          if(__isset.c)
          {
            tmp3544.C = this.C;
          }
          tmp3544.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3544.Address = this.Address;
          }
          tmp3544.__isset.address = this.__isset.address;
          if(__isset.@value)
          {
            tmp3544.Value = this.Value;
          }
          tmp3544.__isset.@value = this.__isset.@value;
          return tmp3544;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3545 = new TStruct("setOutputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3545, cancellationToken);
            var tmp3546 = new TField();
            if(__isset.c)
            {
              tmp3546.Name = "c";
              tmp3546.Type = TType.I64;
              tmp3546.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3546, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3546.Name = "address";
              tmp3546.Type = TType.I32;
              tmp3546.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3546, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3546.Name = "value";
              tmp3546.Type = TType.Bool;
              tmp3546.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3546, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3547 = new StringBuilder("setOutputAddress_args(");
          int tmp3548 = 0;
          if(__isset.c)
          {
            if(0 < tmp3548++) { tmp3547.Append(", "); }
            tmp3547.Append("C: ");
            C.ToString(tmp3547);
          }
          if(__isset.address)
          {
            if(0 < tmp3548++) { tmp3547.Append(", "); }
            tmp3547.Append("Address: ");
            Address.ToString(tmp3547);
          }
          if(__isset.@value)
          {
            if(0 < tmp3548++) { tmp3547.Append(", "); }
            tmp3547.Append("Value: ");
            Value.ToString(tmp3547);
          }
          tmp3547.Append(')');
          return tmp3547.ToString();
        }
      }


      public partial class setNetworkInputAddress_args : TBase
      {
        private long _c;
        private int _address;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
          public bool @value;
        }

        public setNetworkInputAddress_args()
        {
        }

        public setNetworkInputAddress_args DeepCopy()
        {
          var tmp3549 = new setNetworkInputAddress_args();
          if(__isset.c)
          {
            tmp3549.C = this.C;
          }
          tmp3549.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3549.Address = this.Address;
          }
          tmp3549.__isset.address = this.__isset.address;
          if(__isset.@value)
          {
            tmp3549.Value = this.Value;
          }
          tmp3549.__isset.@value = this.__isset.@value;
          return tmp3549;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3550 = new TStruct("setNetworkInputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3550, cancellationToken);
            var tmp3551 = new TField();
            if(__isset.c)
            {
              tmp3551.Name = "c";
              tmp3551.Type = TType.I64;
              tmp3551.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3551, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3551.Name = "address";
              tmp3551.Type = TType.I32;
              tmp3551.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3551, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3551.Name = "value";
              tmp3551.Type = TType.Bool;
              tmp3551.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3551, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setNetworkInputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3552 = new StringBuilder("setNetworkInputAddress_args(");
          int tmp3553 = 0;
          if(__isset.c)
          {
            if(0 < tmp3553++) { tmp3552.Append(", "); }
            tmp3552.Append("C: ");
            C.ToString(tmp3552);
          }
          if(__isset.address)
          {
            if(0 < tmp3553++) { tmp3552.Append(", "); }
            tmp3552.Append("Address: ");
            Address.ToString(tmp3552);
          }
          if(__isset.@value)
          {
            if(0 < tmp3553++) { tmp3552.Append(", "); }
            tmp3552.Append("Value: ");
            Value.ToString(tmp3552);
          }
          tmp3552.Append(')');
          return tmp3552.ToString();
        }
      }


      public partial class mRegisterValue_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public mRegisterValue_args()
        {
        }

        public mRegisterValue_args DeepCopy()
        {
          var tmp3554 = new mRegisterValue_args();
          if(__isset.c)
          {
            tmp3554.C = this.C;
          }
          tmp3554.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3554.Index = this.Index;
          }
          tmp3554.__isset.index = this.__isset.index;
          return tmp3554;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3555 = new TStruct("mRegisterValue_args");
            await oprot.WriteStructBeginAsync(tmp3555, cancellationToken);
            var tmp3556 = new TField();
            if(__isset.c)
            {
              tmp3556.Name = "c";
              tmp3556.Type = TType.I64;
              tmp3556.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3556, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3556.Name = "index";
              tmp3556.Type = TType.I32;
              tmp3556.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3556, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mRegisterValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3557 = new StringBuilder("mRegisterValue_args(");
          int tmp3558 = 0;
          if(__isset.c)
          {
            if(0 < tmp3558++) { tmp3557.Append(", "); }
            tmp3557.Append("C: ");
            C.ToString(tmp3557);
          }
          if(__isset.index)
          {
            if(0 < tmp3558++) { tmp3557.Append(", "); }
            tmp3557.Append("Index: ");
            Index.ToString(tmp3557);
          }
          tmp3557.Append(')');
          return tmp3557.ToString();
        }
      }


      public partial class mRegisterValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public mRegisterValue_result()
        {
        }

        public mRegisterValue_result DeepCopy()
        {
          var tmp3559 = new mRegisterValue_result();
          if(__isset.success)
          {
            tmp3559.Success = this.Success;
          }
          tmp3559.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3559.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3559.__isset.e = this.__isset.e;
          return tmp3559;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3560 = new TStruct("mRegisterValue_result");
            await oprot.WriteStructBeginAsync(tmp3560, cancellationToken);
            var tmp3561 = new TField();

            if(this.__isset.success)
            {
              tmp3561.Name = "Success";
              tmp3561.Type = TType.I32;
              tmp3561.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3561, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3561.Name = "E";
                tmp3561.Type = TType.Struct;
                tmp3561.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3561, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mRegisterValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3562 = new StringBuilder("mRegisterValue_result(");
          int tmp3563 = 0;
          if(__isset.success)
          {
            if(0 < tmp3563++) { tmp3562.Append(", "); }
            tmp3562.Append("Success: ");
            Success.ToString(tmp3562);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3563++) { tmp3562.Append(", "); }
            tmp3562.Append("E: ");
            E.ToString(tmp3562);
          }
          tmp3562.Append(')');
          return tmp3562.ToString();
        }
      }


      public partial class setMRegisterValue_args : TBase
      {
        private long _c;
        private int _index;
        private int _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public int Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool @value;
        }

        public setMRegisterValue_args()
        {
        }

        public setMRegisterValue_args DeepCopy()
        {
          var tmp3564 = new setMRegisterValue_args();
          if(__isset.c)
          {
            tmp3564.C = this.C;
          }
          tmp3564.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3564.Index = this.Index;
          }
          tmp3564.__isset.index = this.__isset.index;
          if(__isset.@value)
          {
            tmp3564.Value = this.Value;
          }
          tmp3564.__isset.@value = this.__isset.@value;
          return tmp3564;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Value = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3565 = new TStruct("setMRegisterValue_args");
            await oprot.WriteStructBeginAsync(tmp3565, cancellationToken);
            var tmp3566 = new TField();
            if(__isset.c)
            {
              tmp3566.Name = "c";
              tmp3566.Type = TType.I64;
              tmp3566.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3566, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3566.Name = "index";
              tmp3566.Type = TType.I32;
              tmp3566.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3566, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3566.Name = "value";
              tmp3566.Type = TType.I32;
              tmp3566.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3566, cancellationToken);
              await oprot.WriteI32Async(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setMRegisterValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3567 = new StringBuilder("setMRegisterValue_args(");
          int tmp3568 = 0;
          if(__isset.c)
          {
            if(0 < tmp3568++) { tmp3567.Append(", "); }
            tmp3567.Append("C: ");
            C.ToString(tmp3567);
          }
          if(__isset.index)
          {
            if(0 < tmp3568++) { tmp3567.Append(", "); }
            tmp3567.Append("Index: ");
            Index.ToString(tmp3567);
          }
          if(__isset.@value)
          {
            if(0 < tmp3568++) { tmp3567.Append(", "); }
            tmp3567.Append("Value: ");
            Value.ToString(tmp3567);
          }
          tmp3567.Append(')');
          return tmp3567.ToString();
        }
      }


      public partial class fieldBusStatusInputGroup_args : TBase
      {
        private long _c;
        private string _busType;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string BusType
        {
          get
          {
            return _busType;
          }
          set
          {
            __isset.busType = true;
            this._busType = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool busType;
        }

        public fieldBusStatusInputGroup_args()
        {
        }

        public fieldBusStatusInputGroup_args DeepCopy()
        {
          var tmp3569 = new fieldBusStatusInputGroup_args();
          if(__isset.c)
          {
            tmp3569.C = this.C;
          }
          tmp3569.__isset.c = this.__isset.c;
          if((BusType != null) && __isset.busType)
          {
            tmp3569.BusType = this.BusType;
          }
          tmp3569.__isset.busType = this.__isset.busType;
          return tmp3569;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    BusType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3570 = new TStruct("fieldBusStatusInputGroup_args");
            await oprot.WriteStructBeginAsync(tmp3570, cancellationToken);
            var tmp3571 = new TField();
            if(__isset.c)
            {
              tmp3571.Name = "c";
              tmp3571.Type = TType.I64;
              tmp3571.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3571, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((BusType != null) && __isset.busType)
            {
              tmp3571.Name = "busType";
              tmp3571.Type = TType.String;
              tmp3571.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3571, cancellationToken);
              await oprot.WriteStringAsync(BusType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is fieldBusStatusInputGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.busType == other.__isset.busType) && ((!__isset.busType) || (global::System.Object.Equals(BusType, other.BusType))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((BusType != null) && __isset.busType)
            {
              hashcode = (hashcode * 397) + BusType.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3572 = new StringBuilder("fieldBusStatusInputGroup_args(");
          int tmp3573 = 0;
          if(__isset.c)
          {
            if(0 < tmp3573++) { tmp3572.Append(", "); }
            tmp3572.Append("C: ");
            C.ToString(tmp3572);
          }
          if((BusType != null) && __isset.busType)
          {
            if(0 < tmp3573++) { tmp3572.Append(", "); }
            tmp3572.Append("BusType: ");
            BusType.ToString(tmp3572);
          }
          tmp3572.Append(')');
          return tmp3572.ToString();
        }
      }


      public partial class fieldBusStatusInputGroup_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public fieldBusStatusInputGroup_result()
        {
        }

        public fieldBusStatusInputGroup_result DeepCopy()
        {
          var tmp3574 = new fieldBusStatusInputGroup_result();
          if(__isset.success)
          {
            tmp3574.Success = this.Success;
          }
          tmp3574.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3574.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3574.__isset.e = this.__isset.e;
          return tmp3574;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3575 = new TStruct("fieldBusStatusInputGroup_result");
            await oprot.WriteStructBeginAsync(tmp3575, cancellationToken);
            var tmp3576 = new TField();

            if(this.__isset.success)
            {
              tmp3576.Name = "Success";
              tmp3576.Type = TType.I32;
              tmp3576.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3576, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3576.Name = "E";
                tmp3576.Type = TType.Struct;
                tmp3576.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3576, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is fieldBusStatusInputGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3577 = new StringBuilder("fieldBusStatusInputGroup_result(");
          int tmp3578 = 0;
          if(__isset.success)
          {
            if(0 < tmp3578++) { tmp3577.Append(", "); }
            tmp3577.Append("Success: ");
            Success.ToString(tmp3577);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3578++) { tmp3577.Append(", "); }
            tmp3577.Append("E: ");
            E.ToString(tmp3577);
          }
          tmp3577.Append(')');
          return tmp3577.ToString();
        }
      }


      public partial class controlGroups_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public controlGroups_args()
        {
        }

        public controlGroups_args DeepCopy()
        {
          var tmp3579 = new controlGroups_args();
          if(__isset.c)
          {
            tmp3579.C = this.C;
          }
          tmp3579.__isset.c = this.__isset.c;
          return tmp3579;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3580 = new TStruct("controlGroups_args");
            await oprot.WriteStructBeginAsync(tmp3580, cancellationToken);
            var tmp3581 = new TField();
            if(__isset.c)
            {
              tmp3581.Name = "c";
              tmp3581.Type = TType.I64;
              tmp3581.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3581, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controlGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3582 = new StringBuilder("controlGroups_args(");
          int tmp3583 = 0;
          if(__isset.c)
          {
            if(0 < tmp3583++) { tmp3582.Append(", "); }
            tmp3582.Append("C: ");
            C.ToString(tmp3582);
          }
          tmp3582.Append(')');
          return tmp3582.ToString();
        }
      }


      public partial class controlGroups_result : TBase
      {
        private List<global::Yaskawa.Ext.API.ControlGroup> _success;

        public List<global::Yaskawa.Ext.API.ControlGroup> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public controlGroups_result()
        {
        }

        public controlGroups_result DeepCopy()
        {
          var tmp3584 = new controlGroups_result();
          if((Success != null) && __isset.success)
          {
            tmp3584.Success = this.Success.DeepCopy();
          }
          tmp3584.__isset.success = this.__isset.success;
          return tmp3584;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3585 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.ControlGroup>(_list3585.Count);
                      for(int _i3586 = 0; _i3586 < _list3585.Count; ++_i3586)
                      {
                        global::Yaskawa.Ext.API.ControlGroup _elem3587;
                        _elem3587 = new global::Yaskawa.Ext.API.ControlGroup();
                        await _elem3587.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem3587);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3588 = new TStruct("controlGroups_result");
            await oprot.WriteStructBeginAsync(tmp3588, cancellationToken);
            var tmp3589 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3589.Name = "Success";
                tmp3589.Type = TType.List;
                tmp3589.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3589, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.ControlGroup _iter3590 in Success)
                {
                  await _iter3590.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controlGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3591 = new StringBuilder("controlGroups_result(");
          int tmp3592 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3592++) { tmp3591.Append(", "); }
            tmp3591.Append("Success: ");
            Success.ToString(tmp3591);
          }
          tmp3591.Append(')');
          return tmp3591.ToString();
        }
      }


      public partial class currentControlGroup_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentControlGroup_args()
        {
        }

        public currentControlGroup_args DeepCopy()
        {
          var tmp3593 = new currentControlGroup_args();
          if(__isset.c)
          {
            tmp3593.C = this.C;
          }
          tmp3593.__isset.c = this.__isset.c;
          return tmp3593;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3594 = new TStruct("currentControlGroup_args");
            await oprot.WriteStructBeginAsync(tmp3594, cancellationToken);
            var tmp3595 = new TField();
            if(__isset.c)
            {
              tmp3595.Name = "c";
              tmp3595.Type = TType.I64;
              tmp3595.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3595, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentControlGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3596 = new StringBuilder("currentControlGroup_args(");
          int tmp3597 = 0;
          if(__isset.c)
          {
            if(0 < tmp3597++) { tmp3596.Append(", "); }
            tmp3596.Append("C: ");
            C.ToString(tmp3596);
          }
          tmp3596.Append(')');
          return tmp3596.ToString();
        }
      }


      public partial class currentControlGroup_result : TBase
      {
        private sbyte _success;

        public sbyte Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentControlGroup_result()
        {
        }

        public currentControlGroup_result DeepCopy()
        {
          var tmp3598 = new currentControlGroup_result();
          if(__isset.success)
          {
            tmp3598.Success = this.Success;
          }
          tmp3598.__isset.success = this.__isset.success;
          return tmp3598;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Byte)
                  {
                    Success = await iprot.ReadByteAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3599 = new TStruct("currentControlGroup_result");
            await oprot.WriteStructBeginAsync(tmp3599, cancellationToken);
            var tmp3600 = new TField();

            if(this.__isset.success)
            {
              tmp3600.Name = "Success";
              tmp3600.Type = TType.Byte;
              tmp3600.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3600, cancellationToken);
              await oprot.WriteByteAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentControlGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3601 = new StringBuilder("currentControlGroup_result(");
          int tmp3602 = 0;
          if(__isset.success)
          {
            if(0 < tmp3602++) { tmp3601.Append(", "); }
            tmp3601.Append("Success: ");
            Success.ToString(tmp3601);
          }
          tmp3601.Append(')');
          return tmp3601.ToString();
        }
      }


      public partial class robotCount_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public robotCount_args()
        {
        }

        public robotCount_args DeepCopy()
        {
          var tmp3603 = new robotCount_args();
          if(__isset.c)
          {
            tmp3603.C = this.C;
          }
          tmp3603.__isset.c = this.__isset.c;
          return tmp3603;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3604 = new TStruct("robotCount_args");
            await oprot.WriteStructBeginAsync(tmp3604, cancellationToken);
            var tmp3605 = new TField();
            if(__isset.c)
            {
              tmp3605.Name = "c";
              tmp3605.Type = TType.I64;
              tmp3605.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3605, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is robotCount_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3606 = new StringBuilder("robotCount_args(");
          int tmp3607 = 0;
          if(__isset.c)
          {
            if(0 < tmp3607++) { tmp3606.Append(", "); }
            tmp3606.Append("C: ");
            C.ToString(tmp3606);
          }
          tmp3606.Append(')');
          return tmp3606.ToString();
        }
      }


      public partial class robotCount_result : TBase
      {
        private sbyte _success;

        public sbyte Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public robotCount_result()
        {
        }

        public robotCount_result DeepCopy()
        {
          var tmp3608 = new robotCount_result();
          if(__isset.success)
          {
            tmp3608.Success = this.Success;
          }
          tmp3608.__isset.success = this.__isset.success;
          return tmp3608;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Byte)
                  {
                    Success = await iprot.ReadByteAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3609 = new TStruct("robotCount_result");
            await oprot.WriteStructBeginAsync(tmp3609, cancellationToken);
            var tmp3610 = new TField();

            if(this.__isset.success)
            {
              tmp3610.Name = "Success";
              tmp3610.Type = TType.Byte;
              tmp3610.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3610, cancellationToken);
              await oprot.WriteByteAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is robotCount_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3611 = new StringBuilder("robotCount_result(");
          int tmp3612 = 0;
          if(__isset.success)
          {
            if(0 < tmp3612++) { tmp3611.Append(", "); }
            tmp3611.Append("Success: ");
            Success.ToString(tmp3611);
          }
          tmp3611.Append(')');
          return tmp3611.ToString();
        }
      }


      public partial class currentRobot_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentRobot_args()
        {
        }

        public currentRobot_args DeepCopy()
        {
          var tmp3613 = new currentRobot_args();
          if(__isset.c)
          {
            tmp3613.C = this.C;
          }
          tmp3613.__isset.c = this.__isset.c;
          return tmp3613;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3614 = new TStruct("currentRobot_args");
            await oprot.WriteStructBeginAsync(tmp3614, cancellationToken);
            var tmp3615 = new TField();
            if(__isset.c)
            {
              tmp3615.Name = "c";
              tmp3615.Type = TType.I64;
              tmp3615.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3615, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentRobot_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3616 = new StringBuilder("currentRobot_args(");
          int tmp3617 = 0;
          if(__isset.c)
          {
            if(0 < tmp3617++) { tmp3616.Append(", "); }
            tmp3616.Append("C: ");
            C.ToString(tmp3616);
          }
          tmp3616.Append(')');
          return tmp3616.ToString();
        }
      }


      public partial class currentRobot_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentRobot_result()
        {
        }

        public currentRobot_result DeepCopy()
        {
          var tmp3618 = new currentRobot_result();
          if(__isset.success)
          {
            tmp3618.Success = this.Success;
          }
          tmp3618.__isset.success = this.__isset.success;
          return tmp3618;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3619 = new TStruct("currentRobot_result");
            await oprot.WriteStructBeginAsync(tmp3619, cancellationToken);
            var tmp3620 = new TField();

            if(this.__isset.success)
            {
              tmp3620.Name = "Success";
              tmp3620.Type = TType.I32;
              tmp3620.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3620, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentRobot_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3621 = new StringBuilder("currentRobot_result(");
          int tmp3622 = 0;
          if(__isset.success)
          {
            if(0 < tmp3622++) { tmp3621.Append(", "); }
            tmp3621.Append("Success: ");
            Success.ToString(tmp3621);
          }
          tmp3621.Append(')');
          return tmp3621.ToString();
        }
      }


      public partial class variable_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public variable_args()
        {
        }

        public variable_args DeepCopy()
        {
          var tmp3623 = new variable_args();
          if(__isset.c)
          {
            tmp3623.C = this.C;
          }
          tmp3623.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3623.Name = this.Name;
          }
          tmp3623.__isset.name = this.__isset.name;
          return tmp3623;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3624 = new TStruct("variable_args");
            await oprot.WriteStructBeginAsync(tmp3624, cancellationToken);
            var tmp3625 = new TField();
            if(__isset.c)
            {
              tmp3625.Name = "c";
              tmp3625.Type = TType.I64;
              tmp3625.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3625, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3625.Name = "name";
              tmp3625.Type = TType.String;
              tmp3625.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3625, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3626 = new StringBuilder("variable_args(");
          int tmp3627 = 0;
          if(__isset.c)
          {
            if(0 < tmp3627++) { tmp3626.Append(", "); }
            tmp3626.Append("C: ");
            C.ToString(tmp3626);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3627++) { tmp3626.Append(", "); }
            tmp3626.Append("Name: ");
            Name.ToString(tmp3626);
          }
          tmp3626.Append(')');
          return tmp3626.ToString();
        }
      }


      public partial class variable_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variable_result()
        {
        }

        public variable_result DeepCopy()
        {
          var tmp3628 = new variable_result();
          if((Success != null) && __isset.success)
          {
            tmp3628.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp3628.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3628.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3628.__isset.e = this.__isset.e;
          return tmp3628;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3629 = new TStruct("variable_result");
            await oprot.WriteStructBeginAsync(tmp3629, cancellationToken);
            var tmp3630 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3630.Name = "Success";
                tmp3630.Type = TType.Struct;
                tmp3630.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3630, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3630.Name = "E";
                tmp3630.Type = TType.Struct;
                tmp3630.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3630, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3631 = new StringBuilder("variable_result(");
          int tmp3632 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3632++) { tmp3631.Append(", "); }
            tmp3631.Append("Success: ");
            Success.ToString(tmp3631);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3632++) { tmp3631.Append(", "); }
            tmp3631.Append("E: ");
            E.ToString(tmp3631);
          }
          tmp3631.Append(')');
          return tmp3631.ToString();
        }
      }


      public partial class variableByAddr_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public variableByAddr_args()
        {
        }

        public variableByAddr_args DeepCopy()
        {
          var tmp3633 = new variableByAddr_args();
          if(__isset.c)
          {
            tmp3633.C = this.C;
          }
          tmp3633.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3633.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3633.__isset.addr = this.__isset.addr;
          return tmp3633;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3634 = new TStruct("variableByAddr_args");
            await oprot.WriteStructBeginAsync(tmp3634, cancellationToken);
            var tmp3635 = new TField();
            if(__isset.c)
            {
              tmp3635.Name = "c";
              tmp3635.Type = TType.I64;
              tmp3635.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3635, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3635.Name = "addr";
              tmp3635.Type = TType.Struct;
              tmp3635.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3635, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableByAddr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3636 = new StringBuilder("variableByAddr_args(");
          int tmp3637 = 0;
          if(__isset.c)
          {
            if(0 < tmp3637++) { tmp3636.Append(", "); }
            tmp3636.Append("C: ");
            C.ToString(tmp3636);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3637++) { tmp3636.Append(", "); }
            tmp3636.Append("Addr: ");
            Addr.ToString(tmp3636);
          }
          tmp3636.Append(')');
          return tmp3636.ToString();
        }
      }


      public partial class variableByAddr_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableByAddr_result()
        {
        }

        public variableByAddr_result DeepCopy()
        {
          var tmp3638 = new variableByAddr_result();
          if((Success != null) && __isset.success)
          {
            tmp3638.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp3638.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3638.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3638.__isset.e = this.__isset.e;
          return tmp3638;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3639 = new TStruct("variableByAddr_result");
            await oprot.WriteStructBeginAsync(tmp3639, cancellationToken);
            var tmp3640 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3640.Name = "Success";
                tmp3640.Type = TType.Struct;
                tmp3640.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3640, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3640.Name = "E";
                tmp3640.Type = TType.Struct;
                tmp3640.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3640, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableByAddr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3641 = new StringBuilder("variableByAddr_result(");
          int tmp3642 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3642++) { tmp3641.Append(", "); }
            tmp3641.Append("Success: ");
            Success.ToString(tmp3641);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3642++) { tmp3641.Append(", "); }
            tmp3641.Append("E: ");
            E.ToString(tmp3641);
          }
          tmp3641.Append(')');
          return tmp3641.ToString();
        }
      }


      public partial class setVariable_args : TBase
      {
        private long _c;
        private string _name;
        private global::Yaskawa.Ext.API.Any _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool @value;
        }

        public setVariable_args()
        {
        }

        public setVariable_args DeepCopy()
        {
          var tmp3643 = new setVariable_args();
          if(__isset.c)
          {
            tmp3643.C = this.C;
          }
          tmp3643.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3643.Name = this.Name;
          }
          tmp3643.__isset.name = this.__isset.name;
          if((Value != null) && __isset.@value)
          {
            tmp3643.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp3643.__isset.@value = this.__isset.@value;
          return tmp3643;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3644 = new TStruct("setVariable_args");
            await oprot.WriteStructBeginAsync(tmp3644, cancellationToken);
            var tmp3645 = new TField();
            if(__isset.c)
            {
              tmp3645.Name = "c";
              tmp3645.Type = TType.I64;
              tmp3645.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3645, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3645.Name = "name";
              tmp3645.Type = TType.String;
              tmp3645.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3645, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp3645.Name = "value";
              tmp3645.Type = TType.Struct;
              tmp3645.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3645, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3646 = new StringBuilder("setVariable_args(");
          int tmp3647 = 0;
          if(__isset.c)
          {
            if(0 < tmp3647++) { tmp3646.Append(", "); }
            tmp3646.Append("C: ");
            C.ToString(tmp3646);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3647++) { tmp3646.Append(", "); }
            tmp3646.Append("Name: ");
            Name.ToString(tmp3646);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp3647++) { tmp3646.Append(", "); }
            tmp3646.Append("Value: ");
            Value.ToString(tmp3646);
          }
          tmp3646.Append(')');
          return tmp3646.ToString();
        }
      }


      public partial class setVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariable_result()
        {
        }

        public setVariable_result DeepCopy()
        {
          var tmp3648 = new setVariable_result();
          if((E != null) && __isset.e)
          {
            tmp3648.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3648.__isset.e = this.__isset.e;
          return tmp3648;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3649 = new TStruct("setVariable_result");
            await oprot.WriteStructBeginAsync(tmp3649, cancellationToken);
            var tmp3650 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3650.Name = "E";
                tmp3650.Type = TType.Struct;
                tmp3650.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3650, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3651 = new StringBuilder("setVariable_result(");
          int tmp3652 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3652++) { tmp3651.Append(", "); }
            tmp3651.Append("E: ");
            E.ToString(tmp3651);
          }
          tmp3651.Append(')');
          return tmp3651.ToString();
        }
      }


      public partial class setVariableByAddr_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;
        private global::Yaskawa.Ext.API.Any _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
          public bool @value;
        }

        public setVariableByAddr_args()
        {
        }

        public setVariableByAddr_args DeepCopy()
        {
          var tmp3653 = new setVariableByAddr_args();
          if(__isset.c)
          {
            tmp3653.C = this.C;
          }
          tmp3653.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3653.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3653.__isset.addr = this.__isset.addr;
          if((Value != null) && __isset.@value)
          {
            tmp3653.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp3653.__isset.@value = this.__isset.@value;
          return tmp3653;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3654 = new TStruct("setVariableByAddr_args");
            await oprot.WriteStructBeginAsync(tmp3654, cancellationToken);
            var tmp3655 = new TField();
            if(__isset.c)
            {
              tmp3655.Name = "c";
              tmp3655.Type = TType.I64;
              tmp3655.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3655, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3655.Name = "addr";
              tmp3655.Type = TType.Struct;
              tmp3655.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3655, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp3655.Name = "value";
              tmp3655.Type = TType.Struct;
              tmp3655.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3655, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableByAddr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3656 = new StringBuilder("setVariableByAddr_args(");
          int tmp3657 = 0;
          if(__isset.c)
          {
            if(0 < tmp3657++) { tmp3656.Append(", "); }
            tmp3656.Append("C: ");
            C.ToString(tmp3656);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3657++) { tmp3656.Append(", "); }
            tmp3656.Append("Addr: ");
            Addr.ToString(tmp3656);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp3657++) { tmp3656.Append(", "); }
            tmp3656.Append("Value: ");
            Value.ToString(tmp3656);
          }
          tmp3656.Append(')');
          return tmp3656.ToString();
        }
      }


      public partial class setVariableByAddr_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariableByAddr_result()
        {
        }

        public setVariableByAddr_result DeepCopy()
        {
          var tmp3658 = new setVariableByAddr_result();
          if((E != null) && __isset.e)
          {
            tmp3658.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3658.__isset.e = this.__isset.e;
          return tmp3658;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3659 = new TStruct("setVariableByAddr_result");
            await oprot.WriteStructBeginAsync(tmp3659, cancellationToken);
            var tmp3660 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3660.Name = "E";
                tmp3660.Type = TType.Struct;
                tmp3660.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3660, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableByAddr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3661 = new StringBuilder("setVariableByAddr_result(");
          int tmp3662 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3662++) { tmp3661.Append(", "); }
            tmp3661.Append("E: ");
            E.ToString(tmp3661);
          }
          tmp3661.Append(')');
          return tmp3661.ToString();
        }
      }


      public partial class variableAddrByNameAndSpace_args : TBase
      {
        private long _c;
        private string _name;
        private global::Yaskawa.Ext.API.AddressSpace _space;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.AddressSpace"/>
        /// </summary>
        public global::Yaskawa.Ext.API.AddressSpace Space
        {
          get
          {
            return _space;
          }
          set
          {
            __isset.space = true;
            this._space = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool space;
        }

        public variableAddrByNameAndSpace_args()
        {
        }

        public variableAddrByNameAndSpace_args DeepCopy()
        {
          var tmp3663 = new variableAddrByNameAndSpace_args();
          if(__isset.c)
          {
            tmp3663.C = this.C;
          }
          tmp3663.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3663.Name = this.Name;
          }
          tmp3663.__isset.name = this.__isset.name;
          if(__isset.space)
          {
            tmp3663.Space = this.Space;
          }
          tmp3663.__isset.space = this.__isset.space;
          return tmp3663;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Space = (global::Yaskawa.Ext.API.AddressSpace)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3664 = new TStruct("variableAddrByNameAndSpace_args");
            await oprot.WriteStructBeginAsync(tmp3664, cancellationToken);
            var tmp3665 = new TField();
            if(__isset.c)
            {
              tmp3665.Name = "c";
              tmp3665.Type = TType.I64;
              tmp3665.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3665, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3665.Name = "name";
              tmp3665.Type = TType.String;
              tmp3665.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3665, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.space)
            {
              tmp3665.Name = "space";
              tmp3665.Type = TType.I32;
              tmp3665.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3665, cancellationToken);
              await oprot.WriteI32Async((int)Space, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByNameAndSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.space == other.__isset.space) && ((!__isset.space) || (global::System.Object.Equals(Space, other.Space))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if(__isset.space)
            {
              hashcode = (hashcode * 397) + Space.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3666 = new StringBuilder("variableAddrByNameAndSpace_args(");
          int tmp3667 = 0;
          if(__isset.c)
          {
            if(0 < tmp3667++) { tmp3666.Append(", "); }
            tmp3666.Append("C: ");
            C.ToString(tmp3666);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3667++) { tmp3666.Append(", "); }
            tmp3666.Append("Name: ");
            Name.ToString(tmp3666);
          }
          if(__isset.space)
          {
            if(0 < tmp3667++) { tmp3666.Append(", "); }
            tmp3666.Append("Space: ");
            Space.ToString(tmp3666);
          }
          tmp3666.Append(')');
          return tmp3666.ToString();
        }
      }


      public partial class variableAddrByNameAndSpace_result : TBase
      {
        private global::Yaskawa.Ext.API.VariableAddress _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.VariableAddress Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableAddrByNameAndSpace_result()
        {
        }

        public variableAddrByNameAndSpace_result DeepCopy()
        {
          var tmp3668 = new variableAddrByNameAndSpace_result();
          if((Success != null) && __isset.success)
          {
            tmp3668.Success = (global::Yaskawa.Ext.API.VariableAddress)this.Success.DeepCopy();
          }
          tmp3668.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3668.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3668.__isset.e = this.__isset.e;
          return tmp3668;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.VariableAddress();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3669 = new TStruct("variableAddrByNameAndSpace_result");
            await oprot.WriteStructBeginAsync(tmp3669, cancellationToken);
            var tmp3670 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3670.Name = "Success";
                tmp3670.Type = TType.Struct;
                tmp3670.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3670, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3670.Name = "E";
                tmp3670.Type = TType.Struct;
                tmp3670.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3670, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByNameAndSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3671 = new StringBuilder("variableAddrByNameAndSpace_result(");
          int tmp3672 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3672++) { tmp3671.Append(", "); }
            tmp3671.Append("Success: ");
            Success.ToString(tmp3671);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3672++) { tmp3671.Append(", "); }
            tmp3671.Append("E: ");
            E.ToString(tmp3671);
          }
          tmp3671.Append(')');
          return tmp3671.ToString();
        }
      }


      public partial class variableAddrByName_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public variableAddrByName_args()
        {
        }

        public variableAddrByName_args DeepCopy()
        {
          var tmp3673 = new variableAddrByName_args();
          if(__isset.c)
          {
            tmp3673.C = this.C;
          }
          tmp3673.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3673.Name = this.Name;
          }
          tmp3673.__isset.name = this.__isset.name;
          return tmp3673;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3674 = new TStruct("variableAddrByName_args");
            await oprot.WriteStructBeginAsync(tmp3674, cancellationToken);
            var tmp3675 = new TField();
            if(__isset.c)
            {
              tmp3675.Name = "c";
              tmp3675.Type = TType.I64;
              tmp3675.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3675, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3675.Name = "name";
              tmp3675.Type = TType.String;
              tmp3675.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3675, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3676 = new StringBuilder("variableAddrByName_args(");
          int tmp3677 = 0;
          if(__isset.c)
          {
            if(0 < tmp3677++) { tmp3676.Append(", "); }
            tmp3676.Append("C: ");
            C.ToString(tmp3676);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3677++) { tmp3676.Append(", "); }
            tmp3676.Append("Name: ");
            Name.ToString(tmp3676);
          }
          tmp3676.Append(')');
          return tmp3676.ToString();
        }
      }


      public partial class variableAddrByName_result : TBase
      {
        private global::Yaskawa.Ext.API.VariableAddress _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.VariableAddress Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableAddrByName_result()
        {
        }

        public variableAddrByName_result DeepCopy()
        {
          var tmp3678 = new variableAddrByName_result();
          if((Success != null) && __isset.success)
          {
            tmp3678.Success = (global::Yaskawa.Ext.API.VariableAddress)this.Success.DeepCopy();
          }
          tmp3678.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3678.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3678.__isset.e = this.__isset.e;
          return tmp3678;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.VariableAddress();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3679 = new TStruct("variableAddrByName_result");
            await oprot.WriteStructBeginAsync(tmp3679, cancellationToken);
            var tmp3680 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3680.Name = "Success";
                tmp3680.Type = TType.Struct;
                tmp3680.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3680, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3680.Name = "E";
                tmp3680.Type = TType.Struct;
                tmp3680.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3680, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3681 = new StringBuilder("variableAddrByName_result(");
          int tmp3682 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3682++) { tmp3681.Append(", "); }
            tmp3681.Append("Success: ");
            Success.ToString(tmp3681);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3682++) { tmp3681.Append(", "); }
            tmp3681.Append("E: ");
            E.ToString(tmp3681);
          }
          tmp3681.Append(')');
          return tmp3681.ToString();
        }
      }


      public partial class setVariableName_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
          public bool name;
        }

        public setVariableName_args()
        {
        }

        public setVariableName_args DeepCopy()
        {
          var tmp3683 = new setVariableName_args();
          if(__isset.c)
          {
            tmp3683.C = this.C;
          }
          tmp3683.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3683.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3683.__isset.addr = this.__isset.addr;
          if((Name != null) && __isset.name)
          {
            tmp3683.Name = this.Name;
          }
          tmp3683.__isset.name = this.__isset.name;
          return tmp3683;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3684 = new TStruct("setVariableName_args");
            await oprot.WriteStructBeginAsync(tmp3684, cancellationToken);
            var tmp3685 = new TField();
            if(__isset.c)
            {
              tmp3685.Name = "c";
              tmp3685.Type = TType.I64;
              tmp3685.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3685, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3685.Name = "addr";
              tmp3685.Type = TType.Struct;
              tmp3685.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3685, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3685.Name = "name";
              tmp3685.Type = TType.String;
              tmp3685.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3685, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3686 = new StringBuilder("setVariableName_args(");
          int tmp3687 = 0;
          if(__isset.c)
          {
            if(0 < tmp3687++) { tmp3686.Append(", "); }
            tmp3686.Append("C: ");
            C.ToString(tmp3686);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3687++) { tmp3686.Append(", "); }
            tmp3686.Append("Addr: ");
            Addr.ToString(tmp3686);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3687++) { tmp3686.Append(", "); }
            tmp3686.Append("Name: ");
            Name.ToString(tmp3686);
          }
          tmp3686.Append(')');
          return tmp3686.ToString();
        }
      }


      public partial class setVariableName_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariableName_result()
        {
        }

        public setVariableName_result DeepCopy()
        {
          var tmp3688 = new setVariableName_result();
          if((E != null) && __isset.e)
          {
            tmp3688.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3688.__isset.e = this.__isset.e;
          return tmp3688;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3689 = new TStruct("setVariableName_result");
            await oprot.WriteStructBeginAsync(tmp3689, cancellationToken);
            var tmp3690 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3690.Name = "E";
                tmp3690.Type = TType.Struct;
                tmp3690.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3690, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3691 = new StringBuilder("setVariableName_result(");
          int tmp3692 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3692++) { tmp3691.Append(", "); }
            tmp3691.Append("E: ");
            E.ToString(tmp3691);
          }
          tmp3691.Append(')');
          return tmp3691.ToString();
        }
      }


      public partial class monitorVariable_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public monitorVariable_args()
        {
        }

        public monitorVariable_args DeepCopy()
        {
          var tmp3693 = new monitorVariable_args();
          if(__isset.c)
          {
            tmp3693.C = this.C;
          }
          tmp3693.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3693.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3693.__isset.addr = this.__isset.addr;
          return tmp3693;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3694 = new TStruct("monitorVariable_args");
            await oprot.WriteStructBeginAsync(tmp3694, cancellationToken);
            var tmp3695 = new TField();
            if(__isset.c)
            {
              tmp3695.Name = "c";
              tmp3695.Type = TType.I64;
              tmp3695.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3695, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3695.Name = "addr";
              tmp3695.Type = TType.Struct;
              tmp3695.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3695, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3696 = new StringBuilder("monitorVariable_args(");
          int tmp3697 = 0;
          if(__isset.c)
          {
            if(0 < tmp3697++) { tmp3696.Append(", "); }
            tmp3696.Append("C: ");
            C.ToString(tmp3696);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3697++) { tmp3696.Append(", "); }
            tmp3696.Append("Addr: ");
            Addr.ToString(tmp3696);
          }
          tmp3696.Append(')');
          return tmp3696.ToString();
        }
      }


      public partial class monitorVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorVariable_result()
        {
        }

        public monitorVariable_result DeepCopy()
        {
          var tmp3698 = new monitorVariable_result();
          if((E != null) && __isset.e)
          {
            tmp3698.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3698.__isset.e = this.__isset.e;
          return tmp3698;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3699 = new TStruct("monitorVariable_result");
            await oprot.WriteStructBeginAsync(tmp3699, cancellationToken);
            var tmp3700 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3700.Name = "E";
                tmp3700.Type = TType.Struct;
                tmp3700.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3700, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3701 = new StringBuilder("monitorVariable_result(");
          int tmp3702 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3702++) { tmp3701.Append(", "); }
            tmp3701.Append("E: ");
            E.ToString(tmp3701);
          }
          tmp3701.Append(')');
          return tmp3701.ToString();
        }
      }


      public partial class unmonitorVariable_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public unmonitorVariable_args()
        {
        }

        public unmonitorVariable_args DeepCopy()
        {
          var tmp3703 = new unmonitorVariable_args();
          if(__isset.c)
          {
            tmp3703.C = this.C;
          }
          tmp3703.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3703.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3703.__isset.addr = this.__isset.addr;
          return tmp3703;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3704 = new TStruct("unmonitorVariable_args");
            await oprot.WriteStructBeginAsync(tmp3704, cancellationToken);
            var tmp3705 = new TField();
            if(__isset.c)
            {
              tmp3705.Name = "c";
              tmp3705.Type = TType.I64;
              tmp3705.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3705, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3705.Name = "addr";
              tmp3705.Type = TType.Struct;
              tmp3705.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3705, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3706 = new StringBuilder("unmonitorVariable_args(");
          int tmp3707 = 0;
          if(__isset.c)
          {
            if(0 < tmp3707++) { tmp3706.Append(", "); }
            tmp3706.Append("C: ");
            C.ToString(tmp3706);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3707++) { tmp3706.Append(", "); }
            tmp3706.Append("Addr: ");
            Addr.ToString(tmp3706);
          }
          tmp3706.Append(')');
          return tmp3706.ToString();
        }
      }


      public partial class unmonitorVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unmonitorVariable_result()
        {
        }

        public unmonitorVariable_result DeepCopy()
        {
          var tmp3708 = new unmonitorVariable_result();
          if((E != null) && __isset.e)
          {
            tmp3708.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3708.__isset.e = this.__isset.e;
          return tmp3708;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3709 = new TStruct("unmonitorVariable_result");
            await oprot.WriteStructBeginAsync(tmp3709, cancellationToken);
            var tmp3710 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3710.Name = "E";
                tmp3710.Type = TType.Struct;
                tmp3710.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3710, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3711 = new StringBuilder("unmonitorVariable_result(");
          int tmp3712 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3712++) { tmp3711.Append(", "); }
            tmp3711.Append("E: ");
            E.ToString(tmp3711);
          }
          tmp3711.Append(')');
          return tmp3711.ToString();
        }
      }


      public partial class variableRange_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.AddressSpace _space;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.AddressSpace"/>
        /// </summary>
        public global::Yaskawa.Ext.API.AddressSpace Space
        {
          get
          {
            return _space;
          }
          set
          {
            __isset.space = true;
            this._space = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool space;
        }

        public variableRange_args()
        {
        }

        public variableRange_args DeepCopy()
        {
          var tmp3713 = new variableRange_args();
          if(__isset.c)
          {
            tmp3713.C = this.C;
          }
          tmp3713.__isset.c = this.__isset.c;
          if(__isset.space)
          {
            tmp3713.Space = this.Space;
          }
          tmp3713.__isset.space = this.__isset.space;
          return tmp3713;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Space = (global::Yaskawa.Ext.API.AddressSpace)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3714 = new TStruct("variableRange_args");
            await oprot.WriteStructBeginAsync(tmp3714, cancellationToken);
            var tmp3715 = new TField();
            if(__isset.c)
            {
              tmp3715.Name = "c";
              tmp3715.Type = TType.I64;
              tmp3715.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3715, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.space)
            {
              tmp3715.Name = "space";
              tmp3715.Type = TType.I32;
              tmp3715.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3715, cancellationToken);
              await oprot.WriteI32Async((int)Space, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableRange_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.space == other.__isset.space) && ((!__isset.space) || (global::System.Object.Equals(Space, other.Space))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.space)
            {
              hashcode = (hashcode * 397) + Space.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3716 = new StringBuilder("variableRange_args(");
          int tmp3717 = 0;
          if(__isset.c)
          {
            if(0 < tmp3717++) { tmp3716.Append(", "); }
            tmp3716.Append("C: ");
            C.ToString(tmp3716);
          }
          if(__isset.space)
          {
            if(0 < tmp3717++) { tmp3716.Append(", "); }
            tmp3716.Append("Space: ");
            Space.ToString(tmp3716);
          }
          tmp3716.Append(')');
          return tmp3716.ToString();
        }
      }


      public partial class variableRange_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableRange_result()
        {
        }

        public variableRange_result DeepCopy()
        {
          var tmp3718 = new variableRange_result();
          if(__isset.success)
          {
            tmp3718.Success = this.Success;
          }
          tmp3718.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3718.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3718.__isset.e = this.__isset.e;
          return tmp3718;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3719 = new TStruct("variableRange_result");
            await oprot.WriteStructBeginAsync(tmp3719, cancellationToken);
            var tmp3720 = new TField();

            if(this.__isset.success)
            {
              tmp3720.Name = "Success";
              tmp3720.Type = TType.I32;
              tmp3720.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3720, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3720.Name = "E";
                tmp3720.Type = TType.Struct;
                tmp3720.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3720, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableRange_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3721 = new StringBuilder("variableRange_result(");
          int tmp3722 = 0;
          if(__isset.success)
          {
            if(0 < tmp3722++) { tmp3721.Append(", "); }
            tmp3721.Append("Success: ");
            Success.ToString(tmp3721);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3722++) { tmp3721.Append(", "); }
            tmp3721.Append("E: ");
            E.ToString(tmp3721);
          }
          tmp3721.Append(')');
          return tmp3721.ToString();
        }
      }


      public partial class transformPositionToFrame_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.Position _pos;
        private global::Yaskawa.Ext.API.CoordinateFrame _newFrame;
        private int _kinematicTool;
        private global::Yaskawa.Ext.API.InverseKinematicsScheme _ikScheme;
        private global::Yaskawa.Ext.API.Position _refPosition;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.Position Pos
        {
          get
          {
            return _pos;
          }
          set
          {
            __isset.pos = true;
            this._pos = value;
          }
        }

        public global::Yaskawa.Ext.API.CoordinateFrame NewFrame
        {
          get
          {
            return _newFrame;
          }
          set
          {
            __isset.newFrame = true;
            this._newFrame = value;
          }
        }

        public int KinematicTool
        {
          get
          {
            return _kinematicTool;
          }
          set
          {
            __isset.kinematicTool = true;
            this._kinematicTool = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.InverseKinematicsScheme"/>
        /// </summary>
        public global::Yaskawa.Ext.API.InverseKinematicsScheme IkScheme
        {
          get
          {
            return _ikScheme;
          }
          set
          {
            __isset.ikScheme = true;
            this._ikScheme = value;
          }
        }

        public global::Yaskawa.Ext.API.Position RefPosition
        {
          get
          {
            return _refPosition;
          }
          set
          {
            __isset.refPosition = true;
            this._refPosition = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool pos;
          public bool newFrame;
          public bool kinematicTool;
          public bool ikScheme;
          public bool refPosition;
        }

        public transformPositionToFrame_args()
        {
        }

        public transformPositionToFrame_args DeepCopy()
        {
          var tmp3723 = new transformPositionToFrame_args();
          if(__isset.c)
          {
            tmp3723.C = this.C;
          }
          tmp3723.__isset.c = this.__isset.c;
          if((Pos != null) && __isset.pos)
          {
            tmp3723.Pos = (global::Yaskawa.Ext.API.Position)this.Pos.DeepCopy();
          }
          tmp3723.__isset.pos = this.__isset.pos;
          if((NewFrame != null) && __isset.newFrame)
          {
            tmp3723.NewFrame = (global::Yaskawa.Ext.API.CoordinateFrame)this.NewFrame.DeepCopy();
          }
          tmp3723.__isset.newFrame = this.__isset.newFrame;
          if(__isset.kinematicTool)
          {
            tmp3723.KinematicTool = this.KinematicTool;
          }
          tmp3723.__isset.kinematicTool = this.__isset.kinematicTool;
          if(__isset.ikScheme)
          {
            tmp3723.IkScheme = this.IkScheme;
          }
          tmp3723.__isset.ikScheme = this.__isset.ikScheme;
          if((RefPosition != null) && __isset.refPosition)
          {
            tmp3723.RefPosition = (global::Yaskawa.Ext.API.Position)this.RefPosition.DeepCopy();
          }
          tmp3723.__isset.refPosition = this.__isset.refPosition;
          return tmp3723;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Pos = new global::Yaskawa.Ext.API.Position();
                    await Pos.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NewFrame = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await NewFrame.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    KinematicTool = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.I32)
                  {
                    IkScheme = (global::Yaskawa.Ext.API.InverseKinematicsScheme)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.Struct)
                  {
                    RefPosition = new global::Yaskawa.Ext.API.Position();
                    await RefPosition.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3724 = new TStruct("transformPositionToFrame_args");
            await oprot.WriteStructBeginAsync(tmp3724, cancellationToken);
            var tmp3725 = new TField();
            if(__isset.c)
            {
              tmp3725.Name = "c";
              tmp3725.Type = TType.I64;
              tmp3725.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3725, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Pos != null) && __isset.pos)
            {
              tmp3725.Name = "pos";
              tmp3725.Type = TType.Struct;
              tmp3725.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3725, cancellationToken);
              await Pos.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NewFrame != null) && __isset.newFrame)
            {
              tmp3725.Name = "newFrame";
              tmp3725.Type = TType.Struct;
              tmp3725.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3725, cancellationToken);
              await NewFrame.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.kinematicTool)
            {
              tmp3725.Name = "kinematicTool";
              tmp3725.Type = TType.I32;
              tmp3725.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3725, cancellationToken);
              await oprot.WriteI32Async(KinematicTool, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.ikScheme)
            {
              tmp3725.Name = "ikScheme";
              tmp3725.Type = TType.I32;
              tmp3725.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp3725, cancellationToken);
              await oprot.WriteI32Async((int)IkScheme, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((RefPosition != null) && __isset.refPosition)
            {
              tmp3725.Name = "refPosition";
              tmp3725.Type = TType.Struct;
              tmp3725.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp3725, cancellationToken);
              await RefPosition.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is transformPositionToFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.pos == other.__isset.pos) && ((!__isset.pos) || (global::System.Object.Equals(Pos, other.Pos))))
            && ((__isset.newFrame == other.__isset.newFrame) && ((!__isset.newFrame) || (global::System.Object.Equals(NewFrame, other.NewFrame))))
            && ((__isset.kinematicTool == other.__isset.kinematicTool) && ((!__isset.kinematicTool) || (global::System.Object.Equals(KinematicTool, other.KinematicTool))))
            && ((__isset.ikScheme == other.__isset.ikScheme) && ((!__isset.ikScheme) || (global::System.Object.Equals(IkScheme, other.IkScheme))))
            && ((__isset.refPosition == other.__isset.refPosition) && ((!__isset.refPosition) || (global::System.Object.Equals(RefPosition, other.RefPosition))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Pos != null) && __isset.pos)
            {
              hashcode = (hashcode * 397) + Pos.GetHashCode();
            }
            if((NewFrame != null) && __isset.newFrame)
            {
              hashcode = (hashcode * 397) + NewFrame.GetHashCode();
            }
            if(__isset.kinematicTool)
            {
              hashcode = (hashcode * 397) + KinematicTool.GetHashCode();
            }
            if(__isset.ikScheme)
            {
              hashcode = (hashcode * 397) + IkScheme.GetHashCode();
            }
            if((RefPosition != null) && __isset.refPosition)
            {
              hashcode = (hashcode * 397) + RefPosition.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3726 = new StringBuilder("transformPositionToFrame_args(");
          int tmp3727 = 0;
          if(__isset.c)
          {
            if(0 < tmp3727++) { tmp3726.Append(", "); }
            tmp3726.Append("C: ");
            C.ToString(tmp3726);
          }
          if((Pos != null) && __isset.pos)
          {
            if(0 < tmp3727++) { tmp3726.Append(", "); }
            tmp3726.Append("Pos: ");
            Pos.ToString(tmp3726);
          }
          if((NewFrame != null) && __isset.newFrame)
          {
            if(0 < tmp3727++) { tmp3726.Append(", "); }
            tmp3726.Append("NewFrame: ");
            NewFrame.ToString(tmp3726);
          }
          if(__isset.kinematicTool)
          {
            if(0 < tmp3727++) { tmp3726.Append(", "); }
            tmp3726.Append("KinematicTool: ");
            KinematicTool.ToString(tmp3726);
          }
          if(__isset.ikScheme)
          {
            if(0 < tmp3727++) { tmp3726.Append(", "); }
            tmp3726.Append("IkScheme: ");
            IkScheme.ToString(tmp3726);
          }
          if((RefPosition != null) && __isset.refPosition)
          {
            if(0 < tmp3727++) { tmp3726.Append(", "); }
            tmp3726.Append("RefPosition: ");
            RefPosition.ToString(tmp3726);
          }
          tmp3726.Append(')');
          return tmp3726.ToString();
        }
      }


      public partial class transformPositionToFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public transformPositionToFrame_result()
        {
        }

        public transformPositionToFrame_result DeepCopy()
        {
          var tmp3728 = new transformPositionToFrame_result();
          if((Success != null) && __isset.success)
          {
            tmp3728.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3728.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3728.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3728.__isset.e = this.__isset.e;
          return tmp3728;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3729 = new TStruct("transformPositionToFrame_result");
            await oprot.WriteStructBeginAsync(tmp3729, cancellationToken);
            var tmp3730 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3730.Name = "Success";
                tmp3730.Type = TType.Struct;
                tmp3730.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3730, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3730.Name = "E";
                tmp3730.Type = TType.Struct;
                tmp3730.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3730, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is transformPositionToFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3731 = new StringBuilder("transformPositionToFrame_result(");
          int tmp3732 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3732++) { tmp3731.Append(", "); }
            tmp3731.Append("Success: ");
            Success.ToString(tmp3731);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3732++) { tmp3731.Append(", "); }
            tmp3731.Append("E: ");
            E.ToString(tmp3731);
          }
          tmp3731.Append(')');
          return tmp3731.ToString();
        }
      }


      public partial class convertPositionUnits_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.Position _pos;
        private global::Yaskawa.Ext.API.DistanceUnit _newDistUnit;
        private global::Yaskawa.Ext.API.OrientationUnit _newOrientUnit;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.Position Pos
        {
          get
          {
            return _pos;
          }
          set
          {
            __isset.pos = true;
            this._pos = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.DistanceUnit"/>
        /// </summary>
        public global::Yaskawa.Ext.API.DistanceUnit NewDistUnit
        {
          get
          {
            return _newDistUnit;
          }
          set
          {
            __isset.newDistUnit = true;
            this._newDistUnit = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.OrientationUnit"/>
        /// </summary>
        public global::Yaskawa.Ext.API.OrientationUnit NewOrientUnit
        {
          get
          {
            return _newOrientUnit;
          }
          set
          {
            __isset.newOrientUnit = true;
            this._newOrientUnit = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool pos;
          public bool newDistUnit;
          public bool newOrientUnit;
        }

        public convertPositionUnits_args()
        {
        }

        public convertPositionUnits_args DeepCopy()
        {
          var tmp3733 = new convertPositionUnits_args();
          if(__isset.c)
          {
            tmp3733.C = this.C;
          }
          tmp3733.__isset.c = this.__isset.c;
          if((Pos != null) && __isset.pos)
          {
            tmp3733.Pos = (global::Yaskawa.Ext.API.Position)this.Pos.DeepCopy();
          }
          tmp3733.__isset.pos = this.__isset.pos;
          if(__isset.newDistUnit)
          {
            tmp3733.NewDistUnit = this.NewDistUnit;
          }
          tmp3733.__isset.newDistUnit = this.__isset.newDistUnit;
          if(__isset.newOrientUnit)
          {
            tmp3733.NewOrientUnit = this.NewOrientUnit;
          }
          tmp3733.__isset.newOrientUnit = this.__isset.newOrientUnit;
          return tmp3733;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Pos = new global::Yaskawa.Ext.API.Position();
                    await Pos.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    NewDistUnit = (global::Yaskawa.Ext.API.DistanceUnit)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    NewOrientUnit = (global::Yaskawa.Ext.API.OrientationUnit)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3734 = new TStruct("convertPositionUnits_args");
            await oprot.WriteStructBeginAsync(tmp3734, cancellationToken);
            var tmp3735 = new TField();
            if(__isset.c)
            {
              tmp3735.Name = "c";
              tmp3735.Type = TType.I64;
              tmp3735.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3735, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Pos != null) && __isset.pos)
            {
              tmp3735.Name = "pos";
              tmp3735.Type = TType.Struct;
              tmp3735.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3735, cancellationToken);
              await Pos.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.newDistUnit)
            {
              tmp3735.Name = "newDistUnit";
              tmp3735.Type = TType.I32;
              tmp3735.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3735, cancellationToken);
              await oprot.WriteI32Async((int)NewDistUnit, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.newOrientUnit)
            {
              tmp3735.Name = "newOrientUnit";
              tmp3735.Type = TType.I32;
              tmp3735.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3735, cancellationToken);
              await oprot.WriteI32Async((int)NewOrientUnit, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is convertPositionUnits_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.pos == other.__isset.pos) && ((!__isset.pos) || (global::System.Object.Equals(Pos, other.Pos))))
            && ((__isset.newDistUnit == other.__isset.newDistUnit) && ((!__isset.newDistUnit) || (global::System.Object.Equals(NewDistUnit, other.NewDistUnit))))
            && ((__isset.newOrientUnit == other.__isset.newOrientUnit) && ((!__isset.newOrientUnit) || (global::System.Object.Equals(NewOrientUnit, other.NewOrientUnit))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Pos != null) && __isset.pos)
            {
              hashcode = (hashcode * 397) + Pos.GetHashCode();
            }
            if(__isset.newDistUnit)
            {
              hashcode = (hashcode * 397) + NewDistUnit.GetHashCode();
            }
            if(__isset.newOrientUnit)
            {
              hashcode = (hashcode * 397) + NewOrientUnit.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3736 = new StringBuilder("convertPositionUnits_args(");
          int tmp3737 = 0;
          if(__isset.c)
          {
            if(0 < tmp3737++) { tmp3736.Append(", "); }
            tmp3736.Append("C: ");
            C.ToString(tmp3736);
          }
          if((Pos != null) && __isset.pos)
          {
            if(0 < tmp3737++) { tmp3736.Append(", "); }
            tmp3736.Append("Pos: ");
            Pos.ToString(tmp3736);
          }
          if(__isset.newDistUnit)
          {
            if(0 < tmp3737++) { tmp3736.Append(", "); }
            tmp3736.Append("NewDistUnit: ");
            NewDistUnit.ToString(tmp3736);
          }
          if(__isset.newOrientUnit)
          {
            if(0 < tmp3737++) { tmp3736.Append(", "); }
            tmp3736.Append("NewOrientUnit: ");
            NewOrientUnit.ToString(tmp3736);
          }
          tmp3736.Append(')');
          return tmp3736.ToString();
        }
      }


      public partial class convertPositionUnits_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public convertPositionUnits_result()
        {
        }

        public convertPositionUnits_result DeepCopy()
        {
          var tmp3738 = new convertPositionUnits_result();
          if((Success != null) && __isset.success)
          {
            tmp3738.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3738.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3738.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3738.__isset.e = this.__isset.e;
          return tmp3738;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3739 = new TStruct("convertPositionUnits_result");
            await oprot.WriteStructBeginAsync(tmp3739, cancellationToken);
            var tmp3740 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3740.Name = "Success";
                tmp3740.Type = TType.Struct;
                tmp3740.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3740, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3740.Name = "E";
                tmp3740.Type = TType.Struct;
                tmp3740.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3740, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is convertPositionUnits_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3741 = new StringBuilder("convertPositionUnits_result(");
          int tmp3742 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3742++) { tmp3741.Append(", "); }
            tmp3741.Append("Success: ");
            Success.ToString(tmp3741);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3742++) { tmp3741.Append(", "); }
            tmp3741.Append("E: ");
            E.ToString(tmp3741);
          }
          tmp3741.Append(')');
          return tmp3741.ToString();
        }
      }


      public partial class zone_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public zone_args()
        {
        }

        public zone_args DeepCopy()
        {
          var tmp3743 = new zone_args();
          if(__isset.c)
          {
            tmp3743.C = this.C;
          }
          tmp3743.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3743.Index = this.Index;
          }
          tmp3743.__isset.index = this.__isset.index;
          return tmp3743;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3744 = new TStruct("zone_args");
            await oprot.WriteStructBeginAsync(tmp3744, cancellationToken);
            var tmp3745 = new TField();
            if(__isset.c)
            {
              tmp3745.Name = "c";
              tmp3745.Type = TType.I64;
              tmp3745.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3745, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3745.Name = "index";
              tmp3745.Type = TType.I32;
              tmp3745.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3745, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is zone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3746 = new StringBuilder("zone_args(");
          int tmp3747 = 0;
          if(__isset.c)
          {
            if(0 < tmp3747++) { tmp3746.Append(", "); }
            tmp3746.Append("C: ");
            C.ToString(tmp3746);
          }
          if(__isset.index)
          {
            if(0 < tmp3747++) { tmp3746.Append(", "); }
            tmp3746.Append("Index: ");
            Index.ToString(tmp3746);
          }
          tmp3746.Append(')');
          return tmp3746.ToString();
        }
      }


      public partial class zone_result : TBase
      {
        private global::Yaskawa.Ext.API.Zone _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Zone Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public zone_result()
        {
        }

        public zone_result DeepCopy()
        {
          var tmp3748 = new zone_result();
          if((Success != null) && __isset.success)
          {
            tmp3748.Success = (global::Yaskawa.Ext.API.Zone)this.Success.DeepCopy();
          }
          tmp3748.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3748.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3748.__isset.e = this.__isset.e;
          return tmp3748;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Zone();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3749 = new TStruct("zone_result");
            await oprot.WriteStructBeginAsync(tmp3749, cancellationToken);
            var tmp3750 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3750.Name = "Success";
                tmp3750.Type = TType.Struct;
                tmp3750.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3750, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3750.Name = "E";
                tmp3750.Type = TType.Struct;
                tmp3750.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3750, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is zone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3751 = new StringBuilder("zone_result(");
          int tmp3752 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3752++) { tmp3751.Append(", "); }
            tmp3751.Append("Success: ");
            Success.ToString(tmp3751);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3752++) { tmp3751.Append(", "); }
            tmp3751.Append("E: ");
            E.ToString(tmp3751);
          }
          tmp3751.Append(')');
          return tmp3751.ToString();
        }
      }


      public partial class newZone_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public newZone_args()
        {
        }

        public newZone_args DeepCopy()
        {
          var tmp3753 = new newZone_args();
          if(__isset.c)
          {
            tmp3753.C = this.C;
          }
          tmp3753.__isset.c = this.__isset.c;
          return tmp3753;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3754 = new TStruct("newZone_args");
            await oprot.WriteStructBeginAsync(tmp3754, cancellationToken);
            var tmp3755 = new TField();
            if(__isset.c)
            {
              tmp3755.Name = "c";
              tmp3755.Type = TType.I64;
              tmp3755.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3755, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3756 = new StringBuilder("newZone_args(");
          int tmp3757 = 0;
          if(__isset.c)
          {
            if(0 < tmp3757++) { tmp3756.Append(", "); }
            tmp3756.Append("C: ");
            C.ToString(tmp3756);
          }
          tmp3756.Append(')');
          return tmp3756.ToString();
        }
      }


      public partial class newZone_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public newZone_result()
        {
        }

        public newZone_result DeepCopy()
        {
          var tmp3758 = new newZone_result();
          if(__isset.success)
          {
            tmp3758.Success = this.Success;
          }
          tmp3758.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3758.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3758.__isset.e = this.__isset.e;
          return tmp3758;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3759 = new TStruct("newZone_result");
            await oprot.WriteStructBeginAsync(tmp3759, cancellationToken);
            var tmp3760 = new TField();

            if(this.__isset.success)
            {
              tmp3760.Name = "Success";
              tmp3760.Type = TType.I32;
              tmp3760.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3760, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3760.Name = "E";
                tmp3760.Type = TType.Struct;
                tmp3760.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3760, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3761 = new StringBuilder("newZone_result(");
          int tmp3762 = 0;
          if(__isset.success)
          {
            if(0 < tmp3762++) { tmp3761.Append(", "); }
            tmp3761.Append("Success: ");
            Success.ToString(tmp3761);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3762++) { tmp3761.Append(", "); }
            tmp3761.Append("E: ");
            E.ToString(tmp3761);
          }
          tmp3761.Append(')');
          return tmp3761.ToString();
        }
      }


      public partial class modifyZone_args : TBase
      {
        private long _c;
        private int _index;
        private global::Yaskawa.Ext.API.Zone _z;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public global::Yaskawa.Ext.API.Zone Z
        {
          get
          {
            return _z;
          }
          set
          {
            __isset.z = true;
            this._z = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool z;
        }

        public modifyZone_args()
        {
        }

        public modifyZone_args DeepCopy()
        {
          var tmp3763 = new modifyZone_args();
          if(__isset.c)
          {
            tmp3763.C = this.C;
          }
          tmp3763.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3763.Index = this.Index;
          }
          tmp3763.__isset.index = this.__isset.index;
          if((Z != null) && __isset.z)
          {
            tmp3763.Z = (global::Yaskawa.Ext.API.Zone)this.Z.DeepCopy();
          }
          tmp3763.__isset.z = this.__isset.z;
          return tmp3763;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Z = new global::Yaskawa.Ext.API.Zone();
                    await Z.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3764 = new TStruct("modifyZone_args");
            await oprot.WriteStructBeginAsync(tmp3764, cancellationToken);
            var tmp3765 = new TField();
            if(__isset.c)
            {
              tmp3765.Name = "c";
              tmp3765.Type = TType.I64;
              tmp3765.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3765, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3765.Name = "index";
              tmp3765.Type = TType.I32;
              tmp3765.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3765, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Z != null) && __isset.z)
            {
              tmp3765.Name = "z";
              tmp3765.Type = TType.Struct;
              tmp3765.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3765, cancellationToken);
              await Z.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is modifyZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.z == other.__isset.z) && ((!__isset.z) || (global::System.Object.Equals(Z, other.Z))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if((Z != null) && __isset.z)
            {
              hashcode = (hashcode * 397) + Z.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3766 = new StringBuilder("modifyZone_args(");
          int tmp3767 = 0;
          if(__isset.c)
          {
            if(0 < tmp3767++) { tmp3766.Append(", "); }
            tmp3766.Append("C: ");
            C.ToString(tmp3766);
          }
          if(__isset.index)
          {
            if(0 < tmp3767++) { tmp3766.Append(", "); }
            tmp3766.Append("Index: ");
            Index.ToString(tmp3766);
          }
          if((Z != null) && __isset.z)
          {
            if(0 < tmp3767++) { tmp3766.Append(", "); }
            tmp3766.Append("Z: ");
            Z.ToString(tmp3766);
          }
          tmp3766.Append(')');
          return tmp3766.ToString();
        }
      }


      public partial class modifyZone_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public modifyZone_result()
        {
        }

        public modifyZone_result DeepCopy()
        {
          var tmp3768 = new modifyZone_result();
          if((E != null) && __isset.e)
          {
            tmp3768.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3768.__isset.e = this.__isset.e;
          return tmp3768;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3769 = new TStruct("modifyZone_result");
            await oprot.WriteStructBeginAsync(tmp3769, cancellationToken);
            var tmp3770 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3770.Name = "E";
                tmp3770.Type = TType.Struct;
                tmp3770.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3770, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is modifyZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3771 = new StringBuilder("modifyZone_result(");
          int tmp3772 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3772++) { tmp3771.Append(", "); }
            tmp3771.Append("E: ");
            E.ToString(tmp3771);
          }
          tmp3771.Append(')');
          return tmp3771.ToString();
        }
      }


      public partial class deleteZone_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public deleteZone_args()
        {
        }

        public deleteZone_args DeepCopy()
        {
          var tmp3773 = new deleteZone_args();
          if(__isset.c)
          {
            tmp3773.C = this.C;
          }
          tmp3773.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3773.Index = this.Index;
          }
          tmp3773.__isset.index = this.__isset.index;
          return tmp3773;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3774 = new TStruct("deleteZone_args");
            await oprot.WriteStructBeginAsync(tmp3774, cancellationToken);
            var tmp3775 = new TField();
            if(__isset.c)
            {
              tmp3775.Name = "c";
              tmp3775.Type = TType.I64;
              tmp3775.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3775, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3775.Name = "index";
              tmp3775.Type = TType.I32;
              tmp3775.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3775, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3776 = new StringBuilder("deleteZone_args(");
          int tmp3777 = 0;
          if(__isset.c)
          {
            if(0 < tmp3777++) { tmp3776.Append(", "); }
            tmp3776.Append("C: ");
            C.ToString(tmp3776);
          }
          if(__isset.index)
          {
            if(0 < tmp3777++) { tmp3776.Append(", "); }
            tmp3776.Append("Index: ");
            Index.ToString(tmp3776);
          }
          tmp3776.Append(')');
          return tmp3776.ToString();
        }
      }


      public partial class deleteZone_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteZone_result()
        {
        }

        public deleteZone_result DeepCopy()
        {
          var tmp3778 = new deleteZone_result();
          if((E != null) && __isset.e)
          {
            tmp3778.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3778.__isset.e = this.__isset.e;
          return tmp3778;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3779 = new TStruct("deleteZone_result");
            await oprot.WriteStructBeginAsync(tmp3779, cancellationToken);
            var tmp3780 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3780.Name = "E";
                tmp3780.Type = TType.Struct;
                tmp3780.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3780, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3781 = new StringBuilder("deleteZone_result(");
          int tmp3782 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3782++) { tmp3781.Append(", "); }
            tmp3781.Append("E: ");
            E.ToString(tmp3781);
          }
          tmp3781.Append(')');
          return tmp3781.ToString();
        }
      }


      public partial class userFrames_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public userFrames_args()
        {
        }

        public userFrames_args DeepCopy()
        {
          var tmp3783 = new userFrames_args();
          if(__isset.c)
          {
            tmp3783.C = this.C;
          }
          tmp3783.__isset.c = this.__isset.c;
          return tmp3783;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3784 = new TStruct("userFrames_args");
            await oprot.WriteStructBeginAsync(tmp3784, cancellationToken);
            var tmp3785 = new TField();
            if(__isset.c)
            {
              tmp3785.Name = "c";
              tmp3785.Type = TType.I64;
              tmp3785.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3785, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrames_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3786 = new StringBuilder("userFrames_args(");
          int tmp3787 = 0;
          if(__isset.c)
          {
            if(0 < tmp3787++) { tmp3786.Append(", "); }
            tmp3786.Append("C: ");
            C.ToString(tmp3786);
          }
          tmp3786.Append(')');
          return tmp3786.ToString();
        }
      }


      public partial class userFrames_result : TBase
      {
        private Dictionary<int, string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<int, string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public userFrames_result()
        {
        }

        public userFrames_result DeepCopy()
        {
          var tmp3788 = new userFrames_result();
          if((Success != null) && __isset.success)
          {
            tmp3788.Success = this.Success.DeepCopy();
          }
          tmp3788.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3788.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3788.__isset.e = this.__isset.e;
          return tmp3788;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map3789 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<int, string>(_map3789.Count);
                      for(int _i3790 = 0; _i3790 < _map3789.Count; ++_i3790)
                      {
                        int _key3791;
                        string _val3792;
                        _key3791 = await iprot.ReadI32Async(cancellationToken);
                        _val3792 = await iprot.ReadStringAsync(cancellationToken);
                        Success[_key3791] = _val3792;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3793 = new TStruct("userFrames_result");
            await oprot.WriteStructBeginAsync(tmp3793, cancellationToken);
            var tmp3794 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3794.Name = "Success";
                tmp3794.Type = TType.Map;
                tmp3794.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3794, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, Success.Count), cancellationToken);
                foreach (int _iter3795 in Success.Keys)
                {
                  await oprot.WriteI32Async(_iter3795, cancellationToken);
                  await oprot.WriteStringAsync(Success[_iter3795], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3794.Name = "E";
                tmp3794.Type = TType.Struct;
                tmp3794.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3794, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrames_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3796 = new StringBuilder("userFrames_result(");
          int tmp3797 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3797++) { tmp3796.Append(", "); }
            tmp3796.Append("Success: ");
            Success.ToString(tmp3796);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3797++) { tmp3796.Append(", "); }
            tmp3796.Append("E: ");
            E.ToString(tmp3796);
          }
          tmp3796.Append(')');
          return tmp3796.ToString();
        }
      }


      public partial class userFrame_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public userFrame_args()
        {
        }

        public userFrame_args DeepCopy()
        {
          var tmp3798 = new userFrame_args();
          if(__isset.c)
          {
            tmp3798.C = this.C;
          }
          tmp3798.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3798.Index = this.Index;
          }
          tmp3798.__isset.index = this.__isset.index;
          return tmp3798;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3799 = new TStruct("userFrame_args");
            await oprot.WriteStructBeginAsync(tmp3799, cancellationToken);
            var tmp3800 = new TField();
            if(__isset.c)
            {
              tmp3800.Name = "c";
              tmp3800.Type = TType.I64;
              tmp3800.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3800, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3800.Name = "index";
              tmp3800.Type = TType.I32;
              tmp3800.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3800, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3801 = new StringBuilder("userFrame_args(");
          int tmp3802 = 0;
          if(__isset.c)
          {
            if(0 < tmp3802++) { tmp3801.Append(", "); }
            tmp3801.Append("C: ");
            C.ToString(tmp3801);
          }
          if(__isset.index)
          {
            if(0 < tmp3802++) { tmp3801.Append(", "); }
            tmp3801.Append("Index: ");
            Index.ToString(tmp3801);
          }
          tmp3801.Append(')');
          return tmp3801.ToString();
        }
      }


      public partial class userFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.CoordinateFrame _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.CoordinateFrame Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public userFrame_result()
        {
        }

        public userFrame_result DeepCopy()
        {
          var tmp3803 = new userFrame_result();
          if((Success != null) && __isset.success)
          {
            tmp3803.Success = (global::Yaskawa.Ext.API.CoordinateFrame)this.Success.DeepCopy();
          }
          tmp3803.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3803.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3803.__isset.e = this.__isset.e;
          return tmp3803;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3804 = new TStruct("userFrame_result");
            await oprot.WriteStructBeginAsync(tmp3804, cancellationToken);
            var tmp3805 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3805.Name = "Success";
                tmp3805.Type = TType.Struct;
                tmp3805.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3805, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3805.Name = "E";
                tmp3805.Type = TType.Struct;
                tmp3805.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3805, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3806 = new StringBuilder("userFrame_result(");
          int tmp3807 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3807++) { tmp3806.Append(", "); }
            tmp3806.Append("Success: ");
            Success.ToString(tmp3806);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3807++) { tmp3806.Append(", "); }
            tmp3806.Append("E: ");
            E.ToString(tmp3806);
          }
          tmp3806.Append(')');
          return tmp3806.ToString();
        }
      }


      public partial class newUserFrame_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public newUserFrame_args()
        {
        }

        public newUserFrame_args DeepCopy()
        {
          var tmp3808 = new newUserFrame_args();
          if(__isset.c)
          {
            tmp3808.C = this.C;
          }
          tmp3808.__isset.c = this.__isset.c;
          return tmp3808;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3809 = new TStruct("newUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp3809, cancellationToken);
            var tmp3810 = new TField();
            if(__isset.c)
            {
              tmp3810.Name = "c";
              tmp3810.Type = TType.I64;
              tmp3810.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3810, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3811 = new StringBuilder("newUserFrame_args(");
          int tmp3812 = 0;
          if(__isset.c)
          {
            if(0 < tmp3812++) { tmp3811.Append(", "); }
            tmp3811.Append("C: ");
            C.ToString(tmp3811);
          }
          tmp3811.Append(')');
          return tmp3811.ToString();
        }
      }


      public partial class newUserFrame_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public newUserFrame_result()
        {
        }

        public newUserFrame_result DeepCopy()
        {
          var tmp3813 = new newUserFrame_result();
          if(__isset.success)
          {
            tmp3813.Success = this.Success;
          }
          tmp3813.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3813.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3813.__isset.e = this.__isset.e;
          return tmp3813;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3814 = new TStruct("newUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp3814, cancellationToken);
            var tmp3815 = new TField();

            if(this.__isset.success)
            {
              tmp3815.Name = "Success";
              tmp3815.Type = TType.I32;
              tmp3815.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3815, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3815.Name = "E";
                tmp3815.Type = TType.Struct;
                tmp3815.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3815, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3816 = new StringBuilder("newUserFrame_result(");
          int tmp3817 = 0;
          if(__isset.success)
          {
            if(0 < tmp3817++) { tmp3816.Append(", "); }
            tmp3816.Append("Success: ");
            Success.ToString(tmp3816);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3817++) { tmp3816.Append(", "); }
            tmp3816.Append("E: ");
            E.ToString(tmp3816);
          }
          tmp3816.Append(')');
          return tmp3816.ToString();
        }
      }


      public partial class setUserFrame_args : TBase
      {
        private long _c;
        private int _index;
        private global::Yaskawa.Ext.API.CoordinateFrame _f;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public global::Yaskawa.Ext.API.CoordinateFrame F
        {
          get
          {
            return _f;
          }
          set
          {
            __isset.f = true;
            this._f = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool f;
        }

        public setUserFrame_args()
        {
        }

        public setUserFrame_args DeepCopy()
        {
          var tmp3818 = new setUserFrame_args();
          if(__isset.c)
          {
            tmp3818.C = this.C;
          }
          tmp3818.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3818.Index = this.Index;
          }
          tmp3818.__isset.index = this.__isset.index;
          if((F != null) && __isset.f)
          {
            tmp3818.F = (global::Yaskawa.Ext.API.CoordinateFrame)this.F.DeepCopy();
          }
          tmp3818.__isset.f = this.__isset.f;
          return tmp3818;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    F = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await F.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3819 = new TStruct("setUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp3819, cancellationToken);
            var tmp3820 = new TField();
            if(__isset.c)
            {
              tmp3820.Name = "c";
              tmp3820.Type = TType.I64;
              tmp3820.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3820, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3820.Name = "index";
              tmp3820.Type = TType.I32;
              tmp3820.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3820, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((F != null) && __isset.f)
            {
              tmp3820.Name = "f";
              tmp3820.Type = TType.Struct;
              tmp3820.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3820, cancellationToken);
              await F.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.f == other.__isset.f) && ((!__isset.f) || (global::System.Object.Equals(F, other.F))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if((F != null) && __isset.f)
            {
              hashcode = (hashcode * 397) + F.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3821 = new StringBuilder("setUserFrame_args(");
          int tmp3822 = 0;
          if(__isset.c)
          {
            if(0 < tmp3822++) { tmp3821.Append(", "); }
            tmp3821.Append("C: ");
            C.ToString(tmp3821);
          }
          if(__isset.index)
          {
            if(0 < tmp3822++) { tmp3821.Append(", "); }
            tmp3821.Append("Index: ");
            Index.ToString(tmp3821);
          }
          if((F != null) && __isset.f)
          {
            if(0 < tmp3822++) { tmp3821.Append(", "); }
            tmp3821.Append("F: ");
            F.ToString(tmp3821);
          }
          tmp3821.Append(')');
          return tmp3821.ToString();
        }
      }


      public partial class setUserFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setUserFrame_result()
        {
        }

        public setUserFrame_result DeepCopy()
        {
          var tmp3823 = new setUserFrame_result();
          if((E != null) && __isset.e)
          {
            tmp3823.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3823.__isset.e = this.__isset.e;
          return tmp3823;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3824 = new TStruct("setUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp3824, cancellationToken);
            var tmp3825 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3825.Name = "E";
                tmp3825.Type = TType.Struct;
                tmp3825.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3825, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3826 = new StringBuilder("setUserFrame_result(");
          int tmp3827 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3827++) { tmp3826.Append(", "); }
            tmp3826.Append("E: ");
            E.ToString(tmp3826);
          }
          tmp3826.Append(')');
          return tmp3826.ToString();
        }
      }


      public partial class deleteUserFrame_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public deleteUserFrame_args()
        {
        }

        public deleteUserFrame_args DeepCopy()
        {
          var tmp3828 = new deleteUserFrame_args();
          if(__isset.c)
          {
            tmp3828.C = this.C;
          }
          tmp3828.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3828.Index = this.Index;
          }
          tmp3828.__isset.index = this.__isset.index;
          return tmp3828;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3829 = new TStruct("deleteUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp3829, cancellationToken);
            var tmp3830 = new TField();
            if(__isset.c)
            {
              tmp3830.Name = "c";
              tmp3830.Type = TType.I64;
              tmp3830.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3830, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3830.Name = "index";
              tmp3830.Type = TType.I32;
              tmp3830.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3830, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3831 = new StringBuilder("deleteUserFrame_args(");
          int tmp3832 = 0;
          if(__isset.c)
          {
            if(0 < tmp3832++) { tmp3831.Append(", "); }
            tmp3831.Append("C: ");
            C.ToString(tmp3831);
          }
          if(__isset.index)
          {
            if(0 < tmp3832++) { tmp3831.Append(", "); }
            tmp3831.Append("Index: ");
            Index.ToString(tmp3831);
          }
          tmp3831.Append(')');
          return tmp3831.ToString();
        }
      }


      public partial class deleteUserFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteUserFrame_result()
        {
        }

        public deleteUserFrame_result DeepCopy()
        {
          var tmp3833 = new deleteUserFrame_result();
          if((E != null) && __isset.e)
          {
            tmp3833.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3833.__isset.e = this.__isset.e;
          return tmp3833;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3834 = new TStruct("deleteUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp3834, cancellationToken);
            var tmp3835 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3835.Name = "E";
                tmp3835.Type = TType.Struct;
                tmp3835.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3835, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3836 = new StringBuilder("deleteUserFrame_result(");
          int tmp3837 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3837++) { tmp3836.Append(", "); }
            tmp3836.Append("E: ");
            E.ToString(tmp3836);
          }
          tmp3836.Append(')');
          return tmp3836.ToString();
        }
      }


      public partial class networkInterfaceAddress_args : TBase
      {
        private long _c;
        private string _controllerInterface;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
        }

        public networkInterfaceAddress_args()
        {
        }

        public networkInterfaceAddress_args DeepCopy()
        {
          var tmp3838 = new networkInterfaceAddress_args();
          if(__isset.c)
          {
            tmp3838.C = this.C;
          }
          tmp3838.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3838.ControllerInterface = this.ControllerInterface;
          }
          tmp3838.__isset.controllerInterface = this.__isset.controllerInterface;
          return tmp3838;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3839 = new TStruct("networkInterfaceAddress_args");
            await oprot.WriteStructBeginAsync(tmp3839, cancellationToken);
            var tmp3840 = new TField();
            if(__isset.c)
            {
              tmp3840.Name = "c";
              tmp3840.Type = TType.I64;
              tmp3840.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3840, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3840.Name = "controllerInterface";
              tmp3840.Type = TType.String;
              tmp3840.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3840, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is networkInterfaceAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3841 = new StringBuilder("networkInterfaceAddress_args(");
          int tmp3842 = 0;
          if(__isset.c)
          {
            if(0 < tmp3842++) { tmp3841.Append(", "); }
            tmp3841.Append("C: ");
            C.ToString(tmp3841);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3842++) { tmp3841.Append(", "); }
            tmp3841.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3841);
          }
          tmp3841.Append(')');
          return tmp3841.ToString();
        }
      }


      public partial class networkInterfaceAddress_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public networkInterfaceAddress_result()
        {
        }

        public networkInterfaceAddress_result DeepCopy()
        {
          var tmp3843 = new networkInterfaceAddress_result();
          if((Success != null) && __isset.success)
          {
            tmp3843.Success = this.Success;
          }
          tmp3843.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3843.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3843.__isset.e = this.__isset.e;
          return tmp3843;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3844 = new TStruct("networkInterfaceAddress_result");
            await oprot.WriteStructBeginAsync(tmp3844, cancellationToken);
            var tmp3845 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3845.Name = "Success";
                tmp3845.Type = TType.String;
                tmp3845.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3845, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3845.Name = "E";
                tmp3845.Type = TType.Struct;
                tmp3845.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3845, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is networkInterfaceAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3846 = new StringBuilder("networkInterfaceAddress_result(");
          int tmp3847 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3847++) { tmp3846.Append(", "); }
            tmp3846.Append("Success: ");
            Success.ToString(tmp3846);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3847++) { tmp3846.Append(", "); }
            tmp3846.Append("E: ");
            E.ToString(tmp3846);
          }
          tmp3846.Append(')');
          return tmp3846.ToString();
        }
      }


      public partial class requestNetworkAccess_args : TBase
      {
        private long _c;
        private string _controllerInterface;
        private int _port;
        private string _protocol;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }

        public int Port
        {
          get
          {
            return _port;
          }
          set
          {
            __isset.port = true;
            this._port = value;
          }
        }

        public string Protocol
        {
          get
          {
            return _protocol;
          }
          set
          {
            __isset.protocol = true;
            this._protocol = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
          public bool port;
          public bool protocol;
        }

        public requestNetworkAccess_args()
        {
        }

        public requestNetworkAccess_args DeepCopy()
        {
          var tmp3848 = new requestNetworkAccess_args();
          if(__isset.c)
          {
            tmp3848.C = this.C;
          }
          tmp3848.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3848.ControllerInterface = this.ControllerInterface;
          }
          tmp3848.__isset.controllerInterface = this.__isset.controllerInterface;
          if(__isset.port)
          {
            tmp3848.Port = this.Port;
          }
          tmp3848.__isset.port = this.__isset.port;
          if((Protocol != null) && __isset.protocol)
          {
            tmp3848.Protocol = this.Protocol;
          }
          tmp3848.__isset.protocol = this.__isset.protocol;
          return tmp3848;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Port = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Protocol = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3849 = new TStruct("requestNetworkAccess_args");
            await oprot.WriteStructBeginAsync(tmp3849, cancellationToken);
            var tmp3850 = new TField();
            if(__isset.c)
            {
              tmp3850.Name = "c";
              tmp3850.Type = TType.I64;
              tmp3850.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3850, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3850.Name = "controllerInterface";
              tmp3850.Type = TType.String;
              tmp3850.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3850, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.port)
            {
              tmp3850.Name = "port";
              tmp3850.Type = TType.I32;
              tmp3850.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3850, cancellationToken);
              await oprot.WriteI32Async(Port, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Protocol != null) && __isset.protocol)
            {
              tmp3850.Name = "protocol";
              tmp3850.Type = TType.String;
              tmp3850.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3850, cancellationToken);
              await oprot.WriteStringAsync(Protocol, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkAccess_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))))
            && ((__isset.port == other.__isset.port) && ((!__isset.port) || (global::System.Object.Equals(Port, other.Port))))
            && ((__isset.protocol == other.__isset.protocol) && ((!__isset.protocol) || (global::System.Object.Equals(Protocol, other.Protocol))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
            if(__isset.port)
            {
              hashcode = (hashcode * 397) + Port.GetHashCode();
            }
            if((Protocol != null) && __isset.protocol)
            {
              hashcode = (hashcode * 397) + Protocol.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3851 = new StringBuilder("requestNetworkAccess_args(");
          int tmp3852 = 0;
          if(__isset.c)
          {
            if(0 < tmp3852++) { tmp3851.Append(", "); }
            tmp3851.Append("C: ");
            C.ToString(tmp3851);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3852++) { tmp3851.Append(", "); }
            tmp3851.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3851);
          }
          if(__isset.port)
          {
            if(0 < tmp3852++) { tmp3851.Append(", "); }
            tmp3851.Append("Port: ");
            Port.ToString(tmp3851);
          }
          if((Protocol != null) && __isset.protocol)
          {
            if(0 < tmp3852++) { tmp3851.Append(", "); }
            tmp3851.Append("Protocol: ");
            Protocol.ToString(tmp3851);
          }
          tmp3851.Append(')');
          return tmp3851.ToString();
        }
      }


      public partial class requestNetworkAccess_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestNetworkAccess_result()
        {
        }

        public requestNetworkAccess_result DeepCopy()
        {
          var tmp3853 = new requestNetworkAccess_result();
          if(__isset.success)
          {
            tmp3853.Success = this.Success;
          }
          tmp3853.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3853.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3853.__isset.e = this.__isset.e;
          return tmp3853;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3854 = new TStruct("requestNetworkAccess_result");
            await oprot.WriteStructBeginAsync(tmp3854, cancellationToken);
            var tmp3855 = new TField();

            if(this.__isset.success)
            {
              tmp3855.Name = "Success";
              tmp3855.Type = TType.I32;
              tmp3855.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3855, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3855.Name = "E";
                tmp3855.Type = TType.Struct;
                tmp3855.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3855, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkAccess_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3856 = new StringBuilder("requestNetworkAccess_result(");
          int tmp3857 = 0;
          if(__isset.success)
          {
            if(0 < tmp3857++) { tmp3856.Append(", "); }
            tmp3856.Append("Success: ");
            Success.ToString(tmp3856);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3857++) { tmp3856.Append(", "); }
            tmp3856.Append("E: ");
            E.ToString(tmp3856);
          }
          tmp3856.Append(')');
          return tmp3856.ToString();
        }
      }


      public partial class removeNetworkAccess_args : TBase
      {
        private long _c;
        private int _accessHandle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int AccessHandle
        {
          get
          {
            return _accessHandle;
          }
          set
          {
            __isset.accessHandle = true;
            this._accessHandle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool accessHandle;
        }

        public removeNetworkAccess_args()
        {
        }

        public removeNetworkAccess_args DeepCopy()
        {
          var tmp3858 = new removeNetworkAccess_args();
          if(__isset.c)
          {
            tmp3858.C = this.C;
          }
          tmp3858.__isset.c = this.__isset.c;
          if(__isset.accessHandle)
          {
            tmp3858.AccessHandle = this.AccessHandle;
          }
          tmp3858.__isset.accessHandle = this.__isset.accessHandle;
          return tmp3858;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    AccessHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3859 = new TStruct("removeNetworkAccess_args");
            await oprot.WriteStructBeginAsync(tmp3859, cancellationToken);
            var tmp3860 = new TField();
            if(__isset.c)
            {
              tmp3860.Name = "c";
              tmp3860.Type = TType.I64;
              tmp3860.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3860, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.accessHandle)
            {
              tmp3860.Name = "accessHandle";
              tmp3860.Type = TType.I32;
              tmp3860.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3860, cancellationToken);
              await oprot.WriteI32Async(AccessHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkAccess_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.accessHandle == other.__isset.accessHandle) && ((!__isset.accessHandle) || (global::System.Object.Equals(AccessHandle, other.AccessHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.accessHandle)
            {
              hashcode = (hashcode * 397) + AccessHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3861 = new StringBuilder("removeNetworkAccess_args(");
          int tmp3862 = 0;
          if(__isset.c)
          {
            if(0 < tmp3862++) { tmp3861.Append(", "); }
            tmp3861.Append("C: ");
            C.ToString(tmp3861);
          }
          if(__isset.accessHandle)
          {
            if(0 < tmp3862++) { tmp3861.Append(", "); }
            tmp3861.Append("AccessHandle: ");
            AccessHandle.ToString(tmp3861);
          }
          tmp3861.Append(')');
          return tmp3861.ToString();
        }
      }


      public partial class removeNetworkAccess_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeNetworkAccess_result()
        {
        }

        public removeNetworkAccess_result DeepCopy()
        {
          var tmp3863 = new removeNetworkAccess_result();
          if((E != null) && __isset.e)
          {
            tmp3863.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3863.__isset.e = this.__isset.e;
          return tmp3863;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3864 = new TStruct("removeNetworkAccess_result");
            await oprot.WriteStructBeginAsync(tmp3864, cancellationToken);
            var tmp3865 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3865.Name = "E";
                tmp3865.Type = TType.Struct;
                tmp3865.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3865, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkAccess_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3866 = new StringBuilder("removeNetworkAccess_result(");
          int tmp3867 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3867++) { tmp3866.Append(", "); }
            tmp3866.Append("E: ");
            E.ToString(tmp3866);
          }
          tmp3866.Append(')');
          return tmp3866.ToString();
        }
      }


      public partial class requestNetworkService_args : TBase
      {
        private long _c;
        private string _controllerInterface;
        private int _port;
        private string _protocol;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }

        public int Port
        {
          get
          {
            return _port;
          }
          set
          {
            __isset.port = true;
            this._port = value;
          }
        }

        public string Protocol
        {
          get
          {
            return _protocol;
          }
          set
          {
            __isset.protocol = true;
            this._protocol = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
          public bool port;
          public bool protocol;
        }

        public requestNetworkService_args()
        {
        }

        public requestNetworkService_args DeepCopy()
        {
          var tmp3868 = new requestNetworkService_args();
          if(__isset.c)
          {
            tmp3868.C = this.C;
          }
          tmp3868.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3868.ControllerInterface = this.ControllerInterface;
          }
          tmp3868.__isset.controllerInterface = this.__isset.controllerInterface;
          if(__isset.port)
          {
            tmp3868.Port = this.Port;
          }
          tmp3868.__isset.port = this.__isset.port;
          if((Protocol != null) && __isset.protocol)
          {
            tmp3868.Protocol = this.Protocol;
          }
          tmp3868.__isset.protocol = this.__isset.protocol;
          return tmp3868;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Port = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Protocol = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3869 = new TStruct("requestNetworkService_args");
            await oprot.WriteStructBeginAsync(tmp3869, cancellationToken);
            var tmp3870 = new TField();
            if(__isset.c)
            {
              tmp3870.Name = "c";
              tmp3870.Type = TType.I64;
              tmp3870.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3870, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3870.Name = "controllerInterface";
              tmp3870.Type = TType.String;
              tmp3870.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3870, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.port)
            {
              tmp3870.Name = "port";
              tmp3870.Type = TType.I32;
              tmp3870.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3870, cancellationToken);
              await oprot.WriteI32Async(Port, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Protocol != null) && __isset.protocol)
            {
              tmp3870.Name = "protocol";
              tmp3870.Type = TType.String;
              tmp3870.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3870, cancellationToken);
              await oprot.WriteStringAsync(Protocol, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))))
            && ((__isset.port == other.__isset.port) && ((!__isset.port) || (global::System.Object.Equals(Port, other.Port))))
            && ((__isset.protocol == other.__isset.protocol) && ((!__isset.protocol) || (global::System.Object.Equals(Protocol, other.Protocol))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
            if(__isset.port)
            {
              hashcode = (hashcode * 397) + Port.GetHashCode();
            }
            if((Protocol != null) && __isset.protocol)
            {
              hashcode = (hashcode * 397) + Protocol.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3871 = new StringBuilder("requestNetworkService_args(");
          int tmp3872 = 0;
          if(__isset.c)
          {
            if(0 < tmp3872++) { tmp3871.Append(", "); }
            tmp3871.Append("C: ");
            C.ToString(tmp3871);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3872++) { tmp3871.Append(", "); }
            tmp3871.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3871);
          }
          if(__isset.port)
          {
            if(0 < tmp3872++) { tmp3871.Append(", "); }
            tmp3871.Append("Port: ");
            Port.ToString(tmp3871);
          }
          if((Protocol != null) && __isset.protocol)
          {
            if(0 < tmp3872++) { tmp3871.Append(", "); }
            tmp3871.Append("Protocol: ");
            Protocol.ToString(tmp3871);
          }
          tmp3871.Append(')');
          return tmp3871.ToString();
        }
      }


      public partial class requestNetworkService_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestNetworkService_result()
        {
        }

        public requestNetworkService_result DeepCopy()
        {
          var tmp3873 = new requestNetworkService_result();
          if(__isset.success)
          {
            tmp3873.Success = this.Success;
          }
          tmp3873.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3873.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3873.__isset.e = this.__isset.e;
          return tmp3873;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3874 = new TStruct("requestNetworkService_result");
            await oprot.WriteStructBeginAsync(tmp3874, cancellationToken);
            var tmp3875 = new TField();

            if(this.__isset.success)
            {
              tmp3875.Name = "Success";
              tmp3875.Type = TType.I32;
              tmp3875.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3875, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3875.Name = "E";
                tmp3875.Type = TType.Struct;
                tmp3875.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3875, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3876 = new StringBuilder("requestNetworkService_result(");
          int tmp3877 = 0;
          if(__isset.success)
          {
            if(0 < tmp3877++) { tmp3876.Append(", "); }
            tmp3876.Append("Success: ");
            Success.ToString(tmp3876);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3877++) { tmp3876.Append(", "); }
            tmp3876.Append("E: ");
            E.ToString(tmp3876);
          }
          tmp3876.Append(')');
          return tmp3876.ToString();
        }
      }


      public partial class removeNetworkService_args : TBase
      {
        private long _c;
        private int _accessHandle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int AccessHandle
        {
          get
          {
            return _accessHandle;
          }
          set
          {
            __isset.accessHandle = true;
            this._accessHandle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool accessHandle;
        }

        public removeNetworkService_args()
        {
        }

        public removeNetworkService_args DeepCopy()
        {
          var tmp3878 = new removeNetworkService_args();
          if(__isset.c)
          {
            tmp3878.C = this.C;
          }
          tmp3878.__isset.c = this.__isset.c;
          if(__isset.accessHandle)
          {
            tmp3878.AccessHandle = this.AccessHandle;
          }
          tmp3878.__isset.accessHandle = this.__isset.accessHandle;
          return tmp3878;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    AccessHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3879 = new TStruct("removeNetworkService_args");
            await oprot.WriteStructBeginAsync(tmp3879, cancellationToken);
            var tmp3880 = new TField();
            if(__isset.c)
            {
              tmp3880.Name = "c";
              tmp3880.Type = TType.I64;
              tmp3880.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3880, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.accessHandle)
            {
              tmp3880.Name = "accessHandle";
              tmp3880.Type = TType.I32;
              tmp3880.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3880, cancellationToken);
              await oprot.WriteI32Async(AccessHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.accessHandle == other.__isset.accessHandle) && ((!__isset.accessHandle) || (global::System.Object.Equals(AccessHandle, other.AccessHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.accessHandle)
            {
              hashcode = (hashcode * 397) + AccessHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3881 = new StringBuilder("removeNetworkService_args(");
          int tmp3882 = 0;
          if(__isset.c)
          {
            if(0 < tmp3882++) { tmp3881.Append(", "); }
            tmp3881.Append("C: ");
            C.ToString(tmp3881);
          }
          if(__isset.accessHandle)
          {
            if(0 < tmp3882++) { tmp3881.Append(", "); }
            tmp3881.Append("AccessHandle: ");
            AccessHandle.ToString(tmp3881);
          }
          tmp3881.Append(')');
          return tmp3881.ToString();
        }
      }


      public partial class removeNetworkService_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeNetworkService_result()
        {
        }

        public removeNetworkService_result DeepCopy()
        {
          var tmp3883 = new removeNetworkService_result();
          if((E != null) && __isset.e)
          {
            tmp3883.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3883.__isset.e = this.__isset.e;
          return tmp3883;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3884 = new TStruct("removeNetworkService_result");
            await oprot.WriteStructBeginAsync(tmp3884, cancellationToken);
            var tmp3885 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3885.Name = "E";
                tmp3885.Type = TType.Struct;
                tmp3885.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3885, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3886 = new StringBuilder("removeNetworkService_result(");
          int tmp3887 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3887++) { tmp3886.Append(", "); }
            tmp3886.Append("E: ");
            E.ToString(tmp3886);
          }
          tmp3886.Append(')');
          return tmp3886.ToString();
        }
      }

    }

  }
}
